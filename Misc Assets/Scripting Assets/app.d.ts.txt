
    declare namespace CS {
    //keep type incompatibility / 此属性保持类型不兼容
    const __keep_incompatibility: unique symbol;
    interface $Ref<T> {
        value: T
    }
    namespace System {
        interface Array$1<T> extends System.Array {
            get_Item(index: number):T;
            set_Item(index: number, value: T):void;
        }
    }
    interface $Task<T> {}
    namespace System {
        class Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ValueType extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class Delegate extends System.Object implements System.Runtime.Serialization.ISerializable, System.ICloneable
        {
            protected [__keep_incompatibility]: never;
        }
        interface ICloneable
        {
        }
        interface MulticastDelegate
        { 
        (...args:any[]) : any; 
        Invoke?: (...args:any[]) => any;
        }
        var MulticastDelegate: { new (func: (...args:any[]) => any): MulticastDelegate; }
        class Void extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Int32 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IFormattable
        {
        }
        interface ISpanFormattable
        {
        }
        interface IComparable
        {
        }
        interface IComparable$1<T>
        {
        }
        interface IConvertible
        {
        }
        interface IEquatable$1<T>
        {
        }
        class String extends System.Object implements System.ICloneable, System.IComparable, System.IComparable$1<string>, System.IConvertible, System.Collections.Generic.IEnumerable$1<number>, System.Collections.IEnumerable, System.IEquatable$1<string>
        {
            protected [__keep_incompatibility]: never;
        }
        class Char extends System.ValueType implements System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        class Array extends System.Object implements System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
        {
            protected [__keep_incompatibility]: never;
        }
        class Boolean extends System.ValueType implements System.IComparable, System.IComparable$1<boolean>, System.IConvertible, System.IEquatable$1<boolean>
        {
            protected [__keep_incompatibility]: never;
        }
        class Enum extends System.ValueType implements System.IFormattable, System.IComparable, System.IConvertible
        {
            protected [__keep_incompatibility]: never;
        }
        class Single extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        interface Action$1<T>
        { 
        (obj: T) : void; 
        Invoke?: (obj: T) => void;
        }
        interface Func$1<TResult>
        { 
        () : TResult; 
        Invoke?: () => TResult;
        }
        interface Action
        { 
        () : void; 
        Invoke?: () => void;
        }
        var Action: { new (func: () => void): Action; }
        class Int64 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint>
        {
            protected [__keep_incompatibility]: never;
        }
        class UInt64 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<bigint>, System.IConvertible, System.IEquatable$1<bigint>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IDisposable
        {
        }
        interface Action$2<T1, T2>
        { 
        (arg1: T1, arg2: T2) : void; 
        Invoke?: (arg1: T1, arg2: T2) => void;
        }
        class DateTime extends System.ValueType implements System.IFormattable, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IComparable, System.IComparable$1<System.DateTime>, System.IConvertible, System.IEquatable$1<System.DateTime>
        {
            protected [__keep_incompatibility]: never;
        }
        class Exception extends System.Object implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
        }
        class UInt32 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IFormatProvider
        {
        }
        class ReadOnlySpan$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Attribute extends System.Object implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        class UInt16 extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        class Double extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        class IntPtr extends System.ValueType implements System.Runtime.Serialization.ISerializable, System.IEquatable$1<System.IntPtr>
        {
            protected [__keep_incompatibility]: never;
        }
        class Nullable$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class Byte extends System.ValueType implements System.IFormattable, System.ISpanFormattable, System.IComparable, System.IComparable$1<number>, System.IConvertible, System.IEquatable$1<number>
        {
            protected [__keep_incompatibility]: never;
        }
        class Type extends System.Reflection.MemberInfo implements System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._Type, System.Reflection.ICustomAttributeProvider, System.Reflection.IReflect
        {
            protected [__keep_incompatibility]: never;
        }
        class Span$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ValueTuple$2<T1, T2> extends System.ValueType implements System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$2<T1, T2>>, System.IValueTupleInternal, System.IEquatable$1<System.ValueTuple$2<T1, T2>>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IValueTupleInternal extends System.Runtime.CompilerServices.ITuple
        {
        }
        class ValueTuple$3<T1, T2, T3> extends System.ValueType implements System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$3<T1, T2, T3>>, System.IValueTupleInternal, System.IEquatable$1<System.ValueTuple$3<T1, T2, T3>>
        {
            protected [__keep_incompatibility]: never;
        }
        class ValueTuple$4<T1, T2, T3, T4> extends System.ValueType implements System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.Runtime.CompilerServices.ITuple, System.IComparable, System.IComparable$1<System.ValueTuple$4<T1, T2, T3, T4>>, System.IValueTupleInternal, System.IEquatable$1<System.ValueTuple$4<T1, T2, T3, T4>>
        {
            protected [__keep_incompatibility]: never;
        }
        class SystemException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
        }
        interface IAsyncResult
        {
        }
        interface AsyncCallback
        { 
        (ar: System.IAsyncResult) : void; 
        Invoke?: (ar: System.IAsyncResult) => void;
        }
        var AsyncCallback: { new (func: (ar: System.IAsyncResult) => void): AsyncCallback; }
        interface EventHandler$1<TEventArgs>
        { 
        (sender: any, e: TEventArgs) : void; 
        Invoke?: (sender: any, e: TEventArgs) => void;
        }
        interface Func$2<T, TResult>
        { 
        (arg: T) : TResult; 
        Invoke?: (arg: T) => TResult;
        }
        interface Comparison$1<T>
        { 
        (x: T, y: T) : number; 
        Invoke?: (x: T, y: T) => number;
        }
        class MarshalByRefObject extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IAsyncDisposable
        {
        }
    }
    namespace UnityEngine {
        /** SortingLayer allows you to set the render order of multiple sprites easily. There is always a default SortingLayer named "Default" which all sprites are added to initially. Added more SortingLayers to easily control the order of rendering of groups of sprites. Layers can be ordered before or after the default layer.
        */
        class SortingLayer extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Delegate for sorting layer events when a layer is added.
            */
            public static onLayerAdded : UnityEngine.SortingLayer.LayerCallback
            /** Delegate for sorting layer events when a layer is removed.
            */
            public static onLayerRemoved : UnityEngine.SortingLayer.LayerCallback
            /** This is the unique id assigned to the layer. It is not an ordered running value and it should not be used to compare with other layers to determine the sorting order.
            */
            public get id(): number;
            /** Returns the name of the layer as defined in the TagManager.
            */
            public get name(): string;
            /** This is the relative value that indicates the sort order of this layer relative to the other layers.
            */
            public get value(): number;
            /** Returns all the layers defined in this project.
            */
            public static get layers(): System.Array$1<UnityEngine.SortingLayer>;
            /** Returns the final sorting layer value. To determine the sorting order between the various sorting layers, use this method to retrieve the final sorting value and use CompareTo to determine the order.
            * @param $id The unique value of the sorting layer as returned by any renderer's sortingLayerID property.
            * @returns The final sorting value of the layer relative to other layers. 
            */
            public static GetLayerValueFromID ($id: number) : number
            /** Returns the final sorting layer value. Additional resources: GetLayerValueFromID.
            * @param $name The unique value of the sorting layer as returned by any renderer's sortingLayerID property.
            * @returns The final sorting value of the layer relative to other layers. 
            */
            public static GetLayerValueFromName ($name: string) : number
            /** Returns the id given the name. Will return 0 if an invalid name was given.
            * @param $name The name of the layer.
            * @returns Returns the unique id of the layer with name. 
            */
            public static NameToID ($name: string) : number
            /** Returns the unique id of the layer. Will return "<unknown layer>" if an invalid id is given.
            * @param $id The unique id of the layer.
            * @returns The name of the layer with id or "<unknown layer>" for invalid id. 
            */
            public static IDToName ($id: number) : string
            /** Returns true if the id provided is a valid layer id.
            * @param $id The unique id of a layer.
            * @returns True if the id provided is valid and assigned to a layer. 
            */
            public static IsValid ($id: number) : boolean
        }
        /** Sets which weights to use when calculating curve segments.
        */
        enum WeightedMode
        { None = 0, In = 1, Out = 2, Both = 3 }
        /** A single keyframe that can be injected into an animation curve.
        */
        class Keyframe extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The time of the keyframe.
            */
            public get time(): number;
            public set time(value: number);
            /** The value of the curve at keyframe.
            */
            public get value(): number;
            public set value(value: number);
            /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key.
            */
            public get inTangent(): number;
            public set inTangent(value: number);
            /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key.
            */
            public get outTangent(): number;
            public set outTangent(value: number);
            /** Sets the incoming weight for this key. The incoming weight affects the slope of the curve from the previous key to this key.
            */
            public get inWeight(): number;
            public set inWeight(value: number);
            /** Sets the outgoing weight for this key. The outgoing weight affects the slope of the curve from this key to the next key.
            */
            public get outWeight(): number;
            public set outWeight(value: number);
            /** Weighted mode for the keyframe.
            */
            public get weightedMode(): UnityEngine.WeightedMode;
            public set weightedMode(value: UnityEngine.WeightedMode);
            public constructor ($time: number, $value: number)
            public constructor ($time: number, $value: number, $inTangent: number, $outTangent: number)
            public constructor ($time: number, $value: number, $inTangent: number, $outTangent: number, $inWeight: number, $outWeight: number)
        }
        /** Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.
        */
        enum WrapMode
        { Once = 1, Loop = 2, PingPong = 4, Default = 0, ClampForever = 8, Clamp = 1 }
        /** Store a collection of Keyframes that can be evaluated over time.
        */
        class AnimationCurve extends System.Object implements System.IEquatable$1<UnityEngine.AnimationCurve>
        {
            protected [__keep_incompatibility]: never;
            /** All keys defined in the animation curve.
            */
            public get keys(): System.Array$1<UnityEngine.Keyframe>;
            public set keys(value: System.Array$1<UnityEngine.Keyframe>);
            /** The number of keys in the curve. (Read Only)
            */
            public get length(): number;
            /** The behaviour of the animation before the first keyframe.
            */
            public get preWrapMode(): UnityEngine.WrapMode;
            public set preWrapMode(value: UnityEngine.WrapMode);
            /** The behaviour of the animation after the last keyframe.
            */
            public get postWrapMode(): UnityEngine.WrapMode;
            public set postWrapMode(value: UnityEngine.WrapMode);
            /** Evaluate the curve at time.
            * @param $time The time within the curve you want to evaluate (the horizontal axis in the curve graph).
            * @returns The value of the curve, at the point in time specified. 
            */
            public Evaluate ($time: number) : number
            /** Add a new key to the curve.
            * @param $time The time at which to add the key (horizontal axis in the curve graph).
            * @param $value The value for the key (vertical axis in the curve graph).
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey ($time: number, $value: number) : number
            /** Add a new key to the curve.
            * @param $key The key to add to the curve.
            * @returns The index of the added key, or -1 if the key could not be added. 
            */
            public AddKey ($key: UnityEngine.Keyframe) : number
            /** Removes the keyframe at index and inserts key.
            * @param $index The index of the key to move.
            * @param $key The key (with its new time) to insert.
            * @returns The index of the keyframe after moving it. 
            */
            public MoveKey ($index: number, $key: UnityEngine.Keyframe) : number
            /** Erases all KeyFrame from this instance of the AnimationCurve.
            */
            public ClearKeys () : void
            /** Removes a key.
            * @param $index The index of the key to remove.
            */
            public RemoveKey ($index: number) : void
            public get_Item ($index: number) : UnityEngine.Keyframe
            /** Smooth the in and out tangents of the keyframe at index.
            * @param $index The index of the keyframe to be smoothed.
            * @param $weight The smoothing weight to apply to the keyframe's tangents.
            */
            public SmoothTangents ($index: number, $weight: number) : void
            /** Creates a constant "curve" starting at timeStart, ending at timeEnd, and set to the value value.
            * @param $timeStart The start time for the constant curve.
            * @param $timeEnd The end time for the constant curve.
            * @param $value The value for the constant curve.
            * @returns The constant curve created from the specified values. 
            */
            public static Constant ($timeStart: number, $timeEnd: number, $value: number) : UnityEngine.AnimationCurve
            /** A straight Line starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param $timeStart The start time for the linear curve.
            * @param $valueStart The start value for the linear curve.
            * @param $timeEnd The end time for the linear curve.
            * @param $valueEnd The end value for the linear curve.
            * @returns The linear curve created from the specified values. 
            */
            public static Linear ($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number) : UnityEngine.AnimationCurve
            /** Creates an ease-in and out curve starting at timeStart, valueStart and ending at timeEnd, valueEnd.
            * @param $timeStart The start time for the ease curve.
            * @param $valueStart The start value for the ease curve.
            * @param $timeEnd The end time for the ease curve.
            * @param $valueEnd The end value for the ease curve.
            * @returns The ease-in and out curve generated from the specified values. 
            */
            public static EaseInOut ($timeStart: number, $valueStart: number, $timeEnd: number, $valueEnd: number) : UnityEngine.AnimationCurve
            public Equals ($o: any) : boolean
            public Equals ($other: UnityEngine.AnimationCurve) : boolean
            /** Copies the keys and properties of the specified AnimationCurve object into this instance of the  AnimationCurve class.
            * @param $other The AnimationCurve object to obtain the values to copy.
            */
            public CopyFrom ($other: UnityEngine.AnimationCurve) : void
            public constructor (...keys: UnityEngine.Keyframe[])
            public constructor ()
        }
        /** Provides access to application runtime data.
        */
        class Application extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true when called in any kind of built Player, or when called in the Editor in Play mode (Read Only).
            */
            public static get isPlaying(): boolean;
            /** Whether the Player currently has focus (Read Only).
            */
            public static get isFocused(): boolean;
            /** Returns a GUID for this build (Read Only).
            */
            public static get buildGUID(): string;
            /** Determines whether the Player should run when the application is in the background
            */
            public static get runInBackground(): boolean;
            public static set runInBackground(value: boolean);
            /** Returns true when Unity is launched with the -batchmode flag from the command line (Read Only).
            */
            public static get isBatchMode(): boolean;
            /** Contains the path to the game data folder on the target device (Read Only).
            */
            public static get dataPath(): string;
            /** The path to the StreamingAssets  folder (Read Only).
            */
            public static get streamingAssetsPath(): string;
            /** Contains the path to a persistent data directory (Read-only).
            */
            public static get persistentDataPath(): string;
            /** Contains the path to a temporary data / cache directory (Read Only).
            */
            public static get temporaryCachePath(): string;
            /** The URL of the document. For WebGL, this is a web URL. For Android, iOS, or Universal Windows Platform (UWP) this is a deep link URL (Read Only).
            */
            public static get absoluteURL(): string;
            /** The version of the Unity runtime used to play the content.
            */
            public static get unityVersion(): string;
            /** Returns application version number (Read Only).
            */
            public static get version(): string;
            /** Returns the name of the store or package that installed the application (Read Only).
            */
            public static get installerName(): string;
            /** Returns the application identifier at runtime. 
            */
            public static get identifier(): string;
            /** Returns application install mode (Read Only).
            */
            public static get installMode(): UnityEngine.ApplicationInstallMode;
            /** Returns application running in a sandbox environment (Read-only).
            */
            public static get sandboxType(): UnityEngine.ApplicationSandboxType;
            /** Returns application product name (Read Only).
            */
            public static get productName(): string;
            /** Returns application company name (Read Only).
            */
            public static get companyName(): string;
            /** A unique cloud project identifier. It is unique for every project (Read Only).
            */
            public static get cloudProjectId(): string;
            /** Specifies the target frame rate at which Unity tries to render your game.
            */
            public static get targetFrameRate(): number;
            public static set targetFrameRate(value: number);
            /** Returns the path to the console log file, or an empty string if the current platform does not support log files.
            */
            public static get consoleLogPath(): string;
            /** Priority of background loading thread.
            */
            public static get backgroundLoadingPriority(): UnityEngine.ThreadPriority;
            public static set backgroundLoadingPriority(value: UnityEngine.ThreadPriority);
            /** Returns false if application is altered in any way after it was built.
            */
            public static get genuine(): boolean;
            /** Returns true if application integrity can be confirmed.
            */
            public static get genuineCheckAvailable(): boolean;
            /** Returns the platform the game is running on (Read Only).
            */
            public static get platform(): UnityEngine.RuntimePlatform;
            /** Identifies whether the current Runtime platform is a known mobile platform.
            */
            public static get isMobilePlatform(): boolean;
            /** Is the current Runtime platform a known console platform.
            */
            public static get isConsolePlatform(): boolean;
            /** The language in which the user's operating system is running in.
            */
            public static get systemLanguage(): UnityEngine.SystemLanguage;
            /** Returns the type of internet reachability currently possible on the device.
            */
            public static get internetReachability(): UnityEngine.NetworkReachability;
            /** Cancellation token raised on exiting Play mode (Editor) or on quitting the application (Read Only).
            */
            public static get exitCancellationToken(): System.Threading.CancellationToken;
            /** Whether the game is running inside the Unity Editor (Read Only).
            */
            public static get isEditor(): boolean;
            public static Quit ($exitCode: number) : void
            /** Quits the player application.
            * @param $exitCode An optional exit code to return when the player application terminates on Windows, Mac and Linux. Defaults to 0.
            */
            public static Quit () : void
            /** Unloads the Unity Player.
            */
            public static Unload () : void
            /** Checks if the streamed level can be loaded.
            */
            public static CanStreamedLevelBeLoaded ($levelIndex: number) : boolean
            /** Checks if the streamed level can be loaded.
            */
            public static CanStreamedLevelBeLoaded ($levelName: string) : boolean
            /** Returns true if the given object is part of the playing world either in any kind of built Player or in Play Mode.
            * @param $obj The object to test.
            * @returns True if the object is part of the playing world. 
            */
            public static IsPlaying ($obj: UnityEngine.Object) : boolean
            /** Is Unity activated with the Pro license?
            */
            public static HasProLicense () : boolean
            public static RequestAdvertisingIdentifierAsync ($delegateMethod: UnityEngine.Application.AdvertisingIdentifierCallback) : boolean
            /** Opens the URL specified, subject to the permissions and limitations of your app’s current platform and environment. 
            * @param $url The URL to open.
            */
            public static OpenURL ($url: string) : void
            /** Get stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static GetStackTraceLogType ($logType: UnityEngine.LogType) : UnityEngine.StackTraceLogType
            /** Set stack trace logging options. The default value is StackTraceLogType.ScriptOnly.
            */
            public static SetStackTraceLogType ($logType: UnityEngine.LogType, $stackTraceType: UnityEngine.StackTraceLogType) : void
            /** Request authorization to use the webcam or microphone on iOS and WebGL.
            */
            public static RequestUserAuthorization ($mode: UnityEngine.UserAuthorization) : UnityEngine.AsyncOperation
            /** Check if the user has authorized use of the webcam or microphone on iOS and WebGL.
            */
            public static HasUserAuthorization ($mode: UnityEngine.UserAuthorization) : boolean
            public static add_lowMemory ($value: UnityEngine.Application.LowMemoryCallback) : void
            public static remove_lowMemory ($value: UnityEngine.Application.LowMemoryCallback) : void
            public static add_memoryUsageChanged ($value: UnityEngine.Application.MemoryUsageChangedCallback) : void
            public static remove_memoryUsageChanged ($value: UnityEngine.Application.MemoryUsageChangedCallback) : void
            public static add_logMessageReceived ($value: UnityEngine.Application.LogCallback) : void
            public static remove_logMessageReceived ($value: UnityEngine.Application.LogCallback) : void
            public static add_logMessageReceivedThreaded ($value: UnityEngine.Application.LogCallback) : void
            public static remove_logMessageReceivedThreaded ($value: UnityEngine.Application.LogCallback) : void
            public static add_onBeforeRender ($value: UnityEngine.Events.UnityAction) : void
            public static remove_onBeforeRender ($value: UnityEngine.Events.UnityAction) : void
            public static add_focusChanged ($value: System.Action$1<boolean>) : void
            public static remove_focusChanged ($value: System.Action$1<boolean>) : void
            public static add_deepLinkActivated ($value: System.Action$1<string>) : void
            public static remove_deepLinkActivated ($value: System.Action$1<string>) : void
            public static add_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static remove_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static add_quitting ($value: System.Action) : void
            public static remove_quitting ($value: System.Action) : void
            public static add_unloading ($value: System.Action) : void
            public static remove_unloading ($value: System.Action) : void
            public constructor ()
        }
        /** Base class for all objects Unity can reference.
        */
        class Object extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the object.
            */
            public get name(): string;
            public set name(value: string);
            /** Should the object be hidden, saved with the Scene or modifiable by the user?
            */
            public get hideFlags(): UnityEngine.HideFlags;
            public set hideFlags(value: UnityEngine.HideFlags);
            /** Gets  the instance ID of the object.
            * @returns Returns the instance ID of the object. 
            */
            public GetInstanceID () : number
            public static op_Implicit ($exists: UnityEngine.Object) : boolean
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $instantiateInWorldSpace: boolean) : UnityEngine.Object
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $worldPositionStays: boolean) : UnityEngine.Object
            /** Removes a GameObject, component or asset.
            * @param $obj The object to destroy.
            * @param $t The optional amount of time to delay before destroying the object.
            */
            public static Destroy ($obj: UnityEngine.Object, $t: number) : void
            /** Removes a GameObject, component or asset.
            * @param $obj The object to destroy.
            * @param $t The optional amount of time to delay before destroying the object.
            */
            public static Destroy ($obj: UnityEngine.Object) : void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param $obj Object to be destroyed.
            * @param $allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate ($obj: UnityEngine.Object, $allowDestroyingAssets: boolean) : void
            /** Destroys the object obj immediately. You are strongly recommended to use Destroy instead.
            * @param $obj Object to be destroyed.
            * @param $allowDestroyingAssets Set to true to allow assets to be destroyed.
            */
            public static DestroyImmediate ($obj: UnityEngine.Object) : void
            /** Retrieves a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @param $sortMode Whether and how to sort the returned array. Not sorting the array makes this function run significantly faster.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsByType ($type: System.Type, $sortMode: UnityEngine.FindObjectsSortMode) : System.Array$1<UnityEngine.Object>
            /** Retrieves a list of all loaded objects of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @param $sortMode Whether and how to sort the returned array. Not sorting the array makes this function run significantly faster.
            * @returns The array of objects found matching the type specified. 
            */
            public static FindObjectsByType ($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive, $sortMode: UnityEngine.FindObjectsSortMode) : System.Array$1<UnityEngine.Object>
            /** Do not destroy the target Object when loading a new Scene.
            * @param $target An Object not destroyed on Scene change.
            */
            public static DontDestroyOnLoad ($target: UnityEngine.Object) : void
            /** Retrieves the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns the first active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindFirstObjectByType ($type: System.Type) : UnityEngine.Object
            /** Retrieves any active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns an arbitrary active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindAnyObjectByType ($type: System.Type) : UnityEngine.Object
            /** Retrieves the first active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns the first active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindFirstObjectByType ($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive) : UnityEngine.Object
            /** Retrieves any active loaded object of Type type.
            * @param $type The type of object to find.
            * @param $findObjectsInactive Whether to include components attached to inactive GameObjects. If you don't specify this parameter, this function doesn't include inactive objects in the results.
            * @returns Returns an arbitrary active loaded object that matches the specified type. If no object matches the specified type, returns null. 
            */
            public static FindAnyObjectByType ($type: System.Type, $findObjectsInactive: UnityEngine.FindObjectsInactive) : UnityEngine.Object
            public static op_Equality ($x: UnityEngine.Object, $y: UnityEngine.Object) : boolean
            public static op_Inequality ($x: UnityEngine.Object, $y: UnityEngine.Object) : boolean
            public constructor ()
        }
        /** Application installation mode (Read Only).
        */
        enum ApplicationInstallMode
        { Unknown = 0, Store = 1, DeveloperBuild = 2, Adhoc = 3, Enterprise = 4, Editor = 5 }
        /** Application sandbox type.
        */
        enum ApplicationSandboxType
        { Unknown = 0, NotSandboxed = 1, Sandboxed = 2, SandboxBroken = 3 }
        /** Stack trace logging options.
        */
        enum StackTraceLogType
        { None = 0, ScriptOnly = 1, Full = 2 }
        /** The type of the log message in Debug.unityLogger.Log or delegate registered with Application.RegisterLogCallback.
        */
        enum LogType
        { Error = 0, Assert = 1, Warning = 2, Log = 3, Exception = 4 }
        /** Priority of a thread.
        */
        enum ThreadPriority
        { Low = 0, BelowNormal = 1, Normal = 2, High = 4 }
        /** Base class for all yield instructions.
        */
        class YieldInstruction extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Asynchronous operation coroutine.
        */
        class AsyncOperation extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            /** Has the operation finished? (Read Only)
            */
            public get isDone(): boolean;
            /** What's the operation's progress. (Read Only)
            */
            public get progress(): number;
            /** Priority lets you tweak in which order async operation calls will be performed.
            */
            public get priority(): number;
            public set priority(value: number);
            /** Allow Scenes to be activated as soon as it is ready.
            */
            public get allowSceneActivation(): boolean;
            public set allowSceneActivation(value: boolean);
            public add_completed ($value: System.Action$1<UnityEngine.AsyncOperation>) : void
            public remove_completed ($value: System.Action$1<UnityEngine.AsyncOperation>) : void
            public constructor ()
        }
        /** Asynchronous operation coroutine.
        */
        interface AsyncOperation {
            GetAwaiter () : UnityEngine.Awaitable.Awaiter;
        }
        /** Constants to pass to Application.RequestUserAuthorization.
        */
        enum UserAuthorization
        { WebCam = 1, Microphone = 2 }
        /** The platform application is running. Returned by Application.platform.
        */
        enum RuntimePlatform
        { OSXEditor = 0, OSXPlayer = 1, WindowsPlayer = 2, OSXWebPlayer = 3, OSXDashboardPlayer = 4, WindowsWebPlayer = 5, WindowsEditor = 7, IPhonePlayer = 8, XBOX360 = 10, PS3 = 9, Android = 11, NaCl = 12, FlashPlayer = 15, LinuxPlayer = 13, LinuxEditor = 16, WebGLPlayer = 17, MetroPlayerX86 = 18, WSAPlayerX86 = 18, MetroPlayerX64 = 19, WSAPlayerX64 = 19, MetroPlayerARM = 20, WSAPlayerARM = 20, WP8Player = 21, BB10Player = 22, BlackBerryPlayer = 22, TizenPlayer = 23, PSP2 = 24, PS4 = 25, PSM = 26, XboxOne = 27, SamsungTVPlayer = 28, WiiU = 30, tvOS = 31, Switch = 32, Lumin = 33, Stadia = 34, CloudRendering = -1, LinuxHeadlessSimulation = 35, GameCoreScarlett = -1, GameCoreXboxSeries = 36, GameCoreXboxOne = 37, PS5 = 38, EmbeddedLinuxArm64 = 39, EmbeddedLinuxArm32 = 40, EmbeddedLinuxX64 = 41, EmbeddedLinuxX86 = 42, LinuxServer = 43, WindowsServer = 44, OSXServer = 45, QNXArm32 = 46, QNXArm64 = 47, QNXX64 = 48, QNXX86 = 49 }
        /** The language the user's operating system is running in. Returned by Application.systemLanguage.
        */
        enum SystemLanguage
        { Afrikaans = 0, Arabic = 1, Basque = 2, Belarusian = 3, Bulgarian = 4, Catalan = 5, Chinese = 6, Czech = 7, Danish = 8, Dutch = 9, English = 10, Estonian = 11, Faroese = 12, Finnish = 13, French = 14, German = 15, Greek = 16, Hebrew = 17, Hugarian = 18, Icelandic = 19, Indonesian = 20, Italian = 21, Japanese = 22, Korean = 23, Latvian = 24, Lithuanian = 25, Norwegian = 26, Polish = 27, Portuguese = 28, Romanian = 29, Russian = 30, SerboCroatian = 31, Slovak = 32, Slovenian = 33, Spanish = 34, Swedish = 35, Thai = 36, Turkish = 37, Ukrainian = 38, Vietnamese = 39, ChineseSimplified = 40, ChineseTraditional = 41, Hindi = 42, Unknown = 43, Hungarian = 18 }
        /** Describes network reachability options.
        */
        enum NetworkReachability
        { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaLocalAreaNetwork = 2 }
        /** Contains information about a change in the application's memory usage.
        */
        class ApplicationMemoryUsageChange extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The memory usage level for the application.
            */
            public get memoryUsage(): UnityEngine.ApplicationMemoryUsage;
            public constructor ($usage: UnityEngine.ApplicationMemoryUsage)
        }
        /** Describes the application memory usage level.
        */
        enum ApplicationMemoryUsage
        { Unknown = 0, Low = 1, Medium = 2, High = 3, Critical = 4 }
        /** Type of the imported(native) data.
        */
        enum AudioType
        { UNKNOWN = 0, ACC = 1, AIFF = 2, IT = 10, MOD = 12, MPEG = 13, OGGVORBIS = 14, S3M = 17, WAV = 20, XM = 21, XMA = 22, VAG = 23, AUDIOQUEUE = 24 }
        /** Options for how to send a message.
        */
        enum SendMessageOptions
        { RequireReceiver = 0, DontRequireReceiver = 1 }
        /** The various primitives that can be created using the GameObject.CreatePrimitive function.
        */
        enum PrimitiveType
        { Sphere = 0, Capsule = 1, Cylinder = 2, Cube = 3, Plane = 4, Quad = 5 }
        /** The coordinate space in which to operate.
        */
        enum Space
        { World = 0, Self = 1 }
        /** Option flags for specifying special treatment of a log message.
        */
        enum LogOption
        { None = 0, NoStacktrace = 1 }
        /** Data structure for downloading AssetBundles to a customized cache path. Additional resources:UnityWebRequestAssetBundle.GetAssetBundle for more information.
        */
        class CachedAssetBundle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** AssetBundle name which is used as the customized cache path.
            */
            public get name(): string;
            public set name(value: string);
            /** Hash128 which is used as the version of the AssetBundle.
            */
            public get hash(): UnityEngine.Hash128;
            public set hash(value: UnityEngine.Hash128);
            public constructor ($name: string, $hash: UnityEngine.Hash128)
        }
        /** Represents  a 128-bit hash value.
        */
        class Hash128 extends System.ValueType implements System.IComparable, System.IComparable$1<UnityEngine.Hash128>, System.IEquatable$1<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            /** Returns true is the hash value is valid. (Read Only)
            */
            public get isValid(): boolean;
            public CompareTo ($rhs: UnityEngine.Hash128) : number
            /** Convert a hex-encoded string into Hash128 value.
            * @param $hashString A hexadecimal-encoded hash string.
            * @returns The 128-bit hash. 
            */
            public static Parse ($hashString: string) : UnityEngine.Hash128
            /** Compute a hash of input data string.
            * @param $data Input data string. Note that Unity interprets the string as UTF-8 data, even if internally in C# strings are UTF-16.
            * @returns The 128-bit hash. 
            */
            public static Compute ($data: string) : UnityEngine.Hash128
            /** Compute a hash of input data.
            * @param $val Input value.
            * @returns The 128-bit hash. 
            */
            public static Compute ($val: number) : UnityEngine.Hash128
            /** Hash new input string and combine with the current hash value.
            * @param $data Input data string. Note that Unity interprets the string as UTF-8 data, even if internally in C# strings are UTF-16.
            */
            public Append ($data: string) : void
            /** Hash new input data and combine with the current hash value.
            * @param $val Input value.
            */
            public Append ($val: number) : void
            public Equals ($obj: any) : boolean
            public Equals ($obj: UnityEngine.Hash128) : boolean
            public CompareTo ($obj: any) : number
            public static op_Equality ($hash1: UnityEngine.Hash128, $hash2: UnityEngine.Hash128) : boolean
            public static op_Inequality ($hash1: UnityEngine.Hash128, $hash2: UnityEngine.Hash128) : boolean
            public static op_LessThan ($x: UnityEngine.Hash128, $y: UnityEngine.Hash128) : boolean
            public static op_GreaterThan ($x: UnityEngine.Hash128, $y: UnityEngine.Hash128) : boolean
            public constructor ($u32_0: number, $u32_1: number, $u32_2: number, $u32_3: number)
            public constructor ($u64_0: bigint, $u64_1: bigint)
        }
        /** Data structure for cache. For more information, see Caching.AddCache.
        */
        class Cache extends System.ValueType implements System.IEquatable$1<UnityEngine.Cache>
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if the cache is valid.
            */
            public get valid(): boolean;
            /** Returns true if the cache is ready.
            */
            public get ready(): boolean;
            /** Returns true if the cache is readonly.
            */
            public get readOnly(): boolean;
            /** Returns the path of the cache.
            */
            public get path(): string;
            /** Returns the index of the cache in the cache list.
            */
            public get index(): number;
            /** Returns the number of currently unused bytes in the cache.
            */
            public get spaceFree(): bigint;
            /** Allows you to specify the total number of bytes that can be allocated for the cache.
            */
            public get maximumAvailableStorageSpace(): bigint;
            public set maximumAvailableStorageSpace(value: bigint);
            /** Returns the used disk space in bytes.
            */
            public get spaceOccupied(): bigint;
            /** The number of seconds that an AssetBundle may remain unused in the cache before it is automatically deleted.
            */
            public get expirationDelay(): number;
            public set expirationDelay(value: number);
            public static op_Equality ($lhs: UnityEngine.Cache, $rhs: UnityEngine.Cache) : boolean
            public static op_Inequality ($lhs: UnityEngine.Cache, $rhs: UnityEngine.Cache) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Cache) : boolean
            /** Removes all cached content in the cache that has been cached by the current application.
            * @param $expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns Returns True when cache clearing succeeded. 
            */
            public ClearCache () : boolean
            /** Removes all cached content in the cache that has been cached by the current application.
            * @param $expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns Returns True when cache clearing succeeded. 
            */
            public ClearCache ($expiration: number) : boolean
        }
        class CacheIndex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public name : string
            public bytesUsed : number
            public expires : number
        }
        /** The Caching class lets you manage cached AssetBundles, downloaded using UnityWebRequestAssetBundle.GetAssetBundle. 
        */
        class Caching extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Controls compression of cache data. Enabled by default.
            */
            public static get compressionEnabled(): boolean;
            public static set compressionEnabled(value: boolean);
            /** Returns true if Caching system is ready for use.
            */
            public static get ready(): boolean;
            /** Returns the cache count in the cache list.
            */
            public static get cacheCount(): number;
            /** Returns the default cache which is added by Unity internally.
            */
            public static get defaultCache(): UnityEngine.Cache;
            /** Gets or sets the current cache in which AssetBundles should be cached.
            */
            public static get currentCacheForWriting(): UnityEngine.Cache;
            public static set currentCacheForWriting(value: UnityEngine.Cache);
            /** Removes all AssetBundle content that has been cached by the current application.
            * @param $expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns True when cache clearing succeeded, false if cache was in use. 
            */
            public static ClearCache () : boolean
            /** Removes all AssetBundle content that has been cached by the current application.
            * @param $expiration The number of seconds that AssetBundles may remain unused in the cache.
            * @returns True when cache clearing succeeded, false if cache was in use. 
            */
            public static ClearCache ($expiration: number) : boolean
            /** Removes the given version of the AssetBundle.
            * @param $assetBundleName The AssetBundle name.
            * @param $hash Version needs to be cleaned.
            * @returns Returns true when cache clearing succeeded.  Can return false if any cached bundle is in use. 
            */
            public static ClearCachedVersion ($assetBundleName: string, $hash: UnityEngine.Hash128) : boolean
            /** Removes all the cached versions of the AssetBundle from the cache, except for the specified version.
            * @param $assetBundleName The AssetBundle name.
            * @param $hash Version needs to be kept.
            * @returns Returns true when cache clearing succeeded. 
            */
            public static ClearOtherCachedVersions ($assetBundleName: string, $hash: UnityEngine.Hash128) : boolean
            /** Removes all the cached versions of the given AssetBundle from the cache.
            * @param $assetBundleName The AssetBundle name.
            * @returns Returns true when cache clearing succeeded. 
            */
            public static ClearAllCachedVersions ($assetBundleName: string) : boolean
            public static GetCachedVersions ($assetBundleName: string, $outCachedVersions: System.Collections.Generic.List$1<UnityEngine.Hash128>) : void
            /** Checks if an AssetBundle is cached.
            * @param $Url The filename of the AssetBundle. Domain and path information are stripped from this string automatically.
            * @param $hash The version hash of the AssetBundle to check for. Corresponds to the version hash in some signatures of UnityWebRequestAssetBundle.GetAssetBundle.
            * @param $version The version number of the AssetBundle to check for. Corresponds to the numeric version in some signatures of UnityWebRequestAssetBundle.GetAssetBundle.
            * @returns True if an AssetBundle matching the url and version parameters has previously been loaded using UnityWebRequestAssetBundle.GetAssetBundle() and is currently stored in the cache. Returns false if the AssetBundle is not in cache, either because it has been flushed from the cache or was never loaded using the Caching API. 
            */
            public static IsVersionCached ($url: string, $hash: UnityEngine.Hash128) : boolean
            public static IsVersionCached ($cachedBundle: UnityEngine.CachedAssetBundle) : boolean
            public static MarkAsUsed ($url: string, $hash: UnityEngine.Hash128) : boolean
            public static MarkAsUsed ($cachedBundle: UnityEngine.CachedAssetBundle) : boolean
            public static SetNoBackupFlag ($url: string, $hash: UnityEngine.Hash128) : void
            public static SetNoBackupFlag ($cachedBundle: UnityEngine.CachedAssetBundle) : void
            public static ResetNoBackupFlag ($url: string, $hash: UnityEngine.Hash128) : void
            public static ResetNoBackupFlag ($cachedBundle: UnityEngine.CachedAssetBundle) : void
            /** Add a cache with the given path.
            * @param $cachePath Path to the cache folder.
            */
            public static AddCache ($cachePath: string) : UnityEngine.Cache
            /** Returns the Cache at the given position in the cache list.
            * @param $cacheIndex Index of the cache to get.
            * @returns A reference to the Cache at the index specified. 
            */
            public static GetCacheAt ($cacheIndex: number) : UnityEngine.Cache
            /** Returns the Cache that has the given cache path.
            * @param $cachePath The cache path.
            * @returns A reference to the Cache with the given path. 
            */
            public static GetCacheByPath ($cachePath: string) : UnityEngine.Cache
            public static GetAllCachePaths ($cachePaths: System.Collections.Generic.List$1<string>) : void
            /** Removes the Cache from cache list.
            * @param $cache The Cache to be removed.
            * @returns Returns true if the Cache is removed. 
            */
            public static RemoveCache ($cache: UnityEngine.Cache) : boolean
            /** Moves the source Cache before the destination Cache in the cache list.
            * @param $src The Cache to move.
            * @param $dst The Cache which should come after the source Cache in the cache list.
            */
            public static MoveCacheBefore ($src: UnityEngine.Cache, $dst: UnityEngine.Cache) : void
            /** Moves the source Cache after the destination Cache in the cache list.
            * @param $src The Cache to move.
            * @param $dst The Cache which should come before the source Cache in the cache list.
            */
            public static MoveCacheAfter ($src: UnityEngine.Cache, $dst: UnityEngine.Cache) : void
            public constructor ()
        }
        /** Base class for everything attached to a GameObject.
        */
        class Component extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The game object this component is attached to. A component is always attached to a game object.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The tag of this game object.
            */
            public get tag(): string;
            public set tag(value: string);
            /** The non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent ($type: System.Type) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent ($type: System.Type, $component: $Ref<UnityEngine.Component>) : boolean
            /** The string-based version of this method.
            * @param $type The name of the type of Component to get.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent ($type: string) : UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInChildren ($t: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInChildren ($t: System.Type) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren ($t: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInChildren ($t: System.Type) : System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent ($t: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent ($t: System.Type) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $t The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInParent ($t: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInParent ($t: System.Type) : System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @returns An array containing all matching components of type type. 
            */
            public GetComponents ($type: System.Type) : System.Array$1<UnityEngine.Component>
            public GetComponents ($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>) : void
            /** Checks the GameObject's tag against the defined tag.
            * @param $tag The tag to compare.
            * @returns Returns true if GameObject has same tag. Returns false otherwise. 
            */
            public CompareTag ($tag: string) : boolean
            /** Checks the GameObject's tag against the defined tag.
            * @param $tag A TagHandle representing the tag to compare.
            * @returns Returns true if GameObject has same tag. Returns false otherwise. 
            */
            public CompareTag ($tag: UnityEngine.TagHandle) : boolean
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.
            * @param $methodName Name of method to call.
            * @param $value Optional parameter value for the method.
            * @param $options Should an error be raised if the method does not exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object.
            * @param $methodName Name of the method to call.
            * @param $value Optional parameter for the method.
            * @param $options Should an error be raised if the target object doesn't implement the method for the message?
            */
            public SendMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $parameter: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this game object or any of its children.
            * @param $methodName Name of the method to call.
            * @param $parameter Optional parameter to pass to the method (can be any value).
            * @param $options Should an error be raised if the method does not exist for a given target object?
            */
            public BroadcastMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public constructor ()
        }
        /** Behaviours are Components that can be enabled or disabled.
        */
        class Behaviour extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enabled Behaviours are Updated, disabled Behaviours are not.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Reports whether a GameObject and its associated Behaviour is active and enabled.
            */
            public get isActiveAndEnabled(): boolean;
            public constructor ()
        }
        /** A Camera is a device through which the player views the world.
        */
        class Camera extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The minimum allowed aperture.
            */
            public static kMinAperture : number
            /** The maximum allowed aperture.
            */
            public static kMaxAperture : number
            /** The minimum blade count for the aperture diaphragm.
            */
            public static kMinBladeCount : number
            /** The maximum blade count for the aperture diaphragm.
            */
            public static kMaxBladeCount : number
            /** Delegate that you can use to execute custom code before a Camera culls the scene.
            */
            public static onPreCull : UnityEngine.Camera.CameraCallback
            /** Delegate that you can use to execute custom code before a Camera renders the scene.
            */
            public static onPreRender : UnityEngine.Camera.CameraCallback
            /** Delegate that you can use to execute custom code after a Camera renders the scene.
            */
            public static onPostRender : UnityEngine.Camera.CameraCallback
            /** The distance of the near clipping plane from the the Camera, in world units.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The distance of the far clipping plane from the Camera, in world units.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The vertical field of view of the Camera, in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The rendering path that should be used, if possible.
            */
            public get renderingPath(): UnityEngine.RenderingPath;
            public set renderingPath(value: UnityEngine.RenderingPath);
            /** The rendering path that is currently being used (Read Only).
            */
            public get actualRenderingPath(): UnityEngine.RenderingPath;
            /** High dynamic range rendering.
            */
            public get allowHDR(): boolean;
            public set allowHDR(value: boolean);
            /** MSAA rendering.
            */
            public get allowMSAA(): boolean;
            public set allowMSAA(value: boolean);
            /** Dynamic Resolution Scaling.
            */
            public get allowDynamicResolution(): boolean;
            public set allowDynamicResolution(value: boolean);
            /** Should camera rendering be forced into a RenderTexture.
            */
            public get forceIntoRenderTexture(): boolean;
            public set forceIntoRenderTexture(value: boolean);
            /** Camera's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Is the camera orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Opaque object sorting mode.
            */
            public get opaqueSortMode(): UnityEngine.Rendering.OpaqueSortMode;
            public set opaqueSortMode(value: UnityEngine.Rendering.OpaqueSortMode);
            /** Transparent object sorting mode.
            */
            public get transparencySortMode(): UnityEngine.TransparencySortMode;
            public set transparencySortMode(value: UnityEngine.TransparencySortMode);
            /** An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.
            */
            public get transparencySortAxis(): UnityEngine.Vector3;
            public set transparencySortAxis(value: UnityEngine.Vector3);
            /** Camera's depth in the camera rendering order.
            */
            public get depth(): number;
            public set depth(value: number);
            /** The aspect ratio (width divided by height).
            */
            public get aspect(): number;
            public set aspect(value: number);
            /** Get the world-space speed of the camera (Read Only).
            */
            public get velocity(): UnityEngine.Vector3;
            /** This is used to render parts of the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Mask to select which layers can trigger events on the camera.
            */
            public get eventMask(): number;
            public set eventMask(value: number);
            /** How to perform per-layer culling for a Camera.
            */
            public get layerCullSpherical(): boolean;
            public set layerCullSpherical(value: boolean);
            /** Identifies what kind of camera this is, using the CameraType enum.
            */
            public get cameraType(): UnityEngine.CameraType;
            public set cameraType(value: UnityEngine.CameraType);
            /** Sets the culling mask used to determine which objects from which Scenes to draw.
            See EditorSceneManager.SetSceneCullingMask.
            */
            public get overrideSceneCullingMask(): bigint;
            public set overrideSceneCullingMask(value: bigint);
            /** Per-layer culling distances.
            */
            public get layerCullDistances(): System.Array$1<number>;
            public set layerCullDistances(value: System.Array$1<number>);
            /** Whether or not the Camera will use occlusion culling during rendering.
            */
            public get useOcclusionCulling(): boolean;
            public set useOcclusionCulling(value: boolean);
            /** Sets a custom matrix for the camera to use for all culling queries.
            */
            public get cullingMatrix(): UnityEngine.Matrix4x4;
            public set cullingMatrix(value: UnityEngine.Matrix4x4);
            /** The color with which the screen will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** How the camera clears the background.
            */
            public get clearFlags(): UnityEngine.CameraClearFlags;
            public set clearFlags(value: UnityEngine.CameraClearFlags);
            /** How and if camera generates a depth texture.
            */
            public get depthTextureMode(): UnityEngine.DepthTextureMode;
            public set depthTextureMode(value: UnityEngine.DepthTextureMode);
            /** Should the camera clear the stencil buffer after the deferred light pass?
            */
            public get clearStencilAfterLightingPass(): boolean;
            public set clearStencilAfterLightingPass(value: boolean);
            /** Enable usePhysicalProperties to use physical camera properties to compute the field of view and the frustum.
            */
            public get usePhysicalProperties(): boolean;
            public set usePhysicalProperties(value: boolean);
            /** The sensor sensitivity of the camera. To use this property, enable UsePhysicalProperties.
            */
            public get iso(): number;
            public set iso(value: number);
            /** The exposure time of the camera, in seconts. To use this property, enable UsePhysicalProperties.
            */
            public get shutterSpeed(): number;
            public set shutterSpeed(value: number);
            /** The camera aperture. To use this property, enable UsePhysicalProperties.
            */
            public get aperture(): number;
            public set aperture(value: number);
            /** The focus distance of the lens. To use this property, enable UsePhysicalProperties.
            */
            public get focusDistance(): number;
            public set focusDistance(value: number);
            /** The camera focal length, expressed in millimeters. To use this property, enable UsePhysicalProperties.
            */
            public get focalLength(): number;
            public set focalLength(value: number);
            /** The blade count in the lens of the camera. To use this property, enable UsePhysicalProperties.
            */
            public get bladeCount(): number;
            public set bladeCount(value: number);
            /** The curvature of the blades. To use this property, enable UsePhysicalProperties.
            */
            public get curvature(): UnityEngine.Vector2;
            public set curvature(value: UnityEngine.Vector2);
            /** The camera barrel clipping. To use this property, enable UsePhysicalProperties.
            */
            public get barrelClipping(): number;
            public set barrelClipping(value: number);
            /** The camera anamorphism. To use this property, enable UsePhysicalProperties.
            */
            public get anamorphism(): number;
            public set anamorphism(value: number);
            /** The size of the camera sensor, expressed in millimeters.
            */
            public get sensorSize(): UnityEngine.Vector2;
            public set sensorSize(value: UnityEngine.Vector2);
            /** The lens offset of the camera. The lens shift is relative to the sensor size. For example, a lens shift of 0.5 offsets the sensor by half its horizontal size.
            */
            public get lensShift(): UnityEngine.Vector2;
            public set lensShift(value: UnityEngine.Vector2);
            /** There are two gates for a camera, the sensor gate and the resolution gate. The physical camera sensor gate is defined by the sensorSize property, the resolution gate is defined by the render target area.
            */
            public get gateFit(): UnityEngine.Camera.GateFitMode;
            public set gateFit(value: UnityEngine.Camera.GateFitMode);
            /** Where on the screen is the camera rendered in normalized coordinates.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            /** Where on the screen is the camera rendered in pixel coordinates.
            */
            public get pixelRect(): UnityEngine.Rect;
            public set pixelRect(value: UnityEngine.Rect);
            /** How wide is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelWidth(): number;
            /** How tall is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).
            */
            public get pixelHeight(): number;
            /** How wide is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelWidth(): number;
            /** How tall is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).
            */
            public get scaledPixelHeight(): number;
            /** Destination render texture.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** Gets the temporary RenderTexture target for this Camera.
            */
            public get activeTexture(): UnityEngine.RenderTexture;
            /** Set the target display for this Camera.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Matrix that transforms from camera space to world space (Read Only).
            */
            public get cameraToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms from world to camera space.
            */
            public get worldToCameraMatrix(): UnityEngine.Matrix4x4;
            public set worldToCameraMatrix(value: UnityEngine.Matrix4x4);
            /** Set a custom projection matrix.
            */
            public get projectionMatrix(): UnityEngine.Matrix4x4;
            public set projectionMatrix(value: UnityEngine.Matrix4x4);
            /** Get or set the raw projection matrix with no camera offset (no jittering).
            */
            public get nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
            public set nonJitteredProjectionMatrix(value: UnityEngine.Matrix4x4);
            /** Should the jittered matrix be used for transparency rendering?
            */
            public get useJitteredProjectionMatrixForTransparentRendering(): boolean;
            public set useJitteredProjectionMatrixForTransparentRendering(value: boolean);
            /** Get the view projection matrix used on the last frame.
            */
            public get previousViewProjectionMatrix(): UnityEngine.Matrix4x4;
            /** The first enabled Camera component that is tagged "MainCamera" (Read Only).
            */
            public static get main(): UnityEngine.Camera;
            /** The camera we are currently rendering with, for low-level render control only (Read Only).
            */
            public static get current(): UnityEngine.Camera;
            /** If not null, the camera will only render the contents of the specified Scene.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public set scene(value: UnityEngine.SceneManagement.Scene);
            /** Stereoscopic rendering.
            */
            public get stereoEnabled(): boolean;
            /** The distance between the virtual eyes. Use this to query or set the current eye separation. Note that most VR devices provide this value, in which case setting the value will have no effect.
            */
            public get stereoSeparation(): number;
            public set stereoSeparation(value: number);
            /** Distance to a point where virtual eyes converge.
            */
            public get stereoConvergence(): number;
            public set stereoConvergence(value: number);
            /** Determines whether the stereo view matrices are suitable to allow for a single pass cull.
            */
            public get areVRStereoViewMatricesWithinSingleCullTolerance(): boolean;
            /** Defines which eye of a VR display the Camera renders into.
            */
            public get stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
            public set stereoTargetEye(value: UnityEngine.StereoTargetEyeMask);
            /** Returns the eye that is currently rendering.
            If called when stereo is not enabled it will return Camera.MonoOrStereoscopicEye.Mono.
            If called during a camera rendering callback such as OnRenderImage it will return the currently rendering eye.
            If called outside of a rendering callback and stereo is enabled, it will return the default eye which is Camera.MonoOrStereoscopicEye.Left.
            */
            public get stereoActiveEye(): UnityEngine.Camera.MonoOrStereoscopicEye;
            /** The number of cameras in the current Scene.
            */
            public static get allCamerasCount(): number;
            /** Returns all enabled cameras in the Scene.
            */
            public static get allCameras(): System.Array$1<UnityEngine.Camera>;
            public get sceneViewFilterMode(): UnityEngine.Camera.SceneViewFilterMode;
            /** If false, clouds are not rendered in the scene view of this camera.
            */
            public get renderCloudsInSceneView(): boolean;
            public set renderCloudsInSceneView(value: boolean);
            /** Number of command buffers set up on this camera (Read Only).
            */
            public get commandBufferCount(): number;
            /** Revert all camera parameters to default.
            */
            public Reset () : void
            /** Resets this Camera's transparency sort settings to the default. Default transparency settings are taken from GraphicsSettings instead of directly from this Camera.
            */
            public ResetTransparencySortSettings () : void
            /** Revert the aspect ratio to the screen's aspect ratio.
            */
            public ResetAspect () : void
            /** Make culling queries reflect the camera's built in parameters.
            */
            public ResetCullingMatrix () : void
            /** Make the camera render with shader replacement.
            */
            public SetReplacementShader ($shader: UnityEngine.Shader, $replacementTag: string) : void
            /** Remove shader replacement from camera.
            */
            public ResetReplacementShader () : void
            /** 
            Retrieves the effective vertical field of view of the camera, including GateFit.
            Fitting the sensor gate and the resolution gate has an impact on the final field of view. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio or if the camera is not in physical mode, then this method returns the same value as the fieldofview property.
            * @returns Returns the effective vertical field of view. 
            */
            public GetGateFittedFieldOfView () : number
            /** 
            Retrieves the effective lens offset of the camera, including GateFit.
            Fitting the sensor gate and the resolution gate has an impact on the final obliqueness of the projection. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio, then this method returns the same value as the lenshift property. If the camera is not in physical mode, then this methods returns Vector2.zero.
            * @returns Returns the effective lens shift value. 
            */
            public GetGateFittedLensShift () : UnityEngine.Vector2
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param $colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param $depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer) : void
            /** Sets the Camera to render to the chosen buffers of one or more RenderTextures.
            * @param $colorBuffer The RenderBuffer(s) to which color information will be rendered.
            * @param $depthBuffer The RenderBuffer to which depth information will be rendered.
            */
            public SetTargetBuffers ($colorBuffer: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer) : void
            /** Make the rendering position reflect the camera's position in the Scene.
            */
            public ResetWorldToCameraMatrix () : void
            /** Make the projection reflect normal camera's parameters.
            */
            public ResetProjectionMatrix () : void
            /** Calculates and returns oblique near-plane projection matrix.
            * @param $clipPlane Vector4 that describes a clip plane.
            * @returns Oblique near-plane projection matrix. 
            */
            public CalculateObliqueMatrix ($clipPlane: UnityEngine.Vector4) : UnityEngine.Matrix4x4
            public WorldToScreenPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public WorldToViewportPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public ViewportToWorldPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            public ScreenToWorldPoint ($position: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Vector3
            /** Transforms position from world space into screen space.
            * @param $position A 3D point in world space.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToScreenPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from world space into viewport space.
            * @param $position A 3D point in world space.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public WorldToViewportPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from viewport space into world space.
            * @param $position The 3d vector in Viewport space.
            * @returns The 3d vector in World space. 
            */
            public ViewportToWorldPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.
            * @param $position A 2D screenspace point in pixels, plus a z coordinate for the distance from the camera in world units. The lower left pixel of the screen is (0,0). The upper right pixel of the screen is (screen width in pixels - 1, screen height in pixels - 1).
            * @param $eye By default, Camera.MonoOrStereoscopicEye.Mono. Can be set to Camera.MonoOrStereoscopicEye.Left or Camera.MonoOrStereoscopicEye.Right for use in stereoscopic rendering (e.g., for VR).
            * @returns The world space point created by converting the screen space point at the provided distance z from the camera plane. 
            */
            public ScreenToWorldPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from screen space into viewport space.
            */
            public ScreenToViewportPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms position from viewport space into screen space.
            */
            public ViewportToScreenPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            public ViewportPointToRay ($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Ray
            /** Returns a ray going from camera through a viewport point.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ViewportPointToRay ($pos: UnityEngine.Vector3) : UnityEngine.Ray
            public ScreenPointToRay ($pos: UnityEngine.Vector3, $eye: UnityEngine.Camera.MonoOrStereoscopicEye) : UnityEngine.Ray
            /** Returns a ray going from camera through a screen point.
            * @param $pos A 3D point, with the x and y coordinates containing a 2D screenspace point in pixels. The lower left pixel of the screen is (0,0). The upper right pixel of the screen is (screen width in pixels - 1, screen height in pixels - 1). Unity ignores the z coordinate.
            * @param $eye Optional argument that can be used to specify which eye transform to use. Default is Mono.
            */
            public ScreenPointToRay ($pos: UnityEngine.Vector3) : UnityEngine.Ray
            public CalculateFrustumCorners ($viewport: UnityEngine.Rect, $z: number, $eye: UnityEngine.Camera.MonoOrStereoscopicEye, $outCorners: System.Array$1<UnityEngine.Vector3>) : void
            public static CalculateProjectionMatrixFromPhysicalProperties ($output: $Ref<UnityEngine.Matrix4x4>, $focalLength: number, $sensorSize: UnityEngine.Vector2, $lensShift: UnityEngine.Vector2, $nearClip: number, $farClip: number, $gateFitParameters?: UnityEngine.Camera.GateFitParameters) : void
            /** Converts focal length to field of view.
            * @param $focalLength Focal length in millimeters.
            * @param $sensorSize Sensor size in millimeters. Use the sensor height to get the vertical field of view. Use the sensor width to get the horizontal field of view.
            * @returns field of view in degrees. 
            */
            public static FocalLengthToFieldOfView ($focalLength: number, $sensorSize: number) : number
            /** Converts field of view to focal length. Use either sensor height and vertical field of view or sensor width and horizontal field of view.
            * @param $fieldOfView field of view in degrees.
            * @param $sensorSize Sensor size in millimeters.
            * @returns Focal length in millimeters. 
            */
            public static FieldOfViewToFocalLength ($fieldOfView: number, $sensorSize: number) : number
            /** Converts the horizontal field of view (FOV) to the vertical FOV, based on the value of the aspect ratio parameter.
            * @param $horizontalFOV The horizontal FOV value in degrees.
            * @param $aspectRatio The aspect ratio value used for the conversion
            */
            public static HorizontalToVerticalFieldOfView ($horizontalFieldOfView: number, $aspectRatio: number) : number
            /** Converts the vertical field of view (FOV) to the horizontal FOV, based on the value of the aspect ratio parameter.
            * @param $verticalFieldOfView The vertical FOV value in degrees.
            * @param $aspectRatio The aspect ratio value used for the conversion
            */
            public static VerticalToHorizontalFieldOfView ($verticalFieldOfView: number, $aspectRatio: number) : number
            public GetStereoNonJitteredProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public GetStereoViewMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public CopyStereoDeviceProjectionMatrixToNonJittered ($eye: UnityEngine.Camera.StereoscopicEye) : void
            public GetStereoProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye) : UnityEngine.Matrix4x4
            public SetStereoProjectionMatrix ($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4) : void
            /** Reset the camera to using the Unity computed projection matrices for all stereoscopic eyes.
            */
            public ResetStereoProjectionMatrices () : void
            public SetStereoViewMatrix ($eye: UnityEngine.Camera.StereoscopicEye, $matrix: UnityEngine.Matrix4x4) : void
            /** Reset the camera to using the Unity computed view matrices for all stereoscopic eyes.
            */
            public ResetStereoViewMatrices () : void
            /** Fills an array of Camera with the current cameras in the Scene, without allocating a new array.
            * @param $cameras An array to be filled up with cameras currently in the Scene.
            */
            public static GetAllCameras ($cameras: System.Array$1<UnityEngine.Camera>) : number
            /** Render into a static cubemap from this camera.
            * @param $cubemap The cube map to render to.
            * @param $faceMask A bitmask which determines which of the six faces are rendered to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap ($cubemap: UnityEngine.Cubemap, $faceMask: number) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.Cubemap) : boolean
            /** Render into a cubemap from this camera.
            * @param $faceMask A bitfield indicating which cubemap faces should be rendered into.
            * @param $cubemap The texture to render to.
            * @returns False if rendering fails, else true. 
            */
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture, $faceMask: number) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture) : boolean
            public RenderToCubemap ($cubemap: UnityEngine.RenderTexture, $faceMask: number, $stereoEye: UnityEngine.Camera.MonoOrStereoscopicEye) : boolean
            /** Render the camera manually.
            */
            public Render () : void
            /** Render the camera with shader replacement.
            */
            public RenderWithShader ($shader: UnityEngine.Shader, $replacementTag: string) : void
            public RenderDontRestore () : void
            public static SetupCurrent ($cur: UnityEngine.Camera) : void
            /** Makes this camera's settings match other camera.
            * @param $other Copy camera settings to the other camera.
            */
            public CopyFrom ($other: UnityEngine.Camera) : void
            /** Remove command buffers from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers ($evt: UnityEngine.Rendering.CameraEvent) : void
            /** Remove all command buffers set on this camera.
            */
            public RemoveAllCommandBuffers () : void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Remove command buffer from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public RemoveCommandBuffer ($evt: UnityEngine.Rendering.CameraEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Get command buffers to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers ($evt: UnityEngine.Rendering.CameraEvent) : System.Array$1<UnityEngine.Rendering.CommandBuffer>
            /** Get culling parameters for a camera.
            * @param $cullingParameters Resultant culling parameters.
            * @param $stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters ($cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>) : boolean
            /** Get culling parameters for a camera.
            * @param $cullingParameters Resultant culling parameters.
            * @param $stereoAware Generate single-pass stereo aware culling parameters.
            * @returns Flag indicating whether culling parameters are valid. 
            */
            public TryGetCullingParameters ($stereoAware: boolean, $cullingParameters: $Ref<UnityEngine.Rendering.ScriptableCullingParameters>) : boolean
            public constructor ()
        }
        /** Rendering path of a Camera.
        */
        enum RenderingPath
        { UsePlayerSettings = -1, VertexLit = 0, Forward = 1, DeferredLighting = 2, DeferredShading = 3 }
        /** Transparent object sorting mode of a Camera.
        */
        enum TransparencySortMode
        { Default = 0, Perspective = 1, Orthographic = 2, CustomAxis = 3 }
        /** Representation of 3D vectors and points.
        */
        class Vector3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector3>
        {
            protected [__keep_incompatibility]: never;
            public static kEpsilon : number
            public static kEpsilonNormalSqrt : number
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            /** Z component of the vector.
            */
            public z : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector3;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector3(0, 0, 0).
            */
            public static get zero(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 1, 1).
            */
            public static get one(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, 1).
            */
            public static get forward(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 0, -1).
            */
            public static get back(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, 1, 0).
            */
            public static get up(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(0, -1, 0).
            */
            public static get down(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(-1, 0, 0).
            */
            public static get left(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(1, 0, 0).
            */
            public static get right(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector3;
            /** Shorthand for writing Vector3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector3;
            /** Spherically interpolates between two vectors.
            */
            public static Slerp ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Spherically interpolates between two vectors.
            */
            public static SlerpUnclamped ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize ($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>) : void
            /** Makes vectors normalized and orthogonal to each other.
            */
            public static OrthoNormalize ($normal: $Ref<UnityEngine.Vector3>, $tangent: $Ref<UnityEngine.Vector3>, $binormal: $Ref<UnityEngine.Vector3>) : void
            /** Rotates a vector current towards target.
            * @param $current The vector being managed.
            * @param $target The vector.
            * @param $maxRadiansDelta The maximum angle in radians allowed for this rotation.
            * @param $maxMagnitudeDelta The maximum allowed change in vector magnitude for this rotation.
            * @returns The location that RotateTowards generates. 
            */
            public static RotateTowards ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxRadiansDelta: number, $maxMagnitudeDelta: number) : UnityEngine.Vector3
            /** Linearly interpolates between two points.
            * @param $a Start value, returned when t = 0.
            * @param $b End value, returned when t = 1.
            * @param $t Value used to interpolate between a and b.
            * @returns Interpolated value, equals to a + (b - a) * t. 
            */
            public static Lerp ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Linearly interpolates between two vectors.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $t: number) : UnityEngine.Vector3
            /** Calculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistanceDelta.
            * @param $current The position to move from.
            * @param $target The position to move towards.
            * @param $maxDistanceDelta Distance to move current per call.
            * @returns The new position. 
            */
            public static MoveTowards ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $maxDistanceDelta: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number) : UnityEngine.Vector3
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector3, $target: UnityEngine.Vector3, $currentVelocity: $Ref<UnityEngine.Vector3>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : UnityEngine.Vector3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y and z components of an existing Vector3.
            */
            public Set ($newX: number, $newY: number, $newZ: number) : void
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector3) : void
            /** Cross Product of two vectors.
            */
            public static Cross ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector3) : boolean
            /** Reflects a vector off the plane defined by a normal.
            * @param $inDirection The direction vector towards the plane.
            * @param $inNormal The normal vector that defines the plane.
            */
            public static Reflect ($inDirection: UnityEngine.Vector3, $inNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes this vector have a magnitude of 1.
            */
            public static Normalize ($value: UnityEngine.Vector3) : UnityEngine.Vector3
            public Normalize () : void
            /** Dot Product of two vectors.
            */
            public static Dot ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : number
            /** Projects a vector onto another vector.
            */
            public static Project ($vector: UnityEngine.Vector3, $onNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Projects a vector onto a plane defined by a normal orthogonal to the plane.
            * @param $planeNormal The direction from the vector towards the plane.
            * @param $vector The location of the vector above the plane.
            * @returns The location of the vector on the plane. 
            */
            public static ProjectOnPlane ($vector: UnityEngine.Vector3, $planeNormal: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculates the angle between vectors from and.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The angle in degrees between the two vectors. 
            */
            public static Angle ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3) : number
            /** Calculates the signed angle between vectors from and to in relation to axis.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @param $axis A vector around which the other vectors are rotated.
            * @returns Returns the signed angle between from and to in degrees. 
            */
            public static SignedAngle ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $axis: UnityEngine.Vector3) : number
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude ($vector: UnityEngine.Vector3, $maxLength: number) : UnityEngine.Vector3
            public static Magnitude ($vector: UnityEngine.Vector3) : number
            public static SqrMagnitude ($vector: UnityEngine.Vector3) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Addition ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Subtraction ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_UnaryNegation ($a: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Multiply ($a: UnityEngine.Vector3, $d: number) : UnityEngine.Vector3
            public static op_Multiply ($d: number, $a: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Division ($a: UnityEngine.Vector3, $d: number) : UnityEngine.Vector3
            public static op_Equality ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector3, $rhs: UnityEngine.Vector3) : boolean
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $y: number)
        }
        /** Describes different types of camera.
        */
        enum CameraType
        { Game = 1, SceneView = 2, Preview = 4, VR = 8, Reflection = 16 }
        /** A standard 4x4 transformation matrix.
        */
        class Matrix4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Matrix4x4>
        {
            protected [__keep_incompatibility]: never;
            public m00 : number
            public m10 : number
            public m20 : number
            public m30 : number
            public m01 : number
            public m11 : number
            public m21 : number
            public m31 : number
            public m02 : number
            public m12 : number
            public m22 : number
            public m32 : number
            public m03 : number
            public m13 : number
            public m23 : number
            public m33 : number
            /** Attempts to get a rotation quaternion from this matrix.
            */
            public get rotation(): UnityEngine.Quaternion;
            /** Attempts to get a scale value from the matrix. (Read Only)
            */
            public get lossyScale(): UnityEngine.Vector3;
            /** Checks whether this is an identity matrix. (Read Only)
            */
            public get isIdentity(): boolean;
            /** The determinant of the matrix. (Read Only)
            */
            public get determinant(): number;
            /** This property takes a projection matrix and returns the six plane coordinates that define a projection frustum.
            */
            public get decomposeProjection(): UnityEngine.FrustumPlanes;
            /** The inverse of this matrix. (Read Only)
            */
            public get inverse(): UnityEngine.Matrix4x4;
            /** Returns the transpose of this matrix (Read Only).
            */
            public get transpose(): UnityEngine.Matrix4x4;
            /** Returns a matrix with all elements set to zero (Read Only).
            */
            public static get zero(): UnityEngine.Matrix4x4;
            /** Returns the identity matrix (Read Only).
            */
            public static get identity(): UnityEngine.Matrix4x4;
            /** Checks if this matrix is a valid transform matrix.
            */
            public ValidTRS () : boolean
            public static Determinant ($m: UnityEngine.Matrix4x4) : number
            /** Creates a translation, rotation and scaling matrix.
            */
            public static TRS ($pos: UnityEngine.Vector3, $q: UnityEngine.Quaternion, $s: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Sets this matrix to a translation, rotation and scaling matrix.
            */
            public SetTRS ($pos: UnityEngine.Vector3, $q: UnityEngine.Quaternion, $s: UnityEngine.Vector3) : void
            /** Computes the inverse of a 3D affine matrix.
            * @param $input Input matrix to invert.
            * @param $result The result of the inversion. Equal to the input matrix if the function fails.
            * @returns Returns true and a valid result if the function succeeds, false and a copy of the input matrix if the function fails. 
            */
            public static Inverse3DAffine ($input: UnityEngine.Matrix4x4, $result: $Ref<UnityEngine.Matrix4x4>) : boolean
            public static Inverse ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static Transpose ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            /** Create an orthogonal projection matrix.
            * @param $left Left-side x-coordinate.
            * @param $right Right-side x-coordinate.
            * @param $bottom Bottom y-coordinate.
            * @param $top Top y-coordinate.
            * @param $zNear Near depth clipping plane value.
            * @param $zFar Far depth clipping plane value.
            * @returns The projection matrix. 
            */
            public static Ortho ($left: number, $right: number, $bottom: number, $top: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** Create a perspective projection matrix.
            * @param $fov Vertical field-of-view in degrees.
            * @param $aspect Aspect ratio (width divided by height).
            * @param $zNear Near depth clipping plane value.
            * @param $zFar Far depth clipping plane value.
            * @returns The projection matrix. 
            */
            public static Perspective ($fov: number, $aspect: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** Create a "look at" matrix.
            * @param $from The source point.
            * @param $to The target point.
            * @param $up The vector describing the up direction (typically Vector3.up).
            * @returns The resulting transformation matrix. 
            */
            public static LookAt ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3, $up: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.
            * @param $left The X coordinate of the left side of the near projection plane in view space.
            * @param $right The X coordinate of the right side of the near projection plane in view space.
            * @param $bottom The Y coordinate of the bottom side of the near projection plane in view space.
            * @param $top The Y coordinate of the top side of the near projection plane in view space.
            * @param $zNear Z distance to the near plane from the origin in view space.
            * @param $zFar Z distance to the far plane from the origin in view space.
            * @param $frustumPlanes Frustum planes struct that contains the view space coordinates of that define a viewing frustum.
            * @returns A projection matrix with a viewing frustum defined by the plane coordinates passed in. 
            */
            public static Frustum ($left: number, $right: number, $bottom: number, $top: number, $zNear: number, $zFar: number) : UnityEngine.Matrix4x4
            /** This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.
            * @param $left The X coordinate of the left side of the near projection plane in view space.
            * @param $right The X coordinate of the right side of the near projection plane in view space.
            * @param $bottom The Y coordinate of the bottom side of the near projection plane in view space.
            * @param $top The Y coordinate of the top side of the near projection plane in view space.
            * @param $zNear Z distance to the near plane from the origin in view space.
            * @param $zFar Z distance to the far plane from the origin in view space.
            * @param $frustumPlanes Frustum planes struct that contains the view space coordinates of that define a viewing frustum.
            * @returns A projection matrix with a viewing frustum defined by the plane coordinates passed in. 
            */
            public static Frustum ($fp: UnityEngine.FrustumPlanes) : UnityEngine.Matrix4x4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Matrix4x4) : boolean
            public static op_Multiply ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static op_Multiply ($lhs: UnityEngine.Matrix4x4, $vector: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Equality ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : boolean
            public static op_Inequality ($lhs: UnityEngine.Matrix4x4, $rhs: UnityEngine.Matrix4x4) : boolean
            /** Get a column of the matrix.
            */
            public GetColumn ($index: number) : UnityEngine.Vector4
            /** Returns a row of the matrix.
            */
            public GetRow ($index: number) : UnityEngine.Vector4
            /** Get position vector from the matrix.
            */
            public GetPosition () : UnityEngine.Vector3
            /** Sets a column of the matrix.
            */
            public SetColumn ($index: number, $column: UnityEngine.Vector4) : void
            /** Sets a row of the matrix.
            */
            public SetRow ($index: number, $row: UnityEngine.Vector4) : void
            /** Transforms a position by this matrix (generic).
            */
            public MultiplyPoint ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a position by this matrix (fast).
            */
            public MultiplyPoint3x4 ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms a direction by this matrix.
            */
            public MultiplyVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a plane that is transformed in space.
            */
            public TransformPlane ($plane: UnityEngine.Plane) : UnityEngine.Plane
            /** Creates a scaling matrix.
            */
            public static Scale ($vector: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Creates a translation matrix.
            */
            public static Translate ($vector: UnityEngine.Vector3) : UnityEngine.Matrix4x4
            /** Creates a rotation matrix.
            */
            public static Rotate ($q: UnityEngine.Quaternion) : UnityEngine.Matrix4x4
            /** Returns a formatted string for this matrix.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this matrix.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this matrix.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($column0: UnityEngine.Vector4, $column1: UnityEngine.Vector4, $column2: UnityEngine.Vector4, $column3: UnityEngine.Vector4)
        }
        /** Representation of RGBA colors.
        */
        class Color extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** Red component of the color.
            */
            public r : number
            /** Green component of the color.
            */
            public g : number
            /** Blue component of the color.
            */
            public b : number
            /** Alpha component of the color (0 is transparent, 1 is opaque).
            */
            public a : number
            /** Solid red. RGBA is (1, 0, 0, 1).
            */
            public static get red(): UnityEngine.Color;
            /** Solid green. RGBA is (0, 1, 0, 1).
            */
            public static get green(): UnityEngine.Color;
            /** Solid blue. RGBA is (0, 0, 1, 1).
            */
            public static get blue(): UnityEngine.Color;
            /** Solid white. RGBA is (1, 1, 1, 1).
            */
            public static get white(): UnityEngine.Color;
            /** Solid black. RGBA is (0, 0, 0, 1).
            */
            public static get black(): UnityEngine.Color;
            /** Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!
            */
            public static get yellow(): UnityEngine.Color;
            /** Cyan. RGBA is (0, 1, 1, 1).
            */
            public static get cyan(): UnityEngine.Color;
            /** Magenta. RGBA is (1, 0, 1, 1).
            */
            public static get magenta(): UnityEngine.Color;
            /** Gray. RGBA is (0.5, 0.5, 0.5, 1).
            */
            public static get gray(): UnityEngine.Color;
            /** English spelling for gray. RGBA is the same (0.5, 0.5, 0.5, 1).
            */
            public static get grey(): UnityEngine.Color;
            /** Completely transparent. RGBA is (0, 0, 0, 0).
            */
            public static get clear(): UnityEngine.Color;
            /** The grayscale value of the color. (Read Only)
            */
            public get grayscale(): number;
            /** A linear value of an sRGB color.
            */
            public get linear(): UnityEngine.Color;
            /** A version of the color that has had the gamma curve applied.
            */
            public get gamma(): UnityEngine.Color;
            /** Returns the maximum color component value: Max(r,g,b).
            */
            public get maxColorComponent(): number;
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string of this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Color) : boolean
            public static op_Addition ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Subtraction ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Multiply ($a: UnityEngine.Color, $b: UnityEngine.Color) : UnityEngine.Color
            public static op_Multiply ($a: UnityEngine.Color, $b: number) : UnityEngine.Color
            public static op_Multiply ($b: number, $a: UnityEngine.Color) : UnityEngine.Color
            public static op_Division ($a: UnityEngine.Color, $b: number) : UnityEngine.Color
            public static op_Equality ($lhs: UnityEngine.Color, $rhs: UnityEngine.Color) : boolean
            public static op_Inequality ($lhs: UnityEngine.Color, $rhs: UnityEngine.Color) : boolean
            /** Linearly interpolates between colors a and b by t.
            * @param $a Color a.
            * @param $b Color b.
            * @param $t Float for combining a and b.
            */
            public static Lerp ($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number) : UnityEngine.Color
            /** Linearly interpolates between colors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Color, $b: UnityEngine.Color, $t: number) : UnityEngine.Color
            public static op_Implicit ($c: UnityEngine.Color) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Color
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Calculates the hue, saturation and value of an RGB input color.
            * @param $rgbColor An input color.
            * @param $H Output variable for hue.
            * @param $S Output variable for saturation.
            * @param $V Output variable for value.
            */
            public static RGBToHSV ($rgbColor: UnityEngine.Color, $H: $Ref<number>, $S: $Ref<number>, $V: $Ref<number>) : void
            /** Creates an RGB colour from HSV input.
            * @param $H Hue [0..1].
            * @param $S Saturation [0..1].
            * @param $V Brightness value [0..1].
            * @param $hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB ($H: number, $S: number, $V: number) : UnityEngine.Color
            /** Creates an RGB colour from HSV input.
            * @param $H Hue [0..1].
            * @param $S Saturation [0..1].
            * @param $V Brightness value [0..1].
            * @param $hdr Output HDR colours. If true, the returned colour will not be clamped to [0..1].
            * @returns An opaque colour with HSV matching the input. 
            */
            public static HSVToRGB ($H: number, $S: number, $V: number, $hdr: boolean) : UnityEngine.Color
            public constructor ($r: number, $g: number, $b: number, $a: number)
            public constructor ($r: number, $g: number, $b: number)
        }
        /** Values for Camera.clearFlags, determining what to clear when rendering a Camera.
        */
        enum CameraClearFlags
        { Skybox = 1, Color = 2, SolidColor = 2, Depth = 3, Nothing = 4 }
        /** Depth texture generation mode for Camera.
        */
        enum DepthTextureMode
        { None = 0, Depth = 1, DepthNormals = 2, MotionVectors = 4 }
        /** Shader scripts used for all rendering.
        */
        class Shader extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the limit on the number of shader variant chunks Unity loads and keeps in memory.
            */
            public static get maximumChunksOverride(): number;
            public static set maximumChunksOverride(value: number);
            /** Shader LOD level for this shader.
            */
            public get maximumLOD(): number;
            public set maximumLOD(value: number);
            /** Shader LOD level for all shaders.
            */
            public static get globalMaximumLOD(): number;
            public static set globalMaximumLOD(value: number);
            /** Can this shader run on the end-users graphics card? (Read Only)
            */
            public get isSupported(): boolean;
            /** Render pipeline currently in use.
            */
            public static get globalRenderPipeline(): string;
            public static set globalRenderPipeline(value: string);
            /** An array containing the global shader keywords that are currently enabled.
            */
            public static get enabledGlobalKeywords(): System.Array$1<UnityEngine.Rendering.GlobalKeyword>;
            /** An array containing the global shader keywords that currently exist. This includes enabled and disabled global shader keywords.
            */
            public static get globalKeywords(): System.Array$1<UnityEngine.Rendering.GlobalKeyword>;
            /** The local keyword space of this shader.
            */
            public get keywordSpace(): UnityEngine.Rendering.LocalKeywordSpace;
            /** Render queue of this shader. (Read Only)
            */
            public get renderQueue(): number;
            /** Returns the number of shader passes on the active SubShader.
            */
            public get passCount(): number;
            /** Returns the number of SubShaders in this shader.
            */
            public get subshaderCount(): number;
            /** Finds a shader with the given name. Returns null if the shader is not found.
            */
            public static Find ($name: string) : UnityEngine.Shader
            /** Enables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to enable.
            */
            public static EnableKeyword ($keyword: string) : void
            /** Disables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to disable.
            */
            public static DisableKeyword ($keyword: string) : void
            /** Checks whether a global shader keyword is enabled.
            * @param $keyword The name of the Rendering.GlobalKeyword to check.
            * @returns Returns true if a global shader keyword with the given name exists, and is enabled. Otherwise, returns false. 
            */
            public static IsKeywordEnabled ($keyword: string) : boolean
            /** Enables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to enable.
            */
            public static EnableKeyword ($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>) : void
            /** Disables a global shader keyword.
            * @param $keyword The name of the Rendering.GlobalKeyword to disable.
            */
            public static DisableKeyword ($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>) : void
            /** Sets the state of a global shader keyword.
            * @param $keyword The Rendering.GlobalKeyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public static SetKeyword ($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>, $value: boolean) : void
            /** Checks whether a global shader keyword is enabled.
            * @param $keyword The Rendering.GlobalKeyword to check.
            * @returns Returns true if the given global shader keyword is enabled. Otherwise, returns false. 
            */
            public static IsKeywordEnabled ($keyword: $Ref<UnityEngine.Rendering.GlobalKeyword>) : boolean
            /** Prewarms all shader variants of all Shaders currently in memory.
            */
            public static WarmupAllShaders () : void
            /** Gets unique identifier for a shader property name.
            * @param $name Shader property name.
            * @returns Unique integer for the name. 
            */
            public static PropertyToID ($name: string) : number
            /** Returns the dependency shader.
            * @param $name The name of the dependency to query.
            */
            public GetDependency ($name: string) : UnityEngine.Shader
            /** Returns the number of passes in the given SubShader.
            * @param $subshaderIndex The index of the SubShader.
            */
            public GetPassCountInSubshader ($subshaderIndex: number) : number
            /** Searches for the tag specified by tagName on the shader's active SubShader and returns the value of the tag.
            * @param $passIndex The index of the pass.
            * @param $tagName The name of the tag.
            */
            public FindPassTagValue ($passIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            /** Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
            * @param $subshaderIndex The index of the SubShader.
            * @param $passIndex The index of the pass.
            * @param $tagName The name of the tag.
            */
            public FindPassTagValue ($subshaderIndex: number, $passIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            /** Searches for the tag specified by tagName on the SubShader specified by subshaderIndex and returns the value of the tag.
            * @param $subshaderIndex The index of the SubShader.
            * @param $tagName The name of the tag.
            */
            public FindSubshaderTagValue ($subshaderIndex: number, $tagName: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            /** This method is deprecated. Use SetGlobalFloat or SetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInt ($name: string, $value: number) : void
            /** This method is deprecated. Use SetGlobalFloat or SetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInt ($nameID: number, $value: number) : void
            /** Sets a global float property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloat ($name: string, $value: number) : void
            /** Sets a global float property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloat ($nameID: number, $value: number) : void
            /** Sets a global integer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInteger ($name: string, $value: number) : void
            /** Sets a global integer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalInteger ($nameID: number, $value: number) : void
            /** Sets a global vector property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Sets a global vector property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Sets a global color property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalColor ($name: string, $value: UnityEngine.Color) : void
            /** Sets a global color property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Sets a global matrix property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Sets a global matrix property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a global texture property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public static SetGlobalTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer ($name: string, $value: UnityEngine.GraphicsBuffer) : void
            /** Sets a global buffer property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            * @param $value The buffer to set.
            */
            public static SetGlobalBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer ($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer ($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.
            * @param $nameID The name ID of the constant buffer retrieved by Shader.PropertyToID.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public static SetGlobalConstantBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Sets a global RayTracingAccelerationStructure property for all shaders.
            * @param $name The name of the acceleration structure in shader code.
            * @param $nameID The name ID of the acceleration structure in shader code. Use Shader.PropertyToID to get this value.
            * @param $value The acceleration structure to set.
            */
            public static SetGlobalRayTracingAccelerationStructure ($name: string, $value: UnityEngine.Rendering.RayTracingAccelerationStructure) : void
            /** Sets a global RayTracingAccelerationStructure property for all shaders.
            * @param $name The name of the acceleration structure in shader code.
            * @param $nameID The name ID of the acceleration structure in shader code. Use Shader.PropertyToID to get this value.
            * @param $value The acceleration structure to set.
            */
            public static SetGlobalRayTracingAccelerationStructure ($nameID: number, $value: UnityEngine.Rendering.RayTracingAccelerationStructure) : void
            public static SetGlobalFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public static SetGlobalFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Sets a global float array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Sets a global float array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public static SetGlobalVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static SetGlobalVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Sets a global vector array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets a global vector array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public static SetGlobalMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static SetGlobalMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets a global matrix array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Sets a global matrix array property for all shaders.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static SetGlobalMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** This method is deprecated. Use GetGlobalFloat or GetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInt ($name: string) : number
            /** This method is deprecated. Use GetGlobalFloat or GetGlobalInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInt ($nameID: number) : number
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloat ($name: string) : number
            /** Gets a global float property for all shaders previously set using SetGlobalFloat.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloat ($nameID: number) : number
            /** Gets a global integer property for all shaders previously set using SetGlobalInteger.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInteger ($name: string) : number
            /** Gets a global integer property for all shaders previously set using SetGlobalInteger.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalInteger ($nameID: number) : number
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVector ($name: string) : UnityEngine.Vector4
            /** Gets a global vector property for all shaders previously set using SetGlobalVector.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVector ($nameID: number) : UnityEngine.Vector4
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalColor ($name: string) : UnityEngine.Color
            /** Gets a global color property for all shaders previously set using SetGlobalColor.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalColor ($nameID: number) : UnityEngine.Color
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Gets a global matrix property for all shaders previously set using SetGlobalMatrix.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalTexture ($name: string) : UnityEngine.Texture
            /** Gets a global texture property for all shaders previously set using SetGlobalTexture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalTexture ($nameID: number) : UnityEngine.Texture
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloatArray ($name: string) : System.Array$1<number>
            /** Gets a global float array for all shaders previously set using SetGlobalFloatArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalFloatArray ($nameID: number) : System.Array$1<number>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Gets a global vector array for all shaders previously set using SetGlobalVectorArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public static GetGlobalMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public static GetGlobalFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public static GetGlobalFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public static GetGlobalVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static GetGlobalVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public static GetGlobalMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static GetGlobalMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Returns the number of properties in this Shader.
            */
            public GetPropertyCount () : number
            /** Finds the index of a shader property by its name.
            * @param $propertyName The name of the shader property.
            */
            public FindPropertyIndex ($propertyName: string) : number
            /** Returns the name of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyName ($propertyIndex: number) : string
            /** Returns the nameId of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyNameId ($propertyIndex: number) : number
            /** Returns the ShaderPropertyType of the property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyType ($propertyIndex: number) : UnityEngine.Rendering.ShaderPropertyType
            /** Returns the description string of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDescription ($propertyIndex: number) : string
            /** Returns the ShaderPropertyFlags of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyFlags ($propertyIndex: number) : UnityEngine.Rendering.ShaderPropertyFlags
            /** Returns an array of strings containing attributes of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyAttributes ($propertyIndex: number) : System.Array$1<string>
            /** Returns the default float value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultFloatValue ($propertyIndex: number) : number
            /** Returns the default Vector4 value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultVectorValue ($propertyIndex: number) : UnityEngine.Vector4
            /** Returns the min and max limits for a <a href="Rendering.ShaderPropertyType.Range.html">Range</a> property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyRangeLimits ($propertyIndex: number) : UnityEngine.Vector2
            /** Returns the default int value of the shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyDefaultIntValue ($propertyIndex: number) : number
            /** Returns the TextureDimension of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDimension ($propertyIndex: number) : UnityEngine.Rendering.TextureDimension
            /** Returns the default Texture name of a <a href="Rendering.ShaderPropertyType.Texture.html">Texture</a> shader property at the specified index.
            * @param $propertyIndex The index of the shader property.
            */
            public GetPropertyTextureDefaultName ($propertyIndex: number) : string
            /** Find the name of a texture stack a texture belongs too.
            * @param $propertyIndex Index of the property.
            * @param $stackName On exit, contanis the name of the stack if one was found.
            * @param $layerIndex On exit, contains the stack layer index of the texture property.
            * @returns True, if a stack was found for the given texture property, false if not. 
            */
            public FindTextureStack ($propertyIndex: number, $stackName: $Ref<string>, $layerIndex: $Ref<number>) : boolean
        }
        /** Representation of 2D vectors and points.
        */
        class Vector2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector2>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            public static kEpsilon : number
            public static kEpsilonNormalSqrt : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector2;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector2(0, 0).
            */
            public static get zero(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 1).
            */
            public static get one(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, 1).
            */
            public static get up(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(0, -1).
            */
            public static get down(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(-1, 0).
            */
            public static get left(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(1, 0).
            */
            public static get right(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector2;
            /** Shorthand for writing Vector2(float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector2;
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x and y components of an existing Vector2.
            */
            public Set ($newX: number, $newY: number) : void
            /** Linearly interpolates between vectors a and b by t.
            */
            public static Lerp ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number) : UnityEngine.Vector2
            /** Linearly interpolates between vectors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2, $t: number) : UnityEngine.Vector2
            /** Moves a point current towards target.
            */
            public static MoveTowards ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $maxDistanceDelta: number) : UnityEngine.Vector2
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector2) : void
            /** Makes this vector have a magnitude of 1.
            */
            public Normalize () : void
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector2) : boolean
            /** Reflects a vector off the vector defined by a normal.
            * @param $inDirection The direction vector towards the surface.
            * @param $inNormal The normal vector that defines the surface.
            */
            public static Reflect ($inDirection: UnityEngine.Vector2, $inNormal: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            * @param $inDirection The input direction.
            * @returns The perpendicular direction. 
            */
            public static Perpendicular ($inDirection: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Dot Product of two vectors.
            */
            public static Dot ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : number
            /** Gets the unsigned angle in degrees between from and to.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The unsigned angle in degrees between the two vectors. 
            */
            public static Angle ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2) : number
            /** Gets the signed angle in degrees between from and to.
            * @param $from The vector from which the angular difference is measured.
            * @param $to The vector to which the angular difference is measured.
            * @returns The signed angle in degrees between the two vectors. 
            */
            public static SignedAngle ($from: UnityEngine.Vector2, $to: UnityEngine.Vector2) : number
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Returns a copy of vector with its magnitude clamped to maxLength.
            */
            public static ClampMagnitude ($vector: UnityEngine.Vector2, $maxLength: number) : UnityEngine.Vector2
            public static SqrMagnitude ($a: UnityEngine.Vector2) : number
            public SqrMagnitude () : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number) : UnityEngine.Vector2
            /** Gradually changes a vector towards a desired goal over time.
            * @param $current The current position.
            * @param $target The position we are trying to reach.
            * @param $currentVelocity The current velocity, this value is modified by the function every time you call it.
            * @param $smoothTime Approximately the time it will take to reach the target. A smaller value will reach the target faster.
            * @param $maxSpeed Optionally allows you to clamp the maximum speed.
            * @param $deltaTime The time since the last call to this function. By default Time.deltaTime.
            */
            public static SmoothDamp ($current: UnityEngine.Vector2, $target: UnityEngine.Vector2, $currentVelocity: $Ref<UnityEngine.Vector2>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : UnityEngine.Vector2
            public static op_Addition ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Subtraction ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Multiply ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Division ($a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_UnaryNegation ($a: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Multiply ($a: UnityEngine.Vector2, $d: number) : UnityEngine.Vector2
            public static op_Multiply ($d: number, $a: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Division ($a: UnityEngine.Vector2, $d: number) : UnityEngine.Vector2
            public static op_Equality ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector2, $rhs: UnityEngine.Vector2) : boolean
            public static op_Implicit ($v: UnityEngine.Vector3) : UnityEngine.Vector2
            public static op_Implicit ($v: UnityEngine.Vector2) : UnityEngine.Vector3
            public constructor ($x: number, $y: number)
        }
        /** A 2D Rectangle defined by X and Y position, width and height.
        */
        class Rect extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Rect>
        {
            protected [__keep_incompatibility]: never;
            /** Shorthand for writing new Rect(0,0,0,0).
            */
            public static get zero(): UnityEngine.Rect;
            /** The X coordinate of the rectangle.
            */
            public get x(): number;
            public set x(value: number);
            /** The Y coordinate of the rectangle.
            */
            public get y(): number;
            public set y(value: number);
            /** The X and Y position of the rectangle.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The position of the center of the rectangle.
            */
            public get center(): UnityEngine.Vector2;
            public set center(value: UnityEngine.Vector2);
            /** The position of the minimum corner of the rectangle.
            */
            public get min(): UnityEngine.Vector2;
            public set min(value: UnityEngine.Vector2);
            /** The position of the maximum corner of the rectangle.
            */
            public get max(): UnityEngine.Vector2;
            public set max(value: UnityEngine.Vector2);
            /** The width of the rectangle, measured from the X position.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the rectangle, measured from the Y position.
            */
            public get height(): number;
            public set height(value: number);
            /** The width and height of the rectangle.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The minimum X coordinate of the rectangle.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** The minimum Y coordinate of the rectangle.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** The maximum X coordinate of the rectangle.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** The maximum Y coordinate of the rectangle.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** Creates a rectangle from min/max coordinate values.
            * @param $xmin The minimum X coordinate.
            * @param $ymin The minimum Y coordinate.
            * @param $xmax The maximum X coordinate.
            * @param $ymax The maximum Y coordinate.
            * @returns A rectangle matching the specified coordinates. 
            */
            public static MinMaxRect ($xmin: number, $ymin: number, $xmax: number, $ymax: number) : UnityEngine.Rect
            /** Set components of an existing Rect.
            */
            public Set ($x: number, $y: number, $width: number, $height: number) : void
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param $point Point to test.
            * @param $allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector2) : boolean
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param $point Point to test.
            * @param $allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector3) : boolean
            /** Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param $point Point to test.
            * @param $allowInverse Does the test allow the Rect's width and height to be negative?
            * @returns True if the point lies within the specified rectangle. 
            */
            public Contains ($point: UnityEngine.Vector3, $allowInverse: boolean) : boolean
            /** Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param $other Other rectangle to test overlapping with.
            * @param $allowInverse Does the test allow the widths and heights of the Rects to be negative?
            */
            public Overlaps ($other: UnityEngine.Rect) : boolean
            /** Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.
            * @param $other Other rectangle to test overlapping with.
            * @param $allowInverse Does the test allow the widths and heights of the Rects to be negative?
            */
            public Overlaps ($other: UnityEngine.Rect, $allowInverse: boolean) : boolean
            /** Returns a point inside a rectangle, given normalized coordinates.
            * @param $rectangle Rectangle to get a point inside.
            * @param $normalizedRectCoordinates Normalized coordinates to get a point for.
            */
            public static NormalizedToPoint ($rectangle: UnityEngine.Rect, $normalizedRectCoordinates: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Returns the normalized coordinates cooresponding the the point.
            * @param $rectangle Rectangle to get normalized coordinates inside.
            * @param $point A point inside the rectangle to get normalized coordinates for.
            */
            public static PointToNormalized ($rectangle: UnityEngine.Rect, $point: UnityEngine.Vector2) : UnityEngine.Vector2
            public static op_Inequality ($lhs: UnityEngine.Rect, $rhs: UnityEngine.Rect) : boolean
            public static op_Equality ($lhs: UnityEngine.Rect, $rhs: UnityEngine.Rect) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Rect) : boolean
            /** Returns a formatted string for this Rect.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this Rect.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this Rect.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $width: number, $height: number)
            public constructor ($position: UnityEngine.Vector2, $size: UnityEngine.Vector2)
            public constructor ($source: UnityEngine.Rect)
        }
        /** Base class for Texture handling.
        */
        class Texture extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Can be used with Texture constructors that take a mip count to indicate that all mips should be generated.  The value of this field is -1.
            */
            public static GenerateAllMips : number
            /** How many mipmap levels are in this Texture (Read Only).
            */
            public get mipmapCount(): number;
            public static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
            public static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
            /** Returns the GraphicsFormat format or color format of a Texture object.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** Width of the Texture in pixels (Read Only).
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the Texture in pixels (Read Only).
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the Texture (Read Only).
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** Whether Unity stores an additional copy of this texture's pixel data in CPU-addressable memory.
            */
            public get isReadable(): boolean;
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Filtering mode of the Texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Defines the anisotropic filtering level of the Texture.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** The mipmap bias of the Texture.
            */
            public get mipMapBias(): number;
            public set mipMapBias(value: number);
            public get texelSize(): UnityEngine.Vector2;
            /** This counter is incremented when the Texture is updated.
            */
            public get updateCount(): number;
            /** Returns true if the texture pixel data is in sRGB color space (Read Only).
            */
            public get isDataSRGB(): boolean;
            /** The hash value of the Texture.
            */
            public get imageContentsHash(): UnityEngine.Hash128;
            public set imageContentsHash(value: UnityEngine.Hash128);
            /** The total amount of Texture memory that Unity would use if it loads all Textures at mipmap level 0.
            This is a theoretical value that does not take into account any input from the streaming system or any other input, for example when you set the`Texture2D.requestedMipmapLevel` manually.
            To see a Texture memory value that takes inputs into account, use `desiredTextureMemory`.
            `totalTextureMemory` only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get totalTextureMemory(): bigint;
            /** The total size of the Textures, in bytes, that Unity loads if there were no other constraints. Before Unity loads any Textures, it applies the which reduces the loaded Texture resolution if the Texture sizes exceed its value. The desiredTextureMemory value takes into account the mipmap levels that Unity has requested or that you have set manually.
            For example, if Unity does not load a Texture at full resolution because it is far away or its requested mipmap level is greater than 0,  Unity reduces the desiredTextureMemory value to match the total memory needed.
            The desiredTextureMemory value can be greater than the Texture.targetTextureMemory value.
            */
            public static get desiredTextureMemory(): bigint;
            /** The total amount of Texture memory that Unity allocates to the Textures in the scene after it applies the and finishes loading Textures. `targetTextureMemory`also takes mipmap streaming settings into account. This value only includes instances of Texture2D and CubeMap Textures. This value does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get targetTextureMemory(): bigint;
            /** The amount of memory that all Textures in the scene use.
            */
            public static get currentTextureMemory(): bigint;
            /** The amount of memory Unity allocates for non-streaming Textures in the scene. This only includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get nonStreamingTextureMemory(): bigint;
            /** How many times has a Texture been uploaded due to Texture mipmap streaming.
            */
            public static get streamingMipmapUploadCount(): bigint;
            /** Number of renderers registered with the Texture streaming system.
            */
            public static get streamingRendererCount(): bigint;
            /** Number of streaming Textures.
            */
            public static get streamingTextureCount(): bigint;
            /** The number of non-streaming Textures in the scene. This includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.
            */
            public static get nonStreamingTextureCount(): bigint;
            /** Number of streaming Textures with outstanding mipmaps to be loaded.
            */
            public static get streamingTexturePendingLoadCount(): bigint;
            /** Number of streaming Textures with mipmaps currently loading.
            */
            public static get streamingTextureLoadingCount(): bigint;
            /** Force streaming Textures to load all mipmap levels.
            */
            public static get streamingTextureForceLoadAll(): boolean;
            public static set streamingTextureForceLoadAll(value: boolean);
            /** This property forces the streaming Texture system to discard all unused mipmaps instead of caching them until the Texture is exceeded. This is useful when you profile or write tests to keep a predictable set of Textures in memory.
            */
            public static get streamingTextureDiscardUnusedMips(): boolean;
            public static set streamingTextureDiscardUnusedMips(value: boolean);
            /** Allow Unity internals to perform Texture creation on any thread (rather than the dedicated render thread).
            */
            public static get allowThreadedTextureCreation(): boolean;
            public static set allowThreadedTextureCreation(value: boolean);
            /** GraphicsTexture that represents the texture resource uploaded to the graphics device (Read Only).
            */
            public get graphicsTexture(): UnityEngine.Rendering.GraphicsTexture;
            /** Sets Anisotropic limits.
            */
            public static SetGlobalAnisotropicFilteringLimits ($forcedMin: number, $globalMax: number) : void
            /** Retrieve a native (underlying graphics API) pointer to the Texture resource.
            * @returns Pointer to an underlying graphics API Texture resource. 
            */
            public GetNativeTexturePtr () : System.IntPtr
            /** Increment the update counter.
            */
            public IncrementUpdateCount () : void
            /** This function sets mipmap streaming debug properties on any materials that use this Texture through the mipmap streaming system.
            */
            public static SetStreamingTextureMaterialDebugProperties () : void
        }
        /** Render textures are textures that can be rendered to.
        */
        class RenderTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The width of the render texture in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the render texture in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** Dimensionality (type) of the render texture.
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** The color format of the render texture. You can set the color format to None to achieve depth-only rendering.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set graphicsFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Render texture has mipmaps when this flag is set.
            */
            public get useMipMap(): boolean;
            public set useMipMap(value: boolean);
            /** Does this render texture use sRGB read/write conversions? (Read Only).
            */
            public get sRGB(): boolean;
            /** If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any.
            */
            public get vrUsage(): UnityEngine.VRTextureUsage;
            public set vrUsage(value: UnityEngine.VRTextureUsage);
            /** The render texture memoryless mode property.
            */
            public get memorylessMode(): UnityEngine.RenderTextureMemoryless;
            public set memorylessMode(value: UnityEngine.RenderTextureMemoryless);
            public get format(): UnityEngine.RenderTextureFormat;
            public set format(value: UnityEngine.RenderTextureFormat);
            /** The format of the stencil data that you can encapsulate within a RenderTexture.
            Specifying this property creates a stencil element for the RenderTexture and sets its format.
            This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
            This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.
            Currently, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.
            */
            public get stencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set stencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The format of the depth/stencil buffer.
            */
            public get depthStencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set depthStencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** Mipmap levels are generated automatically when this flag is set.
            */
            public get autoGenerateMips(): boolean;
            public set autoGenerateMips(value: boolean);
            /** Volume extent of a 3D render texture or number of slices of array texture.
            */
            public get volumeDepth(): number;
            public set volumeDepth(value: number);
            /** The antialiasing level for the RenderTexture.
            */
            public get antiAliasing(): number;
            public set antiAliasing(value: number);
            /** If true and antiAliasing is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
            */
            public get bindTextureMS(): boolean;
            public set bindTextureMS(value: boolean);
            /** Enable random access write into this render texture on Shader Model 5.0 level shaders.
            */
            public get enableRandomWrite(): boolean;
            public set enableRandomWrite(value: boolean);
            /** When this flag is set to true, render texture is set to be used by the.
            */
            public get useDynamicScale(): boolean;
            public set useDynamicScale(value: boolean);
            /** When this flag is set to true, render texture is set to be used by the. Scale is applied with an explicit call to ApplyDynamicScale
            */
            public get useDynamicScaleExplicit(): boolean;
            public set useDynamicScaleExplicit(value: boolean);
            public get isPowerOfTwo(): boolean;
            public set isPowerOfTwo(value: boolean);
            /** Currently active render texture.
            */
            public static get active(): UnityEngine.RenderTexture;
            public static set active(value: UnityEngine.RenderTexture);
            /** Color buffer of the render texture (Read Only).
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth/stencil buffer of the render texture (Read Only).
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** The precision of the render texture's depth buffer in bits (0, 16, 24 and 32 are supported).
            */
            public get depth(): number;
            public set depth(value: number);
            /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.
            */
            public get descriptor(): UnityEngine.RenderTextureDescriptor;
            public set descriptor(value: UnityEngine.RenderTextureDescriptor);
            /** Applies the scale.
            */
            public ApplyDynamicScale () : void
            /** Retrieve a native (underlying graphics API) pointer to the depth buffer resource.
            * @returns Pointer to an underlying graphics API depth buffer resource. 
            */
            public GetNativeDepthBufferPtr () : System.IntPtr
            /** Hint the GPU driver that the contents of the RenderTexture will not be used.
            * @param $discardColor Should the colour buffer be discarded?
            * @param $discardDepth Should the depth buffer be discarded?
            */
            public DiscardContents ($discardColor: boolean, $discardDepth: boolean) : void
            /** Hint the GPU driver that the contents of the RenderTexture will not be used.
            * @param $discardColor Should the colour buffer be discarded?
            * @param $discardDepth Should the depth buffer be discarded?
            */
            public DiscardContents () : void
            /** Force an antialiased render texture to be resolved.
            * @param $target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
            */
            public ResolveAntiAliasedSurface () : void
            /** Force an antialiased render texture to be resolved.
            * @param $target The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.
            */
            public ResolveAntiAliasedSurface ($target: UnityEngine.RenderTexture) : void
            /** Assigns this RenderTexture as a global shader property named propertyName.
            */
            public SetGlobalShaderProperty ($propertyName: string) : void
            /** Actually creates the RenderTexture.
            * @returns True if the texture is created, else false. 
            */
            public Create () : boolean
            /** Releases the RenderTexture.
            */
            public Release () : void
            /** Is the render texture actually created?
            */
            public IsCreated () : boolean
            /** Generate mipmap levels of a render texture.
            */
            public GenerateMips () : void
            public ConvertToEquirect ($equirect: UnityEngine.RenderTexture, $eye?: UnityEngine.Camera.MonoOrStereoscopicEye) : void
            /** Does a RenderTexture have stencil buffer?
            * @param $rt Render texture, or null for main screen.
            */
            public static SupportsStencil ($rt: UnityEngine.RenderTexture) : boolean
            /** Release a temporary texture allocated with GetTemporary.
            */
            public static ReleaseTemporary ($temp: UnityEngine.RenderTexture) : void
            /** Allocate a temporary render texture.
            * @param $width Width in pixels.
            * @param $height Height in pixels.
            * @param $depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param $format Render texture format.
            * @param $readWrite Color space conversion mode.
            * @param $antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param $memorylessMode Render texture memoryless mode.
            * @param $vrUsage How Unity uses the RenderTexture as a VR eye texture. The default is VRTextureUsage.None.
            * @param $useDynamicScale Determines whether Unity scales the render texture using. The default is false.
            * @param $desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary ($desc: UnityEngine.RenderTextureDescriptor) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $antiAliasing: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat) : UnityEngine.RenderTexture
            /** Allocate a temporary render texture.
            * @param $width Width in pixels.
            * @param $height Height in pixels.
            * @param $depthBuffer Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.
            * @param $format Render texture format.
            * @param $readWrite Color space conversion mode.
            * @param $antiAliasing Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.
            * @param $memorylessMode Render texture memoryless mode.
            * @param $vrUsage How Unity uses the RenderTexture as a VR eye texture. The default is VRTextureUsage.None.
            * @param $useDynamicScale Determines whether Unity scales the render texture using. The default is false.
            * @param $desc Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.
            */
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage, $useDynamicScale: boolean) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless, $vrUsage: UnityEngine.VRTextureUsage) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number, $memorylessMode: UnityEngine.RenderTextureMemoryless) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite, $antiAliasing: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number, $format: UnityEngine.RenderTextureFormat) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number, $depthBuffer: number) : UnityEngine.RenderTexture
            public static GetTemporary ($width: number, $height: number) : UnityEngine.RenderTexture
            public constructor ($desc: UnityEngine.RenderTextureDescriptor)
            public constructor ($textureToCopy: UnityEngine.RenderTexture)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $depth: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor ()
        }
        /** Color or depth buffer part of a RenderTexture.
        */
        class RenderBuffer extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Returns native RenderBuffer. Be warned this is not native Texture, but rather pointer to unity struct that can be used with native unity API. Currently such API exists only on iOS.
            */
            public GetNativeRenderBufferPtr () : System.IntPtr
        }
        /** Representation of four-dimensional vectors.
        */
        class Vector4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector4>
        {
            protected [__keep_incompatibility]: never;
            public static kEpsilon : number
            /** X component of the vector.
            */
            public x : number
            /** Y component of the vector.
            */
            public y : number
            /** Z component of the vector.
            */
            public z : number
            /** W component of the vector.
            */
            public w : number
            /** Returns this vector with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Vector4;
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector4(0,0,0,0).
            */
            public static get zero(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(1,1,1,1).
            */
            public static get one(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            */
            public static get positiveInfinity(): UnityEngine.Vector4;
            /** Shorthand for writing Vector4(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            */
            public static get negativeInfinity(): UnityEngine.Vector4;
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y, z and w components of an existing Vector4.
            */
            public Set ($newX: number, $newY: number, $newZ: number, $newW: number) : void
            /** Linearly interpolates between two vectors.
            */
            public static Lerp ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4, $t: number) : UnityEngine.Vector4
            /** Linearly interpolates between two vectors.
            */
            public static LerpUnclamped ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4, $t: number) : UnityEngine.Vector4
            /** Moves a point current towards target.
            */
            public static MoveTowards ($current: UnityEngine.Vector4, $target: UnityEngine.Vector4, $maxDistanceDelta: number) : UnityEngine.Vector4
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector4) : void
            /** Returns true if the given vector is exactly equal to this vector.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector4) : boolean
            public static Normalize ($a: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Makes this vector have a magnitude of 1.
            */
            public Normalize () : void
            /** Dot Product of two vectors.
            */
            public static Dot ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : number
            /** Projects a vector onto another vector.
            */
            public static Project ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : number
            public static Magnitude ($a: UnityEngine.Vector4) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Addition ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Subtraction ($a: UnityEngine.Vector4, $b: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_UnaryNegation ($a: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Multiply ($a: UnityEngine.Vector4, $d: number) : UnityEngine.Vector4
            public static op_Multiply ($d: number, $a: UnityEngine.Vector4) : UnityEngine.Vector4
            public static op_Division ($a: UnityEngine.Vector4, $d: number) : UnityEngine.Vector4
            public static op_Equality ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector4, $rhs: UnityEngine.Vector4) : boolean
            public static op_Implicit ($v: UnityEngine.Vector3) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Vector3
            public static op_Implicit ($v: UnityEngine.Vector2) : UnityEngine.Vector4
            public static op_Implicit ($v: UnityEngine.Vector4) : UnityEngine.Vector2
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static SqrMagnitude ($a: UnityEngine.Vector4) : number
            public SqrMagnitude () : number
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $y: number)
        }
        /** Representation of rays.
        */
        class Ray extends System.ValueType implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            /** The origin point of the ray.
            */
            public get origin(): UnityEngine.Vector3;
            public set origin(value: UnityEngine.Vector3);
            /** The direction of the ray.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** Returns a point at distance units along the ray.
            */
            public GetPoint ($distance: number) : UnityEngine.Vector3
            /** Returns a formatted string for this ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3)
        }
        /** Enum values for the Camera's targetEye property.
        */
        enum StereoTargetEyeMask
        { None = 0, Left = 1, Right = 2, Both = 3 }
        /** Class for handling cube maps, Use this to create or modify existing.
        */
        class Cubemap extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Updates Unity cubemap to use different native cubemap texture object.
            * @param $nativeTexture Native cubemap texture object.
            */
            public UpdateExternalTexture ($nativeTexture: System.IntPtr) : void
            /** Performs smoothing of near edge regions.
            * @param $smoothRegionWidthInPixels Pixel distance at edges over which to apply smoothing.
            */
            public SmoothEdges ($smoothRegionWidthInPixels: number) : void
            public SmoothEdges () : void
            /** Gets the pixel color data for a mipmap level of a face as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($face: UnityEngine.CubemapFace, $miplevel: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($face: UnityEngine.CubemapFace) : System.Array$1<UnityEngine.Color>
            /** Sets the pixel colors of an entire mipmap level of a face.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level of a face.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace) : void
            /** Resets the requestedMipmapLevel field.
            */
            public ClearRequestedMipmapLevel () : void
            /** Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
            * @returns True if the mipmap level requested by requestedMipmapLevel has finished loading. 
            */
            public IsRequestedMipmapLevelLoaded () : boolean
            /** Creates a Unity cubemap out of externally created native cubemap object.
            * @param $size The width and height of each face of the cubemap should be the same.
            * @param $format Format of underlying cubemap object.
            * @param $mipmap Does the cubemap have mipmaps?
            * @param $nativeTex Native cubemap texture object.
            */
            public static CreateExternalTexture ($width: number, $format: UnityEngine.TextureFormat, $mipmap: boolean, $nativeTex: System.IntPtr) : UnityEngine.Cubemap
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write to.
            */
            public SetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number, $color: UnityEngine.Color) : void
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write to.
            */
            public SetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number, $color: UnityEngine.Color, $mip: number) : void
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mip The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to sample.
            * @returns The pixel color. 
            */
            public GetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number) : UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mip The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to sample.
            * @returns The pixel color. 
            */
            public GetPixel ($face: UnityEngine.CubemapFace, $x: number, $y: number, $mip: number) : UnityEngine.Color
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ($width: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $format: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $format: UnityEngine.TextureFormat, $mipCount: number, $createUninitialized: boolean)
            public constructor ()
        }
        /** Describes a single bounding sphere for use by a CullingGroup.
        */
        class BoundingSphere extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The position of the center of the BoundingSphere.
            */
            public position : UnityEngine.Vector3
            /** The radius of the BoundingSphere.
            */
            public radius : number
            public constructor ($pos: UnityEngine.Vector3, $rad: number)
            public constructor ($packedSphere: UnityEngine.Vector4)
        }
        /** Provides information about the current and previous states of one sphere in a CullingGroup.
        */
        class CullingGroupEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The index of the sphere that has changed.
            */
            public get index(): number;
            /** Was the sphere considered visible by the most recent culling pass?
            */
            public get isVisible(): boolean;
            /** Was the sphere visible before the most recent culling pass?
            */
            public get wasVisible(): boolean;
            /** Did this sphere change from being invisible to being visible in the most recent culling pass?
            */
            public get hasBecomeVisible(): boolean;
            /** Did this sphere change from being visible to being invisible in the most recent culling pass?
            */
            public get hasBecomeInvisible(): boolean;
            /** The current distance band index of the sphere, after the most recent culling pass.
            */
            public get currentDistance(): number;
            /** The distance band index of the sphere before the most recent culling pass.
            */
            public get previousDistance(): number;
        }
        /** Describes a set of bounding spheres that should have their visibility and distances maintained.
        */
        class CullingGroup extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Sets the callback that will be called when a sphere's visibility and/or distance state has changed.
            */
            public get onStateChanged(): UnityEngine.CullingGroup.StateChanged;
            public set onStateChanged(value: UnityEngine.CullingGroup.StateChanged);
            /** Pauses culling group execution.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Locks the CullingGroup to a specific camera.
            */
            public get targetCamera(): UnityEngine.Camera;
            public set targetCamera(value: UnityEngine.Camera);
            /** Clean up all memory used by the CullingGroup immediately.
            */
            public Dispose () : void
            /** Sets the array of bounding sphere definitions that the CullingGroup should compute culling for.
            * @param $array The BoundingSpheres to cull.
            */
            public SetBoundingSpheres ($array: System.Array$1<UnityEngine.BoundingSphere>) : void
            /** Sets the number of bounding spheres in the bounding spheres array that are actually being used.
            * @param $count The number of bounding spheres being used.
            */
            public SetBoundingSphereCount ($count: number) : void
            /** Erase a given bounding sphere by moving the final sphere on top of it.
            * @param $index The index of the entry to erase.
            */
            public EraseSwapBack ($index: number) : void
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($visible: boolean, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Retrieve the indices of spheres that have particular visibility and/or distance states.
            * @param $visible True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.
            * @param $distanceIndex The distance band that retrieved spheres must be in.
            * @param $result An array that will be filled with the retrieved sphere indices.
            * @param $firstIndex The index of the sphere to begin searching at.
            * @returns The number of sphere indices found and written into the result array. 
            */
            public QueryIndices ($visible: boolean, $distanceIndex: number, $result: System.Array$1<number>, $firstIndex: number) : number
            /** Returns true if the bounding sphere at index is currently visible from any of the contributing cameras.
            * @param $index The index of the bounding sphere.
            * @returns True if the sphere is visible; false if it is invisible. 
            */
            public IsVisible ($index: number) : boolean
            /** Get the current distance band index of a given sphere.
            * @param $index The index of the sphere.
            * @returns The sphere's current distance band index. 
            */
            public GetDistance ($index: number) : number
            /** Set bounding distances for 'distance bands' the group should compute, as well as options for how spheres falling into each distance band should be treated.
            * @param $distances An array of bounding distances. The distances should be sorted in increasing order.
            */
            public SetBoundingDistances ($distances: System.Array$1<number>) : void
            /** Set the reference point from which distance bands are measured.
            * @param $point A fixed point to measure the distance from.
            * @param $transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint ($point: UnityEngine.Vector3) : void
            /** Set the reference point from which distance bands are measured.
            * @param $point A fixed point to measure the distance from.
            * @param $transform A transform to measure the distance from. The transform's position will be automatically tracked.
            */
            public SetDistanceReferencePoint ($transform: UnityEngine.Transform) : void
            public constructor ()
        }
        /** Position, rotation and scale of an object.
        */
        class Transform extends UnityEngine.Component implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The world space position of the Transform.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** Position of the transform relative to the parent transform.
            */
            public get localPosition(): UnityEngine.Vector3;
            public set localPosition(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees.
            */
            public get eulerAngles(): UnityEngine.Vector3;
            public set eulerAngles(value: UnityEngine.Vector3);
            /** The rotation as Euler angles in degrees relative to the parent transform's rotation.
            */
            public get localEulerAngles(): UnityEngine.Vector3;
            public set localEulerAngles(value: UnityEngine.Vector3);
            /** The red axis of the transform in world space.
            */
            public get right(): UnityEngine.Vector3;
            public set right(value: UnityEngine.Vector3);
            /** The green axis of the transform in world space.
            */
            public get up(): UnityEngine.Vector3;
            public set up(value: UnityEngine.Vector3);
            /** Returns a normalized vector representing the blue axis of the transform in world space.
            */
            public get forward(): UnityEngine.Vector3;
            public set forward(value: UnityEngine.Vector3);
            /** A Quaternion that stores the rotation of the Transform in world space.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The rotation of the transform relative to the transform rotation of the parent.
            */
            public get localRotation(): UnityEngine.Quaternion;
            public set localRotation(value: UnityEngine.Quaternion);
            /** The scale of the transform relative to the GameObjects parent.
            */
            public get localScale(): UnityEngine.Vector3;
            public set localScale(value: UnityEngine.Vector3);
            /** The parent of the transform.
            */
            public get parent(): UnityEngine.Transform;
            public set parent(value: UnityEngine.Transform);
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** Returns the topmost transform in the hierarchy.
            */
            public get root(): UnityEngine.Transform;
            /** The number of children the parent Transform has.
            */
            public get childCount(): number;
            /** The global scale of the object (Read Only).
            */
            public get lossyScale(): UnityEngine.Vector3;
            /** Has the transform changed since the last time the flag was set to 'false'?
            */
            public get hasChanged(): boolean;
            public set hasChanged(value: boolean);
            /** The transform capacity of the transform's hierarchy data structure.
            */
            public get hierarchyCapacity(): number;
            public set hierarchyCapacity(value: number);
            /** The number of transforms in the transform's hierarchy data structure.
            */
            public get hierarchyCount(): number;
            /** Set the parent of the transform.
            * @param $parent The parent Transform to use.
            * @param $worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent ($p: UnityEngine.Transform) : void
            /** Set the parent of the transform.
            * @param $parent The parent Transform to use.
            * @param $worldPositionStays If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.
            */
            public SetParent ($parent: UnityEngine.Transform, $worldPositionStays: boolean) : void
            /** Sets the world space position and rotation of the Transform component.
            */
            public SetPositionAndRotation ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Sets the position and rotation of the Transform component in local space (i.e. relative to its parent transform).
            */
            public SetLocalPositionAndRotation ($localPosition: UnityEngine.Vector3, $localRotation: UnityEngine.Quaternion) : void
            /** Gets the position and rotation of the Transform component in world space.
            */
            public GetPositionAndRotation ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>) : void
            /** Gets the position and rotation of the Transform component in local space (that is, relative to its parent transform).
            */
            public GetLocalPositionAndRotation ($localPosition: $Ref<UnityEngine.Vector3>, $localRotation: $Ref<UnityEngine.Quaternion>) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Space) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Space) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number) : void
            /** Moves the transform in the direction and distance of translation.
            */
            public Translate ($translation: UnityEngine.Vector3, $relativeTo: UnityEngine.Transform) : void
            /** Moves the transform by x along the x axis, y along the y axis, and z along the z axis.
            */
            public Translate ($x: number, $y: number, $z: number, $relativeTo: UnityEngine.Transform) : void
            /** Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).
            * @param $eulers The rotation to apply in euler angles.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to  the GameObject or relative to the Scene in world space.
            */
            public Rotate ($eulers: UnityEngine.Vector3, $relativeTo: UnityEngine.Space) : void
            /** Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).
            * @param $eulers The rotation to apply in euler angles.
            */
            public Rotate ($eulers: UnityEngine.Vector3) : void
            /** The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).
            * @param $xAngle Degrees to rotate the GameObject around the X axis.
            * @param $yAngle Degrees to rotate the GameObject around the Y axis.
            * @param $zAngle Degrees to rotate the GameObject around the Z axis.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            */
            public Rotate ($xAngle: number, $yAngle: number, $zAngle: number, $relativeTo: UnityEngine.Space) : void
            /** The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).
            * @param $xAngle Degrees to rotate the GameObject around the X axis.
            * @param $yAngle Degrees to rotate the GameObject around the Y axis.
            * @param $zAngle Degrees to rotate the GameObject around the Z axis.
            */
            public Rotate ($xAngle: number, $yAngle: number, $zAngle: number) : void
            /** Rotates the object around the given axis by the number of degrees defined by the given angle.
            * @param $axis The axis to apply rotation to.
            * @param $angle The degrees of rotation to apply.
            * @param $relativeTo Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.
            */
            public Rotate ($axis: UnityEngine.Vector3, $angle: number, $relativeTo: UnityEngine.Space) : void
            /** Rotates the object around the given axis by the number of degrees defined by the given angle.
            * @param $axis The axis to apply rotation to.
            * @param $angle The degrees of rotation to apply.
            */
            public Rotate ($axis: UnityEngine.Vector3, $angle: number) : void
            /** Rotates the transform about axis passing through point in world coordinates by angle degrees.
            */
            public RotateAround ($point: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $angle: number) : void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param $target Object to point towards.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt ($target: UnityEngine.Transform, $worldUp: UnityEngine.Vector3) : void
            /** Rotates the transform so the forward vector points at target's current position.
            * @param $target Object to point towards.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt ($target: UnityEngine.Transform) : void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param $worldPosition Point to look at.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt ($worldPosition: UnityEngine.Vector3, $worldUp: UnityEngine.Vector3) : void
            /** Rotates the transform so the forward vector points at worldPosition.
            * @param $worldPosition Point to look at.
            * @param $worldUp Vector specifying the upward direction.
            */
            public LookAt ($worldPosition: UnityEngine.Vector3) : void
            /** Transforms direction from local space to world space.
            */
            public TransformDirection ($direction: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms direction x, y, z from local space to world space.
            */
            public TransformDirection ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection ($direction: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.
            */
            public InverseTransformDirection ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms vector from local space to world space.
            */
            public TransformVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms vector x, y, z from local space to world space.
            */
            public TransformVector ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms a vector from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector ($vector: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the vector x, y, z from world space to local space. The opposite of Transform.TransformVector.
            */
            public InverseTransformVector ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms position from local space to world space.
            */
            public TransformPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the position x, y, z from local space to world space.
            */
            public TransformPoint ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Transforms position from world space to local space.
            */
            public InverseTransformPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Transforms the position x, y, z from world space to local space.
            */
            public InverseTransformPoint ($x: number, $y: number, $z: number) : UnityEngine.Vector3
            /** Unparents all children.
            */
            public DetachChildren () : void
            /** Move the transform to the start of the local transform list.
            */
            public SetAsFirstSibling () : void
            /** Move the transform to the end of the local transform list.
            */
            public SetAsLastSibling () : void
            /** Sets the sibling index.
            * @param $index Index to set.
            */
            public SetSiblingIndex ($index: number) : void
            /** Gets the sibling index.
            */
            public GetSiblingIndex () : number
            /** Finds a child by name n and returns it.
            * @param $n The search string, either the name of an immediate child or a hierarchy path for finding a descendent.
            * @returns The found child transform. Null if child with matching name isn't found. 
            */
            public Find ($n: string) : UnityEngine.Transform
            /** Is this transform a child of parent?
            */
            public IsChildOf ($parent: UnityEngine.Transform) : boolean
            public GetEnumerator () : System.Collections.IEnumerator
            /** Returns a transform child by index.
            * @param $index Index of the child transform to return. Must be smaller than Transform.childCount.
            * @returns Transform child by index. 
            */
            public GetChild ($index: number) : UnityEngine.Transform
        }
        /** FlareLayer component.
        */
        class FlareLayer extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
        }
        /** The reflection probe is used to capture the surroundings into a texture which is passed to the shaders and used for reflections.
        */
        class ReflectionProbe extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The size of the probe's bounding box in which the probe can contribute to reflections. The size is in world space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The center of the probe's bounding box in which the probe can contribute to reflections. The center is relative to the position of the probe.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The near clipping plane distance when rendering the probe.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance when rendering the probe.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The intensity modifier that is applied to the texture of reflection probe in the shader.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The probe's world space axis-aligned bounding box in which the probe can contribute to reflections (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Should this reflection probe use HDR rendering?
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            /** Specifies whether Unity should render non-static GameObjects into the Reflection Probe. If you set this to true, Unity renders non-static GameObjects into the Reflection Probe. If you set this to false, Unity does not render non-static GameObjects into the Reflection Probe. Unity only takes this property into account if the Reflection Probe's Type is Custom.
            */
            public get renderDynamicObjects(): boolean;
            public set renderDynamicObjects(value: boolean);
            /** Shadow drawing distance when rendering the probe.
            */
            public get shadowDistance(): number;
            public set shadowDistance(value: number);
            /** Resolution of the underlying reflection texture in pixels.
            */
            public get resolution(): number;
            public set resolution(value: number);
            /** This is used to render parts of the reflecion probe's surrounding selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** How the reflection probe clears the background.
            */
            public get clearFlags(): UnityEngine.Rendering.ReflectionProbeClearFlags;
            public set clearFlags(value: UnityEngine.Rendering.ReflectionProbeClearFlags);
            /** The color with which the texture of reflection probe will be cleared.
            */
            public get backgroundColor(): UnityEngine.Color;
            public set backgroundColor(value: UnityEngine.Color);
            /** Distance around probe used for blending (used in deferred probes).
            */
            public get blendDistance(): number;
            public set blendDistance(value: number);
            /** Should this reflection probe use box projection?
            */
            public get boxProjection(): boolean;
            public set boxProjection(value: boolean);
            /** Should reflection probe texture be generated in the Editor (ReflectionProbeMode.Baked) or should probe use custom specified texure (ReflectionProbeMode.Custom)?
            */
            public get mode(): UnityEngine.Rendering.ReflectionProbeMode;
            public set mode(value: UnityEngine.Rendering.ReflectionProbeMode);
            /** Reflection probe importance.
            */
            public get importance(): number;
            public set importance(value: number);
            /** Sets the way the probe will refresh.
            Additional resources: ReflectionProbeRefreshMode.
            */
            public get refreshMode(): UnityEngine.Rendering.ReflectionProbeRefreshMode;
            public set refreshMode(value: UnityEngine.Rendering.ReflectionProbeRefreshMode);
            /** Sets this probe time-slicing mode
            Additional resources: ReflectionProbeTimeSlicingMode.
            */
            public get timeSlicingMode(): UnityEngine.Rendering.ReflectionProbeTimeSlicingMode;
            public set timeSlicingMode(value: UnityEngine.Rendering.ReflectionProbeTimeSlicingMode);
            /** Reference to the baked texture of the reflection probe's surrounding.
            */
            public get bakedTexture(): UnityEngine.Texture;
            public set bakedTexture(value: UnityEngine.Texture);
            /** Reference to the baked texture of the reflection probe's surrounding. Use this to assign custom reflection texture.
            */
            public get customBakedTexture(): UnityEngine.Texture;
            public set customBakedTexture(value: UnityEngine.Texture);
            /** Reference to the real-time texture of the reflection probe's surroundings. Use this to assign a RenderTexture to use for real-time reflection.
            */
            public get realtimeTexture(): UnityEngine.RenderTexture;
            public set realtimeTexture(value: UnityEngine.RenderTexture);
            /** Texture which is passed to the shader of the objects in the vicinity of the reflection probe (Read Only).
            */
            public get texture(): UnityEngine.Texture;
            /** HDR decode values of the reflection probe texture.
            */
            public get textureHDRDecodeValues(): UnityEngine.Vector4;
            public static get minBakedCubemapResolution(): number;
            public static get maxBakedCubemapResolution(): number;
            /** HDR decode values of the default reflection probe texture.
            */
            public static get defaultTextureHDRDecodeValues(): UnityEngine.Vector4;
            /** The surface texture of the default reflection probe that captures the environment contribution. Read only.
            */
            public static get defaultTexture(): UnityEngine.Texture;
            /** Revert all ReflectionProbe parameters to default.
            */
            public Reset () : void
            public RenderProbe () : number
            /** Refreshes the probe's cubemap.
            * @param $targetTexture Target RenderTexture in which rendering should be done. Specifying null will update the probe's default texture.
            * @returns 
            An integer representing a RenderID which can subsequently be used to check if the probe has finished rendering while rendering in time-slice mode.
            Additional resources: IsFinishedRendering
            Additional resources: timeSlicingMode
            */
            public RenderProbe ($targetTexture: UnityEngine.RenderTexture) : number
            /** Checks if a probe has finished a time-sliced render.
            * @param $renderId An integer representing the RenderID as returned by the RenderProbe method.
            * @returns 
            True if the render has finished, false otherwise.
            Additional resources: timeSlicingMode
            */
            public IsFinishedRendering ($renderId: number) : boolean
            /** Utility method to blend 2 cubemaps into a target render texture.
            * @param $src Cubemap to blend from.
            * @param $dst Cubemap to blend to.
            * @param $blend Blend weight.
            * @param $target RenderTexture which will hold the result of the blend.
            * @returns Returns trues if cubemaps were blended, false otherwise. 
            */
            public static BlendCubemap ($src: UnityEngine.Texture, $dst: UnityEngine.Texture, $blend: number, $target: UnityEngine.RenderTexture) : boolean
            /** Updates the culling system with the ReflectionProbe's current state. This ensures that Unity correctly culls the ReflectionProbe during rendering if you implement your own runtime reflection system.
            */
            public static UpdateCachedState () : void
            public static add_reflectionProbeChanged ($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>) : void
            public static remove_reflectionProbeChanged ($value: System.Action$2<UnityEngine.ReflectionProbe, UnityEngine.ReflectionProbe.ReflectionProbeEvent>) : void
            public static add_defaultReflectionSet ($value: System.Action$1<UnityEngine.Cubemap>) : void
            public static remove_defaultReflectionSet ($value: System.Action$1<UnityEngine.Cubemap>) : void
            public static add_defaultReflectionTexture ($value: System.Action$1<UnityEngine.Texture>) : void
            public static remove_defaultReflectionTexture ($value: System.Action$1<UnityEngine.Texture>) : void
            public constructor ()
        }
        /** Represents an axis aligned bounding box.
        */
        class Bounds extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Bounds>
        {
            protected [__keep_incompatibility]: never;
            /** The center of the bounding box.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The total size of the box. This is always twice as large as the extents.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            /** The extents of the Bounding Box. This is always half of the size of the Bounds.
            */
            public get extents(): UnityEngine.Vector3;
            public set extents(value: UnityEngine.Vector3);
            /** The minimal point of the box. This is always equal to center-extents.
            */
            public get min(): UnityEngine.Vector3;
            public set min(value: UnityEngine.Vector3);
            /** The maximal point of the box. This is always equal to center+extents.
            */
            public get max(): UnityEngine.Vector3;
            public set max(value: UnityEngine.Vector3);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Bounds) : boolean
            public static op_Equality ($lhs: UnityEngine.Bounds, $rhs: UnityEngine.Bounds) : boolean
            public static op_Inequality ($lhs: UnityEngine.Bounds, $rhs: UnityEngine.Bounds) : boolean
            /** Sets the bounds to the min and max value of the box.
            */
            public SetMinMax ($min: UnityEngine.Vector3, $max: UnityEngine.Vector3) : void
            /** Grows the Bounds to include the point.
            */
            public Encapsulate ($point: UnityEngine.Vector3) : void
            /** Grow the bounds to encapsulate the bounds.
            */
            public Encapsulate ($bounds: UnityEngine.Bounds) : void
            /** Expand the bounds by increasing its size by amount along each side.
            */
            public Expand ($amount: number) : void
            /** Expand the bounds by increasing its size by amount along each side.
            */
            public Expand ($amount: UnityEngine.Vector3) : void
            /** Does another bounding box intersect with this bounding box?
            */
            public Intersects ($bounds: UnityEngine.Bounds) : boolean
            /** Does ray intersect this bounding box?
            */
            public IntersectRay ($ray: UnityEngine.Ray) : boolean
            /** Does ray intersect this bounding box?
            */
            public IntersectRay ($ray: UnityEngine.Ray, $distance: $Ref<number>) : boolean
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            /** Is point contained in the bounding box?
            */
            public Contains ($point: UnityEngine.Vector3) : boolean
            /** The smallest squared distance between the point and this bounding box.
            */
            public SqrDistance ($point: UnityEngine.Vector3) : number
            /** The closest point on the bounding box.
            * @param $point Arbitrary point.
            * @returns The point on the bounding box or inside the bounding box. 
            */
            public ClosestPoint ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            public constructor ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3)
        }
        /** Holds data for a single application crash event and provides access to all gathered crash reports.
        */
        class CrashReport extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Time, when the crash occured.
            */
            public time : System.DateTime
            /** Crash report data as formatted text.
            */
            public text : string
            /** Returns all currently available reports in a new array.
            */
            public static get reports(): System.Array$1<UnityEngine.CrashReport>;
            /** Returns last crash report, or null if no reports are available.
            */
            public static get lastReport(): UnityEngine.CrashReport;
            /** Remove all reports from available reports list.
            */
            public static RemoveAll () : void
            /** Remove report from available reports list.
            */
            public Remove () : void
        }
        /** Class containing methods to ease debugging while developing a game.
        */
        class Debug extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get default debug logger.
            */
            public static get unityLogger(): UnityEngine.ILogger;
            /** Allows you to enable or disable the developer console.
            */
            public static get developerConsoleEnabled(): boolean;
            public static set developerConsoleEnabled(value: boolean);
            /** Controls whether the development console is visible.
            */
            public static get developerConsoleVisible(): boolean;
            public static set developerConsoleVisible(value: boolean);
            /** In the Build Settings dialog there is a check box called "Development Build".
            */
            public static get isDebugBuild(): boolean;
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number) : void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color) : void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3) : void
            /** Draws a line between specified start and end points.
            * @param $start Point in world space where the line should start.
            * @param $end Point in world space where the line should end.
            * @param $color Color of the line.
            * @param $duration How long the line should be visible for.
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawLine ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3) : void
            /** Draws a line from start to start + dir in world coordinates.
            * @param $start Point in world space where the ray should start.
            * @param $dir Direction and length of the ray.
            * @param $color Color of the drawn line.
            * @param $duration How long the line will be visible for (in seconds).
            * @param $depthTest Determines whether objects closer to the camera obscure the line.
            */
            public static DrawRay ($start: UnityEngine.Vector3, $dir: UnityEngine.Vector3, $color: UnityEngine.Color, $duration: number, $depthTest: boolean) : void
            /** Pauses the editor.
            */
            public static Break () : void
            public static DebugBreak () : void
            /** Logs a message to the Unity Console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static Log ($message: any) : void
            /** Logs a message to the Unity Console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static Log ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Logs a formatted message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            * @param $logType Type of message e.g. warn or error etc.
            * @param $logOptions Option flags to treat the log message special.
            */
            public static LogFormat ($logType: UnityEngine.LogType, $logOptions: UnityEngine.LogOption, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogError ($message: any) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogError ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted error message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogErrorFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted error message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogErrorFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Clears errors from the developer console.
            */
            public static ClearDeveloperConsole () : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $context Object to which the message applies.
            * @param $exception Runtime Exception.
            */
            public static LogException ($exception: System.Exception) : void
            /** A variant of Debug.Log that logs an error message to the console.
            * @param $context Object to which the message applies.
            * @param $exception Runtime Exception.
            */
            public static LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogWarning ($message: any) : void
            /** A variant of Debug.Log that logs a warning message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogWarning ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted warning message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogWarningFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted warning message to the Unity Console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogWarningFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $context: UnityEngine.Object) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $message: any) : void
            public static Assert ($condition: boolean, $message: string) : void
            /** Assert a condition and logs an error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $context Object to which the message applies.
            * @param $message String or object to be converted to string representation for display.
            */
            public static Assert ($condition: boolean, $message: any, $context: UnityEngine.Object) : void
            public static Assert ($condition: boolean, $message: string, $context: UnityEngine.Object) : void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static AssertFormat ($condition: boolean, $format: string, ...args: any[]) : void
            /** Assert a condition and logs a formatted error message to the Unity console on failure.
            * @param $condition Condition you expect to be true.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static AssertFormat ($condition: boolean, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogAssertion ($message: any) : void
            /** A variant of Debug.Log that logs an assertion message to the console.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public static LogAssertion ($message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted assertion message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogAssertionFormat ($format: string, ...args: any[]) : void
            /** Logs a formatted assertion message to the Unity console.
            * @param $format A composite format string.
            * @param $args Format arguments.
            * @param $context Object to which the message applies.
            */
            public static LogAssertionFormat ($context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** Returns any captured startup logs
            */
            public static RetrieveStartupLogs () : System.Array$1<UnityEngine.Debug.StartupLog>
            public constructor ()
        }
        interface ILogger extends UnityEngine.ILogHandler
        {
            /** Set Logger.ILogHandler.
            */
            logHandler : UnityEngine.ILogHandler
            /** To runtime toggle debug logging [ON/OFF].
            */
            logEnabled : boolean
            /** To selective enable debug log message.
            */
            filterLogType : UnityEngine.LogType
            /** Check logging is enabled based on the LogType.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            IsLogTypeAllowed ($logType: UnityEngine.LogType) : boolean
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            */
            Log ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an warning message.
            */
            LogWarning ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError ($tag: string, $message: any) : void
            /** A variant of ILogger.Log that logs an error message.
            */
            LogError ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs a formatted message.
            */
            LogFormat ($logType: UnityEngine.LogType, $format: string, ...args: any[]) : void
            /** A variant of ILogger.Log that logs an exception message.
            */
            LogException ($exception: System.Exception) : void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
        }
        interface ILogHandler
        {
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            /** A variant of ILogHandler.LogFormat that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
        }
        /** Object that is used to resolve references to an ExposedReference field.
        */
        class ExposedPropertyResolver extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface IExposedPropertyTable
        {
            /** Assigns a value for an ExposedReference.
            * @param $id Identifier of the ExposedReference.
            * @param $value The value to assigned to the ExposedReference.
            */
            SetReferenceValue ($id: UnityEngine.PropertyName, $value: UnityEngine.Object) : void
            /** Retrieves a value for the given identifier.
            * @param $id Identifier of the ExposedReference.
            * @param $idValid Is the identifier valid?
            * @returns The value stored in the table. 
            */
            GetReferenceValue ($id: UnityEngine.PropertyName, $idValid: $Ref<boolean>) : UnityEngine.Object
            /** Remove a value for the given reference.
            * @param $id Identifier of the ExposedReference.
            */
            ClearReferenceValue ($id: UnityEngine.PropertyName) : void
        }
        /** Represents a string as an int for efficient lookup and comparison. Use this for common PropertyNames.
        Internally stores just an int to represent the string. A PropertyName can be created from a string but can not be converted back to a string. The same string always results in the same int representing that string. Thus this is a very efficient string representation in both memory and speed when all you need is comparison.
        PropertyName is serializable.
        ToString() is only implemented for debugging purposes in the editor it returns "theName:3737" in the player it returns "Unknown:3737".
        */
        class PropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.PropertyName>
        {
            protected [__keep_incompatibility]: never;
            /** Indicates whether the specified PropertyName is an Empty string.
            */
            public static IsNullOrEmpty ($prop: UnityEngine.PropertyName) : boolean
            public static op_Equality ($lhs: UnityEngine.PropertyName, $rhs: UnityEngine.PropertyName) : boolean
            public static op_Inequality ($lhs: UnityEngine.PropertyName, $rhs: UnityEngine.PropertyName) : boolean
            /** Determines whether this instance and a specified object, which must also be a PropertyName object, have the same value.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.PropertyName) : boolean
            public static op_Implicit ($name: string) : UnityEngine.PropertyName
            public static op_Implicit ($id: number) : UnityEngine.PropertyName
            public constructor ($name: string)
            public constructor ($other: UnityEngine.PropertyName)
            public constructor ($id: number)
        }
        class EventProvider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static WriteCustomEvent ($value: number, $text: string) : void
            public constructor ()
        }
        /** Evaluates simple math expressions; supports int  float and operators: + - *  % ^ ( ).
        */
        class ExpressionEvaluator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Compression Method for Asset Bundles.
        */
        enum CompressionType
        { None = 0, Lzma = 1, Lz4 = 2, Lz4HC = 3 }
        /** Compression Levels relate to how much time should be spent compressing Assets into an Asset Bundle.
        */
        enum CompressionLevel
        { None = 0, Fastest = 1, Fast = 2, Normal = 3, High = 4, Maximum = 5 }
        /** Contains information about compression methods, compression levels and block sizes that are supported by Asset Bundle compression at build time and recompression at runtime.
        */
        class BuildCompression extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Uncompressed Asset Bundle.
            */
            public static Uncompressed : UnityEngine.BuildCompression
            /** LZ4HC "Chunk Based" Compression.
            */
            public static LZ4 : UnityEngine.BuildCompression
            /** LZMA Compression.
            */
            public static LZMA : UnityEngine.BuildCompression
            /** Uncompressed Asset Bundle.
            */
            public static UncompressedRuntime : UnityEngine.BuildCompression
            /** LZ4 Compression for runtime recompression.
            */
            public static LZ4Runtime : UnityEngine.BuildCompression
            public get compression(): UnityEngine.CompressionType;
            public get level(): UnityEngine.CompressionLevel;
            public get blockSize(): number;
        }
        /** Represents an axis aligned bounding box with all values as integers.
        */
        class BoundsInt extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.BoundsInt>
        {
            protected [__keep_incompatibility]: never;
            /** X value of the minimal point of the box.
            */
            public get x(): number;
            public set x(value: number);
            /** Y value of the minimal point of the box.
            */
            public get y(): number;
            public set y(value: number);
            /** Z value of the minimal point of the box.
            */
            public get z(): number;
            public set z(value: number);
            /** The center of the bounding box.
            */
            public get center(): UnityEngine.Vector3;
            /** The minimal point of the box.
            */
            public get min(): UnityEngine.Vector3Int;
            public set min(value: UnityEngine.Vector3Int);
            /** The maximal point of the box.
            */
            public get max(): UnityEngine.Vector3Int;
            public set max(value: UnityEngine.Vector3Int);
            /** The minimal x point of the box.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** The minimal y point of the box.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** The minimal z point of the box.
            */
            public get zMin(): number;
            public set zMin(value: number);
            /** The maximal x point of the box.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** The maximal y point of the box.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** The maximal z point of the box.
            */
            public get zMax(): number;
            public set zMax(value: number);
            /** The position of the bounding box.
            */
            public get position(): UnityEngine.Vector3Int;
            public set position(value: UnityEngine.Vector3Int);
            /** The total size of the box.
            */
            public get size(): UnityEngine.Vector3Int;
            public set size(value: UnityEngine.Vector3Int);
            /** A BoundsInt.PositionCollection that contains all positions within the BoundsInt.
            */
            public get allPositionsWithin(): UnityEngine.BoundsInt.PositionEnumerator;
            /** Sets the bounds to the min and max value of the box.
            */
            public SetMinMax ($minPosition: UnityEngine.Vector3Int, $maxPosition: UnityEngine.Vector3Int) : void
            /** Clamps the position and size of this bounding box to the given bounds.
            * @param $bounds Bounds to clamp to.
            */
            public ClampToBounds ($bounds: UnityEngine.BoundsInt) : void
            /** Is point contained in the bounding box?
            * @param $position Point to check.
            * @returns Is point contained in the bounding box? 
            */
            public Contains ($position: UnityEngine.Vector3Int) : boolean
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for the bounds.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Equality ($lhs: UnityEngine.BoundsInt, $rhs: UnityEngine.BoundsInt) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoundsInt, $rhs: UnityEngine.BoundsInt) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoundsInt) : boolean
            public constructor ($xMin: number, $yMin: number, $zMin: number, $sizeX: number, $sizeY: number, $sizeZ: number)
            public constructor ($position: UnityEngine.Vector3Int, $size: UnityEngine.Vector3Int)
        }
        /** Representation of 3D vectors and points using integers.
        */
        class Vector3Int extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector3Int>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public get x(): number;
            public set x(value: number);
            /** Y component of the vector.
            */
            public get y(): number;
            public set y(value: number);
            /** Z component of the vector.
            */
            public get z(): number;
            public set z(value: number);
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector3Int(0, 0, 0).
            */
            public static get zero(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(1, 1, 1).
            */
            public static get one(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(0, 1, 0).
            */
            public static get up(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(0, -1, 0).
            */
            public static get down(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(-1, 0, 0).
            */
            public static get left(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(1, 0, 0).
            */
            public static get right(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(0, 0, 1).
            */
            public static get forward(): UnityEngine.Vector3Int;
            /** Shorthand for writing Vector3Int(0, 0, -1).
            */
            public static get back(): UnityEngine.Vector3Int;
            /** Set x, y and z components of an existing Vector3Int.
            */
            public Set ($x: number, $y: number, $z: number) : void
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector3Int) : void
            /** Clamps the Vector3Int to the bounds given by min and max.
            */
            public Clamp ($min: UnityEngine.Vector3Int, $max: UnityEngine.Vector3Int) : void
            public static op_Implicit ($v: UnityEngine.Vector3Int) : UnityEngine.Vector3
            public static op_Explicit ($v: UnityEngine.Vector3Int) : UnityEngine.Vector2Int
            /** Converts a  Vector3 to a Vector3Int by doing a Floor to each value.
            */
            public static FloorToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts a  Vector3 to a Vector3Int by doing a Ceiling to each value.
            */
            public static CeilToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            /** Converts a  Vector3 to a Vector3Int by doing a Round to each value.
            */
            public static RoundToInt ($v: UnityEngine.Vector3) : UnityEngine.Vector3Int
            public static op_Addition ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Subtraction ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Multiply ($a: UnityEngine.Vector3Int, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_UnaryNegation ($a: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Multiply ($a: UnityEngine.Vector3Int, $b: number) : UnityEngine.Vector3Int
            public static op_Multiply ($a: number, $b: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            public static op_Division ($a: UnityEngine.Vector3Int, $b: number) : UnityEngine.Vector3Int
            public static op_Equality ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector3Int, $rhs: UnityEngine.Vector3Int) : boolean
            /** Returns true if the objects are equal.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector3Int) : boolean
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number)
            public constructor ($x: number, $y: number, $z: number)
        }
        /** Utility class for common geometric functions.
        */
        class GeometryUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Calculates frustum planes.
            * @param $camera The camera with the view frustum that you want to calculate planes from.
            * @returns The planes that form the camera's view frustum. 
            */
            public static CalculateFrustumPlanes ($camera: UnityEngine.Camera) : System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param $worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @returns The planes that enclose the projection space described by the matrix. 
            */
            public static CalculateFrustumPlanes ($worldToProjectionMatrix: UnityEngine.Matrix4x4) : System.Array$1<UnityEngine.Plane>
            /** Calculates frustum planes.
            * @param $camera The camera with the view frustum that you want to calculate planes from.
            * @param $planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes ($camera: UnityEngine.Camera, $planes: System.Array$1<UnityEngine.Plane>) : void
            /** Calculates frustum planes.
            * @param $worldToProjectionMatrix A matrix that transforms from world space to projection space, from which the planes will be calculated.
            * @param $planes An array of 6 Planes that will be overwritten with the calculated plane values.
            */
            public static CalculateFrustumPlanes ($worldToProjectionMatrix: UnityEngine.Matrix4x4, $planes: System.Array$1<UnityEngine.Plane>) : void
            /** Calculates the bounding box from the given array of positions and the transformation matrix.
            * @param $positions An array that stores the location of 3d positions.
            * @param $transform A matrix that changes the position, rotation and size of the bounds calculation.
            * @returns Calculates the axis-aligned bounding box. 
            */
            public static CalculateBounds ($positions: System.Array$1<UnityEngine.Vector3>, $transform: UnityEngine.Matrix4x4) : UnityEngine.Bounds
            /** GeometryUtility.TryCreatePlaneFromPolygon creates a plane from the given list of vertices that define the polygon, as long as they do not characterize a straight line or zero area.
            * @param $vertices An array of vertex positions that define the shape of a polygon.
            * @param $plane A valid plane that goes through the vertices.
            * @returns Returns true on success, false if Unity did not create a plane from the vertices. 
            */
            public static TryCreatePlaneFromPolygon ($vertices: System.Array$1<UnityEngine.Vector3>, $plane: $Ref<UnityEngine.Plane>) : boolean
            /** Returns true if bounds are inside the plane array.
            */
            public static TestPlanesAABB ($planes: System.Array$1<UnityEngine.Plane>, $bounds: UnityEngine.Bounds) : boolean
            public constructor ()
        }
        /** Representation of a plane in 3D space.
        */
        class Plane extends System.ValueType implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            /** Normal vector of the plane.
            */
            public get normal(): UnityEngine.Vector3;
            public set normal(value: UnityEngine.Vector3);
            /** The distance measured from the Plane to the origin, along the Plane's normal.
            */
            public get distance(): number;
            public set distance(value: number);
            /** Returns a copy of the plane that faces in the opposite direction.
            */
            public get flipped(): UnityEngine.Plane;
            /** Sets a plane using a point that lies within it along with a normal to orient it.
            * @param $inNormal The plane's normal vector.
            * @param $inPoint A point that lies on the plane.
            */
            public SetNormalAndPosition ($inNormal: UnityEngine.Vector3, $inPoint: UnityEngine.Vector3) : void
            /** Sets a plane using three points that lie within it.  The points go around clockwise as you look down on the top surface of the plane.
            * @param $a First point in clockwise order.
            * @param $b Second point in clockwise order.
            * @param $c Third point in clockwise order.
            */
            public Set3Points ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $c: UnityEngine.Vector3) : void
            /** Makes the plane face in the opposite direction.
            */
            public Flip () : void
            /** Moves the plane in space by the translation vector.
            * @param $translation The offset in space to move the plane with.
            */
            public Translate ($translation: UnityEngine.Vector3) : void
            /** Returns a copy of the given plane that is moved in space by the given translation.
            * @param $plane The plane to move in space.
            * @param $translation The offset in space to move the plane with.
            * @returns The translated plane. 
            */
            public static Translate ($plane: UnityEngine.Plane, $translation: UnityEngine.Vector3) : UnityEngine.Plane
            /** For a given point returns the closest point on the plane.
            * @param $point The point to project onto the plane.
            * @returns A point on the plane that is closest to point. 
            */
            public ClosestPointOnPlane ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Returns a signed distance from plane to point.
            */
            public GetDistanceToPoint ($point: UnityEngine.Vector3) : number
            /** Is a point on the positive side of the plane?
            */
            public GetSide ($point: UnityEngine.Vector3) : boolean
            /** Are two points on the same side of the plane?
            */
            public SameSide ($inPt0: UnityEngine.Vector3, $inPt1: UnityEngine.Vector3) : boolean
            /** Intersects a ray with the plane.
            */
            public Raycast ($ray: UnityEngine.Ray, $enter: $Ref<number>) : boolean
            public ToString () : string
            public ToString ($format: string) : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($inNormal: UnityEngine.Vector3, $inPoint: UnityEngine.Vector3)
            public constructor ($inNormal: UnityEngine.Vector3, $d: number)
            public constructor ($a: UnityEngine.Vector3, $b: UnityEngine.Vector3, $c: UnityEngine.Vector3)
        }
        /** A ray in 2D space.
        */
        class Ray2D extends System.ValueType implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            /** The starting point of the ray in world space.
            */
            public get origin(): UnityEngine.Vector2;
            public set origin(value: UnityEngine.Vector2);
            /** The direction of the ray in world space.
            */
            public get direction(): UnityEngine.Vector2;
            public set direction(value: UnityEngine.Vector2);
            /** Get a point that lies a given distance along a ray.
            * @param $distance Distance of the desired point along the path of the ray.
            */
            public GetPoint ($distance: number) : UnityEngine.Vector2
            /** Returns a formatted string for this 2D ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this 2D ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this 2D ray.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($origin: UnityEngine.Vector2, $direction: UnityEngine.Vector2)
        }
        /** A 2D Rectangle defined by x, y, width, height with integers.
        */
        class RectInt extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.RectInt>
        {
            protected [__keep_incompatibility]: never;
            /** Left coordinate of the rectangle.
            */
            public get x(): number;
            public set x(value: number);
            /** Top coordinate of the rectangle.
            */
            public get y(): number;
            public set y(value: number);
            /** Center coordinate of the rectangle.
            */
            public get center(): UnityEngine.Vector2;
            /** The lower left corner of the rectangle; which is the minimal position of the rectangle along the x- and y-axes, when it is aligned to both axes.
            */
            public get min(): UnityEngine.Vector2Int;
            public set min(value: UnityEngine.Vector2Int);
            /** The upper right corner of the rectangle; which is the maximal position of the rectangle along the x- and y-axes, when it is aligned to both axes.
            */
            public get max(): UnityEngine.Vector2Int;
            public set max(value: UnityEngine.Vector2Int);
            /** Width of the rectangle.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the rectangle.
            */
            public get height(): number;
            public set height(value: number);
            /** Shows the minimum X value of the RectInt.
            */
            public get xMin(): number;
            public set xMin(value: number);
            /** Show the minimum Y value of the RectInt.
            */
            public get yMin(): number;
            public set yMin(value: number);
            /** Shows the maximum X value of the RectInt.
            */
            public get xMax(): number;
            public set xMax(value: number);
            /** Shows the maximum Y value of the RectInt.
            */
            public get yMax(): number;
            public set yMax(value: number);
            /** Returns the position (x, y) of the RectInt.
            */
            public get position(): UnityEngine.Vector2Int;
            public set position(value: UnityEngine.Vector2Int);
            /** Returns the width and height of the RectInt.
            */
            public get size(): UnityEngine.Vector2Int;
            public set size(value: UnityEngine.Vector2Int);
            /** Shorthand for writing new RectInt(0,0,0,0).
            */
            public static get zero(): UnityEngine.RectInt;
            /** A RectInt.PositionCollection that contains all positions within the RectInt.
            */
            public get allPositionsWithin(): UnityEngine.RectInt.PositionEnumerator;
            /** Sets the bounds to the min and max value of the rect.
            */
            public SetMinMax ($minPosition: UnityEngine.Vector2Int, $maxPosition: UnityEngine.Vector2Int) : void
            /** Clamps the position and size of the RectInt to the given bounds.
            * @param $bounds Bounds to clamp the RectInt.
            */
            public ClampToBounds ($bounds: UnityEngine.RectInt) : void
            /** Returns true if the given position is within the RectInt.
            * @param $position Position to check.
            * @returns Whether the position is within the RectInt. 
            */
            public Contains ($position: UnityEngine.Vector2Int) : boolean
            /** RectInts overlap if each RectInt Contains a shared point.
            * @param $other Other rectangle to test overlapping with.
            * @returns True if the other rectangle overlaps this one. 
            */
            public Overlaps ($other: UnityEngine.RectInt) : boolean
            /** Returns the x, y, width and height of the RectInt.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns the x, y, width and height of the RectInt.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns the x, y, width and height of the RectInt.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Inequality ($lhs: UnityEngine.RectInt, $rhs: UnityEngine.RectInt) : boolean
            public static op_Equality ($lhs: UnityEngine.RectInt, $rhs: UnityEngine.RectInt) : boolean
            public Equals ($other: any) : boolean
            /** Returns true if the given RectInt is equal to this RectInt.
            */
            public Equals ($other: UnityEngine.RectInt) : boolean
            public constructor ($xMin: number, $yMin: number, $width: number, $height: number)
            public constructor ($position: UnityEngine.Vector2Int, $size: UnityEngine.Vector2Int)
        }
        /** Representation of 2D vectors and points using integers.
        */
        class Vector2Int extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Vector2Int>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the vector.
            */
            public get x(): number;
            public set x(value: number);
            /** Y component of the vector.
            */
            public get y(): number;
            public set y(value: number);
            /** Returns the length of this vector (Read Only).
            */
            public get magnitude(): number;
            /** Returns the squared length of this vector (Read Only).
            */
            public get sqrMagnitude(): number;
            /** Shorthand for writing Vector2Int(0, 0).
            */
            public static get zero(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int(1, 1).
            */
            public static get one(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int(0, 1).
            */
            public static get up(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int(0, -1).
            */
            public static get down(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int(-1, 0).
            */
            public static get left(): UnityEngine.Vector2Int;
            /** Shorthand for writing Vector2Int(1, 0).
            */
            public static get right(): UnityEngine.Vector2Int;
            /** Set x and y components of an existing Vector2Int.
            */
            public Set ($x: number, $y: number) : void
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Returns the distance between a and b.
            */
            public static Distance ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : number
            /** Returns a vector that is made from the smallest components of two vectors.
            */
            public static Min ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Returns a vector that is made from the largest components of two vectors.
            */
            public static Max ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Multiplies two vectors component-wise.
            */
            public static Scale ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Multiplies every component of this vector by the same component of scale.
            */
            public Scale ($scale: UnityEngine.Vector2Int) : void
            /** Clamps the Vector2Int to the bounds given by min and max.
            */
            public Clamp ($min: UnityEngine.Vector2Int, $max: UnityEngine.Vector2Int) : void
            public static op_Implicit ($v: UnityEngine.Vector2Int) : UnityEngine.Vector2
            public static op_Explicit ($v: UnityEngine.Vector2Int) : UnityEngine.Vector3Int
            /** Converts a Vector2 to a Vector2Int by doing a Floor to each value.
            */
            public static FloorToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            /** Converts a  Vector2 to a Vector2Int by doing a Ceiling to each value.
            */
            public static CeilToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            /** Converts a  Vector2 to a Vector2Int by doing a Round to each value.
            */
            public static RoundToInt ($v: UnityEngine.Vector2) : UnityEngine.Vector2Int
            public static op_UnaryNegation ($v: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Addition ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Subtraction ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: UnityEngine.Vector2Int, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: number, $b: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            public static op_Multiply ($a: UnityEngine.Vector2Int, $b: number) : UnityEngine.Vector2Int
            public static op_Division ($a: UnityEngine.Vector2Int, $b: number) : UnityEngine.Vector2Int
            public static op_Equality ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : boolean
            public static op_Inequality ($lhs: UnityEngine.Vector2Int, $rhs: UnityEngine.Vector2Int) : boolean
            /** Returns true if the objects are equal.
            */
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Vector2Int) : boolean
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this vector.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number)
        }
        /** Offsets for rectangles, borders, etc.
        */
        class RectOffset extends System.Object implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            /** Left edge size.
            */
            public get left(): number;
            public set left(value: number);
            /** Right edge size.
            */
            public get right(): number;
            public set right(value: number);
            /** Top edge size.
            */
            public get top(): number;
            public set top(value: number);
            /** Bottom edge size.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Shortcut for left + right. (Read Only)
            */
            public get horizontal(): number;
            /** Shortcut for top + bottom. (Read Only)
            */
            public get vertical(): number;
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this RectOffset.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            /** Add the border offsets to a rect.
            */
            public Add ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Remove the border offsets from a rect.
            */
            public Remove ($rect: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
            public constructor ($left: number, $right: number, $top: number, $bottom: number)
        }
        /** Allows to control the dynamic Global Illumination.
        */
        class DynamicGI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allows for scaling the contribution coming from real-time & baked lightmaps.
            Note: this value can be set in the Lighting Window UI and it is serialized, that is not the case for other properties in this class.
            */
            public static get indirectScale(): number;
            public static set indirectScale(value: number);
            /** Determines the percentage change in lighting intensity that triggers Unity to recalculate the real-time lightmap.
            */
            public static get updateThreshold(): number;
            public static set updateThreshold(value: number);
            /** The number of milliseconds that can be spent on material updates.
            */
            public static get materialUpdateTimeSlice(): number;
            public static set materialUpdateTimeSlice(value: number);
            /** When enabled, new dynamic Global Illumination output is shown in each frame.
            */
            public static get synchronousMode(): boolean;
            public static set synchronousMode(value: boolean);
            /** Is precomputed Enlighten Realtime Global Illumination output converged?
            */
            public static get isConverged(): boolean;
            /** Allows to set an emissive color for a given renderer quickly, without the need to render the emissive input for the entire system.
            * @param $renderer The Renderer that should get a new color.
            * @param $color The emissive Color.
            */
            public static SetEmissive ($renderer: UnityEngine.Renderer, $color: UnityEngine.Color) : void
            /** Allows overriding the distant environment lighting for Enlighten Realtime Global Illumination, without changing the Skybox Material.
            * @param $input Array of float values to be used for Enlighten Realtime Global Illumination environment lighting.
            */
            public static SetEnvironmentData ($input: System.Array$1<number>) : void
            /** Schedules an update of the environment cubemap.
            */
            public static UpdateEnvironment () : void
            public constructor ()
        }
        /** General functionality for all renderers.
        */
        class Renderer extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The bounding box of the renderer in world space.
            */
            public get bounds(): UnityEngine.Bounds;
            public set bounds(value: UnityEngine.Bounds);
            /** The bounding box of the renderer in local space.
            */
            public get localBounds(): UnityEngine.Bounds;
            public set localBounds(value: UnityEngine.Bounds);
            /** Makes the rendered 3D object visible if enabled.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** Is this renderer visible in any camera? (Read Only)
            */
            public get isVisible(): boolean;
            /** Does this object cast shadows?
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** Does this object receive shadows?
            */
            public get receiveShadows(): boolean;
            public set receiveShadows(value: boolean);
            /** Allows turning off rendering for a specific component.
            */
            public get forceRenderingOff(): boolean;
            public set forceRenderingOff(value: boolean);
            /** Is this renderer a static shadow caster?
            */
            public get staticShadowCaster(): boolean;
            public set staticShadowCaster(value: boolean);
            /** Specifies the mode for motion vector rendering.
            */
            public get motionVectorGenerationMode(): UnityEngine.MotionVectorGenerationMode;
            public set motionVectorGenerationMode(value: UnityEngine.MotionVectorGenerationMode);
            /** The light probe interpolation type.
            */
            public get lightProbeUsage(): UnityEngine.Rendering.LightProbeUsage;
            public set lightProbeUsage(value: UnityEngine.Rendering.LightProbeUsage);
            /** Should reflection probes be used for this Renderer?
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** Determines which rendering layer this renderer lives on.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** This value sorts renderers by priority. Lower values are rendered first and higher values are rendered last.
            */
            public get rendererPriority(): number;
            public set rendererPriority(value: number);
            /** Describes how this renderer is updated for ray tracing.
            */
            public get rayTracingMode(): UnityEngine.Experimental.Rendering.RayTracingMode;
            public set rayTracingMode(value: UnityEngine.Experimental.Rendering.RayTracingMode);
            /** The flags Unity uses when it builds acceleration structures associated with geometry used by renderers.
            */
            public get rayTracingAccelerationStructureBuildFlags(): UnityEngine.Rendering.RayTracingAccelerationStructureBuildFlags;
            public set rayTracingAccelerationStructureBuildFlags(value: UnityEngine.Rendering.RayTracingAccelerationStructureBuildFlags);
            /** Whether to override the default build flags specified when creating a RayTracingAccelerationStructure.
            */
            public get rayTracingAccelerationStructureBuildFlagsOverride(): boolean;
            public set rayTracingAccelerationStructureBuildFlagsOverride(value: boolean);
            /** Name of the Renderer's sorting layer.
            */
            public get sortingLayerName(): string;
            public set sortingLayerName(value: string);
            /** Unique ID of the Renderer's sorting layer.
            */
            public get sortingLayerID(): number;
            public set sortingLayerID(value: number);
            /** Renderer's order within a sorting layer.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** Controls if dynamic occlusion culling should be performed for this renderer.
            */
            public get allowOcclusionWhenDynamic(): boolean;
            public set allowOcclusionWhenDynamic(value: boolean);
            /** Indicates whether the renderer is part of a with other renderers.
            */
            public get isPartOfStaticBatch(): boolean;
            /** Matrix that transforms a point from world space into local space (Read Only).
            */
            public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
            /** Matrix that transforms a point from local space into world space (Read Only).
            */
            public get localToWorldMatrix(): UnityEngine.Matrix4x4;
            /** If set, the Renderer will use the Light Probe Proxy Volume component attached to the source GameObject.
            */
            public get lightProbeProxyVolumeOverride(): UnityEngine.GameObject;
            public set lightProbeProxyVolumeOverride(value: UnityEngine.GameObject);
            /** If set, Renderer will use this Transform's position to find the light or reflection probe.
            */
            public get probeAnchor(): UnityEngine.Transform;
            public set probeAnchor(value: UnityEngine.Transform);
            /** The index of the baked lightmap applied to this renderer.
            */
            public get lightmapIndex(): number;
            public set lightmapIndex(value: number);
            /** The index of the real-time lightmap applied to this renderer.
            */
            public get realtimeLightmapIndex(): number;
            public set realtimeLightmapIndex(value: number);
            /** The UV scale & offset used for a lightmap.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The UV scale & offset used for a real-time lightmap.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
            /** Returns all the instantiated materials of this object.
            */
            public get materials(): System.Array$1<UnityEngine.Material>;
            public set materials(value: System.Array$1<UnityEngine.Material>);
            /** Returns the first instantiated Material assigned to the renderer.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The shared material of this object.
            */
            public get sharedMaterial(): UnityEngine.Material;
            public set sharedMaterial(value: UnityEngine.Material);
            /** All the shared materials of this object.
            */
            public get sharedMaterials(): System.Array$1<UnityEngine.Material>;
            public set sharedMaterials(value: System.Array$1<UnityEngine.Material>);
            /** Reset custom world space bounds.
            */
            public ResetBounds () : void
            /** Reset custom local space bounds.
            */
            public ResetLocalBounds () : void
            /** Returns true if the Renderer has a material property block attached via SetPropertyBlock.
            */
            public HasPropertyBlock () : boolean
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param $properties Property block with values you want to override.
            * @param $materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public SetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock) : void
            /** Lets you set or clear per-renderer or per-material parameter overrides.
            * @param $properties Property block with values you want to override.
            * @param $materialIndex The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public SetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number) : void
            /** Get per-Renderer or per-Material property block.
            * @param $properties Material parameters to retrieve.
            * @param $materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock) : void
            /** Get per-Renderer or per-Material property block.
            * @param $properties Material parameters to retrieve.
            * @param $materialIndex The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.
            */
            public GetPropertyBlock ($properties: UnityEngine.MaterialPropertyBlock, $materialIndex: number) : void
            public GetMaterials ($m: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public SetSharedMaterials ($materials: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public SetMaterials ($materials: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public GetSharedMaterials ($m: System.Collections.Generic.List$1<UnityEngine.Material>) : void
            public GetClosestReflectionProbes ($result: System.Collections.Generic.List$1<UnityEngine.Rendering.ReflectionProbeBlendInfo>) : void
            public constructor ()
        }
        /** General functionality for all renderers.
        */
        interface Renderer {
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            UpdateGIMaterials () : void;
        }
        /** An object containing settings for precomputing lighting data, that Unity can serialize as a.
        */
        class LightingSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Whether to enable the Baked Global Illumination system for this Scene.
            */
            public get bakedGI(): boolean;
            public set bakedGI(value: boolean);
            /** Whether to enable the Enlighten Realtime Global Illumination system for this Scene.
            */
            public get realtimeGI(): boolean;
            public set realtimeGI(value: boolean);
            /** Determines the lightmap that Unity stores environment lighting in.
            */
            public get realtimeEnvironmentLighting(): boolean;
            public set realtimeEnvironmentLighting(value: boolean);
            /** Sets the MixedLightingMode that Unity uses for all Mixed Lights in the Scene. (Editor only).
            */
            public get mixedBakeMode(): UnityEngine.MixedLightingMode;
            public set mixedBakeMode(value: UnityEngine.MixedLightingMode);
            /** The intensity of surface albedo throughout the Scene when considered in lighting calculations. This value influences the energy of light at each bounce. (Editor only).
            */
            public get albedoBoost(): number;
            public set albedoBoost(value: number);
            /** Multiplies the intensity of of indirect lighting in lightmaps. (Editor only).
            */
            public get indirectScale(): number;
            public set indirectScale(value: number);
            /** Determines which backend to use for baking lightmaps in the Baked Global Illumination system. (Editor only).
            */
            public get lightmapper(): UnityEngine.LightingSettings.Lightmapper;
            public set lightmapper(value: UnityEngine.LightingSettings.Lightmapper);
            /** The maximum size in pixels of an individual lightmap texture. (Editor only).
            */
            public get lightmapMaxSize(): number;
            public set lightmapMaxSize(value: number);
            /** Defines the number of texels to use per world unit when generating lightmaps.
            */
            public get lightmapResolution(): number;
            public set lightmapResolution(value: number);
            /** Sets the distance (in texels) between separate UV tiles in lightmaps. (Editor only).
            */
            public get lightmapPadding(): number;
            public set lightmapPadding(value: number);
            /** The level of compression the Editor uses for lightmaps.
            */
            public get lightmapCompression(): UnityEngine.LightmapCompression;
            public set lightmapCompression(value: UnityEngine.LightmapCompression);
            /** Whether to apply ambient occlusion to lightmaps. (Editor only).
            */
            public get ao(): boolean;
            public set ao(value: boolean);
            /** The distance that a ray travels before Unity considers it to be unoccluded when calculating ambient occlusion in lightmaps. (Editor only).
            */
            public get aoMaxDistance(): number;
            public set aoMaxDistance(value: number);
            /** Sets the contrast of ambient occlusion that Unity applies to indirect lighting in lightmaps. (Editor only).
            */
            public get aoExponentIndirect(): number;
            public set aoExponentIndirect(value: number);
            /** Determines the degree to which direct lighting is considered when calculating ambient occlusion in lightmaps. (Editor only).
            */
            public get aoExponentDirect(): number;
            public set aoExponentDirect(value: number);
            /** Whether the Progressive Lightmapper extracts Ambient Occlusion to a separate lightmap. (Editor only).
            */
            public get extractAO(): boolean;
            public set extractAO(value: boolean);
            /** Determines whether the lightmapper should generate directional or non-directional lightmaps. (Editor only).
            */
            public get directionalityMode(): UnityEngine.LightmapsMode;
            public set directionalityMode(value: UnityEngine.LightmapsMode);
            /** Defines the number of texels that Enlighten Realtime Global Illumination uses per world unit when calculating indirect lighting. (Editor only).
            */
            public get indirectResolution(): number;
            public set indirectResolution(value: number);
            public get sampling(): UnityEngine.LightingSettings.Sampling;
            public set sampling(value: UnityEngine.LightingSettings.Sampling);
            /** Specifies the number of samples the Progressive Lightmapper uses for direct lighting calculations. (Editor only).
            */
            public get directSampleCount(): number;
            public set directSampleCount(value: number);
            /** Specifies the number of samples the Progressive Lightmapper uses for indirect lighting calculations. (Editor only).
            */
            public get indirectSampleCount(): number;
            public set indirectSampleCount(value: number);
            /** Stores the maximum number of bounces the Progressive Lightmapper computes for indirect lighting. (Editor only)
            */
            public get maxBounces(): number;
            public set maxBounces(value: number);
            /** Stores the minimum number of bounces the Progressive Lightmapper computes for indirect lighting. (Editor only)
            */
            public get minBounces(): number;
            public set minBounces(value: number);
            /** Whether the Progressive Lightmapper prioritizes baking visible texels within the frustum of the Scene view. (Editor only).
            */
            public get prioritizeView(): boolean;
            public set prioritizeView(value: boolean);
            /** Specifies the filter type that the Progressive Lightmapper uses for ambient occlusion. (Editor only).
            */
            public get filteringMode(): UnityEngine.LightingSettings.FilterMode;
            public set filteringMode(value: UnityEngine.LightingSettings.FilterMode);
            /** Determines the denoiser that the Progressive Lightmapper applies to direct lighting. (Editor only).
            */
            public get denoiserTypeDirect(): UnityEngine.LightingSettings.DenoiserType;
            public set denoiserTypeDirect(value: UnityEngine.LightingSettings.DenoiserType);
            /** Determines the denoiser that the Progressive Lightmapper applies to indirect lighting. (Editor only).
            */
            public get denoiserTypeIndirect(): UnityEngine.LightingSettings.DenoiserType;
            public set denoiserTypeIndirect(value: UnityEngine.LightingSettings.DenoiserType);
            /** Determines the type of denoising that the Progressive Lightmapper applies to ambient occlusion in lightmaps. (Editor only).
            */
            public get denoiserTypeAO(): UnityEngine.LightingSettings.DenoiserType;
            public set denoiserTypeAO(value: UnityEngine.LightingSettings.DenoiserType);
            /** Specifies the filter kernel that the Progressive Lightmapper uses for the direct lighting. (Editor only).
            */
            public get filterTypeDirect(): UnityEngine.LightingSettings.FilterType;
            public set filterTypeDirect(value: UnityEngine.LightingSettings.FilterType);
            /** Specifies whether the Editor calculates the final global illumination light bounce at the same resolution as the baked lightmap.
            */
            public get filterTypeIndirect(): UnityEngine.LightingSettings.FilterType;
            public set filterTypeIndirect(value: UnityEngine.LightingSettings.FilterType);
            /** Specifies the filter kernel that the Progressive Lightmapper uses for ambient occlusion. (Editor only).
            */
            public get filterTypeAO(): UnityEngine.LightingSettings.FilterType;
            public set filterTypeAO(value: UnityEngine.LightingSettings.FilterType);
            /** Specifies the radius the Progressive Lightmapper uses to filter the indirect lighting component of the lightmap when you use the Gaussian filter. (Editor only).
            */
            public get filteringGaussianRadiusDirect(): number;
            public set filteringGaussianRadiusDirect(value: number);
            /** Specifies the method that the Progressive Lightmapper uses to reduce noise in lightmaps. (Editor only).
            */
            public get filteringGaussianRadiusIndirect(): number;
            public set filteringGaussianRadiusIndirect(value: number);
            /** Specifies the radius the Progressive Lightmapper uses to filter the direct lighting component of the lightmap when you use the Gaussian filter. (Editor only).
            */
            public get filteringGaussianRadiusAO(): number;
            public set filteringGaussianRadiusAO(value: number);
            /** Specifies the threshold the Progressive Lightmapper uses to filter the indirect lighting component of the lightmap when using the A-Trous filter. (Editor only).
            */
            public get filteringAtrousPositionSigmaDirect(): number;
            public set filteringAtrousPositionSigmaDirect(value: number);
            /** Specifies the radius the Progressive Lightmapper uses to filter the ambient occlusion component in the lightmap when you use the Gaussian filter. (Editor only).
            */
            public get filteringAtrousPositionSigmaIndirect(): number;
            public set filteringAtrousPositionSigmaIndirect(value: number);
            /** Specifies the threshold the Progressive Lightmapper uses to filter direct light stored in the lightmap when using the A-Trous filter. (Editor only).
            */
            public get filteringAtrousPositionSigmaAO(): number;
            public set filteringAtrousPositionSigmaAO(value: number);
            /** Determines whether Progressive Lightmappers use importance sampling when they sample environment lighting while baking.
            */
            public get environmentImportanceSampling(): boolean;
            public set environmentImportanceSampling(value: boolean);
            /** Specifies the number of samples the Progressive Lightmapper uses when sampling indirect lighting from the skybox. (Editor only).
            */
            public get environmentSampleCount(): number;
            public set environmentSampleCount(value: number);
            /** Specifies the number of samples to use for Light Probes relative to the number of samples for lightmap texels. (Editor only).
            */
            public get lightProbeSampleCountMultiplier(): number;
            public set lightProbeSampleCountMultiplier(value: number);
            /** When Unity is precomputing or baking Global Illumination, respect the Scene Visibility setting of a [[GameObject] with a MeshRenderer or Terrain component.
            */
            public get respectSceneVisibilityWhenBakingGI(): boolean;
            public set respectSceneVisibilityWhenBakingGI(value: boolean);
            public constructor ()
        }
        /** Enum describing what lighting mode to be used with Mixed lights.
        */
        enum MixedLightingMode
        { IndirectOnly = 0, Shadowmask = 2, Subtractive = 1 }
        /** A set of options for the level of compression the Editor uses for lightmaps.
        */
        enum LightmapCompression
        { None = 0, LowQuality = 1, NormalQuality = 2, HighQuality = 3 }
        /** Lightmap (and lighting) configuration mode, controls how lightmaps interact with lighting and what kind of information they store.
        */
        enum LightmapsMode
        { NonDirectional = 0, CombinedDirectional = 1, SeparateDirectional = 2, Single = 0, Dual = 1, Directional = 2 }
        /** Gizmos are used to give visual debugging or setup aids in the Scene view.
        */
        class Gizmos extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the Color of the gizmos that are drawn next.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** Sets the Matrix4x4 that the Unity Editor uses to draw Gizmos.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** Set a texture that contains the exposure correction for LightProbe gizmos. The value is sampled from the red channel in the middle of the texture.
            */
            public static get exposure(): UnityEngine.Texture;
            public static set exposure(value: UnityEngine.Texture);
            /** Set a scale for Light Probe gizmos. This scale will be used to render the spherical harmonic preview spheres.
            */
            public static get probeSize(): number;
            /** Draws a line starting at from towards to.
            */
            public static DrawLine ($from: UnityEngine.Vector3, $to: UnityEngine.Vector3) : void
            /** Draws a wireframe sphere with center and radius.
            */
            public static DrawWireSphere ($center: UnityEngine.Vector3, $radius: number) : void
            /** Draws a solid sphere with center and radius.
            */
            public static DrawSphere ($center: UnityEngine.Vector3, $radius: number) : void
            /** Draw a wireframe box with center and size.
            */
            public static DrawWireCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            /** Draw a solid box at center with size.
            */
            public static DrawCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            /** Draws a mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            /** Draws a wireframe mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            /** Draw an icon at a position in the Scene view.
            */
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean) : void
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string, $allowScaling: boolean, $tint: UnityEngine.Color) : void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            /** Draw a camera frustum using the currently set Gizmos.matrix for its location and rotation.
            * @param $center The apex of the truncated pyramid.
            * @param $fov Vertical field of view (ie, the angle at the apex in degrees).
            * @param $maxRange Distance of the frustum's far plane.
            * @param $minRange Distance of the frustum's near plane.
            * @param $aspect Width/height ratio.
            */
            public static DrawFrustum ($center: UnityEngine.Vector3, $fov: number, $maxRange: number, $minRange: number, $aspect: number) : void
            /** Determines the appropriate level of detail for a gizmo in the Scene view at a specified position with a specified radius.
            * @param $position The centre of the gizmo in world space.
            * @param $radius The maximum extent of the gizmo.
            * @returns Returns a value between 0 and 1 that represents the level of detail for the gizmo. 
            */
            public static CalculateLOD ($position: UnityEngine.Vector3, $radius: number) : number
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay ($r: UnityEngine.Ray) : void
            /** Draws a ray starting at from to from + direction.
            */
            public static DrawRay ($from: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh) : void
            /** Draws a mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh) : void
            /** Draws a wireframe mesh.
            * @param $mesh Mesh to draw as a gizmo.
            * @param $position Position (default is zero).
            * @param $rotation Rotation (default is no rotation).
            * @param $scale Scale (default is no scale).
            * @param $submeshIndex Submesh to draw (default is -1, which draws whole mesh).
            */
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number, $position: UnityEngine.Vector3) : void
            public static DrawWireMesh ($mesh: UnityEngine.Mesh, $submeshIndex: number) : void
            /** Draw an icon at a position in the Scene view.
            */
            public static DrawIcon ($center: UnityEngine.Vector3, $name: string) : void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture) : void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Draw a texture in the Scene.
            * @param $screenRect The size and position of the texture on the "screen" defined by the XY plane.
            * @param $texture The texture to be displayed.
            * @param $mat An optional material to apply the texture.
            * @param $leftBorder Inset from the rectangle's left edge.
            * @param $rightBorder Inset from the rectangle's right edge.
            * @param $topBorder Inset from the rectangle's top edge.
            * @param $bottomBorder Inset from the rectangle's bottom edge.
            */
            public static DrawGUITexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            public constructor ()
        }
        /** A class that allows you to create or modify meshes.
        */
        class Mesh extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Format of the mesh index buffer data.
            */
            public get indexFormat(): UnityEngine.Rendering.IndexFormat;
            public set indexFormat(value: UnityEngine.Rendering.IndexFormat);
            /** Gets the number of vertex buffers present in the Mesh. (Read Only)
            */
            public get vertexBufferCount(): number;
            /** The intended target usage of the Mesh GPU vertex buffer.
            */
            public get vertexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set vertexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** The intended target usage of the Mesh GPU index buffer.
            */
            public get indexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set indexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** Returns BlendShape count on this mesh.
            */
            public get blendShapeCount(): number;
            /** The number of bind poses in the Mesh.
            */
            public get bindposeCount(): number;
            /** The bind poses. The bind pose at each index refers to the bone with the same index.
            */
            public get bindposes(): System.Array$1<UnityEngine.Matrix4x4>;
            public set bindposes(value: System.Array$1<UnityEngine.Matrix4x4>);
            /** Returns true if the Mesh is read/write enabled, or false if it is not.
            */
            public get isReadable(): boolean;
            /** Returns the number of vertices in the Mesh (Read Only).
            */
            public get vertexCount(): number;
            /** The number of sub-meshes inside the Mesh object.
            */
            public get subMeshCount(): number;
            public set subMeshCount(value: number);
            /** The bounding volume of the Mesh.
            */
            public get bounds(): UnityEngine.Bounds;
            public set bounds(value: UnityEngine.Bounds);
            /** Returns a copy of the vertex positions or assigns a new vertex positions array.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector3>;
            public set vertices(value: System.Array$1<UnityEngine.Vector3>);
            /** The normals of the Mesh.
            */
            public get normals(): System.Array$1<UnityEngine.Vector3>;
            public set normals(value: System.Array$1<UnityEngine.Vector3>);
            /** The tangents of the Mesh.
            */
            public get tangents(): System.Array$1<UnityEngine.Vector4>;
            public set tangents(value: System.Array$1<UnityEngine.Vector4>);
            /** The texture coordinates (UVs) in the first channel.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            public set uv(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the second channel.
            */
            public get uv2(): System.Array$1<UnityEngine.Vector2>;
            public set uv2(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the third channel.
            */
            public get uv3(): System.Array$1<UnityEngine.Vector2>;
            public set uv3(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the fourth channel.
            */
            public get uv4(): System.Array$1<UnityEngine.Vector2>;
            public set uv4(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the fifth channel.
            */
            public get uv5(): System.Array$1<UnityEngine.Vector2>;
            public set uv5(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the sixth channel.
            */
            public get uv6(): System.Array$1<UnityEngine.Vector2>;
            public set uv6(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the seventh channel.
            */
            public get uv7(): System.Array$1<UnityEngine.Vector2>;
            public set uv7(value: System.Array$1<UnityEngine.Vector2>);
            /** The texture coordinates (UVs) in the eighth channel.
            */
            public get uv8(): System.Array$1<UnityEngine.Vector2>;
            public set uv8(value: System.Array$1<UnityEngine.Vector2>);
            /** Vertex colors of the Mesh.
            */
            public get colors(): System.Array$1<UnityEngine.Color>;
            public set colors(value: System.Array$1<UnityEngine.Color>);
            /** Vertex colors of the Mesh.
            */
            public get colors32(): System.Array$1<UnityEngine.Color32>;
            public set colors32(value: System.Array$1<UnityEngine.Color32>);
            /** Returns the number of vertex attributes that the mesh has. (Read Only)
            */
            public get vertexAttributeCount(): number;
            /** An array containing all triangles in the Mesh.
            */
            public get triangles(): System.Array$1<number>;
            public set triangles(value: System.Array$1<number>);
            /** The BoneWeight for each vertex in the Mesh, which represents 4 bones per vertex.
            */
            public get boneWeights(): System.Array$1<UnityEngine.BoneWeight>;
            public set boneWeights(value: System.Array$1<UnityEngine.BoneWeight>);
            /** The dimension of data in the bone weight buffer.
            */
            public get skinWeightBufferLayout(): UnityEngine.SkinWeights;
            /** Sets the index buffer size and format.
            * @param $indexCount Size of index buffer.
            * @param $format Format of the indices.
            */
            public SetIndexBufferParams ($indexCount: number, $format: UnityEngine.Rendering.IndexFormat) : void
            /** Returns information about a vertex attribute based on its index.
            * @param $index The vertex attribute index (0 to vertexAttributeCount-1).
            * @returns Information about the vertex attribute. 
            */
            public GetVertexAttribute ($index: number) : UnityEngine.Rendering.VertexAttributeDescriptor
            /** Checks if a specific vertex data attribute exists on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Returns true if the data attribute is present in the mesh. 
            */
            public HasVertexAttribute ($attr: UnityEngine.Rendering.VertexAttribute) : boolean
            /** Get dimension of a specific vertex data attribute on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Dimensionality of the data attribute, or zero if it is not present. 
            */
            public GetVertexAttributeDimension ($attr: UnityEngine.Rendering.VertexAttribute) : number
            /** Get format of a specific vertex data attribute on this Mesh.
            * @param $attr Vertex data attribute to check for.
            * @returns Format of the data attribute. 
            */
            public GetVertexAttributeFormat ($attr: UnityEngine.Rendering.VertexAttribute) : UnityEngine.Rendering.VertexAttributeFormat
            /** Gets the vertex buffer stream index of a specific vertex data attribute on this Mesh.
            * @param $attr The vertex data attribute to check for.
            * @returns Stream index of the data attribute, or -1 if it is not present. 
            */
            public GetVertexAttributeStream ($attr: UnityEngine.Rendering.VertexAttribute) : number
            /** Get offset within a vertex buffer stream of a specific vertex data attribute on this Mesh.
            * @param $attr The vertex data attribute to check for.
            * @returns The byte offset within a atream of the data attribute, or -1 if it is not present. 
            */
            public GetVertexAttributeOffset ($attr: UnityEngine.Rendering.VertexAttribute) : number
            /** Get vertex buffer stream stride in bytes.
            * @param $stream Vertex data stream index to check for.
            * @returns Vertex data size in bytes in this stream, or zero if the stream is not present. 
            */
            public GetVertexBufferStride ($stream: number) : number
            /** Retrieves a native (underlying graphics API) pointer to the vertex buffer.
            * @param $index Which vertex buffer to get (some Meshes might have more than one). See vertexBufferCount.
            * @returns Pointer to the underlying graphics API vertex buffer. 
            */
            public GetNativeVertexBufferPtr ($index: number) : System.IntPtr
            /** Retrieves a native (underlying graphics API) pointer to the index buffer.
            * @returns Pointer to the underlying graphics API index buffer. 
            */
            public GetNativeIndexBufferPtr () : System.IntPtr
            /** Clears all blend shapes from Mesh.
            */
            public ClearBlendShapes () : void
            /** Returns name of BlendShape by given index.
            */
            public GetBlendShapeName ($shapeIndex: number) : string
            /** Returns index of BlendShape by given name.
            */
            public GetBlendShapeIndex ($blendShapeName: string) : number
            /** Returns the frame count for a blend shape.
            * @param $shapeIndex The shape index to get frame count from.
            */
            public GetBlendShapeFrameCount ($shapeIndex: number) : number
            /** Returns the weight of a blend shape frame.
            * @param $shapeIndex The shape index of the frame.
            * @param $frameIndex The frame index to get the weight from.
            */
            public GetBlendShapeFrameWeight ($shapeIndex: number, $frameIndex: number) : number
            /** Retreives deltaVertices, deltaNormals and deltaTangents of a blend shape frame.
            * @param $shapeIndex The shape index of the frame.
            * @param $frameIndex The frame index to get the weight from.
            * @param $deltaVertices Delta vertices output array for the frame being retreived.
            * @param $deltaNormals Delta normals output array for the frame being retreived.
            * @param $deltaTangents Delta tangents output array for the frame being retreived.
            */
            public GetBlendShapeFrameVertices ($shapeIndex: number, $frameIndex: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>) : void
            /** Adds a new blend shape frame.
            * @param $shapeName Name of the blend shape to add a frame to.
            * @param $frameWeight Weight for the frame being added.
            * @param $deltaVertices Delta vertices for the frame being added.
            * @param $deltaNormals Delta normals for the frame being added.
            * @param $deltaTangents Delta tangents for the frame being added.
            */
            public AddBlendShapeFrame ($shapeName: string, $frameWeight: number, $deltaVertices: System.Array$1<UnityEngine.Vector3>, $deltaNormals: System.Array$1<UnityEngine.Vector3>, $deltaTangents: System.Array$1<UnityEngine.Vector3>) : void
            public SetBoneWeights ($bonesPerVertex: Unity.Collections.NativeArray$1<number>, $weights: Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>) : void
            /** Gets the bone weights for the Mesh.
            * @returns Returns all non-zero bone weights for the Mesh, in vertex index order. 
            */
            public GetAllBoneWeights () : Unity.Collections.NativeArray$1<UnityEngine.BoneWeight1>
            /** The number of non-zero bone weights for each vertex.
            * @returns Returns the number of non-zero bone weights for each vertex. 
            */
            public GetBonesPerVertex () : Unity.Collections.NativeArray$1<number>
            /** Gets the bind poses of the Mesh.
            * @returns The array of bind poses belonging to the Mesh. 
            */
            public GetBindposes () : Unity.Collections.NativeArray$1<UnityEngine.Matrix4x4>
            public SetBindposes ($poses: Unity.Collections.NativeArray$1<UnityEngine.Matrix4x4>) : void
            /** Sets the information about a sub-mesh of the Mesh.
            * @param $index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @param $desc Sub-mesh data.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMesh ($index: number, $desc: UnityEngine.Rendering.SubMeshDescriptor, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Get information about a sub-mesh of the Mesh.
            * @param $index Sub-mesh index. See subMeshCount. Out of range indices throw an exception.
            * @returns Sub-mesh data. 
            */
            public GetSubMesh ($index: number) : UnityEngine.Rendering.SubMeshDescriptor
            /** Notify Renderer components of mesh geometry change.
            */
            public MarkModified () : void
            /** The UV distribution metric can be used to calculate the desired mipmap level based on the position of the camera.
            * @param $uvSetIndex UV set index to return the UV distibution metric for. 0 for first.
            * @returns Average of triangle area / uv area. 
            */
            public GetUVDistributionMetric ($uvSetIndex: number) : number
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetVertices ($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetVertices ($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public SetVertices ($inVertices: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Assigns a new vertex positions array.
            * @param $inVertices Per-vertex positions.
            */
            public SetVertices ($inVertices: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the vertex positions of the Mesh, using a part of the input array.
            * @param $inVertices Per-vertex positions.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetVertices ($inVertices: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Sets the vertex positions of the Mesh, using a part of the input array.
            * @param $inVertices Per-vertex positions.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetVertices ($inVertices: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetNormals ($normals: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetNormals ($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetNormals ($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public SetNormals ($inNormals: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Set the normals of the Mesh.
            * @param $inNormals Per-vertex normals.
            */
            public SetNormals ($inNormals: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the vertex normals of the Mesh, using a part of the input array.
            * @param $inNormals Per-vertex normals.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetNormals ($inNormals: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Sets the vertex normals of the Mesh, using a part of the input array.
            * @param $inNormals Per-vertex normals.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetNormals ($inNormals: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetTangents ($tangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetTangents ($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetTangents ($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            public SetTangents ($inTangents: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Set the tangents of the Mesh.
            * @param $inTangents Per-vertex tangents.
            */
            public SetTangents ($inTangents: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets the tangents of the Mesh, using a part of the input array.
            * @param $inTangents Per-vertex tangents.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetTangents ($inTangents: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            /** Sets the tangents of the Mesh, using a part of the input array.
            * @param $inTangents Per-vertex tangents.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetTangents ($inTangents: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetColors ($colors: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color>, $start: number, $length: number) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Set the per-vertex colors of the Mesh.
            * @param $inColors Per-vertex colors.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color>) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color>, $start: number, $length: number) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetColors ($colors: System.Collections.Generic.List$1<UnityEngine.Color32>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>, $start: number, $length: number) : void
            public SetColors ($inColors: System.Collections.Generic.List$1<UnityEngine.Color32>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Set the per-vertex colors of the Mesh.
            * @param $inColors Per-vertex colors.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color32>) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color32>, $start: number, $length: number) : void
            /** Sets the per-vertex colors of the Mesh, using a part of the input array.
            * @param $inColors Per-vertex colors.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetColors ($inColors: System.Array$1<UnityEngine.Color32>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            public SetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>) : void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>) : void
            /** Sets the texture coordinates (UVs) stored in a given channel.
            * @param $channel The channel, in [0..7] range.
            * @param $uvs The UV data to set.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector2>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector3>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number) : void
            /** Sets the UVs of the Mesh, using a part of the input array.
            * @param $channel The UV channel, in [0..7] range.
            * @param $uvs UVs to set for the given index.
            * @param $start Index of the first element to take from the input array.
            * @param $length Number of elements to take from the input array.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetUVs ($channel: number, $uvs: System.Array$1<UnityEngine.Vector4>, $start: number, $length: number, $flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public GetUVs ($channel: number, $uvs: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Get information about vertex attributes of a Mesh.
            * @returns Array of vertex attribute information. 
            */
            public GetVertexAttributes () : System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>
            /** Get information about vertex attributes of a Mesh, without memory allocations.
            * @param $attributes Collection of vertex attributes to receive the results.
            * @returns The number of vertex attributes returned in the attributes container. 
            */
            public GetVertexAttributes ($attributes: System.Array$1<UnityEngine.Rendering.VertexAttributeDescriptor>) : number
            public GetVertexAttributes ($attributes: System.Collections.Generic.List$1<UnityEngine.Rendering.VertexAttributeDescriptor>) : number
            /** Sets the vertex buffer size and layout.
            * @param $vertexCount The number of vertices in the Mesh.
            * @param $attributes Layout of the vertex data -- which attributes are present, their data types and so on.
            */
            public SetVertexBufferParams ($vertexCount: number, ...attributes: UnityEngine.Rendering.VertexAttributeDescriptor[]) : void
            public SetVertexBufferParams ($vertexCount: number, $attributes: Unity.Collections.NativeArray$1<UnityEngine.Rendering.VertexAttributeDescriptor>) : void
            /** Gets a snapshot of Mesh data for read-only access.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData ($mesh: UnityEngine.Mesh) : UnityEngine.Mesh.MeshDataArray
            /** Gets a snapshot of Mesh data for read-only access.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData ($meshes: System.Array$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            public static AcquireReadOnlyMeshData ($meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            /** Allocates data structures for Mesh creation using C# Jobs.
            * @param $meshCount The amount of meshes that will be created.
            * @returns Returns a MeshDataArray containing writeable MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AllocateWritableMeshData ($meshCount: number) : UnityEngine.Mesh.MeshDataArray
            public static AllocateWritableMeshData ($mesh: UnityEngine.Mesh) : UnityEngine.Mesh.MeshDataArray
            public static AllocateWritableMeshData ($meshes: System.Array$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            public static AllocateWritableMeshData ($meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            public static ApplyAndDisposeWritableMeshData ($data: UnityEngine.Mesh.MeshDataArray, $mesh: UnityEngine.Mesh, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            public static ApplyAndDisposeWritableMeshData ($data: UnityEngine.Mesh.MeshDataArray, $meshes: System.Array$1<UnityEngine.Mesh>, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            public static ApplyAndDisposeWritableMeshData ($data: UnityEngine.Mesh.MeshDataArray, $meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Retrieves a GraphicsBuffer that provides direct acces to the GPU vertex buffer.
            * @param $index Vertex data stream index to get the buffer for.
            * @returns The mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetVertexBuffer ($index: number) : UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer to the GPU index buffer.
            * @returns The mesh index buffer as a GraphicsBuffer. 
            */
            public GetIndexBuffer () : UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU bone weight data.
            * @param $layout Which buffer to access, based on maximum bones per vertex.
            * @returns The bone weight data as a GraphicsBuffer. 
            */
            public GetBoneWeightBuffer ($layout: UnityEngine.SkinWeights) : UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
            * @param $layout Which buffer to access. The default value is Rendering.BlendShapeBufferLayout.PerShape.
            * @returns The blend shape vertex data as a GraphicsBuffer. 
            */
            public GetBlendShapeBuffer ($layout: UnityEngine.Rendering.BlendShapeBufferLayout) : UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct read and write access to GPU blend shape vertex data.
            * @param $layout Which buffer to access. The default value is Rendering.BlendShapeBufferLayout.PerShape.
            * @returns The blend shape vertex data as a GraphicsBuffer. 
            */
            public GetBlendShapeBuffer () : UnityEngine.GraphicsBuffer
            /** Get the location of blend shape vertex data for a given blend shape.
            * @param $blendShapeIndex Which blend shape to locate the data for.
            * @returns A struct that describes the start and end index of the data for the given blend shape. 
            */
            public GetBlendShapeBufferRange ($blendShapeIndex: number) : UnityEngine.BlendShapeBufferRange
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param $triangles A list of vertex indices to populate. Any existing items in the list are replaced.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles ($submesh: number) : System.Array$1<number>
            /** Fetches the triangle list for the specified sub-mesh on this object.
            * @param $triangles A list of vertex indices to populate. Any existing items in the list are replaced.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            */
            public GetTriangles ($submesh: number, $applyBaseVertex: boolean) : System.Array$1<number>
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean) : void
            public GetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean) : void
            /** Fetches the index list for the specified sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices ($submesh: number) : System.Array$1<number>
            /** Fetches the index list for the specified sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @param $applyBaseVertex True (default value) will apply base vertex offset to returned indices.
            * @returns Array with face indices. 
            */
            public GetIndices ($submesh: number, $applyBaseVertex: boolean) : System.Array$1<number>
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex: boolean) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>, $submesh: number, $applyBaseVertex?: boolean) : void
            /** Gets the starting index location within the Mesh's index buffer, for the given sub-mesh.
            */
            public GetIndexStart ($submesh: number) : number
            /** Gets the index count of the given sub-mesh.
            */
            public GetIndexCount ($submesh: number) : number
            /** Gets the base vertex index of the given sub-mesh.
            * @param $submesh The sub-mesh index. See subMeshCount.
            * @returns The offset applied to all vertex indices of this sub-mesh. 
            */
            public GetBaseVertex ($submesh: number) : number
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number) : void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean) : void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            /** Sets the triangle list of the Mesh, using a part of the input array.
            * @param $triangles The list of indices that define the triangles.
            * @param $trianglesStart Index of the first element to take from the input array.
            * @param $trianglesLength Number of elements to take from the input array.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the triangle list for the sub-mesh.
            * @param $triangles The list of indices that define the triangles.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.
            * @param $baseVertex Optional vertex offset that is added to all triangle vertex indices.
            */
            public SetTriangles ($triangles: System.Array$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $trianglesStart: number, $trianglesLength: number, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetTriangles ($triangles: System.Collections.Generic.List$1<number>, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean) : void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds: boolean, $baseVertex: number) : void
            /** Sets the index buffer of a sub-mesh, using a part of the input array.
            * @param $indices The array of indices that define the mesh faces.
            * @param $indicesStart Index of the first element to take from the input array.
            * @param $indicesLength Number of elements to take from the input array.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets the index buffer for the sub-mesh.
            * @param $indices The array of indices that define the mesh faces.
            * @param $topology The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.
            * @param $submesh The sub-mesh to modify.
            * @param $calculateBounds Calculate the bounding box of the sub-mesh after setting the indices. Unity does this by default.
            Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.
            * @param $baseVertex Optional vertex offset that is added to all vertex indices.
            */
            public SetIndices ($indices: System.Array$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetIndices ($indices: System.Collections.Generic.List$1<number>, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            public SetIndices ($indices: System.Collections.Generic.List$1<number>, $indicesStart: number, $indicesLength: number, $topology: UnityEngine.MeshTopology, $submesh: number, $calculateBounds?: boolean, $baseVertex?: number) : void
            /** Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
            * @param $desc An array or list of sub-mesh data descriptors.
            * @param $start Index of the first element to take from the array or list in desc.
            * @param $count Number of elements to take from the array or list in desc.
            * @param $flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMeshes ($desc: System.Array$1<UnityEngine.Rendering.SubMeshDescriptor>, $start: number, $count: number, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.
            * @param $desc An array or list of sub-mesh data descriptors.
            * @param $start Index of the first element to take from the array or list in desc.
            * @param $count Number of elements to take from the array or list in desc.
            * @param $flags (Optional) Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public SetSubMeshes ($desc: System.Array$1<UnityEngine.Rendering.SubMeshDescriptor>, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            public SetSubMeshes ($desc: System.Collections.Generic.List$1<UnityEngine.Rendering.SubMeshDescriptor>, $start: number, $count: number, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            public SetSubMeshes ($desc: System.Collections.Generic.List$1<UnityEngine.Rendering.SubMeshDescriptor>, $flags?: UnityEngine.Rendering.MeshUpdateFlags) : void
            public GetBindposes ($bindposes: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetBoneWeights ($boneWeights: System.Collections.Generic.List$1<UnityEngine.BoneWeight>) : void
            /** Clears all vertex data and all triangle indices.
            * @param $keepVertexLayout True if the existing Mesh data layout should be preserved.
            */
            public Clear ($keepVertexLayout: boolean) : void
            public Clear () : void
            public RecalculateBounds () : void
            public RecalculateNormals () : void
            public RecalculateTangents () : void
            /** Recalculate the bounding volume of the Mesh and all of its sub-meshes with the vertex data.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateBounds ($flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Recalculates the normals of the Mesh from the triangles and vertices.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateNormals ($flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Recalculates the tangents of the Mesh from the normals and texture coordinates.
            * @param $flags Flags controlling the function behavior, see MeshUpdateFlags.
            */
            public RecalculateTangents ($flags: UnityEngine.Rendering.MeshUpdateFlags) : void
            /** Recalculates the UV distribution metric of the Mesh from the vertices and uv coordinates.
            * @param $uvSetIndex The UV set index to set the UV distibution metric for. Use 0 for first index.
            * @param $uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
            */
            public RecalculateUVDistributionMetric ($uvSetIndex: number, $uvAreaThreshold?: number) : void
            /** Recalculates the UV distribution metrics of the Mesh from the vertices and uv coordinates.
            * @param $uvAreaThreshold The minimum UV area to consider. The default value is 1e-9f.
            */
            public RecalculateUVDistributionMetrics ($uvAreaThreshold?: number) : void
            /** Optimize mesh for frequent updates.
            */
            public MarkDynamic () : void
            /** Upload previously done Mesh modifications to the graphics API.
            * @param $markNoLongerReadable Frees up system memory copy of mesh data when set to true.
            */
            public UploadMeshData ($markNoLongerReadable: boolean) : void
            /** Optimizes the Mesh data to improve rendering performance.
            */
            public Optimize () : void
            /** Optimizes the geometry of the Mesh to improve rendering performance.
            */
            public OptimizeIndexBuffers () : void
            /** Optimizes the vertices of the Mesh to improve rendering performance.
            */
            public OptimizeReorderVertexBuffer () : void
            /** Gets the topology of a sub-mesh.
            */
            public GetTopology ($submesh: number) : UnityEngine.MeshTopology
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean, $hasLightmapData: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean, $useMatrices: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>, $mergeSubMeshes: boolean) : void
            /** Combines several Meshes into this Mesh.
            * @param $combine Descriptions of the Meshes to combine.
            * @param $mergeSubMeshes Defines whether Meshes should be combined into a single sub-mesh.
            * @param $useMatrices Defines whether the transforms supplied in the CombineInstance array should be used or ignored.
            * @param $hasLightmapData Defines whether to transform the input Mesh lightmap UV data using the lightmap scale offset data in CombineInstance structs.
            */
            public CombineMeshes ($combine: System.Array$1<UnityEngine.CombineInstance>) : void
            public constructor ()
        }
        /** Quaternions are used to represent rotations.
        */
        class Quaternion extends System.ValueType implements System.IFormattable, System.IEquatable$1<UnityEngine.Quaternion>
        {
            protected [__keep_incompatibility]: never;
            /** X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public x : number
            /** Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public y : number
            /** Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.
            */
            public z : number
            /** W component of the Quaternion. Do not directly modify quaternions.
            */
            public w : number
            public static kEpsilon : number
            /** The identity rotation (Read Only).
            */
            public static get identity(): UnityEngine.Quaternion;
            /** Returns or sets the euler angle representation of the rotation in degree.
            */
            public get eulerAngles(): UnityEngine.Vector3;
            public set eulerAngles(value: UnityEngine.Vector3);
            /** Returns this quaternion with a magnitude of 1 (Read Only).
            */
            public get normalized(): UnityEngine.Quaternion;
            /** Creates a rotation from fromDirection to toDirection.
            * @param $fromDirection A non-unit or unit vector representing a direction axis to rotate.
            * @param $toDirection A non-unit or unit vector representing the target direction axis.
            * @returns A unit quaternion which rotates from fromDirection to toDirection. 
            */
            public static FromToRotation ($fromDirection: UnityEngine.Vector3, $toDirection: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Returns the Inverse of rotation.
            */
            public static Inverse ($rotation: UnityEngine.Quaternion) : UnityEngine.Quaternion
            /** Spherically linear interpolates between unit quaternions a and b by a ratio of t.
            * @param $a Start unit quaternion value, returned when t = 0.
            * @param $b End unit quaternion value, returned when t = 1.
            * @param $t Interpolation ratio. Value is clamped to the range [0, 1].
            * @returns A unit quaternion spherically interpolated between quaternions a and b. 
            */
            public static Slerp ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Spherically linear interpolates between unit quaternions a and b by t.
            * @param $a Start unit quaternion value, returned when t = 0.
            * @param $b End unit quaternion value, returned when t = 1.
            * @param $t Interpolation ratio. Value is unclamped.
            * @returns A unit quaternion spherically interpolated between unit quaternions a and b. 
            */
            public static SlerpUnclamped ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Interpolates between a and b by t and normalizes the result afterwards.
            * @param $a Start unit quaternion value, returned when t = 0.
            * @param $b End unit quaternion value, returned when t = 1.
            * @param $t Interpolation ratio. The value is clamped to the range [0, 1].
            * @returns A unit quaternion interpolated between quaternions a and b. 
            */
            public static Lerp ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Interpolates between a and b by t and normalizes the result afterwards. The parameter t is not clamped.
            */
            public static LerpUnclamped ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            /** Creates a rotation which rotates angle degrees around axis.
            */
            public static AngleAxis ($angle: number, $axis: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Creates a rotation with the specified forward and upwards directions.
            * @param $forward The direction to look in.
            * @param $upwards The vector that defines in which direction up is.
            */
            public static LookRotation ($forward: UnityEngine.Vector3, $upwards: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Creates a rotation with the specified forward and upwards directions.
            * @param $forward The direction to look in.
            * @param $upwards The vector that defines in which direction up is.
            */
            public static LookRotation ($forward: UnityEngine.Vector3) : UnityEngine.Quaternion
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Set x, y, z and w components of an existing Quaternion.
            */
            public Set ($newX: number, $newY: number, $newZ: number, $newW: number) : void
            public static op_Multiply ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static op_Multiply ($rotation: UnityEngine.Quaternion, $point: UnityEngine.Vector3) : UnityEngine.Vector3
            public static op_Equality ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : boolean
            public static op_Inequality ($lhs: UnityEngine.Quaternion, $rhs: UnityEngine.Quaternion) : boolean
            /** The dot product between two rotations.
            */
            public static Dot ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion) : number
            /** Creates a rotation with the specified forward and upwards directions.
            * @param $view The direction to look in.
            * @param $up The vector that defines in which direction up is.
            */
            public SetLookRotation ($view: UnityEngine.Vector3) : void
            /** Creates a rotation with the specified forward and upwards directions.
            * @param $view The direction to look in.
            * @param $up The vector that defines in which direction up is.
            */
            public SetLookRotation ($view: UnityEngine.Vector3, $up: UnityEngine.Vector3) : void
            /** Returns the angle in degrees between two rotations a and b. The resulting angle ranges from 0 to 180.
            */
            public static Angle ($a: UnityEngine.Quaternion, $b: UnityEngine.Quaternion) : number
            /** Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis; applied in that order.
            */
            public static Euler ($x: number, $y: number, $z: number) : UnityEngine.Quaternion
            /** Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.
            */
            public static Euler ($euler: UnityEngine.Vector3) : UnityEngine.Quaternion
            /** Converts a rotation to angle-axis representation (angles in degrees).
            */
            public ToAngleAxis ($angle: $Ref<number>, $axis: $Ref<UnityEngine.Vector3>) : void
            /** Creates a rotation which rotates from fromDirection to toDirection.
            */
            public SetFromToRotation ($fromDirection: UnityEngine.Vector3, $toDirection: UnityEngine.Vector3) : void
            /** Rotates a rotation from towards to.
            * @param $from The unit quaternion to be aligned with to.
            * @param $to The target unit quaternion.
            * @param $maxDegreesDelta The maximum angle in degrees allowed for this rotation.
            * @returns A unit quaternion rotated towards to by an angular step of maxDegreesDelta. 
            */
            public static RotateTowards ($from: UnityEngine.Quaternion, $to: UnityEngine.Quaternion, $maxDegreesDelta: number) : UnityEngine.Quaternion
            /** Converts this quaternion to one with the same orientation but with a magnitude of 1.
            */
            public static Normalize ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public Normalize () : void
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.Quaternion) : boolean
            /** Returns a formatted string for this quaternion.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this quaternion.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this quaternion.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
        }
        /** The material class.
        */
        class Material extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The shader used by the material.
            */
            public get shader(): UnityEngine.Shader;
            public set shader(value: UnityEngine.Shader);
            /** The main color of the Material.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The main texture.
            */
            public get mainTexture(): UnityEngine.Texture;
            public set mainTexture(value: UnityEngine.Texture);
            /** The offset of the main texture.
            */
            public get mainTextureOffset(): UnityEngine.Vector2;
            public set mainTextureOffset(value: UnityEngine.Vector2);
            /** The scale of the main texture.
            */
            public get mainTextureScale(): UnityEngine.Vector2;
            public set mainTextureScale(value: UnityEngine.Vector2);
            /** Render queue of this material.
            */
            public get renderQueue(): number;
            public set renderQueue(value: number);
            /** An array containing the local shader keywords that are currently enabled for this material.
            */
            public get enabledKeywords(): System.Array$1<UnityEngine.Rendering.LocalKeyword>;
            public set enabledKeywords(value: System.Array$1<UnityEngine.Rendering.LocalKeyword>);
            /** Defines how the material should interact with lightmaps and lightprobes.
            */
            public get globalIlluminationFlags(): UnityEngine.MaterialGlobalIlluminationFlags;
            public set globalIlluminationFlags(value: UnityEngine.MaterialGlobalIlluminationFlags);
            /** Gets and sets whether the Double Sided Global Illumination setting is enabled for this material.
            */
            public get doubleSidedGI(): boolean;
            public set doubleSidedGI(value: boolean);
            /** Gets and sets whether GPU instancing is enabled for this material.
            */
            public get enableInstancing(): boolean;
            public set enableInstancing(value: boolean);
            /** How many passes are in this material (Read Only).
            */
            public get passCount(): number;
            /** An array containing names of the local shader keywords that are currently enabled for this material.
            */
            public get shaderKeywords(): System.Array$1<string>;
            public set shaderKeywords(value: System.Array$1<string>);
            /** Parent of this material.
            */
            public get parent(): UnityEngine.Material;
            public set parent(value: UnityEngine.Material);
            /** Returns true if this material is a material variant.
            * @returns True if the material is a variant. 
            */
            public get isVariant(): boolean;
            /** Checks if the ShaderLab file assigned to the Material has a property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasProperty ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasProperty ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasFloat ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Float property with the given name. This also works with the Float Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasFloat ($nameID: number) : boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInt ($name: string) : boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInt ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInteger ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has an Integer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasInteger ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasTexture ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Texture property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasTexture ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasMatrix ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Matrix property with the given name. This also works with the Matrix Array property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasMatrix ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasVector ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Vector property with the given name. This also works with the Vector Array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasVector ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasColor ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a Color property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasColor ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasBuffer ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a ComputeBuffer property with the given name.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasBuffer ($nameID: number) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasConstantBuffer ($name: string) : boolean
            /** Checks if the ShaderLab file assigned to the Material has a ConstantBuffer property with the given name.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if the ShaderLab file assigned to the Material has this property. 
            */
            public HasConstantBuffer ($nameID: number) : boolean
            /** Enables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword ($keyword: string) : void
            /** Disables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword ($keyword: string) : void
            /** Checks whether a local shader keyword is enabled for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if a Rendering.LocalKeyword with the given name is enabled  for this material. 
            */
            public IsKeywordEnabled ($keyword: string) : boolean
            /** Enables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : void
            /** Disables a local shader keyword for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : void
            /** Sets the state of a local shader keyword for this material.
            * @param $keyword The Rendering.LocalKeyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public SetKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $value: boolean) : void
            /** Checks whether a local shader keyword is enabled for this material.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if a Rendering.LocalKeyword with the given name is enabled  for this material. 
            */
            public IsKeywordEnabled ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : boolean
            /** Enables or disables a Shader pass on a per-Material level.
            * @param $passName Shader pass name (case insensitive).
            * @param $enabled Flag indicating whether this Shader pass should be enabled.
            */
            public SetShaderPassEnabled ($passName: string, $enabled: boolean) : void
            /** Checks whether a given Shader pass is enabled on this Material.
            * @param $passName Shader pass name (case insensitive).
            * @returns True if the Shader pass is enabled. 
            */
            public GetShaderPassEnabled ($passName: string) : boolean
            /** Returns the name of the shader pass at index pass.
            */
            public GetPassName ($pass: number) : string
            /** Returns the index of the pass passName.
            */
            public FindPass ($passName: string) : number
            /** Sets an override tag/value on the material.
            * @param $tag Name of the tag to set.
            * @param $val Name of the value to set. Empty string to clear the override flag.
            */
            public SetOverrideTag ($tag: string, $val: string) : void
            /** Get the value of material's shader tag.
            */
            public GetTag ($tag: string, $searchFallbacks: boolean, $defaultValue: string) : string
            /** Get the value of material's shader tag.
            */
            public GetTag ($tag: string, $searchFallbacks: boolean) : string
            /** Interpolate properties between two materials.
            */
            public Lerp ($start: UnityEngine.Material, $end: UnityEngine.Material, $t: number) : void
            /** Activate the given pass for rendering.
            * @param $pass Shader pass number to setup.
            * @returns If false is returned, no rendering should be done. 
            */
            public SetPass ($pass: number) : boolean
            /** Copy properties from other material into this material.
            */
            public CopyPropertiesFromMaterial ($mat: UnityEngine.Material) : void
            /** Copies properties, keyword states and settings from mat to this material, but only if they exist in both materials.
            * @param $mat The Material to copy from.
            */
            public CopyMatchingPropertiesFromMaterial ($mat: UnityEngine.Material) : void
            /** Computes a CRC hash value from the content of the material.
            */
            public ComputeCRC () : number
            /** Returns the names of all texture properties exposed on this material.
            * @param $outNames Names of all texture properties exposed on this material.
            * @returns Names of all texture properties exposed on this material. 
            */
            public GetTexturePropertyNames () : System.Array$1<string>
            /** Return the name IDs of all texture properties exposed on this material.
            * @param $outNames IDs of all texture properties exposed on this material.
            * @returns IDs of all texture properties exposed on this material. 
            */
            public GetTexturePropertyNameIDs () : System.Array$1<number>
            public GetTexturePropertyNames ($outNames: System.Collections.Generic.List$1<string>) : void
            public GetTexturePropertyNameIDs ($outNames: System.Collections.Generic.List$1<number>) : void
            /** Returns True if the given material is an ancestor of this Material.
            * @param $ancestor The specific ancestor to find in the hierarchy.
            * @returns True if the given material is an ancestor of this Material. 
            */
            public IsChildOf ($ancestor: UnityEngine.Material) : boolean
            /** Removes all property overrides on this material.
            */
            public RevertAllPropertyOverrides () : void
            /** Checks whether a property is overriden by this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is overriden by this material. Otherwise, returns false. 
            */
            public IsPropertyOverriden ($nameID: number) : boolean
            /** Checks whether a property is locked by this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is locked by this material. Otherwise, returns false. 
            */
            public IsPropertyLocked ($nameID: number) : boolean
            /** Checks whether a property is locked by any of ancestor of this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is locked by any of ancestor of this material. Otherwise, returns false. 
            */
            public IsPropertyLockedByAncestor ($nameID: number) : boolean
            /** Checks whether a property is overriden by this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is overriden by this material. Otherwise, returns false. 
            */
            public IsPropertyOverriden ($name: string) : boolean
            /** Checks whether a property is locked by this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is locked by this material. Otherwise, returns false. 
            */
            public IsPropertyLocked ($name: string) : boolean
            /** Checks whether a property is locked by any of ancestor of this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @returns Returns true if the property you pass in is locked by any of ancestor of this material. Otherwise, returns false. 
            */
            public IsPropertyLockedByAncestor ($name: string) : boolean
            /** Sets the lock state of a property for this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @param $value The desired lock state.
            */
            public SetPropertyLock ($nameID: number, $value: boolean) : void
            /** Applies an override associated with a Material Variant to a target.
            * @param $destination The Material to which the Editor applies the override.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @param $recordUndo Wheter the editor should record an undo operation for this action.
            */
            public ApplyPropertyOverride ($destination: UnityEngine.Material, $nameID: number, $recordUndo?: boolean) : void
            /** Removes the override on a property.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public RevertPropertyOverride ($nameID: number) : void
            /** Sets the lock state of a property for this material.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @param $value The desired lock state.
            */
            public SetPropertyLock ($name: string, $value: boolean) : void
            /** Applies an override associated with a Material Variant to a target.
            * @param $destination The Material to which the Editor applies the override.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            * @param $recordUndo Wheter the editor should record an undo operation for this action.
            */
            public ApplyPropertyOverride ($destination: UnityEngine.Material, $name: string, $recordUndo?: boolean) : void
            /** Removes the override on a property.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public RevertPropertyOverride ($name: string) : void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInt ($name: string, $value: number) : void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInt ($nameID: number, $value: number) : void
            /** Sets a named float value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Float value to set.
            * @param $name Property name, e.g. "_Glossiness".
            */
            public SetFloat ($name: string, $value: number) : void
            /** Sets a named float value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Float value to set.
            * @param $name Property name, e.g. "_Glossiness".
            */
            public SetFloat ($nameID: number, $value: number) : void
            /** Sets a named integer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInteger ($name: string, $value: number) : void
            /** Sets a named integer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $value Integer value to set.
            * @param $name Property name, e.g. "_SrcBlend".
            */
            public SetInteger ($nameID: number, $value: number) : void
            /** Sets a color value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name. For example, "_Color" in Built-in Render Pipeline, "_BaseColor" in URP.
            * @param $value Color value to set.
            */
            public SetColor ($name: string, $value: UnityEngine.Color) : void
            /** Sets a color value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name. For example, "_Color" in Built-in Render Pipeline, "_BaseColor" in URP.
            * @param $value Color value to set.
            */
            public SetColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Sets a named vector value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_WaveAndDistance".
            * @param $value Vector value to set.
            */
            public SetVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Sets a named vector value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_WaveAndDistance".
            * @param $value Vector value to set.
            */
            public SetVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Sets a named matrix for the shader.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_CubemapRotation".
            * @param $value Matrix value to set.
            */
            public SetMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Sets a named matrix for the shader.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_CubemapRotation".
            * @param $value Matrix value to set.
            */
            public SetMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a named texture.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.GraphicsBuffer) : void
            /** Sets a named buffer value.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name.
            * @param $value The ComputeBuffer or GraphicsBuffer value to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.
            * @param $name The name of the constant buffer to override.
            * @param $value The ComputeBuffer to override the constant buffer values with, or null to remove binding.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            public SetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public SetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Sets a float array property.
            * @param $name Property name.
            * @param $nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param $values Array of values to set.
            */
            public SetFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Sets a float array property.
            * @param $name Property name.
            * @param $nameID Property name ID. Use Shader.PropertyToID to get this ID.
            * @param $values Array of values to set.
            */
            public SetFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public SetColorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public SetColorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            /** Sets a color array property.
            * @param $name Property name.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Array of values to set.
            */
            public SetColorArray ($name: string, $values: System.Array$1<UnityEngine.Color>) : void
            /** Sets a color array property.
            * @param $name Property name.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Array of values to set.
            */
            public SetColorArray ($nameID: number, $values: System.Array$1<UnityEngine.Color>) : void
            public SetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Sets a vector array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Sets a vector array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public SetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public SetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets a matrix array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Sets a matrix array property.
            * @param $name Property name.
            * @param $values Array of values to set.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt ($name: string) : number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt ($nameID: number) : number
            /** Get a named float value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat ($name: string) : number
            /** Get a named float value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat ($nameID: number) : number
            /** Get a named integer value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger ($name: string) : number
            /** Get a named integer value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger ($nameID: number) : number
            /** Get a named color value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor ($name: string) : UnityEngine.Color
            /** Get a named color value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor ($nameID: number) : UnityEngine.Color
            /** Get a named vector value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector ($name: string) : UnityEngine.Vector4
            /** Get a named vector value.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector ($nameID: number) : UnityEngine.Vector4
            /** Get a named matrix value from the shader.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Get a named matrix value from the shader.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Get a named texture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture ($name: string) : UnityEngine.Texture
            /** Get a named texture.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture ($nameID: number) : UnityEngine.Texture
            /** Get a named Graphics Buffer value.
            * @param $name The name of the graphics buffer resource property to return.
            * @returns Returns the handle of the graphics buffer resource property. 
            */
            public GetBuffer ($name: string) : UnityEngine.GraphicsBufferHandle
            /** Get a named Constant Buffer value.
            * @param $name The name of the constant buffer property to return.
            * @returns Returns the handle of the constant buffer graphics resource. 
            */
            public GetConstantBuffer ($name: string) : UnityEngine.GraphicsBufferHandle
            /** Get a named float array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray ($name: string) : System.Array$1<number>
            /** Get a named float array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetFloatArray ($nameID: number) : System.Array$1<number>
            /** Get a named color array.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColorArray ($name: string) : System.Array$1<UnityEngine.Color>
            /** Get a named color array.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColorArray ($nameID: number) : System.Array$1<UnityEngine.Color>
            /** Get a named vector array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Get a named vector array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Get a named matrix array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Get a named matrix array.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            */
            public GetMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public GetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public GetColorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public GetColorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Color>) : void
            public GetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name The name of the texture property as defined in the shader. For example: "_MainTex".
            * @param $value Texture placement offset.
            */
            public SetTextureOffset ($name: string, $value: UnityEngine.Vector2) : void
            /** Sets the placement offset of a given texture. The name parameter is defined in the shader. This method creates a new Material instance.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name The name of the texture property as defined in the shader. For example: "_MainTex".
            * @param $value Texture placement offset.
            */
            public SetTextureOffset ($nameID: number, $value: UnityEngine.Vector2) : void
            /** Sets the placement scale of texture propertyName.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture placement scale.
            */
            public SetTextureScale ($name: string, $value: UnityEngine.Vector2) : void
            /** Sets the placement scale of texture propertyName.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Property name, e.g. "_MainTex".
            * @param $value Texture placement scale.
            */
            public SetTextureScale ($nameID: number, $value: UnityEngine.Vector2) : void
            /** Gets the placement offset of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureOffset ($name: string) : UnityEngine.Vector2
            /** Gets the placement offset of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureOffset ($nameID: number) : UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureScale ($name: string) : UnityEngine.Vector2
            /** Gets the placement scale of texture propertyName.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTextureScale ($nameID: number) : UnityEngine.Vector2
            /** Retrieves a list of the named properties in the material that match the input property type.
            * @param $type The type to use to query the material for named properties.
            */
            public GetPropertyNames ($type: UnityEngine.MaterialPropertyType) : System.Array$1<string>
            public constructor ($shader: UnityEngine.Shader)
            public constructor ($source: UnityEngine.Material)
            public constructor ()
        }
        /** Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender.
        */
        class BeforeRenderOrderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The order, lowest to highest, that the Application.onBeforeRender event recievers will be called in.
            */
            public get order(): number;
            public constructor ($order: number)
        }
        /** BillboardAsset describes how a billboard is rendered.
        */
        class BillboardAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Width of the billboard.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the billboard.
            */
            public get height(): number;
            public set height(value: number);
            /** Height of the billboard that is below ground.
            */
            public get bottom(): number;
            public set bottom(value: number);
            /** Number of pre-rendered images that can be switched when the billboard is viewed from different angles.
            */
            public get imageCount(): number;
            /** Number of vertices in the billboard mesh.
            */
            public get vertexCount(): number;
            /** Number of indices in the billboard mesh.
            */
            public get indexCount(): number;
            /** The material used for rendering.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public GetImageTexCoords ($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Get the array of billboard image texture coordinate data.
            * @param $imageTexCoords The list that receives the array.
            */
            public GetImageTexCoords () : System.Array$1<UnityEngine.Vector4>
            public SetImageTexCoords ($imageTexCoords: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Set the array of billboard image texture coordinate data.
            * @param $imageTexCoords The array of data to set.
            */
            public SetImageTexCoords ($imageTexCoords: System.Array$1<UnityEngine.Vector4>) : void
            public GetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            /** Get the vertices of the billboard mesh.
            * @param $vertices The list that receives the array.
            */
            public GetVertices () : System.Array$1<UnityEngine.Vector2>
            public SetVertices ($vertices: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            /** Set the vertices of the billboard mesh.
            * @param $vertices The array of data to set.
            */
            public SetVertices ($vertices: System.Array$1<UnityEngine.Vector2>) : void
            public GetIndices ($indices: System.Collections.Generic.List$1<number>) : void
            /** Get the indices of the billboard mesh.
            * @param $indices The list that receives the array.
            */
            public GetIndices () : System.Array$1<number>
            public SetIndices ($indices: System.Collections.Generic.List$1<number>) : void
            /** Set the indices of the billboard mesh.
            * @param $indices The array of data to set.
            */
            public SetIndices ($indices: System.Array$1<number>) : void
            public constructor ()
        }
        /** Renders a billboard from a BillboardAsset.
        */
        class BillboardRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The BillboardAsset to render.
            */
            public get billboard(): UnityEngine.BillboardAsset;
            public set billboard(value: UnityEngine.BillboardAsset);
            public constructor ()
        }
        /** Custom Render Texture Manager.
        */
        class CustomRenderTextureManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_textureLoaded ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
            public static remove_textureLoaded ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
            public static add_textureUnloaded ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
            public static remove_textureUnloaded ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
            public static GetAllCustomRenderTextures ($currentCustomRenderTextures: System.Collections.Generic.List$1<UnityEngine.CustomRenderTexture>) : void
            public static add_updateTriggered ($value: System.Action$2<UnityEngine.CustomRenderTexture, number>) : void
            public static remove_updateTriggered ($value: System.Action$2<UnityEngine.CustomRenderTexture, number>) : void
            public static add_initializeTriggered ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
            public static remove_initializeTriggered ($value: System.Action$1<UnityEngine.CustomRenderTexture>) : void
        }
        /** Custom Render Textures are an extension to Render Textures that allow you to render directly to the Texture using a Shader.
        */
        class CustomRenderTexture extends UnityEngine.RenderTexture
        {
            protected [__keep_incompatibility]: never;
            /** The Material that Unity uses to initialize the content of a Custom Render Texture.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** The Material that Unity uses to initialize a Custom Render Texture. Initialization texture and color are ignored if you have set this parameter.
            */
            public get initializationMaterial(): UnityEngine.Material;
            public set initializationMaterial(value: UnityEngine.Material);
            /** The Texture that Unity uses to initialize a Custom Render Texture, multiplied by the initialization color. Unity ignores this parameter if an initializationMaterial is set.
            */
            public get initializationTexture(): UnityEngine.Texture;
            public set initializationTexture(value: UnityEngine.Texture);
            /** Determine if Unity initializes the Custom Render Texture with a Texture and a Color or a Material.
            */
            public get initializationSource(): UnityEngine.CustomRenderTextureInitializationSource;
            public set initializationSource(value: UnityEngine.CustomRenderTextureInitializationSource);
            /** The color that Unity uses to initialize a Custom Render Texture. Unity ignores this parameter if an initializationMaterial is set.
            */
            public get initializationColor(): UnityEngine.Color;
            public set initializationColor(value: UnityEngine.Color);
            /** Determine how Unity updates the Custom Render Texture.
            */
            public get updateMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set updateMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** Determine how Unity initializes a texture.
            */
            public get initializationMode(): UnityEngine.CustomRenderTextureUpdateMode;
            public set initializationMode(value: UnityEngine.CustomRenderTextureUpdateMode);
            /** The space in which Unity expresses update zones. You can set this to Normalized or Pixel space.
            */
            public get updateZoneSpace(): UnityEngine.CustomRenderTextureUpdateZoneSpace;
            public set updateZoneSpace(value: UnityEngine.CustomRenderTextureUpdateZoneSpace);
            /** The Shader Pass Unity uses to update the Custom Render Texture.
            */
            public get shaderPass(): number;
            public set shaderPass(value: number);
            /** The bit field that you can use to enable or disable update on each of the cubemap faces. The bit order from least to most significant bit is as follows: +X, -X, +Y, -Y, +Z, -Z.
            */
            public get cubemapFaceMask(): number;
            public set cubemapFaceMask(value: number);
            /** When this parameter is set to true, Unity double-buffers the Custom Render Texture so that you can access it during its own update.
            */
            public get doubleBuffered(): boolean;
            public set doubleBuffered(value: boolean);
            /** When this parameter is set to true, Unity wraps Update zones around the border of the Custom Render Texture. Otherwise, Unity clamps Update zones at the border of the Custom Render Texture.
            */
            public get wrapUpdateZones(): boolean;
            public set wrapUpdateZones(value: boolean);
            /** The period in seconds that Unity updates real-time Custom Render Textures. A value of 0.0 means Unity updates real-time Custom Render Textures every frame.
            */
            public get updatePeriod(): number;
            public set updatePeriod(value: number);
            /** Triggers an update of the Custom Render Texture.
            * @param $count Number of upate pass to perform. The default value of this count parameter is 1.
            */
            public Update ($count: number) : void
            public Update () : void
            /** Initializes the Custom Render Texture at the start of the next frame. Unity calls Initialise() before CustomRenderTexture.Update.
            */
            public Initialize () : void
            /** Clear all Update Zones.
            */
            public ClearUpdateZones () : void
            public GetUpdateZones ($updateZones: System.Collections.Generic.List$1<UnityEngine.CustomRenderTextureUpdateZone>) : void
            /** Gets the Render Texture that this Custom Render Texture uses for double buffering.
            * @returns If CustomRenderTexture. doubleBuffered is true, this returns the Render Texture that this Custom Render Texture uses for double buffering. If CustomRenderTexture. doubleBuffered is false, this returns null. 
            */
            public GetDoubleBufferRenderTexture () : UnityEngine.RenderTexture
            /** Updates the internal Render Texture that a Custom Render Texture uses for double buffering, so that it matches the size and format of the Custom Render Texture.
            */
            public EnsureDoubleBufferConsistency () : void
            /** Setup the list of Update Zones for the Custom Render Texture.
            */
            public SetUpdateZones ($updateZones: System.Array$1<UnityEngine.CustomRenderTextureUpdateZone>) : void
            public constructor ($width: number, $height: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number)
            public constructor ($width: number, $height: number, $defaultFormat: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($desc: UnityEngine.RenderTextureDescriptor)
            public constructor ($textureToCopy: UnityEngine.RenderTexture)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $depth: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.RenderTextureFormat, $mipCount: number)
            public constructor ()
        }
        /** Provides access to a display / screen for rendering operations.
        */
        class Display extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of connected displays.
            */
            public static displays : System.Array$1<UnityEngine.Display>
            /** Horizontal resolution that the display is rendering at in the viewport.
            */
            public get renderingWidth(): number;
            /** Vertical resolution that the display is rendering at.
            */
            public get renderingHeight(): number;
            /** Horizontal native display resolution.
            */
            public get systemWidth(): number;
            /** Vertical native display resolution.
            */
            public get systemHeight(): number;
            /** Color RenderBuffer.
            */
            public get colorBuffer(): UnityEngine.RenderBuffer;
            /** Depth RenderBuffer.
            */
            public get depthBuffer(): UnityEngine.RenderBuffer;
            /** Gets the state of the display and returns true if the display is active and false if otherwise.
            */
            public get active(): boolean;
            /** True when the back buffer requires an intermediate texture to render.
            */
            public get requiresBlitToBackbuffer(): boolean;
            /** True when doing a blit to the back buffer requires manual color space conversion.
            */
            public get requiresSrgbBlitToBackbuffer(): boolean;
            /** Main Display.
            */
            public static get main(): UnityEngine.Display;
            /** Get the Editors active GameView display target.
            */
            public static get activeEditorGameViewTarget(): number;
            /** Activates an external display. For example, a secondary monitor connected to the system.
            */
            public Activate () : void
            /** Windows platforms only. Activates an external display with a specific width, height and refresh rate. For example, a secondary monitor connected to the system.
            * @param $width Windows platforms only. Width of the window to open.
            * @param $height Windows platforms only. Height of the window to open.
            * @param $refreshRate Refresh Rate of the window to open.
            */
            public Activate ($width: number, $height: number, $refreshRate: UnityEngine.RefreshRate) : void
            /** Windows platforms only. Sets rendering size and position on screen.
            * @param $width Windows platforms only. The width of the window.
            * @param $height Windows platforms only. The height of the window.
            * @param $x Windows platforms only. The x position of the window.
            * @param $y Windows platforms only. The y position of the window.
            */
            public SetParams ($width: number, $height: number, $x: number, $y: number) : void
            /** Sets rendering resolution for the display.
            * @param $w The rendering width in pixels.
            * @param $h The rendering height in pixels.
            */
            public SetRenderingResolution ($w: number, $h: number) : void
            /** Query relative mouse coordinates.
            * @param $inputMouseCoordinates Mouse Input Position as Coordinates.
            */
            public static RelativeMouseAt ($inputMouseCoordinates: UnityEngine.Vector3) : UnityEngine.Vector3
            public static add_onDisplaysUpdated ($value: UnityEngine.Display.DisplaysUpdatedDelegate) : void
            public static remove_onDisplaysUpdated ($value: UnityEngine.Display.DisplaysUpdatedDelegate) : void
        }
        /** Represents the display refresh rate. This is how many frames the display can show per second.
        */
        class RefreshRate extends System.ValueType implements System.IComparable$1<UnityEngine.RefreshRate>, System.IEquatable$1<UnityEngine.RefreshRate>
        {
            protected [__keep_incompatibility]: never;
            /** Numerator of the refresh rate fraction.
            */
            public numerator : number
            /** Denominator of the refresh rate fraction.
            */
            public denominator : number
            /** The numerical value of the refresh rate in hertz.
            */
            public get value(): number;
            public Equals ($other: UnityEngine.RefreshRate) : boolean
            public CompareTo ($other: UnityEngine.RefreshRate) : number
        }
        /** Thread-safe struct for batch sampling Light Probes in a Scene.
        */
        class LightProbesQuery extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** This property indicates whether target query data is valid.
            */
            public get IsCreated(): boolean;
            public Dispose () : void
            /** Use this method to clean up the memory this query references.
            */
            public Dispose ($inputDeps: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            /** Calculate light probe and occlusion probe at the given world space position.
            * @param $position The world space position used to evaluate the probe.
            * @param $tetrahedronIndex Tetrahedron index that guides interpolation. Start with a value of 0 and reuse results between frames for faster lookup.
            * @param $lightProbe The light probe where the resulting lighting is written to.
            * @param $occlusionProbe The occlusion probe where the resulting occlusion is written to.
            */
            public CalculateInterpolatedLightAndOcclusionProbe ($position: UnityEngine.Vector3, $tetrahedronIndex: $Ref<number>, $lightProbe: $Ref<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbe: $Ref<UnityEngine.Vector4>) : void
            public CalculateInterpolatedLightAndOcclusionProbes ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>, $tetrahedronIndices: Unity.Collections.NativeArray$1<number>, $lightProbes: Unity.Collections.NativeArray$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: Unity.Collections.NativeArray$1<UnityEngine.Vector4>) : void
            public constructor ($allocator: Unity.Collections.Allocator)
        }
        /** Sets the full-screen mode. See the description of each mode for information on platform compatibility.
        */
        enum FullScreenMode
        { ExclusiveFullScreen = 0, FullScreenWindow = 1, MaximizedWindow = 2, Windowed = 3 }
        /** Represents a connected display.
        */
        class DisplayInfo extends System.ValueType implements System.IEquatable$1<UnityEngine.DisplayInfo>
        {
            protected [__keep_incompatibility]: never;
            /** The display width in pixels.
            */
            public width : number
            /** The display height in pixels.
            */
            public height : number
            /** The current refresh rate of the display.
            */
            public refreshRate : UnityEngine.RefreshRate
            /** Specifies the work area rectangle of the display relative to the top left corner. For example, it excludes the area covered by the macOS Dock or the Windows Taskbar.
            */
            public workArea : UnityEngine.RectInt
            /** Human-friendly display name.
            */
            public name : string
            public Equals ($other: UnityEngine.DisplayInfo) : boolean
        }
        /** Constants for special values of Screen.sleepTimeout.
        */
        class SleepTimeout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Prevent screen dimming.
            */
            public static NeverSleep : number
            /** Set the sleep timeout to whatever the user has specified in the system settings.
            */
            public static SystemSetting : number
            public constructor ()
        }
        /** Provides access to display information.
        */
        class Screen extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The current width of the screen window in pixels (Read Only).
            */
            public static get width(): number;
            /** The current height of the screen window in pixels (Read Only).
            */
            public static get height(): number;
            /** The current DPI of the screen / device (Read Only).
            */
            public static get dpi(): number;
            /** The current screen resolution (Read Only).
            */
            public static get currentResolution(): UnityEngine.Resolution;
            /** Returns all full-screen resolutions that the monitor supports (Read Only).
            */
            public static get resolutions(): System.Array$1<UnityEngine.Resolution>;
            /** Get the requested MSAA sample count of the screen buffer.
            */
            public static get msaaSamples(): number;
            /** Enables full-screen mode for the application.
            */
            public static get fullScreen(): boolean;
            public static set fullScreen(value: boolean);
            /** Set this property to one of the values in FullScreenMode to change the display mode of your application.
            */
            public static get fullScreenMode(): UnityEngine.FullScreenMode;
            public static set fullScreenMode(value: UnityEngine.FullScreenMode);
            /** Returns the safe area of the screen in pixels (Read Only).
            */
            public static get safeArea(): UnityEngine.Rect;
            /** Returns a list of screen areas that are not functional for displaying content (Read Only).
            */
            public static get cutouts(): System.Array$1<UnityEngine.Rect>;
            /** Enables auto-rotation to portrait.
            */
            public static get autorotateToPortrait(): boolean;
            public static set autorotateToPortrait(value: boolean);
            /** Enables auto-rotation to portrait, upside down.
            */
            public static get autorotateToPortraitUpsideDown(): boolean;
            public static set autorotateToPortraitUpsideDown(value: boolean);
            /** Enables auto-rotation to landscape left.
            */
            public static get autorotateToLandscapeLeft(): boolean;
            public static set autorotateToLandscapeLeft(value: boolean);
            /** Enables auto-rotation to landscape right.
            */
            public static get autorotateToLandscapeRight(): boolean;
            public static set autorotateToLandscapeRight(value: boolean);
            /** Specifies logical orientation of the screen.
            */
            public static get orientation(): UnityEngine.ScreenOrientation;
            public static set orientation(value: UnityEngine.ScreenOrientation);
            /** A power saving setting, allowing the screen to dim some time after the last active user interaction.
            */
            public static get sleepTimeout(): number;
            public static set sleepTimeout(value: number);
            /** Indicates the current brightness of the screen.
            */
            public static get brightness(): number;
            public static set brightness(value: number);
            /** The position of the top left corner of the main window relative to the top left corner of the display.
            */
            public static get mainWindowPosition(): UnityEngine.Vector2Int;
            /** The display information associated with the display that the main application window is on.
            */
            public static get mainWindowDisplayInfo(): UnityEngine.DisplayInfo;
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode, $preferredRefreshRate: UnityEngine.RefreshRate) : void
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreenMode: UnityEngine.FullScreenMode) : void
            /** Switches the screen resolution.
            */
            public static SetResolution ($width: number, $height: number, $fullscreen: boolean) : void
            /** Switches the number of MSAA samples of the Unity swapchain.
            */
            public static SetMSAASamples ($numSamples: number) : void
            public static GetDisplayLayout ($displayLayout: System.Collections.Generic.List$1<UnityEngine.DisplayInfo>) : void
            /** Moves the main window to the specified position relative to the top left corner of the specified display. Position value is represented in pixels. Moving the window is an asynchronous operation, which can take multiple frames.
            * @param $display The target display where the window should move to.
            * @param $position The position the window moves to. Relative to the top left corner of the specified display in pixels.
            * @returns Returns AsyncOperation that represents moving the window. 
            */
            public static MoveMainWindowTo ($display: $Ref<UnityEngine.DisplayInfo>, $position: UnityEngine.Vector2Int) : UnityEngine.AsyncOperation
            public constructor ()
        }
        /** Represents a display resolution.
        */
        class Resolution extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Resolution width in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** Resolution height in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** Resolution's vertical refresh rate in Hz.
            */
            public get refreshRateRatio(): UnityEngine.RefreshRate;
            public set refreshRateRatio(value: UnityEngine.RefreshRate);
        }
        /** Describes screen orientation.
        */
        enum ScreenOrientation
        { Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Unknown = 0, Landscape = 3 }
        /** Intended usage of the buffer.
        */
        enum ComputeBufferMode
        { Immutable = 0, Dynamic = 1, Circular = 2, StreamOut = 3, SubUpdates = 4 }
        /** Raw interface to Unity's drawing functions.
        */
        class Graphics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the currently active color gamut.
            */
            public static get activeColorGamut(): UnityEngine.ColorGamut;
            /** The GraphicsTier for the current device.
            */
            public static get activeTier(): UnityEngine.Rendering.GraphicsTier;
            public static set activeTier(value: UnityEngine.Rendering.GraphicsTier);
            /** True when rendering over native UI is enabled in Player Settings (readonly).
            */
            public static get preserveFramebufferAlpha(): boolean;
            /** The minimum OpenGL ES version. The value is specified in PlayerSettings.
            */
            public static get minOpenGLESVersion(): UnityEngine.Rendering.OpenGLESVersion;
            /** Currently active color buffer (Read Only).
            */
            public static get activeColorBuffer(): UnityEngine.RenderBuffer;
            /** Currently active depth/stencil buffer (Read Only).
            */
            public static get activeDepthBuffer(): UnityEngine.RenderBuffer;
            /** Clear random write targets for level pixel shaders.
            */
            public static ClearRandomWriteTargets () : void
            /** Execute a command buffer.
            * @param $buffer The buffer to execute.
            */
            public static ExecuteCommandBuffer ($buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Executes a command buffer on an async compute queue with the queue selected based on the ComputeQueueType parameter passed.
            * @param $buffer The CommandBuffer to be executed.
            * @param $queueType Describes the desired async compute queue the supplied CommandBuffer should be executed on.
            */
            public static ExecuteCommandBufferAsync ($buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Sets current render target.
            * @param $rt RenderTexture or GraphicsTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number) : void
            /** Sets current render target.
            * @param $rt RenderTexture or GraphicsTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget ($rt: UnityEngine.Rendering.GraphicsTexture, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number) : void
            /** Sets current render target.
            * @param $rt RenderTexture or GraphicsTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number) : void
            /** Sets current render target.
            * @param $rt RenderTexture or GraphicsTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget ($colorBuffers: System.Array$1<UnityEngine.RenderBuffer>, $depthBuffer: UnityEngine.RenderBuffer) : void
            /** Sets current render target.
            * @param $rt RenderTexture or GraphicsTexture to set as active render target.
            * @param $mipLevel Mipmap level to render into (use 0 if not mipmapped).
            * @param $face Cubemap face to render into (use Unknown if not a cubemap).
            * @param $depthSlice Depth slice to render into (use 0 if not a 3D or 2DArray render target).
            * @param $colorBuffer Color buffer to render into.
            * @param $depthBuffer Depth buffer to render into.
            * @param $colorBuffers Color buffers to render into (for multiple render target effects).
            * @param $setup Full render target setup information.
            */
            public static SetRenderTarget ($setup: UnityEngine.RenderTargetSetup) : void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.RenderTexture) : void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.ComputeBuffer, $preserveCounterValue: boolean) : void
            /** Set random write target for level pixel shaders.
            * @param $index Index of the random write target in the shader.
            * @param $uav Buffer or texture to set as the write target.
            * @param $preserveCounterValue Whether to leave the append/consume counter value unchanged.
            */
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.GraphicsBuffer, $preserveCounterValue: boolean) : void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture ($src: UnityEngine.Texture, $dst: UnityEngine.Texture) : void
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number) : void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number) : void
            /** Copies pixel data from one texture to another.
            * @param $src The source texture.
            * @param $dst The destination texture.
            * @param $srcElement The element in the source texture to copy from. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if src is a 2D texture.
            * @param $srcMip The mipmap level to copy from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @param $dstMip The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $srcX The starting x coordinate of src to copy from. 0 is the left of the texture.
            * @param $srcY The starting y coordinate of src to copy from. 0 is the bottom of the texture.
            * @param $srcWidth The width of src to copy.
            * @param $srcHeight The height of src to copy.
            * @param $dstX The x coordinate of dst to copy to.
            * @param $dstY The y coordinate to dst to copy to.
            */
            public static CopyTexture ($src: UnityEngine.Texture, $srcElement: number, $srcMip: number, $srcX: number, $srcY: number, $srcWidth: number, $srcHeight: number, $dst: UnityEngine.Texture, $dstElement: number, $dstMip: number, $dstX: number, $dstY: number) : void
            /** Copies the pixel data from one texture, converts the data into a different format, and copies it into another texture.
            * @param $src The source texture. The texture must be a Texture2D or Cubemap.
            * @param $dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
            * @param $srcElement The element in the source texture to copy from. Use CubemapFace if src is a Cubemap. Set the value to 0 if src is a 2D texture.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @returns true if the method succeeded. 
            */
            public static ConvertTexture ($src: UnityEngine.Texture, $dst: UnityEngine.Texture) : boolean
            /** Copies the pixel data from one texture, converts the data into a different format, and copies it into another texture.
            * @param $src The source texture. The texture must be a Texture2D or Cubemap.
            * @param $dst The destination texture. The texture must be a Texture2D, Texture2DArray, Cubemap, or CubemapArray. The texture must also be uncompressed and correspond to a supported RenderTextureFormat.
            * @param $srcElement The element in the source texture to copy from. Use CubemapFace if src is a Cubemap. Set the value to 0 if src is a 2D texture.
            * @param $dstElement The element in the source texture to copy to. For example, the CubemapFace in a Cubemap or the slice in a texture array. Set the value to 0 if `dst` is a 2D texture.
            * @returns true if the method succeeded. 
            */
            public static ConvertTexture ($src: UnityEngine.Texture, $srcElement: number, $dst: UnityEngine.Texture, $dstElement: number) : boolean
            /** Shortcut for calling Graphics.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateAsyncGraphicsFence ($stage: UnityEngine.Rendering.SynchronisationStage) : UnityEngine.Rendering.GraphicsFence
            /** Shortcut for calling Graphics.CreateGraphicsFence with Rendering.GraphicsFenceType.AsyncQueueSynchronisation as the first parameter.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateAsyncGraphicsFence () : UnityEngine.Rendering.GraphicsFence
            /** Creates a GraphicsFence.
            * @param $fenceType The Rendering.GraphicsFenceType to create. Currently the only supported value is Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to insert the fence after.
            * @returns Returns a new GraphicsFence. 
            */
            public static CreateGraphicsFence ($fenceType: UnityEngine.Rendering.GraphicsFenceType, $stage: UnityEngine.Rendering.SynchronisationStageFlags) : UnityEngine.Rendering.GraphicsFence
            /** Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
            * @param $fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to wait for.
            */
            public static WaitOnAsyncGraphicsFence ($fence: UnityEngine.Rendering.GraphicsFence) : void
            /** Instructs the GPU to pause processing of the queue until it passes through the GraphicsFence fence.
            * @param $fence The GraphicsFence the GPU waits for. The fenceType of the graphics fence must be Rendering.GraphicsFenceType.AsyncQueueSynchronisation.
            * @param $stage Which SynchronisationStage to wait for.
            */
            public static WaitOnAsyncGraphicsFence ($fence: UnityEngine.Rendering.GraphicsFence, $stage: UnityEngine.Rendering.SynchronisationStage) : void
            /** Copies the contents of one GraphicsBuffer into another.
            * @param $source The source buffer.
            * @param $dest The destination buffer.
            */
            public static CopyBuffer ($source: UnityEngine.GraphicsBuffer, $dest: UnityEngine.GraphicsBuffer) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material, $pass: number) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number) : void
            public static RenderMesh ($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $submeshIndex: number, $objectToWorld: UnityEngine.Matrix4x4, $prevObjectToWorld?: UnityEngine.Matrix4x4 | null) : void
            /** Renders multiple instances of a mesh using GPU instancing and rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the mesh.
            * @param $mesh The Mesh to render.
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawIndexedArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderMeshIndirect ($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number) : void
            /** Renders multiple instances of a Mesh using GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the Mesh primitives.
            * @param $mesh The Mesh to render.
            * @param $submeshIndex The index of a submesh Unity renders when the Mesh contains multiple Materials (submeshes). For a Mesh with a single Material, use value 0.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderMeshPrimitives ($rparams: $Ref<UnityEngine.RenderParams>, $mesh: UnityEngine.Mesh, $submeshIndex: number, $instanceCount?: number) : void
            /** Renders non-indexed primitives with GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $vertexCount The number of vertices per instance.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderPrimitives ($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number) : void
            /** Renders indexed primitives with GPU instancing and a custom shader.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $indexBuffer The index buffer for the rendered primitives.
            * @param $indexCount The number of indices per instance.
            * @param $startIndex The first index in the indexBuffer.
            * @param $instanceCount The number of instances to render.
            */
            public static RenderPrimitivesIndexed ($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $startIndex?: number, $instanceCount?: number) : void
            /** Renders primitives with GPU instancing and a custom shader using rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderPrimitivesIndirect ($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number) : void
            /** Renders indexed primitives with GPU instancing and a custom shader with rendering command arguments from commandBuffer.
            * @param $rparams The parameters Unity uses to render the primitives.
            * @param $topology Primitive topology (for example, triangles or lines).
            * @param $indexBuffer Index buffer for the rendered primitives.
            * @param $commandBuffer A command buffer that provides rendering command arguments (see GraphicsBuffer.IndirectDrawIndexedArgs).
            * @param $commandCount The number of rendering commands to execute in the commandBuffer.
            * @param $startCommand The first command to execute in the commandBuffer.
            */
            public static RenderPrimitivesIndexedIndirect ($rparams: $Ref<UnityEngine.RenderParams>, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $commandBuffer: UnityEngine.GraphicsBuffer, $commandCount?: number, $startCommand?: number) : void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $materialIndex: number) : void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $materialIndex: number) : void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Draw a mesh immediately.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix The transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $materialIndex Subset of the mesh to draw.
            */
            public static DrawMeshNow ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $matrices The array of object transformation matrices.
            * @param $count The number of instances to be drawn.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the Meshes should cast shadows.
            * @param $receiveShadows Determines whether the Meshes should receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** This function is now obsolete. Use Graphics.RenderMeshPrimitives instead. Draws the same mesh multiple times using GPU instancing.
            This is similar to Graphics.DrawMeshInstancedIndirect, except that when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $count The number of instances to be drawn.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the Meshes should cast shadows.
            * @param $receiveShadows Determines whether the Meshes should receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedProcedural ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $count: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume?: UnityEngine.LightProbeProxyVolume) : void
            /** This function is now obsolete. Use Graphics.RenderMeshIndirect instead. Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** This function is now obsolete. Use Graphics.RenderMeshIndirect instead. Draws the same mesh multiple times using GPU instancing.
            * @param $mesh The Mesh to draw.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $bufferWithArgs The GPU buffer containing the arguments for how many instances of this mesh to draw.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            * @param $properties Additional material properties to apply. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.
            * @param $lightProbeUsage LightProbeUsage for the instances.
            */
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage, $lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $vertexCount Vertex count to render.
            * @param $instanceCount Instance count to render.
            */
            public static DrawProceduralNow ($topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexCount Index count to render.
            * @param $instanceCount Instance count to render.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            */
            public static DrawProceduralNow ($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            */
            public static DrawProceduralIndirectNow ($topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number) : void
            /** This function is now obsolete. For non-indexed rendering, use Graphics.RenderPrimitives instead.
            For indexed rendering, use Graphics.RenderPrimitivesIndexed. Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $vertexCount Vertex count to render.
            * @param $instanceCount Instance count to render.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProcedural ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $vertexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU, with an index buffer.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $instanceCount Instance count to render.
            * @param $indexCount Index count to render.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProcedural ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $indexCount: number, $instanceCount?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Draws procedural geometry on the GPU.
            * @param $material Material to use.
            * @param $bounds The bounding volume surrounding the instances you intend to draw.
            * @param $topology Topology of the procedural geometry.
            * @param $indexBuffer Index buffer used to submit vertices to the GPU.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $bufferWithArgs Buffer with draw arguments.
            * @param $argsOffset Byte offset where in the buffer the draw arguments are.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $layer  to use.
            */
            public static DrawProceduralIndirect ($material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $topology: UnityEngine.MeshTopology, $indexBuffer: UnityEngine.GraphicsBuffer, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $camera?: UnityEngine.Camera, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number) : void
            public static Blit ($source: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, GraphicsTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, ...offsets: UnityEngine.Vector2[]) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, GraphicsTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.RenderTexture, $mat: UnityEngine.Material, $destDepthSlice: number, ...offsets: UnityEngine.Vector2[]) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $scale: UnityEngine.Vector2, $offset: UnityEngine.Vector2, $sourceDepthSlice: number, $destDepthSlice: number) : void
            /** Uses a shader to copy the pixel data from a texture into a render target.
            * @param $source The source texture.
            * @param $dest The destination RenderTexture or GraphicsTexture.
            * @param $mat The material to use. If you don't provide mat, Unity uses a default material.
            * @param $pass If the value is -1, Unity draws all the passes in mat. Otherwise, Unity draws only the pass you set pass to. The default value is -1.
            * @param $scale The scale to apply.
            * @param $offset The offset to apply.
            * @param $sourceDepthSlice The element in the source texture to copy from, for example the texture in a texture array. You can't use sourceDepthSlice to specify a face in a Cubemap.
            * @param $destDepthSlice The element in the destination texture to copy from, for example the texture in a texture array. You can't use destDepthSlice to specify a face in a Cubemap.
            */
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $mat: UnityEngine.Material, $pass: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $mat: UnityEngine.Material, $pass: number, $destDepthSlice: number) : void
            public static Blit ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $mat: UnityEngine.Material) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, GraphicsTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $mat: UnityEngine.Material, ...offsets: UnityEngine.Vector2[]) : void
            /** Copies source texture into destination, for multi-tap shader.
            * @param $source Source texture.
            * @param $dest Destination RenderTexture, GraphicsTexture, or null to blit directly to screen.
            * @param $mat Material to use for copying. Material's shader should do some post-processing effect.
            * @param $offsets Variable number of filtering offsets. Offsets are given in pixels.
            * @param $destDepthSlice The texture array destination slice to blit to.
            */
            public static BlitMultiTap ($source: UnityEngine.Texture, $dest: UnityEngine.Rendering.GraphicsTexture, $mat: UnityEngine.Material, $destDepthSlice: number, ...offsets: UnityEngine.Vector2[]) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: boolean, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $useLightProbes: boolean) : void
            /** Draw a mesh.
            * @param $mesh The Mesh to draw.
            * @param $position Position of the mesh.
            * @param $rotation Rotation of the mesh.
            * @param $matrix Transformation matrix of the mesh (combines position, rotation and other transformations).
            * @param $material Material to use.
            * @param $layer  the mesh is drawn on.
            * @param $camera If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.
            * @param $submeshIndex Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.
            * @param $properties Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.
            * @param $castShadows Determines whether the mesh can cast shadows.
            * @param $receiveShadows Determines whether the mesh can receive shadows.
            * @param $useLightProbes Should the mesh use light probes?
            * @param $probeAnchor If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.
            * @param $lightProbeUsage LightProbeUsage for the mesh.
            */
            public static DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $material: UnityEngine.Material, $layer: number, $camera: UnityEngine.Camera, $submeshIndex: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $probeAnchor: UnityEngine.Transform, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Array$1<UnityEngine.Matrix4x4>, $count: number, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera) : void
            public static DrawMeshInstanced ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $matrices: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>, $properties: UnityEngine.MaterialPropertyBlock, $castShadows: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows: boolean, $layer: number, $camera: UnityEngine.Camera, $lightProbeUsage: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.ComputeBuffer, $argsOffset?: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage) : void
            public static DrawMeshInstancedIndirect ($mesh: UnityEngine.Mesh, $submeshIndex: number, $material: UnityEngine.Material, $bounds: UnityEngine.Bounds, $bufferWithArgs: UnityEngine.GraphicsBuffer, $argsOffset?: number, $properties?: UnityEngine.MaterialPropertyBlock, $castShadows?: UnityEngine.Rendering.ShadowCastingMode, $receiveShadows?: boolean, $layer?: number, $camera?: UnityEngine.Camera, $lightProbeUsage?: UnityEngine.Rendering.LightProbeUsage) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $color: UnityEngine.Color) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $sourceRect: UnityEngine.Rect, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $leftBorder: number, $rightBorder: number, $topBorder: number, $bottomBorder: number) : void
            /** Draw a texture in screen coordinates.
            * @param $screenRect Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.
            * @param $texture Texture to draw.
            * @param $sourceRect Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.
            * @param $leftBorder Number of pixels from the left that are not affected by scale.
            * @param $rightBorder Number of pixels from the right that are not affected by scale.
            * @param $topBorder Number of pixels from the top that are not affected by scale.
            * @param $bottomBorder Number of pixels from the bottom that are not affected by scale.
            * @param $color Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.
            * @param $mat Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.
            * @param $pass If -1 (default), draws all passes in the material. Otherwise, draws given pass only.
            */
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            public static DrawTexture ($screenRect: UnityEngine.Rect, $texture: UnityEngine.Texture) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number) : void
            public static SetRenderTarget ($rt: UnityEngine.RenderTexture, $mipLevel: number, $face: UnityEngine.CubemapFace) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number) : void
            public static SetRenderTarget ($colorBuffer: UnityEngine.RenderBuffer, $depthBuffer: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace) : void
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.ComputeBuffer) : void
            public static SetRandomWriteTarget ($index: number, $uav: UnityEngine.GraphicsBuffer) : void
            public constructor ()
        }
        /** Represents a color gamut.
        */
        enum ColorGamut
        { sRGB = 0, Rec709 = 1, Rec2020 = 2, DisplayP3 = 3, HDR10 = 4, DolbyHDR = 5, P3D65G22 = 6 }
        /** Cubemap face.
        */
        enum CubemapFace
        { Unknown = -1, PositiveX = 0, NegativeX = 1, PositiveY = 2, NegativeY = 3, PositiveZ = 4, NegativeZ = 5 }
        /** Fully describes setup of RenderTarget.
        */
        class RenderTargetSetup extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Color Buffers to set.
            */
            public color : System.Array$1<UnityEngine.RenderBuffer>
            /** Depth Buffer to set.
            */
            public depth : UnityEngine.RenderBuffer
            /** Mip Level to render to.
            */
            public mipLevel : number
            /** Cubemap face to render to.
            */
            public cubemapFace : UnityEngine.CubemapFace
            /** Slice of a Texture3D or Texture2DArray to set as a render target.
            */
            public depthSlice : number
            /** Load Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.
            */
            public colorLoad : System.Array$1<UnityEngine.Rendering.RenderBufferLoadAction>
            /** Store Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.
            */
            public colorStore : System.Array$1<UnityEngine.Rendering.RenderBufferStoreAction>
            /** Load Action for Depth Buffer. It will override any actions set on RenderBuffer itself.
            */
            public depthLoad : UnityEngine.Rendering.RenderBufferLoadAction
            /** Store Actions for Depth Buffer. It will override any actions set on RenderBuffer itself.
            */
            public depthStore : UnityEngine.Rendering.RenderBufferStoreAction
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mip: number, $face: UnityEngine.CubemapFace, $colorLoad: System.Array$1<UnityEngine.Rendering.RenderBufferLoadAction>, $colorStore: System.Array$1<UnityEngine.Rendering.RenderBufferStoreAction>, $depthLoad: UnityEngine.Rendering.RenderBufferLoadAction, $depthStore: UnityEngine.Rendering.RenderBufferStoreAction)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace)
            public constructor ($color: UnityEngine.RenderBuffer, $depth: UnityEngine.RenderBuffer, $mipLevel: number, $face: UnityEngine.CubemapFace, $depthSlice: number)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mipLevel: number)
            public constructor ($color: System.Array$1<UnityEngine.RenderBuffer>, $depth: UnityEngine.RenderBuffer, $mip: number, $face: UnityEngine.CubemapFace)
        }
        /** GPU data buffer, mostly for use with compute shaders.
        */
        class ComputeBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer in bytes (Read Only).
            */
            public get stride(): number;
            public set name(value: string);
            public Dispose () : void
            /** Release a Compute Buffer.
            */
            public Release () : void
            /** Returns true if this compute buffer is valid and false otherwise.
            */
            public IsValid () : boolean
            /** Set the buffer with values from an array.
            * @param $data Array of values to fill the buffer.
            */
            public SetData ($data: System.Array) : void
            /** Partial copy of data values from an array into the buffer.
            * @param $data Array of values to fill the buffer.
            * @param $managedBufferStartIndex The first element index in data to copy to the compute buffer.
            * @param $computeBufferStartIndex The first element index in compute buffer to receive the data.
            * @param $count The number of elements to copy.
            */
            public SetData ($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number) : void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            */
            public GetData ($data: System.Array) : void
            /** Partial read of data values from the buffer into an array.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the compute buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData ($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number) : void
            /** Sets counter value of append/consume buffer.
            * @param $counterValue Value of the append/consume counter.
            */
            public SetCounterValue ($counterValue: number) : void
            /** Copy counter value of append/consume buffer into another buffer.
            * @param $src Append/consume buffer to copy the counter from.
            * @param $dst A buffer to copy the counter to.
            * @param $dstOffsetBytes Target byte offset in dst.
            */
            public static CopyCount ($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number) : void
            /** Retrieve a native (underlying graphics API) pointer to the buffer.
            * @returns Pointer to the underlying graphics API buffer. 
            */
            public GetNativeBufferPtr () : System.IntPtr
            public constructor ($count: number, $stride: number)
            public constructor ($count: number, $stride: number, $type: UnityEngine.ComputeBufferType)
            public constructor ($count: number, $stride: number, $type: UnityEngine.ComputeBufferType, $usage: UnityEngine.ComputeBufferMode)
        }
        /** GPU graphics data buffer, for working with geometry or compute shader data.
        */
        class GraphicsBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Number of elements in the buffer (Read Only).
            */
            public get count(): number;
            /** Size of one element in the buffer. For index buffers, this must be either 2 or 4 bytes (Read Only).
            */
            public get stride(): number;
            /** Target, which specifies the intended target(s) of this GraphicsBuffer (Read Only).
            */
            public get target(): UnityEngine.GraphicsBuffer.Target;
            /** The flags that specify how this GraphicsBuffer can be used or updated (Read Only).
            */
            public get usageFlags(): UnityEngine.GraphicsBuffer.UsageFlags;
            /** The internal handle of this GraphicsBuffer. Only valid until the buffer is disposed of. (Read Only)
            */
            public get bufferHandle(): UnityEngine.GraphicsBufferHandle;
            public set name(value: string);
            public Dispose () : void
            /** Release a Graphics Buffer.
            */
            public Release () : void
            /** Returns true if this graphics buffer is valid, or false otherwise.
            */
            public IsValid () : boolean
            /** Set the buffer with values from an array.
            * @param $data Array of values to fill the buffer.
            */
            public SetData ($data: System.Array) : void
            /** Partial copy of data values from an array into the buffer.
            * @param $data Array of values to fill the buffer.
            * @param $managedBufferStartIndex The first element index in data to copy to the graphics buffer.
            * @param $count The number of elements to copy.
            * @param $graphicsBufferStartIndex The first element index in the graphics buffer to receive the data.
            */
            public SetData ($data: System.Array, $managedBufferStartIndex: number, $graphicsBufferStartIndex: number, $count: number) : void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData ($data: System.Array) : void
            /** Read data values from the buffer into an array. The array can only use <a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types">blittable<a> types.
            * @param $data An array to receive the data.
            * @param $managedBufferStartIndex The first element index in data where retrieved elements are copied.
            * @param $computeBufferStartIndex The first element index of the buffer from which elements are read.
            * @param $count The number of elements to retrieve.
            */
            public GetData ($data: System.Array, $managedBufferStartIndex: number, $computeBufferStartIndex: number, $count: number) : void
            /** Retrieve a native (underlying graphics API) pointer to the buffer.
            * @returns Pointer to the underlying graphics API buffer. 
            */
            public GetNativeBufferPtr () : System.IntPtr
            /** Sets counter value of append/consume buffer.
            * @param $counterValue Value of the append/consume counter.
            */
            public SetCounterValue ($counterValue: number) : void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount ($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number) : void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount ($src: UnityEngine.GraphicsBuffer, $dst: UnityEngine.ComputeBuffer, $dstOffsetBytes: number) : void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount ($src: UnityEngine.ComputeBuffer, $dst: UnityEngine.GraphicsBuffer, $dstOffsetBytes: number) : void
            /** Copy the counter value of a GraphicsBuffer into another buffer.
            * @param $src The source GraphicsBuffer.
            * @param $dst The destination GraphicsBuffer.
            * @param $dstOffsetBytes The destination buffer offset in bytes.
            */
            public static CopyCount ($src: UnityEngine.GraphicsBuffer, $dst: UnityEngine.GraphicsBuffer, $dstOffsetBytes: number) : void
            public constructor ($target: UnityEngine.GraphicsBuffer.Target, $count: number, $stride: number)
            public constructor ($target: UnityEngine.GraphicsBuffer.Target, $usageFlags: UnityEngine.GraphicsBuffer.UsageFlags, $count: number, $stride: number)
        }
        /** Rendering parameters used by various rendering functions.
        */
        class RenderParams extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Layer used for rendering. to use.
            */
            public get layer(): number;
            public set layer(value: number);
            /** Renderer layer mask used for rendering.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** Renderer priority.
            */
            public get rendererPriority(): number;
            public set rendererPriority(value: number);
            /** The instance ID of the GameObject that issues the draw. Provide an instanceID to make a rendered GameObject pickable in the scene view when you click on it. The default value is 0, which means that you can't pick or outline the procedural GameObject in the scene view.
            */
            public get instanceID(): number;
            public set instanceID(value: number);
            /** Defines world space bounds for the geometry. Used to cull and sort the rendered geometry.
            */
            public get worldBounds(): UnityEngine.Bounds;
            public set worldBounds(value: UnityEngine.Bounds);
            /** The camera used for rendering. If set to null (default) renders for all cameras.
            */
            public get camera(): UnityEngine.Camera;
            public set camera(value: UnityEngine.Camera);
            /** Motion vector mode used for rendering.
            */
            public get motionVectorMode(): UnityEngine.MotionVectorGenerationMode;
            public set motionVectorMode(value: UnityEngine.MotionVectorGenerationMode);
            /** The type of reflection probe used for rendering.
            */
            public get reflectionProbeUsage(): UnityEngine.Rendering.ReflectionProbeUsage;
            public set reflectionProbeUsage(value: UnityEngine.Rendering.ReflectionProbeUsage);
            /** Material used for rendering.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            /** Material properties used for rendering.
            */
            public get matProps(): UnityEngine.MaterialPropertyBlock;
            public set matProps(value: UnityEngine.MaterialPropertyBlock);
            /** Describes if geometry should cast shadows.
            */
            public get shadowCastingMode(): UnityEngine.Rendering.ShadowCastingMode;
            public set shadowCastingMode(value: UnityEngine.Rendering.ShadowCastingMode);
            /** Descripes if the rendered geometry should receive shadows.
            */
            public get receiveShadows(): boolean;
            public set receiveShadows(value: boolean);
            /** The type of light probe usage.
            */
            public get lightProbeUsage(): UnityEngine.Rendering.LightProbeUsage;
            public set lightProbeUsage(value: UnityEngine.Rendering.LightProbeUsage);
            /** Light Probe Proxy Volume (LPPV) used for rendering.
            */
            public get lightProbeProxyVolume(): UnityEngine.LightProbeProxyVolume;
            public set lightProbeProxyVolume(value: UnityEngine.LightProbeProxyVolume);
            /** Uses the RenderParams.sceneCullingMask property to specify a custom SceneManagement.SceneCullingMasks. This property is only available in the Editor, you can still access it in a Player but it'll be ignored.
            */
            public get overrideSceneCullingMask(): boolean;
            public set overrideSceneCullingMask(value: boolean);
            /** Overrides the scene culling mask for the rendered object. This can help you control prefab stage visibility or entities sub-scene visibiliy. This property is only available in the Editor, you can still access it in a Player but it'll be ignored..
            */
            public get sceneCullingMask(): bigint;
            public set sceneCullingMask(value: bigint);
            public constructor ($mat: UnityEngine.Material)
        }
        /** Topology of Mesh faces.
        */
        enum MeshTopology
        { Triangles = 0, Quads = 2, Lines = 3, LineStrip = 4, Points = 5 }
        /** A block of material values to apply.
        */
        class MaterialPropertyBlock extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is the material property block empty? (Read Only)
            */
            public get isEmpty(): boolean;
            /** Clear material property values.
            */
            public Clear () : void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The int value to set.
            */
            public SetInt ($name: string, $value: number) : void
            /** This method is deprecated. Use SetFloat or SetInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The int value to set.
            */
            public SetInt ($nameID: number, $value: number) : void
            /** Set a float property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The float value to set.
            */
            public SetFloat ($name: string, $value: number) : void
            /** Set a float property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The float value to set.
            */
            public SetFloat ($nameID: number, $value: number) : void
            /** Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The integer value to set.
            */
            public SetInteger ($name: string, $value: number) : void
            /** Adds a property to the block. If an integer property with the given name already exists, the old value is replaced.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The integer value to set.
            */
            public SetInteger ($nameID: number, $value: number) : void
            /** Set a vector property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Vector4 value to set.
            */
            public SetVector ($name: string, $value: UnityEngine.Vector4) : void
            /** Set a vector property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Vector4 value to set.
            */
            public SetVector ($nameID: number, $value: UnityEngine.Vector4) : void
            /** Set a color property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Color value to set.
            */
            public SetColor ($name: string, $value: UnityEngine.Color) : void
            /** Set a color property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Color value to set.
            */
            public SetColor ($nameID: number, $value: UnityEngine.Color) : void
            /** Set a matrix property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The matrix value to set.
            */
            public SetMatrix ($name: string, $value: UnityEngine.Matrix4x4) : void
            /** Set a matrix property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The matrix value to set.
            */
            public SetMatrix ($nameID: number, $value: UnityEngine.Matrix4x4) : void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.ComputeBuffer) : void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer) : void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer ($name: string, $value: UnityEngine.GraphicsBuffer) : void
            /** Set a buffer property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The ComputeBuffer or GraphicsBuffer to set.
            */
            public SetBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer) : void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($name: string, $value: UnityEngine.Texture) : void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.Texture) : void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($name: string, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $value The Texture to set.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($nameID: number, $value: UnityEngine.RenderTexture, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($name: string, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.
            * @param $name The name of the constant buffer to override.
            * @param $value The buffer to override the constant buffer values with.
            * @param $offset Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            * @param $nameID The shader property ID of the constant buffer to override.
            */
            public SetConstantBuffer ($nameID: number, $value: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            public SetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public SetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            /** Set a float array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            */
            public SetFloatArray ($name: string, $values: System.Array$1<number>) : void
            /** Set a float array property.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            */
            public SetFloatArray ($nameID: number, $values: System.Array$1<number>) : void
            public SetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public SetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Set a vector array property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            * @param $name The name of the property.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a vector array property.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $values The array to set.
            * @param $name The name of the property.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            public SetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public SetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            /** Set a matrix array property.
            * @param $name The name of the property.
            * @param $values The name ID of the property retrieved by Shader.PropertyToID.
            * @param $nameID The array to set.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set a matrix array property.
            * @param $name The name of the property.
            * @param $values The name ID of the property retrieved by Shader.PropertyToID.
            * @param $nameID The array to set.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasProperty ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the property with the given name or name ID. To set the property, use one of the Set methods for MaterialPropertyBlock.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasProperty ($nameID: number) : boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInt ($name: string) : boolean
            /** This method is deprecated. Use HasFloat or HasInteger instead.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInt ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasFloat ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Float property with the given name or name ID. To set the property, use SetFloat.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasFloat ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInteger ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Integer property with the given name or name ID. To set the property, use SetInteger.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasInteger ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasTexture ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Texture property with the given name or name ID. To set the property, use SetTexture.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasTexture ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasMatrix ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Matrix property with the given name or name ID. This also works with the Matrix Array property. To set the property, use SetMatrix.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasMatrix ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasVector ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Vector property with the given name or name ID. This also works with the Vector Array property. To set the property, use SetVector.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasVector ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasColor ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the Color property with the given name or name ID. To set the property, use SetColor.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasColor ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasBuffer ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the ComputeBuffer property with the given name or name ID. To set the property, use SetBuffer.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the property.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasBuffer ($nameID: number) : boolean
            /** Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasConstantBuffer ($name: string) : boolean
            /** Checks if MaterialPropertyBlock has the ConstantBuffer property with the given name or name ID. To set the property, use SetConstantBuffer.
            * @param $name The name of the property.
            * @param $nameID The name ID of the property. Use Shader.PropertyToID to get this ID.
            * @returns Returns true if MaterialPropertyBlock has this property. 
            */
            public HasConstantBuffer ($nameID: number) : boolean
            /** Get a float from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat ($name: string) : number
            /** Get a float from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloat ($nameID: number) : number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt ($name: string) : number
            /** This method is deprecated. Use GetFloat or GetInteger instead.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInt ($nameID: number) : number
            /** Get an integer from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger ($name: string) : number
            /** Get an integer from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetInteger ($nameID: number) : number
            /** Get a vector from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector ($name: string) : UnityEngine.Vector4
            /** Get a vector from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVector ($nameID: number) : UnityEngine.Vector4
            /** Get a color from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor ($name: string) : UnityEngine.Color
            /** Get a color from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetColor ($nameID: number) : UnityEngine.Color
            /** Get a matrix from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix ($name: string) : UnityEngine.Matrix4x4
            /** Get a matrix from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrix ($nameID: number) : UnityEngine.Matrix4x4
            /** Get a texture from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture ($name: string) : UnityEngine.Texture
            /** Get a texture from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetTexture ($nameID: number) : UnityEngine.Texture
            /** Get a float array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloatArray ($name: string) : System.Array$1<number>
            /** Get a float array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetFloatArray ($nameID: number) : System.Array$1<number>
            /** Get a vector array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVectorArray ($name: string) : System.Array$1<UnityEngine.Vector4>
            /** Get a vector array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetVectorArray ($nameID: number) : System.Array$1<UnityEngine.Vector4>
            /** Get a matrix array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrixArray ($name: string) : System.Array$1<UnityEngine.Matrix4x4>
            /** Get a matrix array from the property block.
            * @param $nameID The name ID of the property retrieved by Shader.PropertyToID.
            * @param $name The name of the property.
            */
            public GetMatrixArray ($nameID: number) : System.Array$1<UnityEngine.Matrix4x4>
            public GetFloatArray ($name: string, $values: System.Collections.Generic.List$1<number>) : void
            public GetFloatArray ($nameID: number, $values: System.Collections.Generic.List$1<number>) : void
            public GetVectorArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetVectorArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            public GetMatrixArray ($name: string, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public GetMatrixArray ($nameID: number, $values: System.Collections.Generic.List$1<UnityEngine.Matrix4x4>) : void
            public CopySHCoefficientArraysFrom ($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            /** This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.
            * @param $lightProbes The array of SH values to copy from.
            */
            public CopySHCoefficientArraysFrom ($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            public CopySHCoefficientArraysFrom ($lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number) : void
            /** This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.
            * @param $lightProbes The array of SH values to copy from.
            * @param $sourceStart The index of the first element in the source array to copy from.
            * @param $destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param $count The number of elements to copy.
            */
            public CopySHCoefficientArraysFrom ($lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $sourceStart: number, $destStart: number, $count: number) : void
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.
            * @param $occlusionProbes The array of probe occlusion values to copy from.
            */
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Array$1<UnityEngine.Vector4>) : void
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number) : void
            /** This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.
            * @param $occlusionProbes The array of probe occlusion values to copy from.
            * @param $sourceStart The index of the first element in the source array to copy from.
            * @param $destStart The index of the first element in the destination MaterialPropertyBlock array to copy to.
            * @param $count The number of elements to copy.
            */
            public CopyProbeOcclusionArrayFrom ($occlusionProbes: System.Array$1<UnityEngine.Vector4>, $sourceStart: number, $destStart: number, $count: number) : void
            public constructor ()
        }
        /** The Light Probe Proxy Volume component offers the possibility to use higher resolution lighting for large non-static GameObjects.
        */
        class LightProbeProxyVolume extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Checks if Light Probe Proxy Volumes are supported.
            */
            public static get isFeatureSupported(): boolean;
            /** The world-space bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get boundsGlobal(): UnityEngine.Bounds;
            /** The size of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get sizeCustom(): UnityEngine.Vector3;
            public set sizeCustom(value: UnityEngine.Vector3);
            /** The local-space origin of the bounding box in which the 3D grid of interpolated Light Probes is generated.
            */
            public get originCustom(): UnityEngine.Vector3;
            public set originCustom(value: UnityEngine.Vector3);
            /** Interpolated Light Probe density.
            */
            public get probeDensity(): number;
            public set probeDensity(value: number);
            /** The 3D grid resolution on the x-axis.
            */
            public get gridResolutionX(): number;
            public set gridResolutionX(value: number);
            /** The 3D grid resolution on the y-axis.
            */
            public get gridResolutionY(): number;
            public set gridResolutionY(value: number);
            /** The 3D grid resolution on the z-axis.
            */
            public get gridResolutionZ(): number;
            public set gridResolutionZ(value: number);
            /** The bounding box mode for generating the 3D grid of interpolated Light Probes.
            */
            public get boundingBoxMode(): UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
            public set boundingBoxMode(value: UnityEngine.LightProbeProxyVolume.BoundingBoxMode);
            /** The resolution mode for generating the grid of interpolated Light Probes.
            */
            public get resolutionMode(): UnityEngine.LightProbeProxyVolume.ResolutionMode;
            public set resolutionMode(value: UnityEngine.LightProbeProxyVolume.ResolutionMode);
            /** The mode in which the interpolated Light Probe positions are generated.
            */
            public get probePositionMode(): UnityEngine.LightProbeProxyVolume.ProbePositionMode;
            public set probePositionMode(value: UnityEngine.LightProbeProxyVolume.ProbePositionMode);
            /** Sets the way the Light Probe Proxy Volume refreshes.
            */
            public get refreshMode(): UnityEngine.LightProbeProxyVolume.RefreshMode;
            public set refreshMode(value: UnityEngine.LightProbeProxyVolume.RefreshMode);
            /** Determines how many Spherical Harmonics bands will be evaluated to compute the ambient color.
            */
            public get qualityMode(): UnityEngine.LightProbeProxyVolume.QualityMode;
            public set qualityMode(value: UnityEngine.LightProbeProxyVolume.QualityMode);
            /** The texture data format used by the Light Probe Proxy Volume 3D texture.
            */
            public get dataFormat(): UnityEngine.LightProbeProxyVolume.DataFormat;
            public set dataFormat(value: UnityEngine.LightProbeProxyVolume.DataFormat);
            /** Triggers an update of the Light Probe Proxy Volume.
            */
            public Update () : void
            public constructor ()
        }
        /** Low-level graphics library.
        */
        class GL extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Mode for Begin: draw triangles.
            */
            public static TRIANGLES : number
            /** Mode for Begin: draw triangle strip.
            */
            public static TRIANGLE_STRIP : number
            /** Mode for Begin: draw quads.
            */
            public static QUADS : number
            /** Mode for Begin: draw lines.
            */
            public static LINES : number
            /** Mode for Begin: draw line strip.
            */
            public static LINE_STRIP : number
            /** Should rendering be done in wireframe?
            */
            public static get wireframe(): boolean;
            public static set wireframe(value: boolean);
            /** Controls whether Linear-to-sRGB color conversion is performed while rendering.
            */
            public static get sRGBWrite(): boolean;
            public static set sRGBWrite(value: boolean);
            /** Select whether to invert the backface culling (true) or not (false).
            */
            public static get invertCulling(): boolean;
            public static set invertCulling(value: boolean);
            /** Gets or sets the modelview matrix.
            */
            public static get modelview(): UnityEngine.Matrix4x4;
            public static set modelview(value: UnityEngine.Matrix4x4);
            /** Submit a vertex.
            */
            public static Vertex3 ($x: number, $y: number, $z: number) : void
            /** Submit a vertex.
            */
            public static Vertex ($v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y,z) for all texture units.
            */
            public static TexCoord3 ($x: number, $y: number, $z: number) : void
            /** Sets current texture coordinate (v.x,v.y,v.z) for all texture units.
            */
            public static TexCoord ($v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y) for all texture units.
            */
            public static TexCoord2 ($x: number, $y: number) : void
            /** Sets current texture coordinate (x,y,z) to the actual texture unit.
            */
            public static MultiTexCoord3 ($unit: number, $x: number, $y: number, $z: number) : void
            /** Sets current texture coordinate (v.x,v.y,v.z) to the actual texture unit.
            */
            public static MultiTexCoord ($unit: number, $v: UnityEngine.Vector3) : void
            /** Sets current texture coordinate (x,y) for the actual texture unit.
            */
            public static MultiTexCoord2 ($unit: number, $x: number, $y: number) : void
            /** Sets current vertex color.
            */
            public static Color ($c: UnityEngine.Color) : void
            /** Sends queued-up commands in the driver's command buffer to the GPU.
            */
            public static Flush () : void
            /** Resolves the render target for subsequent operations sampling from it.
            */
            public static RenderTargetBarrier () : void
            /** Sets the current model matrix to the one specified.
            */
            public static MultMatrix ($m: UnityEngine.Matrix4x4) : void
            /** Saves the model, view and projection matrices to the top of the matrix stack.
            */
            public static PushMatrix () : void
            /** Restores the model, view and projection matrices off the top of the matrix stack.
            */
            public static PopMatrix () : void
            /** Load an identity into the current model and view matrices.
            */
            public static LoadIdentity () : void
            /** Helper function to set up an orthograhic projection.
            */
            public static LoadOrtho () : void
            /** Setup a matrix for pixel-correct rendering.
            */
            public static LoadPixelMatrix () : void
            /** Load an arbitrary matrix to the current projection matrix.
            */
            public static LoadProjectionMatrix ($mat: UnityEngine.Matrix4x4) : void
            /** Invalidate the internally cached render state.
            */
            public static InvalidateState () : void
            /** Compute GPU projection matrix from camera's projection matrix.
            * @param $proj Source projection matrix.
            * @param $renderIntoTexture Will this projection be used for rendering into a RenderTexture?
            * @returns Adjusted projection matrix for the current graphics API. 
            */
            public static GetGPUProjectionMatrix ($proj: UnityEngine.Matrix4x4, $renderIntoTexture: boolean) : UnityEngine.Matrix4x4
            /** Setup a matrix for pixel-correct rendering.
            */
            public static LoadPixelMatrix ($left: number, $right: number, $bottom: number, $top: number) : void
            /** Send a user-defined event to a native code plugin.
            * @param $eventID User defined id to send to the callback.
            * @param $callback Native code callback to queue for Unity's renderer to invoke.
            */
            public static IssuePluginEvent ($callback: System.IntPtr, $eventID: number) : void
            /** Begin drawing 3D primitives.
            * @param $mode Primitives to draw: can be TRIANGLES, TRIANGLE_STRIP, QUADS or LINES.
            */
            public static Begin ($mode: number) : void
            /** End drawing 3D primitives.
            */
            public static End () : void
            /** Clear the current render buffer.
            * @param $clearDepth Should the depth buffer be cleared?
            * @param $clearColor Should the color buffer be cleared?
            * @param $backgroundColor The color to clear with, used only if clearColor is true.
            * @param $depth The depth to clear the z-buffer with, used only if clearDepth is true. The valid
            range is from 0 (near plane) to 1 (far plane). The value is graphics API agnostic: the abstraction layer will convert
            the value to match the convention of the current graphics API.
            */
            public static Clear ($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color, $depth: number) : void
            public static Clear ($clearDepth: boolean, $clearColor: boolean, $backgroundColor: UnityEngine.Color) : void
            /** Set the rendering viewport.
            */
            public static Viewport ($pixelRect: UnityEngine.Rect) : void
            /** Clear the current render buffer with camera's skybox.
            * @param $clearDepth Should the depth buffer be cleared?
            * @param $camera Camera to get projection parameters and skybox from.
            */
            public static ClearWithSkybox ($clearDepth: boolean, $camera: UnityEngine.Camera) : void
            public constructor ()
        }
        /** Scales render textures to support dynamic resolution if the target platform/graphics API supports it.
        */
        class ScalableBufferManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Width scale factor to control dynamic resolution.
            */
            public static get widthScaleFactor(): number;
            /** Height scale factor to control dynamic resolution.
            */
            public static get heightScaleFactor(): number;
            /** Function to resize all buffers marked as DynamicallyScalable.
            * @param $widthScale New scale factor for the width the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            * @param $heightScale New scale factor for the height the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.
            */
            public static ResizeBuffers ($widthScale: number, $heightScale: number) : void
        }
        /** Struct containing basic FrameTimings and accompanying relevant data.
        */
        class FrameTiming extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** This is the total CPU frame time calculated as the time between ends of two frames, which includes all waiting time and overheads, in ms.
            */
            public cpuFrameTime : number
            /** Total time between start of the frame and when the main thread finished the job, in ms.
            */
            public cpuMainThreadFrameTime : number
            /** The CPU time the last frame spent in waiting for Present on the main thread, in ms.
            */
            public cpuMainThreadPresentWaitTime : number
            /** The frame time between start of the work on the render thread and when Present was called, in ms.
            */
            public cpuRenderThreadFrameTime : number
            /** The GPU time for a given frame, in ms.
            */
            public gpuFrameTime : number
            /** This is the CPU clock time of the time when the frame was started.
            */
            public frameStartTimestamp : bigint
            /** This is the CPU clock time of the time when the first job was submitted to GPU.
            */
            public firstSubmitTimestamp : bigint
            /** This is the CPU clock time at the point Present was called for the current frame.
            */
            public cpuTimePresentCalled : bigint
            /** This is the CPU clock time at the point GPU finished rendering the frame and interrupted the CPU.
            */
            public cpuTimeFrameComplete : bigint
            /** This was the height scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.
            */
            public heightScale : number
            /** This was the width scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.
            */
            public widthScale : number
            /** This was the vsync mode for the given frame and the linked frame timings.
            */
            public syncInterval : number
        }
        /** The FrameTimingManager allows the user to capture and access FrameTiming data for multiple frames.
        */
        class FrameTimingManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Check if frame timing statistics are enabled.
            * @returns Whether frame timing statistics are enabled. 
            */
            public static IsFeatureEnabled () : boolean
            /** This function triggers the FrameTimingManager to capture a snapshot of FrameTiming's data, that can then be accessed by the user.
            */
            public static CaptureFrameTimings () : void
            /** Allows the user to access the currently captured FrameTimings.
            * @param $numFrames User supplies a desired number of frames they would like FrameTimings for. This should be equal to or less than the maximum FrameTimings the platform can capture.
            * @param $timings An array of FrameTiming structs that is passed in by the user and will be filled with data as requested. It is the users job to make sure the array that is passed is large enough to hold the requested number of FrameTimings.
            * @returns Returns the number of FrameTimings it actually was able to get. This will always be equal to or less than the requested numFrames depending on availability of captured FrameTimings. 
            */
            public static GetLatestTimings ($numFrames: number, $timings: System.Array$1<UnityEngine.FrameTiming>) : number
            /** This returns the number of vsyncs per second on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns Number of vsyncs per second of the current platform. 
            */
            public static GetVSyncsPerSecond () : number
            /** This returns the frequency of GPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns GPU timer frequency for current platform. 
            */
            public static GetGpuTimerFrequency () : bigint
            /** This returns the frequency of CPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.
            * @returns CPU timer frequency for current platform. 
            */
            public static GetCpuTimerFrequency () : bigint
        }
        /** Data of a lightmap.
        */
        class LightmapData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Lightmap storing color of incoming light.
            */
            public get lightmapColor(): UnityEngine.Texture2D;
            public set lightmapColor(value: UnityEngine.Texture2D);
            /** Lightmap storing dominant direction of incoming light.
            */
            public get lightmapDir(): UnityEngine.Texture2D;
            public set lightmapDir(value: UnityEngine.Texture2D);
            /** Texture storing occlusion mask per light (ShadowMask, up to four lights).
            */
            public get shadowMask(): UnityEngine.Texture2D;
            public set shadowMask(value: UnityEngine.Texture2D);
            public constructor ()
        }
        /** Class that represents textures in C# code.
        */
        class Texture2D extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** The name of the texture mipmap limit group that this texture is associated with. (Read Only)
            */
            public get mipmapLimitGroup(): string;
            /** The number of high resolution mipmap levels from the texture that Unity doesn't upload to the GPU. (Read Only)
            */
            public get activeMipmapLimit(): number;
            /** Gets a small Texture with all white pixels.
            */
            public static get whiteTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all black pixels.
            */
            public static get blackTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all red pixels.
            */
            public static get redTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get grayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with all gray pixels.
            */
            public static get linearGrayTexture(): UnityEngine.Texture2D;
            /** Gets a small Texture with pixels that represent surface normal vectors at a neutral position.
            */
            public static get normalTexture(): UnityEngine.Texture2D;
            public get isReadable(): boolean;
            /** Returns true if the VTOnly checkbox was checked when the texture was imported; otherwise returns false. For additional information, see TextureImporter.vtOnly.
            */
            public get vtOnly(): boolean;
            /** Determines whether mipmap streaming is enabled for this Texture.
            */
            public get streamingMipmaps(): boolean;
            /** Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            /** The mipmap level to load.
            */
            public get requestedMipmapLevel(): number;
            public set requestedMipmapLevel(value: number);
            /** Restricts the mipmap streaming system to a minimum mip level for this Texture.
            */
            public get minimumMipmapLevel(): number;
            public set minimumMipmapLevel(value: number);
            /** The mipmap level calculated by the streaming system, which takes into account the streaming Cameras and the location of the objects containing this Texture. This is unaffected by requestedMipmapLevel or minimumMipmapLevel.
            */
            public get calculatedMipmapLevel(): number;
            /** The mipmap level that the streaming system would load before memory budgets are applied.
            */
            public get desiredMipmapLevel(): number;
            /** The mipmap level that the mipmap streaming system is in the process of loading.
            */
            public get loadingMipmapLevel(): number;
            /** The mipmap level that is currently loaded by the streaming system.
            */
            public get loadedMipmapLevel(): number;
            /** Indicates whether this texture was imported with TextureImporter.alphaIsTransparency enabled. This setting is available only in the Editor scripts. Note that changing this setting will have no effect; it must be enabled in TextureImporter instead.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** This property causes a texture to ignore all texture mipmap limit settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** Compress texture at runtime to DXT/BCn or ETC formats.
            */
            public Compress ($highQuality: boolean) : void
            /** Resets the requestedMipmapLevel field.
            */
            public ClearRequestedMipmapLevel () : void
            /** Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.
            * @returns True if the mipmap level requested by requestedMipmapLevel has finished loading. 
            */
            public IsRequestedMipmapLevelLoaded () : boolean
            /** Resets the minimumMipmapLevel field.
            */
            public ClearMinimumMipmapLevel () : void
            /** Updates Unity texture to use different native texture object.
            * @param $nativeTex Native 2D texture object.
            */
            public UpdateExternalTexture ($nativeTex: System.IntPtr) : void
            /** Gets the raw data from a texture, as a copy.
            * @returns A byte array that contains raw texture data. 
            */
            public GetRawTextureData () : System.Array$1<number>
            /** Gets the pixel color data for part of a mipmap level as Color structs.
            * @param $x The starting x position of the section to fetch.
            * @param $y The starting y position of the section to fetch.
            * @param $blockWidth The width of the section to fetch.
            * @param $blockHeight The height of the section to fetch.
            * @param $miplevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for part of a mipmap level as Color structs.
            * @param $x The starting x position of the section to fetch.
            * @param $y The starting y position of the section to fetch.
            * @param $blockWidth The width of the section to fetch.
            * @param $blockHeight The height of the section to fetch.
            * @param $miplevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($miplevel: number) : System.Array$1<UnityEngine.Color32>
            public GetPixels32 () : System.Array$1<UnityEngine.Color32>
            /** Packs multiple Textures into a texture atlas.
            * @param $textures Array of textures to pack into the atlas.
            * @param $padding Padding in pixels between the packed textures.
            * @param $maximumAtlasSize Maximum size of the resulting texture.
            * @param $makeNoLongerReadable Should the texture be marked as no longer readable?
            * @returns An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails. 
            */
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number, $makeNoLongerReadable: boolean) : System.Array$1<UnityEngine.Rect>
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number, $maximumAtlasSize: number) : System.Array$1<UnityEngine.Rect>
            public PackTextures ($textures: System.Array$1<UnityEngine.Texture2D>, $padding: number) : System.Array$1<UnityEngine.Rect>
            /** Creates a Unity Texture out of an externally created native texture object.
            * @param $nativeTex Native 2D texture object.
            * @param $width Width of texture in pixels.
            * @param $height Height of texture in pixels.
            * @param $format Format of underlying texture object.
            * @param $mipmap Does the texture have mipmaps?
            * @param $linear Is texture using linear color space?
            */
            public static CreateExternalTexture ($width: number, $height: number, $format: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $nativeTex: System.IntPtr) : UnityEngine.Texture2D
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel ($x: number, $y: number, $color: UnityEngine.Color) : void
            /** Sets the pixel color at coordinates (x,y).
            * @param $x The x coordinate of the pixel to set. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through (texture height - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel ($x: number, $y: number, $color: UnityEngine.Color, $mipLevel: number) : void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            public SetPixels ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color>) : void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>) : void
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel ($x: number, $y: number) : UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y).
            * @param $x The x coordinate of the pixel to get. The range is 0 through (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through (texture height - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel ($x: number, $y: number, $mipLevel: number) : UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear ($u: number, $v: number) : UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear ($u: number, $v: number, $mipLevel: number) : UnityEngine.Color
            /** Sets the raw data of an entire texture in CPU memory.
            * @param $data The array of data to use.
            * @param $size The size of the data in bytes.
            */
            public LoadRawTextureData ($data: System.IntPtr, $size: number) : void
            /** Sets the raw data of an entire texture in CPU memory.
            * @param $data The array of data to use.
            * @param $size The size of the data in bytes.
            */
            public LoadRawTextureData ($data: System.Array$1<number>) : void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width The new width of the texture.
            * @param $height The new height of the texture.
            * @param $format The new format of the texture.
            * @param $hasMipMap Whether the texture reserves memory for a full mipmap chain.
            * @returns true if the reinitialization was a success. 
            */
            public Reinitialize ($width: number, $height: number) : boolean
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width The new width of the texture.
            * @param $height The new height of the texture.
            * @param $format The new format of the texture.
            * @param $hasMipMap Whether the texture reserves memory for a full mipmap chain.
            * @returns true if the reinitialization was a success. 
            */
            public Reinitialize ($width: number, $height: number, $format: UnityEngine.TextureFormat, $hasMipMap: boolean) : boolean
            /** Reinitializes a Texture2D, making it possible for you to replace width, height, textureformat, and graphicsformat data for that texture.
            * @param $width The new width of the texture.
            * @param $height The new height of the texture.
            * @param $format The new format of the texture.
            * @param $hasMipMap Whether the texture reserves memory for a full mipmap chain.
            * @returns true if the reinitialization was a success. 
            */
            public Reinitialize ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $hasMipMap: boolean) : boolean
            /** Reads pixels from the current render target and writes them to a texture.
            * @param $source The region of the render target to read from.
            * @param $destX The x position in the texture to write the pixels to.
            * @param $destY The y position in the texture to write the pixels to.
            * @param $recalculateMipMaps When the value is true, Unity automatically recalculates the mipmap for the texture after it writes the pixel data. Otherwise, Unity doesn't do this automatically.
            */
            public ReadPixels ($source: UnityEngine.Rect, $destX: number, $destY: number, $recalculateMipMaps: boolean) : void
            public ReadPixels ($source: UnityEngine.Rect, $destX: number, $destY: number) : void
            public static GenerateAtlas ($sizes: System.Array$1<UnityEngine.Vector2>, $padding: number, $atlasSize: number, $results: System.Collections.Generic.List$1<UnityEngine.Rect>) : boolean
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>) : void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            /** Sets the pixel colors of part of a mipmap level.
            * @param $x The x coordinate to place the block of pixels at. The range is 0 through (texture width - 1).
            * @param $y The y coordinate to place the block of pixels at. The range is 0 through (texture height - 1).
            * @param $blockWidth The width of the block of pixels to set.
            * @param $blockHeight The height of the block of pixels to set.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array. Must be blockWidth x blockHeight in length.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($x: number, $y: number, $blockWidth: number, $blockHeight: number, $colors: System.Array$1<UnityEngine.Color32>) : void
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($miplevel: number) : System.Array$1<UnityEngine.Color>
            public GetPixels () : System.Array$1<UnityEngine.Color>
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ($width: number, $height: number)
            public constructor ()
        }
        /** Stores lightmaps of the Scene.
        */
        class LightmapSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Lightmap array.
            */
            public static get lightmaps(): System.Array$1<UnityEngine.LightmapData>;
            public static set lightmaps(value: System.Array$1<UnityEngine.LightmapData>);
            /** NonDirectional or CombinedDirectional Specular lightmaps rendering mode.
            */
            public static get lightmapsMode(): UnityEngine.LightmapsMode;
            public static set lightmapsMode(value: UnityEngine.LightmapsMode);
            /** Baked Light Probe data.
            */
            public static get lightProbes(): UnityEngine.LightProbes;
            public static set lightProbes(value: UnityEngine.LightProbes);
        }
        /** Stores light probe data for all currently loaded Scenes.
        */
        class LightProbes extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Positions of the baked light probes (Read Only).
            */
            public get positions(): System.Array$1<UnityEngine.Vector3>;
            /** Coefficients of baked light probes.
            */
            public get bakedProbes(): System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>;
            public set bakedProbes(value: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>);
            /** The number of light probes (Read Only).
            */
            public get count(): number;
            /** The number of light probes stored in this LightProbes object (Read Only).
            */
            public get countSelf(): number;
            /** The number of cells space is divided into (Read Only).
            */
            public get cellCount(): number;
            /** The number of cells space is divided into for this LightProbes object (Read Only).
            */
            public get cellCountSelf(): number;
            public static add_lightProbesUpdated ($value: System.Action) : void
            public static remove_lightProbesUpdated ($value: System.Action) : void
            public static add_tetrahedralizationCompleted ($value: System.Action) : void
            public static remove_tetrahedralizationCompleted ($value: System.Action) : void
            public static add_needsRetetrahedralization ($value: System.Action) : void
            public static remove_needsRetetrahedralization ($value: System.Action) : void
            /** Synchronously tetrahedralize the currently loaded LightProbe positions.
            */
            public static Tetrahedralize () : void
            /** Asynchronously tetrahedralize all currently loaded LightProbe positions.
            */
            public static TetrahedralizeAsync () : void
            /** Returns an interpolated probe for the given position for both real-time and baked light probes combined.
            */
            public static GetInterpolatedProbe ($position: UnityEngine.Vector3, $renderer: UnityEngine.Renderer, $probe: $Ref<UnityEngine.Rendering.SphericalHarmonicsL2>) : void
            /** Calculate light probes and occlusion probes at the given world space positions.
            * @param $positions The array of world space positions used to evaluate the probes.
            * @param $lightProbes The array where the resulting light probes are written to.
            * @param $occlusionProbes The array where the resulting occlusion probes are written to.
            */
            public static CalculateInterpolatedLightAndOcclusionProbes ($positions: System.Array$1<UnityEngine.Vector3>, $lightProbes: System.Array$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Array$1<UnityEngine.Vector4>) : void
            public static CalculateInterpolatedLightAndOcclusionProbes ($positions: System.Collections.Generic.List$1<UnityEngine.Vector3>, $lightProbes: System.Collections.Generic.List$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $occlusionProbes: System.Collections.Generic.List$1<UnityEngine.Vector4>) : void
            /** Gets the shared LightProbes object for a specific scene.
            * @param $scene The scene to get the shared light probe data for.
            * @returns The shared light probe data for the scene. 
            */
            public static GetSharedLightProbesForScene ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.LightProbes
            /** Gets an instantiated clone of the LightProbes object for a specific scene.
            * @param $scene The scene to get the shared light probe data for.
            * @returns The cloned light probe data for the scene. 
            */
            public static GetInstantiatedLightProbesForScene ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.LightProbes
            /** Gets the positions of the baked light probes stored in this LightProbes object.
            * @returns The array of positions of the baked light probes. 
            */
            public GetPositionsSelf () : System.Array$1<UnityEngine.Vector3>
            /** Sets the positions of the baked light probes stored in this LightProbes object.
            * @param $checkForDuplicatePositions Whether to check for duplicate light probe positions at the cost of performance.
            * @param $positions The positions to set.
            * @returns true when the positions were successfully set. Otherwise false. 
            */
            public SetPositionsSelf ($positions: System.Array$1<UnityEngine.Vector3>, $checkForDuplicatePositions: boolean) : boolean
        }
        /** Single, dual, or directional lightmaps rendering mode, used only in GIWorkflowMode.Legacy
        */
        enum LightmapsModeLegacy
        { Single = 0, Dual = 1, Directional = 2 }
        /** Color space for player settings.
        */
        enum ColorSpace
        { Uninitialized = -1, Gamma = 0, Linear = 1 }
        /** The type for the number of bits to be used when an HDR display is active in each color channel of swap chain buffers. The bit count also defines the method Unity uses to render content to the display.
        */
        enum D3DHDRDisplayBitDepth
        { D3DHDRDisplayBitDepth10 = 0, D3DHDRDisplayBitDepth16 = 1 }
        /** Provides access to HDR display settings and information.
        */
        class HDROutputSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of currently connected displays with possible HDR availability.
            */
            public static displays : System.Array$1<UnityEngine.HDROutputSettings>
            /** The HDROutputSettings for the main display.
            */
            public static get main(): UnityEngine.HDROutputSettings;
            /** Describes whether HDR output is currently active on the display. It is true if this is the case, and @@false@ otherwise.
            */
            public get active(): boolean;
            /** Describes whether HDR is currently available on your primary display and that you have HDR enabled in your Unity Project. It is true if this is the case, and false otherwise.
            */
            public get available(): boolean;
            /** Describes whether Unity performs HDR tonemapping automatically.
            */
            public get automaticHDRTonemapping(): boolean;
            public set automaticHDRTonemapping(value: boolean);
            /** The ColorGamut used to output to the active HDR display.
            */
            public get displayColorGamut(): UnityEngine.ColorGamut;
            /** The RenderTextureFormat of the display buffer for the active HDR display.
            */
            public get format(): UnityEngine.RenderTextureFormat;
            /** The Experimental.Rendering.GraphicsFormat of the display buffer for the active HDR display.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            /** The base luminance of a white paper surface in nits or candela per square meter (cd/m2).
            */
            public get paperWhiteNits(): number;
            public set paperWhiteNits(value: number);
            /** Maximum input luminance at which gradation is preserved even when the entire screen is bright.
            */
            public get maxFullFrameToneMapLuminance(): number;
            /** Maximum input luminance at which gradation is preserved when 10% of the screen is bright.
            */
            public get maxToneMapLuminance(): number;
            /** Minimum input luminance at which gradation is identifiable.
            */
            public get minToneMapLuminance(): number;
            /** Describes whether the user has requested to change the HDR Output Mode. It is true if this is the case, and false otherwise.
            */
            public get HDRModeChangeRequested(): boolean;
            /** Use this function to request a change in the HDR Output Mode and in the value of HDROutputSettings.active.
            * @param $enabled Indicates whether HDR should be enabled.
            */
            public RequestHDRModeChange ($enabled: boolean) : void
        }
        /** Format of a RenderTexture.
        */
        enum RenderTextureFormat
        { ARGB32 = 0, Depth = 1, ARGBHalf = 2, Shadowmap = 3, RGB565 = 4, ARGB4444 = 5, ARGB1555 = 6, Default = 7, ARGB2101010 = 8, DefaultHDR = 9, ARGB64 = 10, ARGBFloat = 11, RGFloat = 12, RGHalf = 13, RFloat = 14, RHalf = 15, R8 = 16, ARGBInt = 17, RGInt = 18, RInt = 19, BGRA32 = 20, RGB111110Float = 22, RG32 = 23, RGBAUShort = 24, RG16 = 25, BGRA10101010_XR = 26, BGR101010_XR = 27, R16 = 28 }
        /** Utility class to query properties of a ColorGamut.
        */
        class ColorGamutUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the color primaries mapped to the color space used by the given gamut.
            * @param $gamut The color gamut to look up.
            * @returns Color primaries for the given gamut. 
            */
            public static GetColorPrimaries ($gamut: UnityEngine.ColorGamut) : UnityEngine.ColorPrimaries
            /** Returns the white point that the given gamut uses.
            * @param $gamut The color gamut to look up.
            * @returns The white point that the given gamut uses. 
            */
            public static GetWhitePoint ($gamut: UnityEngine.ColorGamut) : UnityEngine.WhitePoint
            /** Returns the transfer function that the given gamut uses on the current platform.
            * @param $gamut The color gamut to look up.
            * @returns The transfer function that the given gamut uses. 
            */
            public static GetTransferFunction ($gamut: UnityEngine.ColorGamut) : UnityEngine.TransferFunction
            public constructor ()
        }
        /** Represents a color space based on its set of red, green, and blue color primaries.
        */
        enum ColorPrimaries
        { Unknown = -1, Rec709 = 0, Rec2020 = 1, P3 = 2 }
        /** The reference white point of a color space.
        */
        enum WhitePoint
        { Unknown = -1, D65 = 0 }
        /** Contains electro-optical transfer function options.
        */
        enum TransferFunction
        { Unknown = -1, sRGB = 0, BT1886 = 1, PQ = 2, Linear = 3, Gamma22 = 4 }
        /** The type of motion vectors that should be generated.
        */
        enum MotionVectorGenerationMode
        { Camera = 0, Object = 1, ForceNoMotion = 2 }
        /** This represents the script interface for.
        */
        class QualitySettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The maximum number of pixel lights that should affect any object.
            */
            public static get pixelLightCount(): number;
            public static set pixelLightCount(value: number);
            /** Real-time Shadows type to be used.
            */
            public static get shadows(): UnityEngine.ShadowQuality;
            public static set shadows(value: UnityEngine.ShadowQuality);
            /** Directional light shadow projection.
            */
            public static get shadowProjection(): UnityEngine.ShadowProjection;
            public static set shadowProjection(value: UnityEngine.ShadowProjection);
            /** Number of cascades to use for directional light shadows.
            */
            public static get shadowCascades(): number;
            public static set shadowCascades(value: number);
            /** Shadow drawing distance.
            */
            public static get shadowDistance(): number;
            public static set shadowDistance(value: number);
            /** The default resolution of the shadow maps.
            */
            public static get shadowResolution(): UnityEngine.ShadowResolution;
            public static set shadowResolution(value: UnityEngine.ShadowResolution);
            /** The rendering mode of Shadowmask.
            */
            public static get shadowmaskMode(): UnityEngine.ShadowmaskMode;
            public static set shadowmaskMode(value: UnityEngine.ShadowmaskMode);
            /** Offset shadow frustum near plane.
            */
            public static get shadowNearPlaneOffset(): number;
            public static set shadowNearPlaneOffset(value: number);
            /** The normalized cascade distribution for a 2 cascade setup. The value defines the position of the cascade with respect to Zero.
            */
            public static get shadowCascade2Split(): number;
            public static set shadowCascade2Split(value: number);
            /** The normalized cascade start position for a 4 cascade setup. Each member of the vector defines the normalized position of the coresponding cascade with respect to Zero.
            */
            public static get shadowCascade4Split(): UnityEngine.Vector3;
            public static set shadowCascade4Split(value: UnityEngine.Vector3);
            /** Global multiplier for the LOD's switching distance.
            */
            public static get lodBias(): number;
            public static set lodBias(value: number);
            /** Global anisotropic filtering mode.
            */
            public static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
            public static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
            /** Indicates how many of the highest-resolution mips of each texture Unity does not upload at the given quality level. To set more specific mipmap limits, you can flag textures to ignore mipmap limits or assign them to mipmap limit groups.
            */
            public static get globalTextureMipmapLimit(): number;
            public static set globalTextureMipmapLimit(value: number);
            /** A maximum LOD level. All LOD groups.
            */
            public static get maximumLODLevel(): number;
            public static set maximumLODLevel(value: number);
            /** Enables or disables LOD Cross Fade.
            */
            public static get enableLODCrossFade(): boolean;
            public static set enableLODCrossFade(value: boolean);
            /** Budget for how many ray casts can be performed per frame for approximate collision testing.
            */
            public static get particleRaycastBudget(): number;
            public static set particleRaycastBudget(value: number);
            /** Should soft blending be used for particles?
            */
            public static get softParticles(): boolean;
            public static set softParticles(value: boolean);
            /** Use a two-pass shader for the vegetation in the terrain engine.
            */
            public static get softVegetation(): boolean;
            public static set softVegetation(value: boolean);
            /** Represents the number of vertical syncs that should pass between each frame.
            */
            public static get vSyncCount(): number;
            public static set vSyncCount(value: number);
            /** How much CPU usage to assign to the final lighting calculations at runtime.
            */
            public static get realtimeGICPUUsage(): number;
            public static set realtimeGICPUUsage(value: number);
            /** Choose the level of Multi-Sample Anti-aliasing (MSAA) that the GPU performs.
            */
            public static get antiAliasing(): number;
            public static set antiAliasing(value: number);
            /** Async texture upload provides timesliced async texture upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture data a ringbuffer whose size can be controlled is re-used.
            Use asyncUploadTimeSlice to set the time-slice in milliseconds for asynchronous texture uploads per
            frame. Minimum value is 1 and maximum is 33.
            */
            public static get asyncUploadTimeSlice(): number;
            public static set asyncUploadTimeSlice(value: number);
            /** Asynchronous texture and mesh data upload provides timesliced async texture and mesh data upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture and mesh data, Unity re-uses a ringbuffer whose size can be controlled.
            Use asyncUploadBufferSize to set the buffer size for asynchronous texture and mesh data uploads. The minimum value is 2 megabytes and the maximum value is 2047 megabytes. The buffer resizes automatically to fit the largest texture currently loading. To avoid a buffer resize (which can use extra system resources) set this value to the size of the largest texture in the Scene. If you have issues with excessive memory usage, you may need to reduce the value of this buffer or disable asyncUploadPersistentBuffer. Memory fragmentation can occur if you choose the latter option.
            */
            public static get asyncUploadBufferSize(): number;
            public static set asyncUploadBufferSize(value: number);
            /** This flag controls if the async upload pipeline's ring buffer remains allocated when there are no active loading operations.
            Set this to true, to make the ring buffer allocation persist after all upload operations have completed.
            If you have issues with excessive memory usage, you can set this to false. This means you reduce the runtime memory footprint, but memory fragmentation can occur.
            The default value is true.
            */
            public static get asyncUploadPersistentBuffer(): boolean;
            public static set asyncUploadPersistentBuffer(value: boolean);
            /** Enables or disables real-time reflection probes.
            */
            public static get realtimeReflectionProbes(): boolean;
            public static set realtimeReflectionProbes(value: boolean);
            /** If enabled, billboards will face towards camera position rather than camera orientation.
            */
            public static get billboardsFaceCameraPosition(): boolean;
            public static set billboardsFaceCameraPosition(value: boolean);
            /** Use the legacy pre-2022.2 algorithm for distributing details on terrain.
            */
            public static get useLegacyDetailDistribution(): boolean;
            public static set useLegacyDetailDistribution(value: boolean);
            /** In resolution scaling mode, this factor is used to multiply with the target Fixed DPI specified to get the actual Fixed DPI to use for this quality setting.
            */
            public static get resolutionScalingFixedDPIFactor(): number;
            public static set resolutionScalingFixedDPIFactor(value: number);
            /** Controls which fields should have their values overriden in active Terrains.
            */
            public static get terrainQualityOverrides(): UnityEngine.TerrainQualityOverrides;
            public static set terrainQualityOverrides(value: UnityEngine.TerrainQualityOverrides);
            /** Value set to Terrain.heightmapPixelError if TerrainQualityOverrides.PixelError is set in terrainQualityOverrides.
            */
            public static get terrainPixelError(): number;
            public static set terrainPixelError(value: number);
            /** Value set to Terrain.detailObjectDensity if TerrainQualityOverrides.DetailDensity is set in terrainQualityOverrides.
            */
            public static get terrainDetailDensityScale(): number;
            public static set terrainDetailDensityScale(value: number);
            /** Value set to Terrain.basemapDistance if TerrainQualityOverrides.BasemapDistance is set in terrainQualityOverrides.
            */
            public static get terrainBasemapDistance(): number;
            public static set terrainBasemapDistance(value: number);
            /** Value set to Terrain.detailObjectDistance if TerrainQualityOverrides.DetailDistance is set in terrainQualityOverrides.
            */
            public static get terrainDetailDistance(): number;
            public static set terrainDetailDistance(value: number);
            /** Value set to Terrain.treeDistance if TerrainQualityOverrides.TreeDistance is set in terrainQualityOverrides.
            */
            public static get terrainTreeDistance(): number;
            public static set terrainTreeDistance(value: number);
            /** Value set to Terrain.treeBillboardDistance if TerrainQualityOverrides.BillboardStart is set in terrainQualityOverrides.
            */
            public static get terrainBillboardStart(): number;
            public static set terrainBillboardStart(value: number);
            /** Value set to Terrain.treeCrossFadeLength if TerrainQualityOverrides.FadeLength is set in terrainQualityOverrides.
            */
            public static get terrainFadeLength(): number;
            public static set terrainFadeLength(value: number);
            /** Value set to Terrain.treeMaximumFullLODCount if TerrainQualityOverrides.MaxTrees is set in terrainQualityOverrides.
            */
            public static get terrainMaxTrees(): number;
            public static set terrainMaxTrees(value: number);
            /** The RenderPipelineAsset that defines the override render pipeline for the current quality level.
            */
            public static get renderPipeline(): UnityEngine.Rendering.RenderPipelineAsset;
            public static set renderPipeline(value: UnityEngine.Rendering.RenderPipelineAsset);
            /** The maximum number of bones per vertex that are taken into account during skinning, for all meshes in the project.
            */
            public static get skinWeights(): UnityEngine.SkinWeights;
            public static set skinWeights(value: UnityEngine.SkinWeights);
            /** The number of Quality Levels.
            */
            public static get count(): number;
            /** Enable automatic streaming of texture mipmap levels based on their distance from all active cameras.
            */
            public static get streamingMipmapsActive(): boolean;
            public static set streamingMipmapsActive(value: boolean);
            /** The total amount of memory (in megabytes) to be used by streaming and non-streaming textures.
            */
            public static get streamingMipmapsMemoryBudget(): number;
            public static set streamingMipmapsMemoryBudget(value: number);
            /** The number of renderer instances that are processed each frame when calculating which texture mipmap levels should be streamed.
            */
            public static get streamingMipmapsRenderersPerFrame(): number;
            public static set streamingMipmapsRenderersPerFrame(value: number);
            /** The maximum number of mipmap levels to discard for each texture.
            */
            public static get streamingMipmapsMaxLevelReduction(): number;
            public static set streamingMipmapsMaxLevelReduction(value: number);
            /** Process all enabled Cameras for texture streaming (rather than just those with StreamingController components).
            */
            public static get streamingMipmapsAddAllCameras(): boolean;
            public static set streamingMipmapsAddAllCameras(value: boolean);
            /** The maximum number of active texture file IO requests from the texture streaming system.
            */
            public static get streamingMipmapsMaxFileIORequests(): number;
            public static set streamingMipmapsMaxFileIORequests(value: number);
            /** Maximum number of frames queued up by graphics driver.
            */
            public static get maxQueuedFrames(): number;
            public static set maxQueuedFrames(value: number);
            /** The indexed list of available Quality Settings.
            */
            public static get names(): System.Array$1<string>;
            /** Desired color space (Read Only).
            */
            public static get desiredColorSpace(): UnityEngine.ColorSpace;
            /** Active color space (Read Only).
            */
            public static get activeColorSpace(): UnityEngine.ColorSpace;
            public static add_activeQualityLevelChanged ($value: System.Action$2<number, number>) : void
            public static remove_activeQualityLevelChanged ($value: System.Action$2<number, number>) : void
            /** Increase the current quality level.
            * @param $applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static IncreaseLevel ($applyExpensiveChanges: boolean) : void
            /** Decrease the current quality level.
            * @param $applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static DecreaseLevel ($applyExpensiveChanges: boolean) : void
            public static SetQualityLevel ($index: number) : void
            public static IncreaseLevel () : void
            public static DecreaseLevel () : void
            /** Executes the given Action for each tier on the QualitySettings.
            * @param $callback The callback to execute for each level.
            */
            public static ForEach ($callback: System.Action) : void
            public static ForEach ($callback: System.Action$2<number, string>) : void
            /** Sets the QualitySettings.lodBias|lodBias and QualitySettings.maximumLODLevel|maximumLODLevel at the same time.
            * @param $lodBias Global multiplier for the LOD's switching distance.
            * @param $maximumLODLevel A maximum LOD level. All LOD groups.
            * @param $setDirty If true, marks all views as dirty.
            */
            public static SetLODSettings ($lodBias: number, $maximumLODLevel: number, $setDirty?: boolean) : void
            /** Applies new TextureMipmapLimitSettings to the indicated texture mipmap limit group.
            * @param $groupName Name of the texture mipmap limit group to modify.
            * @param $textureMipmapLimitSettings The new texture mipmap limit settings to apply.
            */
            public static SetTextureMipmapLimitSettings ($groupName: string, $textureMipmapLimitSettings: UnityEngine.TextureMipmapLimitSettings) : void
            /** Retrieves a copy of the TextureMipmapLimitSettings from a texture mipmap limit group.
            * @param $groupName Name of the texture mipmap limit group to scan.
            * @returns Structure containing the settings for the indicated groupName. 
            */
            public static GetTextureMipmapLimitSettings ($groupName: string) : UnityEngine.TextureMipmapLimitSettings
            /** Provides a reference to the RenderPipelineAsset that defines the override render pipeline for a given quality level. 
            * @param $index Index of the quality level.
            * @returns Returns null if the quality level does not exist, or if no asset is assigned to that quality level. Otherwise, returns the RenderPipelineAsset that defines the override render pipeline for the quality level. 
            */
            public static GetRenderPipelineAssetAt ($index: number) : UnityEngine.Rendering.RenderPipelineAsset
            /** Returns the current graphics quality level.
            */
            public static GetQualityLevel () : number
            /** Provides a reference to the QualitySettings object.
            * @returns Returns the QualitySettings object. 
            */
            public static GetQualitySettings () : UnityEngine.Object
            /** Sets a new graphics quality level.
            * @param $index Quality index to set.
            * @param $applyExpensiveChanges Should expensive changes be applied (Anti-aliasing etc).
            */
            public static SetQualityLevel ($index: number, $applyExpensiveChanges: boolean) : void
            /** [Editor Only] Returns if the given platform is included by the Quality Level.
            * @param $buildTargetGroupName The platform name.
            * @param $index The index of the Quality Level, must be positive and lower than the count of Quality Levels.
            * @returns If the platform is included. 
            */
            public static IsPlatformIncluded ($buildTargetGroupName: string, $index: number) : boolean
            /** [Editor Only] Includes a platform to be supported by the Quality Level.
            * @param $buildTargetGroupName The platform name.
            * @param $index The index of the Quality Level, must be positive and lower than the count of Quality Levels.
            * @param $error The error found by the API.
            * @returns If errors were found. 
            */
            public static TryIncludePlatformAt ($buildTargetGroupName: string, $index: number, $error: $Ref<System.Exception>) : boolean
            /** [Editor Only] Excludes a platfor for the given Quality Level.
            * @param $buildTargetGroupName The platform name.
            * @param $index The index of the Quality Level, must be positive and lower than the count of Quality Levels.
            * @param $error The error raised by the API.
            * @returns True if no errors were found. 
            */
            public static TryExcludePlatformAt ($buildTargetGroupName: string, $index: number, $error: $Ref<System.Exception>) : boolean
            /** [Editor Only] Obtains an array with the Quality Level indexes that are selected for the given platform.
            * @param $buildTargetGroupName The platform target.
            * @returns The array with the Quality Level indexes that are selected for the given platform. 
            */
            public static GetActiveQualityLevelsForPlatform ($buildTargetGroupName: string) : System.Array$1<number>
            /** [Editor Only] Obtains the number of Quality Levels that are selected for a given platform.
            * @param $buildTargetGroupName The platform to obtain the number of selected Quality Levels.
            * @returns The total amount of Quality Levels active for the given platform. 
            */
            public static GetActiveQualityLevelsForPlatformCount ($buildTargetGroupName: string) : number
            public static GetAllRenderPipelineAssetsForPlatform ($buildTargetGroupName: string, $renderPipelineAssets: $Ref<System.Collections.Generic.List$1<UnityEngine.Rendering.RenderPipelineAsset>>) : void
        }
        enum QualityLevel
        { Fastest = 0, Fast = 1, Simple = 2, Good = 3, Beautiful = 4, Fantastic = 5 }
        /** Determines which type of shadows should be used.
        */
        enum ShadowQuality
        { Disable = 0, HardOnly = 1, All = 2 }
        /** Shadow projection type for.
        */
        enum ShadowProjection
        { CloseFit = 0, StableFit = 1 }
        /** Default shadow resolution. Each decrease in quality level halves the resolution of shadows.
        */
        enum ShadowResolution
        { Low = 0, Medium = 1, High = 2, VeryHigh = 3 }
        /** The rendering mode of Shadowmask.
        */
        enum ShadowmaskMode
        { Shadowmask = 0, DistanceShadowmask = 1 }
        /** Anisotropic filtering mode.
        */
        enum AnisotropicFiltering
        { Disable = 0, Enable = 1, ForceEnable = 2 }
        /** Structure that represents texture mipmap limit settings.
        */
        class TextureMipmapLimitSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Indicates whether the limitBias functions as an offset to the global texture mipmap limit or, instead, acts as an override to it.
            */
            public get limitBiasMode(): UnityEngine.TextureMipmapLimitBiasMode;
            public set limitBiasMode(value: UnityEngine.TextureMipmapLimitBiasMode);
            /** The new value to apply on top of the global texture mipmap limit. Can act as an offset (default) or an override to it.
            */
            public get limitBias(): number;
            public set limitBias(value: number);
        }
        /** Flags used by QualitySettings to specify which Terrain fields the quality settings should override. 
        */
        enum TerrainQualityOverrides
        { None = 0, PixelError = 1, BasemapDistance = 2, DetailDensity = 4, DetailDistance = 8, TreeDistance = 16, BillboardStart = 32, FadeLength = 64, MaxTrees = 128 }
        /** A class you can derive from if you want to create objects that live independently of GameObjects.
        */
        class ScriptableObject extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Creates an instance of a scriptable object.
            * @param $className The type of the ScriptableObject to create, as the name of the type.
            * @param $type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance ($className: string) : UnityEngine.ScriptableObject
            /** Creates an instance of a scriptable object.
            * @param $className The type of the ScriptableObject to create, as the name of the type.
            * @param $type The type of the ScriptableObject to create, as a System.Type instance.
            * @returns The created ScriptableObject. 
            */
            public static CreateInstance ($type: System.Type) : UnityEngine.ScriptableObject
            public constructor ()
        }
        enum BlendWeights
        { OneBone = 1, TwoBones = 2, FourBones = 4 }
        /** Skin weights.
        */
        enum SkinWeights
        { None = 0, OneBone = 1, TwoBones = 2, FourBones = 4, Unlimited = 255 }
        /** Extension methods to the Renderer class, used only for the UpdateGIMaterials method used by the Global Illumination System.
        */
        class RendererExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.
            */
            public static UpdateGIMaterials ($renderer: UnityEngine.Renderer) : void
        }
        /** When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.
        */
        class ImageEffectTransformsToLDR extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute can be rendered into the Scene view camera.
        */
        class ImageEffectAllowedInSceneView extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.
        */
        class ImageEffectOpaque extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Any Image Effect with this attribute will be rendered after Dynamic Resolution stage.
        */
        class ImageEffectAfterScale extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Use this attribute when image effects are implemented using Command Buffers.
        */
        class ImageEffectUsesCommandBuffer extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Describes a bone weight that affects a vertex in a mesh.
        */
        class BoneWeight1 extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight1>
        {
            protected [__keep_incompatibility]: never;
            /** Skinning weight for bone.
            */
            public get weight(): number;
            public set weight(value: number);
            /** Index of bone.
            */
            public get boneIndex(): number;
            public set boneIndex(value: number);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoneWeight1) : boolean
            public static op_Equality ($lhs: UnityEngine.BoneWeight1, $rhs: UnityEngine.BoneWeight1) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoneWeight1, $rhs: UnityEngine.BoneWeight1) : boolean
        }
        /** Representation of RGBA colors in 32 bit format.
        */
        class Color32 extends System.ValueType implements System.IFormattable
        {
            protected [__keep_incompatibility]: never;
            /** Red component of the color.
            */
            public r : number
            /** Green component of the color.
            */
            public g : number
            /** Blue component of the color.
            */
            public b : number
            /** Alpha component of the color.
            */
            public a : number
            public static op_Implicit ($c: UnityEngine.Color) : UnityEngine.Color32
            public static op_Implicit ($c: UnityEngine.Color32) : UnityEngine.Color
            /** Linearly interpolates between colors a and b by t.
            */
            public static Lerp ($a: UnityEngine.Color32, $b: UnityEngine.Color32, $t: number) : UnityEngine.Color32
            /** Linearly interpolates between colors a and b by t.
            */
            public static LerpUnclamped ($a: UnityEngine.Color32, $b: UnityEngine.Color32, $t: number) : UnityEngine.Color32
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            /** Returns a formatted string for this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString () : string
            /** Returns a formatted string for this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string) : string
            /** Returns a formatted string for this color.
            * @param $format A numeric format string.
            * @param $formatProvider An object that specifies culture-specific formatting.
            */
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($r: number, $g: number, $b: number, $a: number)
        }
        /** Describes the location of blend shape vertex data in a GraphicsBuffer.
        */
        class BlendShapeBufferRange extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The index of the first blend shape vertex for the requested blend shape.
            */
            public get startIndex(): number;
            /** The index of the last blend shape vertex for the requested blend shape.
            */
            public get endIndex(): number;
        }
        /** Describes 4 skinning bone weights that affect a vertex in a mesh.
        */
        class BoneWeight extends System.ValueType implements System.IEquatable$1<UnityEngine.BoneWeight>
        {
            protected [__keep_incompatibility]: never;
            /** Skinning weight for first bone.
            */
            public get weight0(): number;
            public set weight0(value: number);
            /** Skinning weight for second bone.
            */
            public get weight1(): number;
            public set weight1(value: number);
            /** Skinning weight for third bone.
            */
            public get weight2(): number;
            public set weight2(value: number);
            /** Skinning weight for fourth bone.
            */
            public get weight3(): number;
            public set weight3(value: number);
            /** Index of first bone.
            */
            public get boneIndex0(): number;
            public set boneIndex0(value: number);
            /** Index of second bone.
            */
            public get boneIndex1(): number;
            public set boneIndex1(value: number);
            /** Index of third bone.
            */
            public get boneIndex2(): number;
            public set boneIndex2(value: number);
            /** Index of fourth bone.
            */
            public get boneIndex3(): number;
            public set boneIndex3(value: number);
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.BoneWeight) : boolean
            public static op_Equality ($lhs: UnityEngine.BoneWeight, $rhs: UnityEngine.BoneWeight) : boolean
            public static op_Inequality ($lhs: UnityEngine.BoneWeight, $rhs: UnityEngine.BoneWeight) : boolean
        }
        /** Struct used to describe meshes to be combined using Mesh.CombineMeshes.
        */
        class CombineInstance extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Mesh to combine.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            /** Sub-Mesh index of the Mesh.
            */
            public get subMeshIndex(): number;
            public set subMeshIndex(value: number);
            /** Matrix to transform the Mesh with before combining. Refer to Mesh.CombineMeshes for an example.
            */
            public get transform(): UnityEngine.Matrix4x4;
            public set transform(value: UnityEngine.Matrix4x4);
            /** The baked lightmap UV scale and offset applied to the Mesh.
            */
            public get lightmapScaleOffset(): UnityEngine.Vector4;
            public set lightmapScaleOffset(value: UnityEngine.Vector4);
            /** The real-time lightmap UV scale and offset applied to the Mesh.
            */
            public get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
            public set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
        }
        /** Base class for all entities in Unity Scenes.
        */
        class GameObject extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The Transform attached to this GameObject.
            */
            public get transform(): UnityEngine.Transform;
            /** The layer the GameObject is in.
            */
            public get layer(): number;
            public set layer(value: number);
            /** The local active state of this GameObject. (Read Only)
            */
            public get activeSelf(): boolean;
            /** Defines whether the GameObject is active in the Scene.
            */
            public get activeInHierarchy(): boolean;
            /** Gets and sets the GameObject's StaticEditorFlags.
            */
            public get isStatic(): boolean;
            public set isStatic(value: boolean);
            /** The tag of this GameObject.
            */
            public get tag(): string;
            public set tag(value: string);
            /** Scene that the GameObject is part of.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            /** Scene culling mask Unity uses to determine which scene to render the GameObject in.
            */
            public get sceneCullingMask(): bigint;
            public get gameObject(): UnityEngine.GameObject;
            /** Creates a GameObject with a primitive mesh renderer and appropriate collider.
            * @param $type The type of primitive object to create.
            */
            public static CreatePrimitive ($type: UnityEngine.PrimitiveType) : UnityEngine.GameObject
            /** The non-generic version of this method.
            * @param $type The type of Component to search for.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent ($type: System.Type) : UnityEngine.Component
            /** The string-based version of this method.
            * @param $type The name of the type of Component to search for.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponent ($type: string) : UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren ($type: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** This is the non-generic version of this method.
            * @param $type The type of Component to retrieve.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns A component of the matching type, if found. 
            */
            public GetComponentInChildren ($type: System.Type) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent ($type: System.Type, $includeInactive: boolean) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns A Component of the matching type, otherwise null if no Component is found. 
            */
            public GetComponentInParent ($type: System.Type) : UnityEngine.Component
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @returns An array containing all matching components of type type. 
            */
            public GetComponents ($type: System.Type) : System.Array$1<UnityEngine.Component>
            public GetComponents ($type: System.Type, $results: System.Collections.Generic.List$1<UnityEngine.Component>) : void
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren ($type: System.Type) : System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive child GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInChildren ($type: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            public GetComponentsInParent ($type: System.Type) : System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $includeInactive Whether to include inactive parent GameObjects in the search.
            * @returns An array of all found components matching the specified type. 
            */
            public GetComponentsInParent ($type: System.Type, $includeInactive: boolean) : System.Array$1<UnityEngine.Component>
            /** The non-generic version of this method.
            * @param $type The type of component to search for.
            * @param $component The output argument that will contain the component or null.
            * @returns Returns true if the component is found, false otherwise. 
            */
            public TryGetComponent ($type: System.Type, $component: $Ref<UnityEngine.Component>) : boolean
            /** Returns one active GameObject tagged tag. Returns null if no GameObject was found.
            * @param $tag The tag to search for.
            */
            public static FindWithTag ($tag: string) : UnityEngine.GameObject
            public static FindGameObjectsWithTag ($tag: string, $results: System.Collections.Generic.List$1<UnityEngine.GameObject>) : void
            public SendMessageUpwards ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public SendMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            public BroadcastMessage ($methodName: string, $options: UnityEngine.SendMessageOptions) : void
            /** Adds a component class of type componentType to the GameObject. C# Users can use a generic version.
            */
            public AddComponent ($componentType: System.Type) : UnityEngine.Component
            /** ActivatesDeactivates the GameObject, depending on the given true or false/ value.
            * @param $value Activate or deactivate the object, where true activates the GameObject and false deactivates the GameObject.
            */
            public SetActive ($value: boolean) : void
            /** Is this GameObject tagged with tag ?
            * @param $tag The tag to compare.
            * @returns true if the GameObject has the given tag, false otherwise. 
            */
            public CompareTag ($tag: string) : boolean
            /** Is this GameObject tagged with tag?
            * @param $tag A TagHandle representing the tag to compare.
            * @returns true if the GameObject has the given tag, false otherwise. 
            */
            public CompareTag ($tag: UnityEngine.TagHandle) : boolean
            public static FindGameObjectWithTag ($tag: string) : UnityEngine.GameObject
            /** Returns an array of active GameObjects tagged tag. Returns empty array if no GameObject was found.
            * @param $tag The name of the tag to search GameObjects for.
            */
            public static FindGameObjectsWithTag ($tag: string) : System.Array$1<UnityEngine.GameObject>
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject and on every ancestor of the behaviour.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessageUpwards ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string, $value: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string, $value: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject.
            * @param $methodName The name of the method to call.
            * @param $value An optional parameter value to pass to the called method.
            * @param $options Should an error be raised if the method doesn't exist on the target object?
            */
            public SendMessage ($methodName: string) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage ($methodName: string, $parameter: any, $options: UnityEngine.SendMessageOptions) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage ($methodName: string, $parameter: any) : void
            /** Calls the method named methodName on every MonoBehaviour in this GameObject or any of its children.
            */
            public BroadcastMessage ($methodName: string) : void
            /** Finds a GameObject by name and returns it.
            */
            public static Find ($name: string) : UnityEngine.GameObject
            public static SetGameObjectsActive ($instanceIDs: Unity.Collections.NativeArray$1<number>, $active: boolean) : void
            public static InstantiateGameObjects ($sourceInstanceID: number, $count: number, $newInstanceIDs: Unity.Collections.NativeArray$1<number>, $newTransformInstanceIDs: Unity.Collections.NativeArray$1<number>, $destinationScene?: UnityEngine.SceneManagement.Scene) : void
            /** Returns the Scene of a GameObject given by instance ID.
            * @param $instanceID The instance ID of a GameObject.
            * @returns Scene of GameObject of instance ID. 
            */
            public static GetScene ($instanceID: number) : UnityEngine.SceneManagement.Scene
            public constructor ($name: string)
            public constructor ()
            public constructor ($name: string, ...components: System.Type[])
        }
        /** A script interface for a.
        */
        class Projector extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The near clipping plane distance.
            */
            public get nearClipPlane(): number;
            public set nearClipPlane(value: number);
            /** The far clipping plane distance.
            */
            public get farClipPlane(): number;
            public set farClipPlane(value: number);
            /** The field of view of the projection in degrees.
            */
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            /** The aspect ratio of the projection.
            */
            public get aspectRatio(): number;
            public set aspectRatio(value: number);
            /** Is the projection orthographic (true) or perspective (false)?
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            /** Projection's half-size when in orthographic mode.
            */
            public get orthographicSize(): number;
            public set orthographicSize(value: number);
            /** Which object layers are ignored by the projector.
            */
            public get ignoreLayers(): number;
            public set ignoreLayers(value: number);
            /** The material that will be projected onto every object.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor ()
        }
        enum TexGenMode
        { None = 0, SphereMap = 1, Object = 2, EyeLinear = 3, CubeReflect = 4, CubeNormal = 5 }
        /** The trail renderer is used to make trails behind objects in the Scene as they move about.
        */
        class TrailRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** How long does the trail take to fade out.
            */
            public get time(): number;
            public set time(value: number);
            /** The width of the trail at the spawning point.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** The width of the trail at the end of the trail.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the TrailRenderer.widthCurve to get the final width of the trail.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Does the GameObject of this Trail Renderer auto destruct?
            */
            public get autodestruct(): boolean;
            public set autodestruct(value: boolean);
            /** Creates trails when the GameObject moves.
            */
            public get emitting(): boolean;
            public set emitting(value: boolean);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the trail.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the trail.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** Set the minimum distance the trail can travel before a new vertex is added to it.
            */
            public get minVertexDistance(): number;
            public set minVertexDistance(value: number);
            /** Set the color at the start of the trail.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the trail.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Get the number of line segments in the trail.
            */
            public get positionCount(): number;
            /** A multiplier for the UV coordinates of the trail texture.
            */
            public get textureScale(): UnityEngine.Vector2;
            public set textureScale(value: UnityEngine.Vector2);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the trail width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a trail to generate Normals and Tangents. With this data, Scene lighting can affect the trail via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the trail texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the trail will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Specifies how the TrailRenderer interacts with SpriteMask.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Set the curve describing the width of the trail at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the trail at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the trail.
            * @param $index Which position to set.
            * @param $position The new position.
            */
            public SetPosition ($index: number, $position: UnityEngine.Vector3) : void
            /** Get the position of a vertex in the trail.
            * @param $index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition ($index: number) : UnityEngine.Vector3
            /** Removes all points from the TrailRenderer.
            Useful for restarting a trail from a new position.
            */
            public Clear () : void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the trail.
            * @param $camera The camera used for determining which way camera-space trails will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of TrailRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the trail.
            * @param $camera The camera used for determining which way camera-space trails will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            /** Get the positions of all vertices in the trail.
            * @param $positions The array of positions to retrieve.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : number
            /** Get the visible positions of all vertices in the trail.
            * @param $positions The array of positions to retrieve.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetVisiblePositions ($positions: System.Array$1<UnityEngine.Vector3>) : number
            /** Sets the positions of all vertices in the trail.
            * @param $positions The array of positions to set.
            */
            public SetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            /** Adds a position to the trail.
            * @param $position The position to add to the trail.
            */
            public AddPosition ($position: UnityEngine.Vector3) : void
            /** Add an array of positions to the trail.
            * @param $positions The positions to add to the trail.
            */
            public AddPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            public SetPositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : void
            public SetPositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : void
            public GetPositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : number
            public GetPositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : number
            public GetVisiblePositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : number
            public GetVisiblePositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : number
            public AddPositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : void
            public AddPositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : void
            public constructor ()
        }
        /** Choose how textures are applied to Lines and Trails.
        */
        enum LineTextureMode
        { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3, Static = 4 }
        /** Control the direction lines face, when using the LineRenderer or TrailRenderer.
        */
        enum LineAlignment
        { View = 0, Local = 1, TransformZ = 1 }
        /** This enum controls the mode under which the sprite will interact with the masking system.
        */
        enum SpriteMaskInteraction
        { None = 0, VisibleInsideMask = 1, VisibleOutsideMask = 2 }
        /** Represents a Gradient used for animating colors.
        */
        class Gradient extends System.Object implements System.IEquatable$1<UnityEngine.Gradient>
        {
            protected [__keep_incompatibility]: never;
            /** All color keys defined in the gradient.
            */
            public get colorKeys(): System.Array$1<UnityEngine.GradientColorKey>;
            public set colorKeys(value: System.Array$1<UnityEngine.GradientColorKey>);
            /** All alpha keys defined in the gradient.
            */
            public get alphaKeys(): System.Array$1<UnityEngine.GradientAlphaKey>;
            public set alphaKeys(value: System.Array$1<UnityEngine.GradientAlphaKey>);
            /** Controls how the gradient colors are interpolated.
            */
            public get mode(): UnityEngine.GradientMode;
            public set mode(value: UnityEngine.GradientMode);
            /** Indicates the color space that the gradient color keys are using.
            */
            public get colorSpace(): UnityEngine.ColorSpace;
            public set colorSpace(value: UnityEngine.ColorSpace);
            /** Calculate color at a given time.
            * @param $time Time of the evaluation (0 - 1).
            */
            public Evaluate ($time: number) : UnityEngine.Color
            /** Setup Gradient with an array of color keys and alpha keys.
            * @param $colorKeys Color keys of the gradient (maximum 8 color keys).
            * @param $alphaKeys Alpha keys of the gradient (maximum 8 alpha keys).
            */
            public SetKeys ($colorKeys: System.Array$1<UnityEngine.GradientColorKey>, $alphaKeys: System.Array$1<UnityEngine.GradientAlphaKey>) : void
            public Equals ($o: any) : boolean
            public Equals ($other: UnityEngine.Gradient) : boolean
            public constructor ()
        }
        /** The line renderer is used to draw free-floating lines in 3D space.
        */
        class LineRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Set the width at the start of the line.
            */
            public get startWidth(): number;
            public set startWidth(value: number);
            /** Set the width at the end of the line.
            */
            public get endWidth(): number;
            public set endWidth(value: number);
            /** Set an overall multiplier that is applied to the LineRenderer.widthCurve to get the final width of the line.
            */
            public get widthMultiplier(): number;
            public set widthMultiplier(value: number);
            /** Set this to a value greater than 0, to get rounded corners between each segment of the line.
            */
            public get numCornerVertices(): number;
            public set numCornerVertices(value: number);
            /** Set this to a value greater than 0, to get rounded corners on each end of the line. The default is 0.
            */
            public get numCapVertices(): number;
            public set numCapVertices(value: number);
            /** If enabled, the lines are defined in world space.
            */
            public get useWorldSpace(): boolean;
            public set useWorldSpace(value: boolean);
            /** Connect the start and end positions of the line together to form a continuous loop.
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** Set the color at the start of the line.
            */
            public get startColor(): UnityEngine.Color;
            public set startColor(value: UnityEngine.Color);
            /** Set the color at the end of the line.
            */
            public get endColor(): UnityEngine.Color;
            public set endColor(value: UnityEngine.Color);
            /** Set/get the number of vertices.
            */
            public get positionCount(): number;
            public set positionCount(value: number);
            /** A multiplier for the UV coordinates of the line texture.
            */
            public get textureScale(): UnityEngine.Vector2;
            public set textureScale(value: UnityEngine.Vector2);
            /** Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the line width at each segment.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Configures a line to generate Normals and Tangents. With this data, Scene lighting can affect the line via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.
            */
            public get generateLightingData(): boolean;
            public set generateLightingData(value: boolean);
            /** Choose whether the U coordinate of the line texture is tiled or stretched.
            */
            public get textureMode(): UnityEngine.LineTextureMode;
            public set textureMode(value: UnityEngine.LineTextureMode);
            /** Select whether the line will face the camera, or the orientation of the Transform Component.
            */
            public get alignment(): UnityEngine.LineAlignment;
            public set alignment(value: UnityEngine.LineAlignment);
            /** Specifies how the LineRenderer interacts with SpriteMask.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Set the curve describing the width of the line at various points along its length.
            */
            public get widthCurve(): UnityEngine.AnimationCurve;
            public set widthCurve(value: UnityEngine.AnimationCurve);
            /** Set the color gradient describing the color of the line at various points along its length.
            */
            public get colorGradient(): UnityEngine.Gradient;
            public set colorGradient(value: UnityEngine.Gradient);
            /** Set the position of a vertex in the line.
            * @param $index Which position to set.
            * @param $position The new position.
            */
            public SetPosition ($index: number, $position: UnityEngine.Vector3) : void
            /** Get the position of a vertex in the line.
            * @param $index The index of the position to retrieve.
            * @returns The position at the specified index in the array. 
            */
            public GetPosition ($index: number) : UnityEngine.Vector3
            /** Generates a simplified version of the original line by removing points that fall within the specified tolerance.
            * @param $tolerance This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.
            */
            public Simplify ($tolerance: number) : void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the line.
            * @param $camera The camera used for determining which way camera-space lines will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useTransform?: boolean) : void
            /** Creates a snapshot of LineRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the line.
            * @param $camera The camera used for determining which way camera-space lines will face.
            * @param $useTransform Include the rotation and scale of the Transform in the baked mesh.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $camera: UnityEngine.Camera, $useTransform?: boolean) : void
            /** Get the positions of all vertices in the line.
            * @param $positions The array of positions to retrieve. The array passed should be of at least positionCount in size.
            * @returns How many positions were actually stored in the output array. 
            */
            public GetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : number
            /** Set the positions of all vertices in the line.
            * @param $positions The array of positions to set.
            */
            public SetPositions ($positions: System.Array$1<UnityEngine.Vector3>) : void
            public SetPositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : void
            public SetPositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : void
            public GetPositions ($positions: Unity.Collections.NativeArray$1<UnityEngine.Vector3>) : number
            public GetPositions ($positions: Unity.Collections.NativeSlice$1<UnityEngine.Vector3>) : number
            public constructor ()
        }
        /** The Render Settings contain values for a range of visual elements in your Scene, like fog and ambient light.
        */
        class RenderSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is fog enabled?
            */
            public static get fog(): boolean;
            public static set fog(value: boolean);
            /** The starting distance of linear fog.
            */
            public static get fogStartDistance(): number;
            public static set fogStartDistance(value: number);
            /** The ending distance of linear fog.
            */
            public static get fogEndDistance(): number;
            public static set fogEndDistance(value: number);
            /** Fog mode to use.
            */
            public static get fogMode(): UnityEngine.FogMode;
            public static set fogMode(value: UnityEngine.FogMode);
            /** The color of the fog.
            */
            public static get fogColor(): UnityEngine.Color;
            public static set fogColor(value: UnityEngine.Color);
            /** The density of the exponential fog.
            */
            public static get fogDensity(): number;
            public static set fogDensity(value: number);
            /** Ambient lighting mode.
            */
            public static get ambientMode(): UnityEngine.Rendering.AmbientMode;
            public static set ambientMode(value: UnityEngine.Rendering.AmbientMode);
            /** Ambient lighting coming from above.
            */
            public static get ambientSkyColor(): UnityEngine.Color;
            public static set ambientSkyColor(value: UnityEngine.Color);
            /** Ambient lighting coming from the sides.
            */
            public static get ambientEquatorColor(): UnityEngine.Color;
            public static set ambientEquatorColor(value: UnityEngine.Color);
            /** Ambient lighting coming from below.
            */
            public static get ambientGroundColor(): UnityEngine.Color;
            public static set ambientGroundColor(value: UnityEngine.Color);
            /** How much the light from the Ambient Source affects the Scene.
            */
            public static get ambientIntensity(): number;
            public static set ambientIntensity(value: number);
            /** Flat ambient lighting color.
            */
            public static get ambientLight(): UnityEngine.Color;
            public static set ambientLight(value: UnityEngine.Color);
            /** The color used for the sun shadows in the Subtractive lightmode.
            */
            public static get subtractiveShadowColor(): UnityEngine.Color;
            public static set subtractiveShadowColor(value: UnityEngine.Color);
            /** The global skybox to use.
            */
            public static get skybox(): UnityEngine.Material;
            public static set skybox(value: UnityEngine.Material);
            /** The light used by the procedural skybox.
            */
            public static get sun(): UnityEngine.Light;
            public static set sun(value: UnityEngine.Light);
            /** An ambient probe that captures environment lighting.
            */
            public static get ambientProbe(): UnityEngine.Rendering.SphericalHarmonicsL2;
            public static set ambientProbe(value: UnityEngine.Rendering.SphericalHarmonicsL2);
            public static get customReflectionTexture(): UnityEngine.Texture;
            public static set customReflectionTexture(value: UnityEngine.Texture);
            /** How much the skybox / custom cubemap reflection affects the Scene.
            */
            public static get reflectionIntensity(): number;
            public static set reflectionIntensity(value: number);
            /** The number of times a reflection includes other reflections.
            */
            public static get reflectionBounces(): number;
            public static set reflectionBounces(value: number);
            /** Default reflection mode.
            */
            public static get defaultReflectionMode(): UnityEngine.Rendering.DefaultReflectionMode;
            public static set defaultReflectionMode(value: UnityEngine.Rendering.DefaultReflectionMode);
            /** Cubemap resolution for default reflection.
            */
            public static get defaultReflectionResolution(): number;
            public static set defaultReflectionResolution(value: number);
            /** Size of the Light halos.
            */
            public static get haloStrength(): number;
            public static set haloStrength(value: number);
            /** The intensity of all flares in the Scene.
            */
            public static get flareStrength(): number;
            public static set flareStrength(value: number);
            /** The fade speed of all flares in the Scene.
            */
            public static get flareFadeSpeed(): number;
            public static set flareFadeSpeed(value: number);
        }
        /** Fog mode to use.
        */
        enum FogMode
        { Linear = 1, Exponential = 2, ExponentialSquared = 3 }
        /** Script interface for.
        */
        class Light extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The type of the light.
            */
            public get type(): UnityEngine.LightType;
            public set type(value: UnityEngine.LightType);
            /** The angle of the spot light's cone in degrees.
            */
            public get spotAngle(): number;
            public set spotAngle(value: number);
            /** The angle of the spot light's inner cone in degrees.
            */
            public get innerSpotAngle(): number;
            public set innerSpotAngle(value: number);
            /** The color of the light.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** 
            The color temperature of the light.
            Correlated Color Temperature (abbreviated as CCT) is multiplied with the color filter when calculating the final color of a light source. The color temperature of the electromagnetic radiation emitted from an ideal black body is defined as its surface temperature in Kelvin. White is 6500K according to the D65 standard. A candle light is 1800K and a soft warm light bulb is 2700K.
            If you want to use colorTemperature, GraphicsSettings.lightsUseLinearIntensity and Light.useColorTemperature has to be enabled.
            Additional resources: GraphicsSettings.lightsUseLinearIntensity, GraphicsSettings.useColorTemperature.
            */
            public get colorTemperature(): number;
            public set colorTemperature(value: number);
            /** Set to true to use the color temperature.
            */
            public get useColorTemperature(): boolean;
            public set useColorTemperature(value: boolean);
            /** The Intensity of a light is multiplied with the Light color.
            */
            public get intensity(): number;
            public set intensity(value: number);
            /** The multiplier that defines the strength of the bounce lighting.
            */
            public get bounceIntensity(): number;
            public set bounceIntensity(value: number);
            /** Set to true to override light bounding sphere for culling.
            */
            public get useBoundingSphereOverride(): boolean;
            public set useBoundingSphereOverride(value: boolean);
            /** Bounding sphere used to override the regular light bounding sphere during culling.
            */
            public get boundingSphereOverride(): UnityEngine.Vector4;
            public set boundingSphereOverride(value: UnityEngine.Vector4);
            /** Whether to cull shadows for this Light when the Light is outside of the view frustum.
            */
            public get useViewFrustumForShadowCasterCull(): boolean;
            public set useViewFrustumForShadowCasterCull(value: boolean);
            /** The custom resolution of the shadow map.
            */
            public get shadowCustomResolution(): number;
            public set shadowCustomResolution(value: number);
            /** Shadow mapping constant bias.
            */
            public get shadowBias(): number;
            public set shadowBias(value: number);
            /** Shadow mapping normal-based bias.
            */
            public get shadowNormalBias(): number;
            public set shadowNormalBias(value: number);
            /** Near plane value to use for shadow frustums.
            */
            public get shadowNearPlane(): number;
            public set shadowNearPlane(value: number);
            /** Set to true to enable custom matrix for culling during shadows.
            */
            public get useShadowMatrixOverride(): boolean;
            public set useShadowMatrixOverride(value: boolean);
            /** Matrix that overrides the regular light projection matrix during shadow culling. Unity uses this matrix if you set Light.useShadowMatrixOverride to true.
            */
            public get shadowMatrixOverride(): UnityEngine.Matrix4x4;
            public set shadowMatrixOverride(value: UnityEngine.Matrix4x4);
            /** 
            The range of each point of the light.
            Since area lights have a light emitting surface instead of a single point, the cumulative range of the light is larger than this property. This larger range can be read from the Light.dilatedRange property. For non-area lights, Light.range and Light.dilatedRange return the same value.
            */
            public get range(): number;
            public set range(value: number);
            /** 
            The Light.range property describes the range of each point on the light. However, area lights consist of several light-emitting points, and so the effective range is a bit larger, and depends on the size of the area light. This property returns this larger range. Use this property to find whether a given world-space point will be lit by the area light.
            If not an area light, then returns the same value as Light.range.
            */
            public get dilatedRange(): number;
            /** The to use for this light.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            /** This property describes the output of the last Global Illumination bake.
            */
            public get bakingOutput(): UnityEngine.LightBakingOutput;
            public set bakingOutput(value: UnityEngine.LightBakingOutput);
            /** This is used to light certain objects in the Scene selectively.
            */
            public get cullingMask(): number;
            public set cullingMask(value: number);
            /** Determines which rendering LayerMask this Light affects.
            */
            public get renderingLayerMask(): number;
            public set renderingLayerMask(value: number);
            /** Allows you to override the global Shadowmask Mode per light. Only use this with render pipelines that can handle per light Shadowmask modes. Incompatible with the legacy renderers.
            */
            public get lightShadowCasterMode(): UnityEngine.LightShadowCasterMode;
            public set lightShadowCasterMode(value: UnityEngine.LightShadowCasterMode);
            /** Controls the amount of artificial softening applied to the edges of shadows cast by the Point or Spot light (Editor only).
            */
            public get shadowRadius(): number;
            public set shadowRadius(value: number);
            /** Controls the amount of artificial softening applied to the edges of shadows cast by directional lights (Editor only).
            */
            public get shadowAngle(): number;
            public set shadowAngle(value: number);
            /** How this light casts shadows
            */
            public get shadows(): UnityEngine.LightShadows;
            public set shadows(value: UnityEngine.LightShadows);
            /** Strength of light's shadows.
            */
            public get shadowStrength(): number;
            public set shadowStrength(value: number);
            /** The resolution of the shadow map.
            */
            public get shadowResolution(): UnityEngine.Rendering.LightShadowResolution;
            public set shadowResolution(value: UnityEngine.Rendering.LightShadowResolution);
            /** Per-light, per-layer shadow culling distances. Directional lights only. 
            */
            public get layerShadowCullDistances(): System.Array$1<number>;
            public set layerShadowCullDistances(value: System.Array$1<number>);
            /** The size of a directional light's cookie.
            */
            public get cookieSize(): number;
            public set cookieSize(value: number);
            /** The cookie texture projected by the light.
            */
            public get cookie(): UnityEngine.Texture;
            public set cookie(value: UnityEngine.Texture);
            /** How to render the light.
            */
            public get renderMode(): UnityEngine.LightRenderMode;
            public set renderMode(value: UnityEngine.LightRenderMode);
            /** The size of the area light (Editor only).
            */
            public get areaSize(): UnityEngine.Vector2;
            public set areaSize(value: UnityEngine.Vector2);
            /** This property describes what part of a light's contribution can be baked (Editor only).
            */
            public get lightmapBakeType(): UnityEngine.LightmapBakeType;
            public set lightmapBakeType(value: UnityEngine.LightmapBakeType);
            /** Number of command buffers set up on this light (Read Only).
            */
            public get commandBufferCount(): number;
            /** Revert all light parameters to default.
            */
            public Reset () : void
            /** Sets a light dirty to notify the light baking backends to update their internal light representation (Editor only).
            */
            public SetLightDirty () : void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Add a command buffer to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.
            * @param $evt The point during the graphics processing at which this command buffer should commence on the GPU.
            * @param $buffer The buffer to execute.
            * @param $queueType The desired async compute queue type to execute the buffer on.
            * @param $shadowPassMask A mask specifying which shadow passes to execute the buffer for.
            */
            public AddCommandBufferAsync ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer, $shadowPassMask: UnityEngine.Rendering.ShadowMapPass, $queueType: UnityEngine.Rendering.ComputeQueueType) : void
            /** Remove command buffer from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @param $buffer The buffer to execute.
            */
            public RemoveCommandBuffer ($evt: UnityEngine.Rendering.LightEvent, $buffer: UnityEngine.Rendering.CommandBuffer) : void
            /** Remove command buffers from execution at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            */
            public RemoveCommandBuffers ($evt: UnityEngine.Rendering.LightEvent) : void
            /** Remove all command buffers set on this light.
            */
            public RemoveAllCommandBuffers () : void
            /** Get command buffers to be executed at a specified place.
            * @param $evt When to execute the command buffer during rendering.
            * @returns Array of command buffers. 
            */
            public GetCommandBuffers ($evt: UnityEngine.Rendering.LightEvent) : System.Array$1<UnityEngine.Rendering.CommandBuffer>
            public constructor ()
        }
        /** How the material interacts with lightmaps and lightprobes.
        */
        enum MaterialGlobalIlluminationFlags
        { None = 0, RealtimeEmissive = 1, BakedEmissive = 2, EmissiveIsBlack = 4, AnyEmissive = 3 }
        /** Represents the internal handle/id of a GraphicsBuffer.
        */
        class GraphicsBufferHandle extends System.ValueType implements System.IEquatable$1<UnityEngine.GraphicsBufferHandle>
        {
            protected [__keep_incompatibility]: never;
            public value : number
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.GraphicsBufferHandle) : boolean
            public CompareTo ($other: UnityEngine.GraphicsBufferHandle) : number
            public static op_Equality ($a: UnityEngine.GraphicsBufferHandle, $b: UnityEngine.GraphicsBufferHandle) : boolean
            public static op_Inequality ($a: UnityEngine.GraphicsBufferHandle, $b: UnityEngine.GraphicsBufferHandle) : boolean
        }
        /** The type of a given material property.
        */
        enum MaterialPropertyType
        { Float = 0, Int = 1, Vector = 2, Matrix = 3, Texture = 4, ConstantBuffer = 5, ComputeBuffer = 6 }
        /** The portal for dynamically changing occlusion at runtime.
        */
        class OcclusionPortal extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Gets / sets the portal's open state.
            */
            public get open(): boolean;
            public set open(value: boolean);
            public constructor ()
        }
        /** OcclusionArea is an area in which occlusion culling is performed.
        */
        class OcclusionArea extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Center of the occlusion area relative to the transform.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Size that the occlusion area will have.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** A flare asset. Read more about flares in the.
        */
        class Flare extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Script interface for a.
        */
        class LensFlare extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The strength of the flare.
            */
            public get brightness(): number;
            public set brightness(value: number);
            /** The fade speed of the flare.
            */
            public get fadeSpeed(): number;
            public set fadeSpeed(value: number);
            /** The color of the flare.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** The to use.
            */
            public get flare(): UnityEngine.Flare;
            public set flare(value: UnityEngine.Flare);
            public constructor ()
        }
        /** Struct describing the result of a Global Illumination bake for a given light.
        */
        class LightBakingOutput extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** In case of a LightmapBakeType.Mixed light, contains the index of the light as seen from the occlusion probes point of view if any, otherwise -1.
            */
            public probeOcclusionLightIndex : number
            /** In case of a LightmapBakeType.Mixed light, contains the index of the occlusion mask channel to use if any, otherwise -1.
            */
            public occlusionMaskChannel : number
            /** This property describes what part of a light's contribution was baked.
            */
            public lightmapBakeType : UnityEngine.LightmapBakeType
            /** In case of a LightmapBakeType.Mixed light, describes what Mixed mode was used to bake the light, irrelevant otherwise.
            */
            public mixedLightingMode : UnityEngine.MixedLightingMode
            /** Is the light contribution already stored in lightmaps and/or lightprobes?
            */
            public isBaked : boolean
        }
        /** Enum describing what part of a light contribution can be baked.
        */
        enum LightmapBakeType
        { Realtime = 4, Baked = 2, Mixed = 1 }
        /** Allows mixed lights to control shadow caster culling when Shadowmasks are present.
        */
        enum LightShadowCasterMode
        { Default = 0, NonLightmappedOnly = 1, Everything = 2 }
        /** The type of a Light.
        */
        enum LightType
        { Spot = 0, Directional = 1, Point = 2, Area = 3, Rectangle = 3, Disc = 4, Pyramid = 5, Box = 6, Tube = 7 }
        /** Describes the shape of a spot light.
        */
        enum LightShape
        { Cone = 0, Pyramid = 1, Box = 2 }
        /** Shadow casting options for a Light.
        */
        enum LightShadows
        { None = 0, Hard = 1, Soft = 2 }
        /** How the Light is rendered.
        */
        enum LightRenderMode
        { Auto = 0, ForcePixel = 1, ForceVertex = 2 }
        enum LightmappingMode
        { Realtime = 4, Baked = 2, Mixed = 1 }
        /** A script interface for the.
        */
        class Skybox extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The material used by the skybox.
            */
            public get material(): UnityEngine.Material;
            public set material(value: UnityEngine.Material);
            public constructor ()
        }
        /** A class to access the Mesh of the.
        */
        class MeshFilter extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Returns the shared mesh of the mesh filter.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Returns either a new Mesh|mesh or a duplicate of the existing mesh, and assigns it to the mesh filter.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            public constructor ()
        }
        /** ComputeBuffer type.
        */
        enum ComputeBufferType
        { Default = 0, Raw = 1, Append = 2, Counter = 4, Constant = 8, Structured = 16, DrawIndirect = 256, IndirectArguments = 256, GPUMemory = 512 }
        /** This property only takes effect if you enable a global illumination setting such as for the GameObject associated with the target Mesh Renderer. Otherwise this property defaults to the Light Probes setting.
        */
        enum ReceiveGI
        { Lightmaps = 1, LightProbes = 2 }
        /** The filters that Unity can use when it renders GameObjects in the shadow pass.
        */
        enum ShadowObjectsFilter
        { AllObjects = 0, DynamicOnly = 1, StaticOnly = 2 }
        /** The maximum number of bones affecting a single vertex.
        */
        enum SkinQuality
        { Auto = 0, Bone1 = 1, Bone2 = 2, Bone4 = 4 }
        /** Filtering mode for textures. Corresponds to the settings in a.
        */
        enum FilterMode
        { Point = 0, Bilinear = 1, Trilinear = 2 }
        /** Wrap mode for textures.
        */
        enum TextureWrapMode
        { Repeat = 0, Clamp = 1, Mirror = 2, MirrorOnce = 3 }
        /** NPOT Texture2D|textures support.
        */
        enum NPOTSupport
        { None = 0, Restricted = 1, Full = 2 }
        /** Format used when creating textures from scripts.
        */
        enum TextureFormat
        { Alpha8 = 1, ARGB4444 = 2, RGB24 = 3, RGBA32 = 4, ARGB32 = 5, RGB565 = 7, R16 = 9, DXT1 = 10, DXT5 = 12, RGBA4444 = 13, BGRA32 = 14, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, YUY2 = 21, RGB9e5Float = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB = 45, ETC2_RGBA1 = 46, ETC2_RGBA8 = 47, ASTC_4x4 = 48, ASTC_5x5 = 49, ASTC_6x6 = 50, ASTC_8x8 = 51, ASTC_10x10 = 52, ASTC_12x12 = 53, ETC_RGB4_3DS = -60, ETC_RGBA8_3DS = -61, RG16 = 62, R8 = 63, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, ASTC_HDR_4x4 = 66, ASTC_HDR_5x5 = 67, ASTC_HDR_6x6 = 68, ASTC_HDR_8x8 = 69, ASTC_HDR_10x10 = 70, ASTC_HDR_12x12 = 71, RG32 = 72, RGB48 = 73, RGBA64 = 74, R8_SIGNED = 75, RG16_SIGNED = 76, RGB24_SIGNED = 77, RGBA32_SIGNED = 78, R16_SIGNED = 79, RG32_SIGNED = 80, RGB48_SIGNED = 81, RGBA64_SIGNED = 82, ASTC_RGB_4x4 = -48, ASTC_RGB_5x5 = -49, ASTC_RGB_6x6 = -50, ASTC_RGB_8x8 = -51, ASTC_RGB_10x10 = -52, ASTC_RGB_12x12 = -53, ASTC_RGBA_4x4 = -54, ASTC_RGBA_5x5 = -55, ASTC_RGBA_6x6 = -56, ASTC_RGBA_8x8 = -57, ASTC_RGBA_10x10 = -58, ASTC_RGBA_12x12 = -59 }
        /** This enum describes how the RenderTexture is used as a VR eye texture. Instead of using the values of this enum manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
        */
        enum VRTextureUsage
        { None = 0, OneEye = 1, TwoEyes = 2, DeviceSpecific = 3 }
        /** Set of flags that control the state of a newly-created RenderTexture.
        */
        enum RenderTextureCreationFlags
        { MipMap = 1, AutoGenerateMips = 2, SRGB = 4, EyeTexture = 8, EnableRandomWrite = 16, CreatedFromScript = 32, AllowVerticalFlip = 128, NoResolvedColorSurface = 256, DynamicallyScalable = 1024, BindMS = 2048, DynamicallyScalableExplicit = 65536 }
        /** Color space conversion mode of a RenderTexture.
        */
        enum RenderTextureReadWrite
        { Default = 0, Linear = 1, sRGB = 2 }
        /** Flags enumeration of the render texture memoryless modes.
        */
        enum RenderTextureMemoryless
        { None = 0, Color = 1, Depth = 2, MSAA = 4 }
        /** A set of flags that describe the level of HDR display support available on the system.
        */
        enum HDRDisplaySupportFlags
        { None = 0, Supported = 1, RuntimeSwitchable = 2, AutomaticTonemapping = 4 }
        /** Options for the number of bits for HDR output in each color channel of swap chain buffers. Applicable when an HDR display is active.
        */
        enum HDRDisplayBitDepth
        { BitDepth10 = 0, BitDepth16 = 1 }
        /** Specify the source of a Custom Render Texture initialization.
        */
        enum CustomRenderTextureInitializationSource
        { TextureAndColor = 0, Material = 1 }
        /** Frequency of update or initialization of a Custom Render Texture.
        */
        enum CustomRenderTextureUpdateMode
        { OnLoad = 0, Realtime = 1, OnDemand = 2 }
        /** Space in which coordinates are provided for Update Zones.
        */
        enum CustomRenderTextureUpdateZoneSpace
        { Normalized = 0, Pixel = 1 }
        /** An enumeration that represents the bias mode to use for TextureMipmapLimitSettings.limitBias.
        */
        enum TextureMipmapLimitBiasMode
        { OffsetGlobalLimit = 0, OverrideGlobalLimit = 1 }
        /** Script interface for texture mipmap limit groups.
        */
        class TextureMipmapLimitGroups extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** (Editor Only) Attempts to create a texture mipmap limit group with the indicated groupName.
            * @param $groupName Name of the new texture mipmap limit group.
            */
            public static CreateGroup ($groupName: string) : void
            /** (Editor Only) Attempts to remove a texture mipmap limit group with the indicated groupName.
            * @param $groupName Name of the texture mipmap limit group to remove.
            */
            public static RemoveGroup ($groupName: string) : void
            /** Retrieves a string array containing the name of all texture mipmap limit groups available in the project.
            * @returns String array of texture mipmap limit group names. 
            */
            public static GetGroups () : System.Array$1<string>
            /** Checks whether a texture mipmap limit group with the indicated groupName exists in the project. This operation fails and throws an exception if groupName is null.
            * @param $groupName Name of the texture mipmap limit group to verify.
            * @returns Returns true if a texture mipmap limit group named groupName exists in the project. If that is not the case, returns false. 
            */
            public static HasGroup ($groupName: string) : boolean
        }
        /** The Skinned Mesh filter.
        */
        class SkinnedMeshRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The maximum number of bones per vertex that are taken into account during skinning.
            */
            public get quality(): UnityEngine.SkinQuality;
            public set quality(value: UnityEngine.SkinQuality);
            /** If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.
            */
            public get updateWhenOffscreen(): boolean;
            public set updateWhenOffscreen(value: boolean);
            /** Forces the Skinned Mesh to recalculate its matricies when rendered
            */
            public get forceMatrixRecalculationPerRender(): boolean;
            public set forceMatrixRecalculationPerRender(value: boolean);
            public get rootBone(): UnityEngine.Transform;
            public set rootBone(value: UnityEngine.Transform);
            /** The bones used to skin the mesh.
            */
            public get bones(): System.Array$1<UnityEngine.Transform>;
            public set bones(value: System.Array$1<UnityEngine.Transform>);
            /** The mesh used for skinning.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Specifies whether skinned motion vectors should be used for this renderer.
            */
            public get skinnedMotionVectors(): boolean;
            public set skinnedMotionVectors(value: boolean);
            /** The intended target usage of the skinned mesh GPU vertex buffer.
            */
            public get vertexBufferTarget(): UnityEngine.GraphicsBuffer.Target;
            public set vertexBufferTarget(value: UnityEngine.GraphicsBuffer.Target);
            /** Returns the weight of a BlendShape for this Renderer.
            * @param $index The index of the BlendShape whose weight you want to retrieve. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @returns The weight of the BlendShape. 
            */
            public GetBlendShapeWeight ($index: number) : number
            /** Sets the weight of a BlendShape for this Renderer.
            * @param $index The index of the BlendShape to modify. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.
            * @param $value The weight for this BlendShape.
            */
            public SetBlendShapeWeight ($index: number, $value: number) : void
            /** Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the skinned mesh.
            * @param $useScale Whether to compensate for the SkinnedMeshRenderer's Transform scale. If true, the baked Mesh is the same size as the original. If false, the baked Mesh matches the scaling of the SkinnedMeshRenderer's Transform component. The default value is false.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh) : void
            /** Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.
            * @param $mesh A static mesh that will receive the snapshot of the skinned mesh.
            * @param $useScale Whether to compensate for the SkinnedMeshRenderer's Transform scale. If true, the baked Mesh is the same size as the original. If false, the baked Mesh matches the scaling of the SkinnedMeshRenderer's Transform component. The default value is false.
            */
            public BakeMesh ($mesh: UnityEngine.Mesh, $useScale: boolean) : void
            /** Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the current frame.
            * @returns The skinned mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetVertexBuffer () : UnityEngine.GraphicsBuffer
            /** Retrieves a GraphicsBuffer that provides direct access to the GPU vertex buffer for this skinned mesh, for the previous frame.
            * @returns The skinned mesh vertex buffer as a GraphicsBuffer. 
            */
            public GetPreviousVertexBuffer () : UnityEngine.GraphicsBuffer
            public constructor ()
        }
        /** Renders meshes inserted by the MeshFilter or TextMesh.
        */
        class MeshRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** Vertex attributes in this mesh will override or add attributes of the primary mesh in the MeshRenderer.
            */
            public get additionalVertexStreams(): UnityEngine.Mesh;
            public set additionalVertexStreams(value: UnityEngine.Mesh);
            /** Vertex attributes that override the primary mesh when the MeshRenderer uses lightmaps in the Realtime Global Illumination system.
            */
            public get enlightenVertexStream(): UnityEngine.Mesh;
            public set enlightenVertexStream(value: UnityEngine.Mesh);
            /** Index of the first sub-mesh to use from the Mesh associated with this MeshRenderer (Read Only).
            */
            public get subMeshStartIndex(): number;
            /** Specifies the relative lightmap resolution of this object. (Editor only)
            */
            public get scaleInLightmap(): number;
            public set scaleInLightmap(value: number);
            /** Determines how the object will receive global illumination. (Editor only)
            */
            public get receiveGI(): UnityEngine.ReceiveGI;
            public set receiveGI(value: UnityEngine.ReceiveGI);
            /** When enabled, seams in baked lightmaps will get smoothed. (Editor only)
            */
            public get stitchLightmapSeams(): boolean;
            public set stitchLightmapSeams(value: boolean);
            public constructor ()
        }
        /** Light Probe Group.
        */
        class LightProbeGroup extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Editor only function to access and modify probe positions.
            */
            public get probePositions(): System.Array$1<UnityEngine.Vector3>;
            public set probePositions(value: System.Array$1<UnityEngine.Vector3>);
            /** Removes ringing from probes if enabled (Editor only).
            */
            public get dering(): boolean;
            public set dering(value: boolean);
            public constructor ()
        }
        /** A collection of common line functions.
        */
        class LineUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector3>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector3>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $pointsToKeep: System.Collections.Generic.List$1<number>) : void
            public static Simplify ($points: System.Collections.Generic.List$1<UnityEngine.Vector2>, $tolerance: number, $simplifiedPoints: System.Collections.Generic.List$1<UnityEngine.Vector2>) : void
            public constructor ()
        }
        /** The LOD (level of detail) fade modes. Modes other than LODFadeMode.None will result in Unity calculating a blend factor for blending/interpolating between two neighbouring LODs and pass it to your shader.
        */
        enum LODFadeMode
        { None = 0, CrossFade = 1, SpeedTree = 2 }
        /** Structure for building a LOD for passing to the SetLODs function.
        */
        class LOD extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The screen relative height to use for the transition [0-1].
            */
            public screenRelativeTransitionHeight : number
            /** Width of the cross-fade transition zone (proportion to the current LOD's whole length) [0-1]. Only used if it's not animated.
            */
            public fadeTransitionWidth : number
            /** List of renderers for this LOD level.
            */
            public renderers : System.Array$1<UnityEngine.Renderer>
            public constructor ($screenRelativeTransitionHeight: number, $renderers: System.Array$1<UnityEngine.Renderer>)
        }
        /** LODGroup lets you group multiple Renderers into LOD levels.
        */
        class LODGroup extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The local reference point against which the LOD distance is calculated.
            */
            public get localReferencePoint(): UnityEngine.Vector3;
            public set localReferencePoint(value: UnityEngine.Vector3);
            /** The size of the LOD object in local space.
            */
            public get size(): number;
            public set size(value: number);
            /** The number of LOD levels.
            */
            public get lodCount(): number;
            /** Specify whether the last LOD level is a BillboardRenderer.
            */
            public get lastLODBillboard(): boolean;
            public set lastLODBillboard(value: boolean);
            /** The LOD fade mode used.
            */
            public get fadeMode(): UnityEngine.LODFadeMode;
            public set fadeMode(value: UnityEngine.LODFadeMode);
            /** Specify if the cross-fading should be animated by time. The animation duration is specified globally as crossFadeAnimationDuration.
            */
            public get animateCrossFading(): boolean;
            public set animateCrossFading(value: boolean);
            /** Allows you to enable or disable the LODGroup.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The cross-fading animation duration in seconds. ArgumentException will be thrown if it is set to zero or a negative value.
            */
            public static get crossFadeAnimationDuration(): number;
            public static set crossFadeAnimationDuration(value: number);
            /** Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).
            */
            public RecalculateBounds () : void
            /** Returns the array of LODs.
            * @returns The LOD array. 
            */
            public GetLODs () : System.Array$1<UnityEngine.LOD>
            /** Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.
            * @param $lods The LODs to use for this group.
            */
            public SetLODs ($lods: System.Array$1<UnityEngine.LOD>) : void
            /** * @param $index The LOD level to use. Passing index < 0 will return to standard LOD processing.
            */
            public ForceLOD ($index: number) : void
            public constructor ()
        }
        /** Determines whether a texture uses a mipmap limit, and which mipmap limit the texture uses, when you create the texture using a constructor.
        */
        class MipmapLimitDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Enables or disables the texture using a mipmap limit.
            */
            public get useMipmapLimit(): boolean;
            /** The TextureMipmapLimitGroups|TextureMipmapLimitGroup to use the mipmap limit of.
            */
            public get groupName(): string;
            public constructor ($useMipmapLimit: boolean, $groupName: string)
        }
        /** Class for handling 3D Textures, Use this to create.
        */
        class Texture3D extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** The depth of the texture (Read Only).
            */
            public get depth(): number;
            /** The format of the pixel data in the texture (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Updates Unity texture to use different native texture object.
            * @param $nativeTex Native 3D texture object.
            */
            public UpdateExternalTexture ($nativeTex: System.IntPtr) : void
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($miplevel: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels () : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($miplevel: number) : System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level as Color32 structs.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 () : System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>) : void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level.
            * @param $colors The array of pixel colours to use. This is a 3D texture flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>) : void
            /** Creates Unity Texture out of externally created native texture object.
            * @param $nativeTex Native 3D texture object.
            * @param $width Width of texture in pixels.
            * @param $height Height of texture in pixels.
            * @param $depth Depth of texture in pixels
            * @param $format Format of underlying texture object.
            * @param $mipmap Does the texture have mipmaps?
            */
            public static CreateExternalTexture ($width: number, $height: number, $depth: number, $format: UnityEngine.TextureFormat, $mipChain: boolean, $nativeTex: System.IntPtr) : UnityEngine.Texture3D
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            /** Sets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel ($x: number, $y: number, $z: number, $color: UnityEngine.Color) : void
            /** Sets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to set. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to set. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to set. The range is 0 through the (texture depth - 1).
            * @param $color The color to set.
            * @param $mipLevel The mipmap level to write to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixel ($x: number, $y: number, $z: number, $color: UnityEngine.Color, $mipLevel: number) : void
            /** Gets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel ($x: number, $y: number, $z: number) : UnityEngine.Color
            /** Gets the pixel color at coordinates (x, y, z).
            * @param $x The x coordinate of the pixel to get. The range is 0 through the (texture width - 1).
            * @param $y The y coordinate of the pixel to get. The range is 0 through the (texture height - 1).
            * @param $z The z coordinate of the pixel to get. The range is 0 through the (texture depth - 1).
            * @param $mipLevel The mipmap level to sample. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixel ($x: number, $y: number, $z: number, $mipLevel: number) : UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v, w).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $w The w coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear ($u: number, $v: number, $w: number) : UnityEngine.Color
            /** Gets the filtered pixel color at the normalized coordinates (u, v, w).
            * @param $u The u coordinate of the pixel to get.
            * @param $v The v coordinate of the pixel to get.
            * @param $w The w coordinate of the pixel to get.
            * @param $mipLevel The mipmap level to read from. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns The pixel color. 
            */
            public GetPixelBilinear ($u: number, $v: number, $w: number, $mipLevel: number) : UnityEngine.Color
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $nativeTex: System.IntPtr)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $nativeTex: System.IntPtr, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $nativeTex: System.IntPtr)
            public constructor ()
        }
        /** Class for handling 2D texture arrays.
        */
        class Texture2DArray extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Read Only. This property is used as a parameter in some overloads of the CommandBuffer.Blit, Graphics.Blit, CommandBuffer.SetRenderTarget, and Graphics.SetRenderTarget methods to indicate that all texture array slices are bound. The value of this property is -1.
            */
            public static get allSlices(): number;
            /** Number of elements in a texture array (Read Only).
            */
            public get depth(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            /** The name of the texture mipmap limit group that this texture is associated with. (Read Only)
            */
            public get mipmapLimitGroup(): string;
            /** The number of high resolution mipmap levels from the texture that Unity doesn't upload to the GPU. (Read Only)
            */
            public get activeMipmapLimit(): number;
            public get isReadable(): boolean;
            /** This property causes a texture to ignore all texture mipmap limit settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** Gets the pixel color data for a mipmap level of a slice as Color structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a slice as Color structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($arrayElement: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a slice as Color32 structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level of a slice as Color32 structs.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($arrayElement: number) : System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $arrayElement: number) : void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $arrayElement: number) : void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $height: number, $depth: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean, $mipmapLimitDescriptor: UnityEngine.MipmapLimitDescriptor)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $height: number, $depth: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Class for handling Cubemap arrays.
        */
        class CubemapArray extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Number of cubemaps in the array (Read Only).
            */
            public get cubemapCount(): number;
            /** Texture format (Read Only).
            */
            public get format(): UnityEngine.TextureFormat;
            public get isReadable(): boolean;
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $arrayElement The array slice to read pixel data from.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color structs.
            * @param $face The CubemapFace to read from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $arrayElement The array slice to read pixel data from.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels ($face: UnityEngine.CubemapFace, $arrayElement: number) : System.Array$1<UnityEngine.Color>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color32 structs.
            * @param $face The CubemapFace to read pixel data from.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : System.Array$1<UnityEngine.Color32>
            /** Gets the pixel color data for a mipmap level of a face of a slice as Color32 structs.
            * @param $face The CubemapFace to read pixel data from.
            * @param $arrayElement The array slice to read pixel data from.
            * @param $miplevel The mipmap level to get. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @returns An array that contains the pixel colors. 
            */
            public GetPixels32 ($face: UnityEngine.CubemapFace, $arrayElement: number) : System.Array$1<UnityEngine.Color32>
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            */
            public SetPixels ($colors: System.Array$1<UnityEngine.Color>, $face: UnityEngine.CubemapFace, $arrayElement: number) : void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number, $miplevel: number) : void
            /** Sets the pixel colors of an entire mipmap level of a face of a slice.
            * @param $colors The array of pixel colours to use. This is a 2D image flattened to a 1D array.
            * @param $face The CubemapFace to write colors to.
            * @param $arrayElement The array slice to write colors to.
            * @param $miplevel The mipmap level to write colors to. The range is 0 through the texture's Texture.mipmapCount. The default value is 0.
            */
            public SetPixels32 ($colors: System.Array$1<UnityEngine.Color32>, $face: UnityEngine.CubemapFace, $arrayElement: number) : void
            /** Copies changes you've made in a CPU texture to the GPU.
            * @param $updateMipmaps When the value is true, Unity recalculates mipmap levels, using mipmap level 0 as the source. The default value is true.
            * @param $makeNoLongerReadable When the value is true, Unity deletes the texture in CPU memory after it uploads it to the GPU, and sets Texture.isReadable|isReadable to false. The default value is false.
            */
            public Apply ($updateMipmaps: boolean, $makeNoLongerReadable: boolean) : void
            public Apply ($updateMipmaps: boolean) : void
            public Apply () : void
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags)
            public constructor ($width: number, $cubemapCount: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $flags: UnityEngine.Experimental.Rendering.TextureCreationFlags, $mipCount: number)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean, $createUninitialized: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean, $linear: boolean)
            public constructor ($width: number, $cubemapCount: number, $textureFormat: UnityEngine.TextureFormat, $mipChain: boolean)
            public constructor ()
        }
        /** Class for handling Sparse Textures.
        */
        class SparseTexture extends UnityEngine.Texture
        {
            protected [__keep_incompatibility]: never;
            /** Get sparse texture tile width (Read Only).
            */
            public get tileWidth(): number;
            /** Get sparse texture tile height (Read Only).
            */
            public get tileHeight(): number;
            /** Is the sparse texture actually created? (Read Only)
            */
            public get isCreated(): boolean;
            /** Update sparse texture tile with color values.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            * @param $data Tile color data.
            */
            public UpdateTile ($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<UnityEngine.Color32>) : void
            /** Update sparse texture tile with raw pixel values.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            * @param $data Tile raw pixel data.
            */
            public UpdateTileRaw ($tileX: number, $tileY: number, $miplevel: number, $data: System.Array$1<number>) : void
            /** Unload sparse texture tile.
            * @param $tileX Tile X coordinate.
            * @param $tileY Tile Y coordinate.
            * @param $miplevel Mipmap level of the texture.
            */
            public UnloadTile ($tileX: number, $tileY: number, $miplevel: number) : void
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.DefaultFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $format: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number)
            public constructor ($width: number, $height: number, $textureFormat: UnityEngine.TextureFormat, $mipCount: number, $linear: boolean)
            public constructor ()
        }
        /** This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties. Avoid using the default constructor as it does not initialize some flags with the recommended values.
        */
        class RenderTextureDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The width of the render texture in pixels.
            */
            public get width(): number;
            public set width(value: number);
            /** The height of the render texture in pixels.
            */
            public get height(): number;
            public set height(value: number);
            /** The multisample antialiasing level for the RenderTexture.
            Additional resources: RenderTexture.antiAliasing.
            */
            public get msaaSamples(): number;
            public set msaaSamples(value: number);
            /** Volume extent of a 3D render texture.
            */
            public get volumeDepth(): number;
            public set volumeDepth(value: number);
            /** User-defined mipmap count.
            */
            public get mipCount(): number;
            public set mipCount(value: number);
            /** The color format for the RenderTexture. You can set this format to None to achieve depth-only rendering.
            */
            public get graphicsFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set graphicsFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The format of the stencil data that you can encapsulate within a RenderTexture.
            Specifying this property creates a stencil element for the RenderTexture and sets its format.
            This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
            This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.
            Currently, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.
            */
            public get stencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set stencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The desired format of the depth/stencil buffer.
            */
            public get depthStencilFormat(): UnityEngine.Experimental.Rendering.GraphicsFormat;
            public set depthStencilFormat(value: UnityEngine.Experimental.Rendering.GraphicsFormat);
            /** The format of the RenderTarget is expressed as a RenderTextureFormat. Internally, this format is stored as a GraphicsFormat compatible with the current system (see SystemInfo.GetCompatibleFormat). Therefore, if you set a format and immediately get it again, it may return a different result from the one just set.
            */
            public get colorFormat(): UnityEngine.RenderTextureFormat;
            public set colorFormat(value: UnityEngine.RenderTextureFormat);
            /** This flag causes the render texture uses sRGB read/write conversions.
            */
            public get sRGB(): boolean;
            public set sRGB(value: boolean);
            /** The precision of the render texture's depth buffer in bits (0, 16, 24 and 32 are supported).
            */
            public get depthBufferBits(): number;
            public set depthBufferBits(value: number);
            /** Dimensionality (type) of the render texture.
            Additional resources: RenderTexture.dimension.
            */
            public get dimension(): UnityEngine.Rendering.TextureDimension;
            public set dimension(value: UnityEngine.Rendering.TextureDimension);
            /** Determines how the RenderTexture is sampled if it is used as a shadow map.
            Additional resources: ShadowSamplingMode for more details.
            */
            public get shadowSamplingMode(): UnityEngine.Rendering.ShadowSamplingMode;
            public set shadowSamplingMode(value: UnityEngine.Rendering.ShadowSamplingMode);
            /** If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any. Instead of setting this manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
            */
            public get vrUsage(): UnityEngine.VRTextureUsage;
            public set vrUsage(value: UnityEngine.VRTextureUsage);
            /** A set of RenderTextureCreationFlags that control how the texture is created.
            */
            public get flags(): UnityEngine.RenderTextureCreationFlags;
            /** The render texture memoryless mode property.
            */
            public get memoryless(): UnityEngine.RenderTextureMemoryless;
            public set memoryless(value: UnityEngine.RenderTextureMemoryless);
            /** Render texture has mipmaps when this flag is set.
            Additional resources: RenderTexture.useMipMap.
            */
            public get useMipMap(): boolean;
            public set useMipMap(value: boolean);
            /** Mipmap levels are generated automatically when this flag is set.
            */
            public get autoGenerateMips(): boolean;
            public set autoGenerateMips(value: boolean);
            /** Enable random access write into this render texture on Shader Model 5.0 level shaders.
            Additional resources: RenderTexture.enableRandomWrite.
            */
            public get enableRandomWrite(): boolean;
            public set enableRandomWrite(value: boolean);
            /** If true and msaaSamples is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.
            */
            public get bindMS(): boolean;
            public set bindMS(value: boolean);
            /** Set to true to enable dynamic resolution scaling on this render texture. Mutually exclusive with RenderTextureDescriptor.useDynamicScaleExplicit
            Additional resources: RenderTexture.useDynamicScale.
            */
            public get useDynamicScale(): boolean;
            public set useDynamicScale(value: boolean);
            /** Set to true to enable dynamic resolution scaling on this render texture and control when this scaling happens. Mutually exclusive with RenderTextureDescriptor.useDynamicScale
            Additional resources: RenderTexture.useDynamicScaleExplicit.
            */
            public get useDynamicScaleExplicit(): boolean;
            public set useDynamicScaleExplicit(value: boolean);
            public constructor ($width: number, $height: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat, $depthBufferBits: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthBufferBits: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat, $depthBufferBits: number, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.RenderTextureFormat, $depthBufferBits: number, $mipCount: number, $readWrite: UnityEngine.RenderTextureReadWrite)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthBufferBits: number, $mipCount: number)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat)
            public constructor ($width: number, $height: number, $colorFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $depthStencilFormat: UnityEngine.Experimental.Rendering.GraphicsFormat, $mipCount: number)
        }
        /** Structure describing an Update Zone.
        */
        class CustomRenderTextureUpdateZone extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position of the center of the Update Zone within the Custom Render Texture.
            */
            public updateZoneCenter : UnityEngine.Vector3
            /** Size of the Update Zone.
            */
            public updateZoneSize : UnityEngine.Vector3
            /** Rotation of the Update Zone.
            */
            public rotation : number
            /** Shader Pass used to update the Custom Render Texture for this Update Zone.
            */
            public passIndex : number
            /** If true, and if the texture is double buffered, a request is made to swap the buffers before the next update. Otherwise, the buffers will not be swapped.
            */
            public needSwap : boolean
        }
        /** Describes options for displaying movie playback controls.
        */
        enum FullScreenMovieControlMode
        { Full = 0, Minimal = 1, CancelOnInput = 2, Hidden = 3 }
        /** Describes scaling modes for displaying movies.
        */
        enum FullScreenMovieScalingMode
        { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3 }
        /** ActivityIndicator Style (Android Specific).
        */
        enum AndroidActivityIndicatorStyle
        { DontShow = -1, Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3 }
        /** Interface into functionality unique to handheld devices.
        */
        class Handheld extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode, $scalingMode: UnityEngine.FullScreenMovieScalingMode) : boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color, $controlMode: UnityEngine.FullScreenMovieControlMode) : boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string, $bgColor: UnityEngine.Color) : boolean
            /** Plays a full-screen movie.
            * @param $path Filesystem path to the movie file.
            * @param $bgColor Background color.
            * @param $controlMode How the playback controls are to be displayed.
            * @param $scalingMode How the movie is to be scaled to fit the screen.
            */
            public static PlayFullScreenMovie ($path: string) : boolean
            /** Triggers device vibration.
            */
            public static Vibrate () : void
            public static SetActivityIndicatorStyle ($style: UnityEngine.iOS.ActivityIndicatorStyle) : void
            /** Sets the desired activity indicator style.
            */
            public static SetActivityIndicatorStyle ($style: UnityEngine.AndroidActivityIndicatorStyle) : void
            /** Gets the current activity indicator style.
            */
            public static GetActivityIndicatorStyle () : number
            /** Starts os activity indicator.
            */
            public static StartActivityIndicator () : void
            /** Stops os activity indicator.
            */
            public static StopActivityIndicator () : void
            public static ClearShaderCache () : void
            public constructor ()
        }
        /** Utilities to compute hashes.
        */
        class HashUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Append inHash in outHash.
            * @param $inHash Hash to append.
            * @param $outHash Hash that will be updated.
            */
            public static AppendHash ($inHash: $Ref<UnityEngine.Hash128>, $outHash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a Hash128 of a Matrix4x4.
            * @param $value The Matrix4x4 to hash.
            * @param $hash The computed hash.
            */
            public static QuantisedMatrixHash ($value: $Ref<UnityEngine.Matrix4x4>, $hash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a Hash128 of a Vector3.
            * @param $hash The Vector3 to hash.
            * @param $value The computed hash.
            */
            public static QuantisedVectorHash ($value: $Ref<UnityEngine.Vector3>, $hash: $Ref<UnityEngine.Hash128>) : void
            /** Compute a 128 bit hash based on a value. the type of the value must be a value type.
            * @param $value A reference to the value to hash.
            * @param $hash A reference to the Hash128 to updated with the computed hash.
            */
            public static ComputeHash128 ($value: System.Array$1<number>, $hash: $Ref<UnityEngine.Hash128>) : void
        }
        /** Utilities to compute hashes with unsafe code.
        */
        class HashUnsafeUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class HmiPlatform extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static LogStartupTiming ($tag: string) : void
            public constructor ()
        }
        /** Determines whether the mouse cursor is rendered using software rendering or, on supported platforms, hardware rendering.
        */
        enum CursorMode
        { Auto = 0, ForceSoftware = 1 }
        /** How the cursor should behave.
        */
        enum CursorLockMode
        { None = 0, Locked = 1, Confined = 2 }
        /** Cursor API for setting the cursor (mouse pointer).
        */
        class Cursor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Determines whether the hardware pointer is visible or not.
            */
            public static get visible(): boolean;
            public static set visible(value: boolean);
            /** Determines whether the hardware pointer is locked to the center of the view, constrained to the window, or not constrained at all.
            */
            public static get lockState(): UnityEngine.CursorLockMode;
            public static set lockState(value: UnityEngine.CursorLockMode);
            /** Sets a custom cursor to use as your cursor.
            * @param $texture The texture to use for the cursor. To use a texture, import it with `Read/Write` enabled. Alternatively, you can use the default cursor import setting. If you created your cursor texture from code, it must be in RGBA32 format, have alphaIsTransparency enabled, and have no mip chain. To use the default cursor, set the texture to `Null`.
            * @param $hotspot The offset from the top left of the texture to use as the target point. This must be in the bounds of the cursor.
            * @param $cursorMode Whether to render this cursor as a hardware cursor on supported platforms, or force software cursor.
            */
            public static SetCursor ($texture: UnityEngine.Texture2D, $hotspot: UnityEngine.Vector2, $cursorMode: UnityEngine.CursorMode) : void
            public constructor ()
        }
        /** Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard. If "Use Physical Keys" is enabled in, these map directly to a physical key on the keyboard. If "Use Physical Keys" is disabled these map to language dependent mapping, different for every platform and cannot be guaranteed to work. "Use Physical Keys" is enabled by default from 2022.1
        */
        enum KeyCode
        { None = 0, Backspace = 8, Delete = 127, Tab = 9, Clear = 12, Return = 13, Pause = 19, Escape = 27, Space = 32, Keypad0 = 256, Keypad1 = 257, Keypad2 = 258, Keypad3 = 259, Keypad4 = 260, Keypad5 = 261, Keypad6 = 262, Keypad7 = 263, Keypad8 = 264, Keypad9 = 265, KeypadPeriod = 266, KeypadDivide = 267, KeypadMultiply = 268, KeypadMinus = 269, KeypadPlus = 270, KeypadEnter = 271, KeypadEquals = 272, UpArrow = 273, DownArrow = 274, RightArrow = 275, LeftArrow = 276, Insert = 277, Home = 278, End = 279, PageUp = 280, PageDown = 281, F1 = 282, F2 = 283, F3 = 284, F4 = 285, F5 = 286, F6 = 287, F7 = 288, F8 = 289, F9 = 290, F10 = 291, F11 = 292, F12 = 293, F13 = 294, F14 = 295, F15 = 296, Alpha0 = 48, Alpha1 = 49, Alpha2 = 50, Alpha3 = 51, Alpha4 = 52, Alpha5 = 53, Alpha6 = 54, Alpha7 = 55, Alpha8 = 56, Alpha9 = 57, Exclaim = 33, DoubleQuote = 34, Hash = 35, Dollar = 36, Percent = 37, Ampersand = 38, Quote = 39, LeftParen = 40, RightParen = 41, Asterisk = 42, Plus = 43, Comma = 44, Minus = 45, Period = 46, Slash = 47, Colon = 58, Semicolon = 59, Less = 60, Equals = 61, Greater = 62, Question = 63, At = 64, LeftBracket = 91, Backslash = 92, RightBracket = 93, Caret = 94, Underscore = 95, BackQuote = 96, A = 97, B = 98, C = 99, D = 100, E = 101, F = 102, G = 103, H = 104, I = 105, J = 106, K = 107, L = 108, M = 109, N = 110, O = 111, P = 112, Q = 113, R = 114, S = 115, T = 116, U = 117, V = 118, W = 119, X = 120, Y = 121, Z = 122, LeftCurlyBracket = 123, Pipe = 124, RightCurlyBracket = 125, Tilde = 126, Numlock = 300, CapsLock = 301, ScrollLock = 302, RightShift = 303, LeftShift = 304, RightControl = 305, LeftControl = 306, RightAlt = 307, LeftAlt = 308, LeftMeta = 310, LeftCommand = 310, LeftApple = 310, LeftWindows = 311, RightMeta = 309, RightCommand = 309, RightApple = 309, RightWindows = 312, AltGr = 313, Help = 315, Print = 316, SysReq = 317, Break = 318, Menu = 319, WheelUp = 321, WheelDown = 322, Mouse0 = 323, Mouse1 = 324, Mouse2 = 325, Mouse3 = 326, Mouse4 = 327, Mouse5 = 328, Mouse6 = 329, JoystickButton0 = 330, JoystickButton1 = 331, JoystickButton2 = 332, JoystickButton3 = 333, JoystickButton4 = 334, JoystickButton5 = 335, JoystickButton6 = 336, JoystickButton7 = 337, JoystickButton8 = 338, JoystickButton9 = 339, JoystickButton10 = 340, JoystickButton11 = 341, JoystickButton12 = 342, JoystickButton13 = 343, JoystickButton14 = 344, JoystickButton15 = 345, JoystickButton16 = 346, JoystickButton17 = 347, JoystickButton18 = 348, JoystickButton19 = 349, Joystick1Button0 = 350, Joystick1Button1 = 351, Joystick1Button2 = 352, Joystick1Button3 = 353, Joystick1Button4 = 354, Joystick1Button5 = 355, Joystick1Button6 = 356, Joystick1Button7 = 357, Joystick1Button8 = 358, Joystick1Button9 = 359, Joystick1Button10 = 360, Joystick1Button11 = 361, Joystick1Button12 = 362, Joystick1Button13 = 363, Joystick1Button14 = 364, Joystick1Button15 = 365, Joystick1Button16 = 366, Joystick1Button17 = 367, Joystick1Button18 = 368, Joystick1Button19 = 369, Joystick2Button0 = 370, Joystick2Button1 = 371, Joystick2Button2 = 372, Joystick2Button3 = 373, Joystick2Button4 = 374, Joystick2Button5 = 375, Joystick2Button6 = 376, Joystick2Button7 = 377, Joystick2Button8 = 378, Joystick2Button9 = 379, Joystick2Button10 = 380, Joystick2Button11 = 381, Joystick2Button12 = 382, Joystick2Button13 = 383, Joystick2Button14 = 384, Joystick2Button15 = 385, Joystick2Button16 = 386, Joystick2Button17 = 387, Joystick2Button18 = 388, Joystick2Button19 = 389, Joystick3Button0 = 390, Joystick3Button1 = 391, Joystick3Button2 = 392, Joystick3Button3 = 393, Joystick3Button4 = 394, Joystick3Button5 = 395, Joystick3Button6 = 396, Joystick3Button7 = 397, Joystick3Button8 = 398, Joystick3Button9 = 399, Joystick3Button10 = 400, Joystick3Button11 = 401, Joystick3Button12 = 402, Joystick3Button13 = 403, Joystick3Button14 = 404, Joystick3Button15 = 405, Joystick3Button16 = 406, Joystick3Button17 = 407, Joystick3Button18 = 408, Joystick3Button19 = 409, Joystick4Button0 = 410, Joystick4Button1 = 411, Joystick4Button2 = 412, Joystick4Button3 = 413, Joystick4Button4 = 414, Joystick4Button5 = 415, Joystick4Button6 = 416, Joystick4Button7 = 417, Joystick4Button8 = 418, Joystick4Button9 = 419, Joystick4Button10 = 420, Joystick4Button11 = 421, Joystick4Button12 = 422, Joystick4Button13 = 423, Joystick4Button14 = 424, Joystick4Button15 = 425, Joystick4Button16 = 426, Joystick4Button17 = 427, Joystick4Button18 = 428, Joystick4Button19 = 429, Joystick5Button0 = 430, Joystick5Button1 = 431, Joystick5Button2 = 432, Joystick5Button3 = 433, Joystick5Button4 = 434, Joystick5Button5 = 435, Joystick5Button6 = 436, Joystick5Button7 = 437, Joystick5Button8 = 438, Joystick5Button9 = 439, Joystick5Button10 = 440, Joystick5Button11 = 441, Joystick5Button12 = 442, Joystick5Button13 = 443, Joystick5Button14 = 444, Joystick5Button15 = 445, Joystick5Button16 = 446, Joystick5Button17 = 447, Joystick5Button18 = 448, Joystick5Button19 = 449, Joystick6Button0 = 450, Joystick6Button1 = 451, Joystick6Button2 = 452, Joystick6Button3 = 453, Joystick6Button4 = 454, Joystick6Button5 = 455, Joystick6Button6 = 456, Joystick6Button7 = 457, Joystick6Button8 = 458, Joystick6Button9 = 459, Joystick6Button10 = 460, Joystick6Button11 = 461, Joystick6Button12 = 462, Joystick6Button13 = 463, Joystick6Button14 = 464, Joystick6Button15 = 465, Joystick6Button16 = 466, Joystick6Button17 = 467, Joystick6Button18 = 468, Joystick6Button19 = 469, Joystick7Button0 = 470, Joystick7Button1 = 471, Joystick7Button2 = 472, Joystick7Button3 = 473, Joystick7Button4 = 474, Joystick7Button5 = 475, Joystick7Button6 = 476, Joystick7Button7 = 477, Joystick7Button8 = 478, Joystick7Button9 = 479, Joystick7Button10 = 480, Joystick7Button11 = 481, Joystick7Button12 = 482, Joystick7Button13 = 483, Joystick7Button14 = 484, Joystick7Button15 = 485, Joystick7Button16 = 486, Joystick7Button17 = 487, Joystick7Button18 = 488, Joystick7Button19 = 489, Joystick8Button0 = 490, Joystick8Button1 = 491, Joystick8Button2 = 492, Joystick8Button3 = 493, Joystick8Button4 = 494, Joystick8Button5 = 495, Joystick8Button6 = 496, Joystick8Button7 = 497, Joystick8Button8 = 498, Joystick8Button9 = 499, Joystick8Button10 = 500, Joystick8Button11 = 501, Joystick8Button12 = 502, Joystick8Button13 = 503, Joystick8Button14 = 504, Joystick8Button15 = 505, Joystick8Button16 = 506, Joystick8Button17 = 507, Joystick8Button18 = 508, Joystick8Button19 = 509 }
        enum iPhoneScreenOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Landscape = 6 }
        enum iPhoneNetworkReachability
        { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaWiFiNetwork = 2 }
        enum iPhoneGeneration
        { Unknown = 0, iPhone = 1, iPhone3G = 2, iPhone3GS = 3, iPodTouch1Gen = 4, iPodTouch2Gen = 5, iPodTouch3Gen = 6, iPad1Gen = 7, iPhone4 = 8, iPodTouch4Gen = 9, iPad2Gen = 10, iPhone4S = 11, iPad3Gen = 12, iPhone5 = 13, iPodTouch5Gen = 14, iPadMini1Gen = 15, iPad4Gen = 16, iPhone5C = 17, iPhone5S = 18, iPhoneUnknown = 19, iPadUnknown = 20, iPodTouchUnknown = 21 }
        class iPhoneSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        enum iPhoneTouchPhase
        { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4 }
        class iPhoneTouch extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get fingerId(): number;
            public get position(): UnityEngine.Vector2;
            public get deltaPosition(): UnityEngine.Vector2;
            public get deltaTime(): number;
            public get tapCount(): number;
            public get phase(): UnityEngine.iPhoneTouchPhase;
        }
        enum iPhoneMovieControlMode
        { Full = 0, Minimal = 1, CancelOnTouch = 2, Hidden = 3, VolumeOnly = 4 }
        enum iPhoneMovieScalingMode
        { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3 }
        class iPhoneUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        enum iPhoneKeyboardType
        { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7 }
        class iPhoneKeyboard extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get text(): string;
            public set text(value: string);
            public static get hideInput(): boolean;
            public static set hideInput(value: boolean);
            public get active(): boolean;
            public set active(value: boolean);
            public get done(): boolean;
            public static get area(): UnityEngine.Rect;
            public static get visible(): boolean;
            public constructor ()
        }
        class iPhoneAccelerationEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get acceleration(): UnityEngine.Vector3;
            public get deltaTime(): number;
        }
        enum iPhoneOrientation
        { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6 }
        class iPhoneInput extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get accelerationEvents(): System.Array$1<UnityEngine.iPhoneAccelerationEvent>;
            public static get touches(): System.Array$1<UnityEngine.iPhoneTouch>;
            public static get touchCount(): number;
            public static get multiTouchEnabled(): boolean;
            public static set multiTouchEnabled(value: boolean);
            public static get accelerationEventCount(): number;
            public static get acceleration(): UnityEngine.Vector3;
            public static GetTouch ($index: number) : UnityEngine.iPhoneTouch
            public static GetAccelerationEvent ($index: number) : UnityEngine.iPhoneAccelerationEvent
            public constructor ()
        }
        class iPhone extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get generation(): UnityEngine.iPhoneGeneration;
            public static get vendorIdentifier(): string;
            public static get advertisingIdentifier(): string;
            public static get advertisingTrackingEnabled(): boolean;
            public static SetNoBackupFlag ($path: string) : void
            public static ResetNoBackupFlag ($path: string) : void
            public constructor ()
        }
        enum iOSActivityIndicatorStyle
        { DontShow = 0, WhiteLarge = 1, White = 2, Gray = 3 }
        class ADBannerView extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get loaded(): boolean;
            public get visible(): boolean;
            public set visible(value: boolean);
            public get layout(): UnityEngine.ADBannerView.Layout;
            public set layout(value: UnityEngine.ADBannerView.Layout);
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            public get size(): UnityEngine.Vector2;
            public static add_onBannerWasClicked ($value: UnityEngine.ADBannerView.BannerWasClickedDelegate) : void
            public static remove_onBannerWasClicked ($value: UnityEngine.ADBannerView.BannerWasClickedDelegate) : void
            public static add_onBannerWasLoaded ($value: UnityEngine.ADBannerView.BannerWasLoadedDelegate) : void
            public static remove_onBannerWasLoaded ($value: UnityEngine.ADBannerView.BannerWasLoadedDelegate) : void
            public static IsAvailable ($type: UnityEngine.ADBannerView.Type) : boolean
            public constructor ($type: UnityEngine.ADBannerView.Type, $layout: UnityEngine.ADBannerView.Layout)
        }
        class ADInterstitialAd extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get isAvailable(): boolean;
            public get loaded(): boolean;
            public static add_onInterstitialWasLoaded ($value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate) : void
            public static remove_onInterstitialWasLoaded ($value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate) : void
            public Show () : void
            public ReloadAd () : void
            public constructor ($autoReload: boolean)
            public constructor ()
        }
        /** Initializes a new instance of the Logger.
        */
        class Logger extends System.Object implements UnityEngine.ILogger, UnityEngine.ILogHandler
        {
            protected [__keep_incompatibility]: never;
            /** Set  Logger.ILogHandler.
            */
            public get logHandler(): UnityEngine.ILogHandler;
            public set logHandler(value: UnityEngine.ILogHandler);
            /** To runtime toggle debug logging [ON/OFF].
            */
            public get logEnabled(): boolean;
            public set logEnabled(value: boolean);
            /** To selective enable debug log message.
            */
            public get filterLogType(): UnityEngine.LogType;
            public set filterLogType(value: UnityEngine.LogType);
            /** Check logging is enabled based on the LogType.
            * @param $logType The type of the log message.
            * @returns Retrun true in case logs of LogType will be logged otherwise returns false. 
            */
            public IsLogTypeAllowed ($logType: UnityEngine.LogType) : boolean
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($logType: UnityEngine.LogType, $tag: string, $message: any, $context: UnityEngine.Object) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($tag: string, $message: any) : void
            /** Logs message to the Unity Console using default logger.
            * @param $logType The type of the log message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public Log ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an warning message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogWarning ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an warning message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogWarning ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an error message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogError ($tag: string, $message: any) : void
            /** A variant of Logger.Log that logs an error message.
            * @param $tag Used to identify the source of a log message. It usually identifies the class where the log call occurs.
            * @param $message String or object to be converted to string representation for display.
            * @param $context Object to which the message applies.
            */
            public LogError ($tag: string, $message: any, $context: UnityEngine.Object) : void
            /** A variant of Logger.Log that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            public LogException ($exception: System.Exception) : void
            /** A variant of Logger.Log that logs an exception message.
            * @param $exception Runtime Exception.
            * @param $context Object to which the message applies.
            */
            public LogException ($exception: System.Exception, $context: UnityEngine.Object) : void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            public LogFormat ($logType: UnityEngine.LogType, $format: string, ...args: any[]) : void
            /** Logs a formatted message.
            * @param $logType The type of the log message.
            * @param $context Object to which the message applies.
            * @param $format A composite format string.
            * @param $args Format arguments.
            */
            public LogFormat ($logType: UnityEngine.LogType, $context: UnityEngine.Object, $format: string, ...args: any[]) : void
            public constructor ($logHandler: UnityEngine.ILogHandler)
        }
        /** A collection of common color functions.
        */
        class ColorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Attempts to convert a html color string.
            * @param $htmlString Case insensitive html string to be converted into a color.
            * @param $color The converted color.
            * @returns True if the string was successfully converted else false. 
            */
            public static TryParseHtmlString ($htmlString: string, $color: $Ref<UnityEngine.Color>) : boolean
            /** Returns the color as a hexadecimal string in the format "RRGGBB".
            * @param $color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGB ($color: UnityEngine.Color) : string
            /** Returns the color as a hexadecimal string in the format "RRGGBBAA".
            * @param $color The color to be converted.
            * @returns Hexadecimal string representing the color. 
            */
            public static ToHtmlStringRGBA ($color: UnityEngine.Color) : string
            public constructor ()
        }
        /** Color key used by Gradient.
        */
        class GradientColorKey extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Color of key.
            */
            public color : UnityEngine.Color
            /** Time of the key (0 - 1).
            */
            public time : number
            public constructor ($col: UnityEngine.Color, $time: number)
        }
        /** Alpha key used by Gradient.
        */
        class GradientAlphaKey extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Alpha channel of key.
            */
            public alpha : number
            /** Time of the key (0 - 1).
            */
            public time : number
            public constructor ($alpha: number, $time: number)
        }
        /** Color interpolation mode used by Gradient.
        */
        enum GradientMode
        { Blend = 0, Fixed = 1, PerceptualBlend = 2 }
        /** This struct contains the view space coordinates of the near projection plane.
        */
        class FrustumPlanes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Position in view space of the left side of the near projection plane.
            */
            public left : number
            /** Position in view space of the right side of the near projection plane.
            */
            public right : number
            /** Position in view space of the bottom side of the near projection plane.
            */
            public bottom : number
            /** Position in view space of the top side of the near projection plane.
            */
            public top : number
            /** Z distance from the origin of view space to the near projection plane.
            */
            public zNear : number
            /** Z distance from the origin of view space to the far projection plane.
            */
            public zFar : number
        }
        /** A collection of common math functions.
        */
        class Mathf extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The well-known 3.14159265358979... value (Read Only).
            */
            public static PI : number
            /** A representation of positive infinity (Read Only).
            */
            public static Infinity : number
            /** A representation of negative infinity (Read Only).
            */
            public static NegativeInfinity : number
            /** Degrees-to-radians conversion constant (Read Only).
            */
            public static Deg2Rad : number
            /** Radians-to-degrees conversion constant (Read Only).
            */
            public static Rad2Deg : number
            /** A tiny floating point value (Read Only).
            */
            public static Epsilon : number
            /** Converts the given value from gamma (sRGB) to linear color space.
            */
            public static GammaToLinearSpace ($value: number) : number
            /** Converts the given value from linear to gamma (sRGB) color space.
            */
            public static LinearToGammaSpace ($value: number) : number
            /** Convert a color temperature in Kelvin to RGB color.
            * @param $kelvin Temperature in Kelvin. Range 1000 to 40000 Kelvin.
            * @returns Correlated Color Temperature as floating point RGB color. 
            */
            public static CorrelatedColorTemperatureToRGB ($kelvin: number) : UnityEngine.Color
            /** Encode a floating point value into a 16-bit representation.
            * @param $val The floating point value to convert.
            * @returns The converted half-precision float, stored in a 16-bit unsigned integer. 
            */
            public static FloatToHalf ($val: number) : number
            /** Convert a half precision float to a 32-bit floating point value.
            * @param $val The half precision value to convert.
            * @returns The decoded 32-bit float. 
            */
            public static HalfToFloat ($val: number) : number
            /** Generate 2D Perlin noise.
            * @param $x X-coordinate of sample point.
            * @param $y Y-coordinate of sample point.
            * @returns Value between 0.0 and 1.0. (Return value might be slightly below 0.0 or beyond 1.0.) 
            */
            public static PerlinNoise ($x: number, $y: number) : number
            /** Generates a 1D pseudo-random pattern of float values across a 2D plane.
            * @param $x The X-coordinate of the given sample point.
            * @returns A value in the range of 0.0 and 1.0. The value might be slightly higher or lower than this range. 
            */
            public static PerlinNoise1D ($x: number) : number
            /** Returns the sine of angle f.
            * @param $f The input angle, in radians.
            * @returns The return value between -1 and +1. 
            */
            public static Sin ($f: number) : number
            /** Returns the cosine of angle f.
            * @param $f The input angle, in radians.
            * @returns The return value between -1 and 1. 
            */
            public static Cos ($f: number) : number
            /** Returns the tangent of angle f in radians.
            */
            public static Tan ($f: number) : number
            /** Returns the arc-sine of f - the angle in radians whose sine is f.
            */
            public static Asin ($f: number) : number
            /** Returns the arc-cosine of f - the angle in radians whose cosine is f.
            */
            public static Acos ($f: number) : number
            /** Returns the arc-tangent of f - the angle in radians whose tangent is f.
            */
            public static Atan ($f: number) : number
            /** Returns the angle in radians whose Tan is y/x.
            */
            public static Atan2 ($y: number, $x: number) : number
            /** Returns square root of f.
            */
            public static Sqrt ($f: number) : number
            /** Returns the absolute value of f.
            */
            public static Abs ($f: number) : number
            /** Returns the absolute value of value.
            */
            public static Abs ($value: number) : number
            /** Returns the smallest of two or more values.
            */
            public static Min ($a: number, $b: number) : number
            /** Returns the smallest of two or more values.
            */
            public static Min (...values: number[]) : number
            /** Returns the largest of two or more values. When comparing negative values, values closer to zero are considered larger.
            */
            public static Max ($a: number, $b: number) : number
            /** Returns the largest of two or more values. When comparing negative values, values closer to zero are considered larger.
            */
            public static Max (...values: number[]) : number
            /** Returns f raised to power p.
            */
            public static Pow ($f: number, $p: number) : number
            /** Returns e raised to the specified power.
            */
            public static Exp ($power: number) : number
            /** Returns the logarithm of a specified number in a specified base.
            */
            public static Log ($f: number, $p: number) : number
            /** Returns the natural (base e) logarithm of a specified number.
            */
            public static Log ($f: number) : number
            /** Returns the base 10 logarithm of a specified number.
            */
            public static Log10 ($f: number) : number
            /** Returns the smallest integer greater than or equal to f.
            */
            public static Ceil ($f: number) : number
            /** Returns the largest integer smaller than or equal to f.
            */
            public static Floor ($f: number) : number
            /** Returns f rounded to the nearest integer.
            */
            public static Round ($f: number) : number
            /** Returns the smallest integer greater to or equal to f.
            */
            public static CeilToInt ($f: number) : number
            /** Returns the largest integer smaller to or equal to f.
            */
            public static FloorToInt ($f: number) : number
            /** Returns f rounded to the nearest integer.
            */
            public static RoundToInt ($f: number) : number
            /** Returns the sign of f.
            */
            public static Sign ($f: number) : number
            /** Clamps the given value between the given minimum float and maximum float values.  Returns the given value if it is within the minimum and maximum range.
            * @param $value The floating point value to restrict inside the range defined by the minimum and maximum values.
            * @param $min The minimum floating point value to compare against.
            * @param $max The maximum floating point value to compare against.
            * @returns The float result between the minimum and maximum values. 
            */
            public static Clamp ($value: number, $min: number, $max: number) : number
            /** Clamps value between 0 and 1 and returns value.
            */
            public static Clamp01 ($value: number) : number
            /** Linearly interpolates between a and b by t.
            * @param $a The start value.
            * @param $b The end value.
            * @param $t The interpolation value between the two floats.
            * @returns The interpolated float result between the two float values. 
            */
            public static Lerp ($a: number, $b: number, $t: number) : number
            /** Linearly interpolates between a and b by t with no limit to t.
            * @param $a The start value.
            * @param $b The end value.
            * @param $t The interpolation between the two floats.
            * @returns The float value as a result from the linear interpolation. 
            */
            public static LerpUnclamped ($a: number, $b: number, $t: number) : number
            /** Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            * @param $a The start angle. A float expressed in degrees.
            * @param $b The end angle. A float expressed in degrees.
            * @param $t The interpolation value between the start and end angles. This value is clamped to the range [0, 1].
            * @returns Returns the interpolated float result between angle a and angle b, based on the interpolation value t. 
            */
            public static LerpAngle ($a: number, $b: number, $t: number) : number
            /** Moves a value current towards target.
            * @param $current The current value.
            * @param $target The value to move towards.
            * @param $maxDelta The maximum change applied to the current value.
            */
            public static MoveTowards ($current: number, $target: number, $maxDelta: number) : number
            /** Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            */
            public static MoveTowardsAngle ($current: number, $target: number, $maxDelta: number) : number
            /** Interpolates between from and to with smoothing at the limits.
            * @param $from The start of the range.
            * @param $to The end of the range.
            * @param $t The interpolation value between the from and to range limits.
            * @returns The interpolated float result between from and to. 
            */
            public static SmoothStep ($from: number, $to: number, $t: number) : number
            public static Gamma ($value: number, $absmax: number, $gamma: number) : number
            /** Compares two floating point values and returns true if they are similar.
            */
            public static Approximately ($a: number, $b: number) : boolean
            /** Gradually changes a value towards a desired goal over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time it is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number) : number
            /** Gradually changes a value towards a desired goal over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time it is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number) : number
            /** Gradually changes a value towards a desired goal over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time it is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDamp ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number) : number
            /** Gradually changes an angle given in degrees towards a desired goal angle over time.
            * @param $current The current position.
            * @param $target The target position.
            * @param $currentVelocity The current velocity. This method modifies the currentVelocity every time the method is called.
            * @param $smoothTime The approximate time it takes to reach the target position. The lower the value the faster this method reaches the target. The minimum value is 0.0001. If a lower value is specified, it is automatically clamped to this minimum value.
            * @param $maxSpeed Use this optional parameter to specify a maximum speed. By default, the maximum speed is set to infinity.
            * @param $deltaTime The time since this method was last called. By default, this is set to `Time.deltaTime`.
            */
            public static SmoothDampAngle ($current: number, $target: number, $currentVelocity: $Ref<number>, $smoothTime: number, $maxSpeed: number, $deltaTime: number) : number
            /** Loops the value t, so that it is never larger than length and never smaller than 0.
            */
            public static Repeat ($t: number, $length: number) : number
            /** PingPong returns a value that increments and decrements between zero and the length. It follows the triangle wave formula where the bottom is set to zero and the peak is set to length.
            */
            public static PingPong ($t: number, $length: number) : number
            /** Determines where a value lies between two points.
            * @param $a The start of the range.
            * @param $b The end of the range.
            * @param $value The point within the range you want to calculate.
            * @returns A value between zero and one, representing where the "value" parameter falls within the range defined by a and b. 
            */
            public static InverseLerp ($a: number, $b: number, $value: number) : number
            /** Calculates the shortest difference between two angles.
            * @param $current The current angle in degrees.
            * @param $target The target angle in degrees.
            * @returns A value between -179 and 180, in degrees. 
            */
            public static DeltaAngle ($current: number, $target: number) : number
            /** Returns the next power of two that is equal to, or greater than, the argument.
            */
            public static NextPowerOfTwo ($value: number) : number
            /** Returns the closest power of two value.
            */
            public static ClosestPowerOfTwo ($value: number) : number
            /** Returns true if the value is power of two.
            */
            public static IsPowerOfTwo ($value: number) : boolean
        }
        /** Ping any given IP address (given in dot notation).
        */
        class Ping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Has the ping function completed?
            */
            public get isDone(): boolean;
            /** This property contains the ping time result in milliseconds after isDone returns true.
            */
            public get time(): number;
            /** The IP target of the ping.
            */
            public get ip(): string;
            public DestroyPing () : void
            public constructor ($address: string)
        }
        /** An exception thrown by the PlayerPrefs class in a  web player build.
        */
        class PlayerPrefsException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ($error: string)
        }
        /** PlayerPrefs is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.
        */
        class PlayerPrefs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets a single integer value for the preference identified by the given key. You can use PlayerPrefs.GetInt to retrieve this value.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetInt ($key: string) : number
            /** Sets the float value of the preference identified by the given key. You can use PlayerPrefs.GetFloat to retrieve this value.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetFloat ($key: string) : number
            /** Sets a single string value for the preference identified by the given key. You can use PlayerPrefs.GetString to retrieve this value. 
            */
            public static SetString ($key: string, $value: string) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string) : string
            /** Returns true if the given key exists in PlayerPrefs, otherwise returns false.
            */
            public static HasKey ($key: string) : boolean
            /** Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact.
            */
            public static DeleteKey ($key: string) : void
            /** Removes all keys and values from the preferences. Use with caution.
            */
            public static DeleteAll () : void
            /** Saves all modified preferences.
            */
            public static Save () : void
            public constructor ()
        }
        /** Base class to derive custom property attributes from. Use this to create custom attributes for script variables.
        */
        class PropertyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Optional field to specify the order that multiple DecorationDrawers should be drawn in.
            */
            public get order(): number;
            public set order(value: number);
        }
        /** Base class to derive custom property attributes for collections from. Use this to create custom attributes for array and list variables in scripts.
        */
        class PropertyCollectionAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        /** Use this attribute to add a context menu to a field that calls a  named method.
        */
        class ContextMenuItemAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the context menu item.
            */
            public name : string
            /** The name of the function that should be called.
            */
            public function : string
            public constructor ($name: string, $function: string)
        }
        /** Use this attribute on enum value declarations to change the display name shown in the Inspector.
        */
        class InspectorNameAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Name to display in the Inspector.
            */
            public displayName : string
            public constructor ($displayName: string)
        }
        /** Specify a tooltip for a field in the Inspector window.
        */
        class TooltipAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The tooltip text.
            */
            public tooltip : string
            public constructor ($tooltip: string)
        }
        /** Use this PropertyAttribute to add some spacing in the Inspector.
        */
        class SpaceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The spacing in pixels.
            */
            public height : number
            public constructor ()
            public constructor ($height: number)
        }
        /** Use this PropertyAttribute to add a header above some fields in the Inspector.
        */
        class HeaderAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The header text.
            */
            public header : string
            public constructor ($header: string)
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific range.
        */
        class RangeAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public min : number
            public max : number
            public constructor ($min: number, $max: number)
        }
        /** Attribute used to make a float or int variable in a script be restricted to a specific minimum value.
        */
        class MinAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The minimum allowed value.
            */
            public min : number
            public constructor ($min: number)
        }
        /** Attribute to make a string be edited with a multi-line textfield.
        */
        class MultilineAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public lines : number
            public constructor ()
            public constructor ($lines: number)
        }
        /** Attribute to make a string be edited with a height-flexible and scrollable text area.
        */
        class TextAreaAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The minimum amount of lines the text area will use.
            */
            public minLines : number
            /** The maximum amount of lines the text area can show before it starts using a scrollbar.
            */
            public maxLines : number
            public constructor ()
            public constructor ($minLines: number, $maxLines: number)
        }
        /** Attribute used to configure the usage of the ColorField and Color Picker for a color.
        */
        class ColorUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If false then the alpha bar is hidden in the ColorField and the alpha value is not shown in the Color Picker.
            */
            public showAlpha : boolean
            /** If set to true the Color is treated as a HDR color.
            */
            public hdr : boolean
            public constructor ($showAlpha: boolean)
            public constructor ($showAlpha: boolean, $hdr: boolean)
        }
        /** Controls how the Gradient inspector editor treats the color values.
        */
        class GradientUsageAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If set to true the Gradient uses HDR colors.
            */
            public hdr : boolean
            /** The color space the Gradient uses.
            */
            public colorSpace : UnityEngine.ColorSpace
            public constructor ($hdr: boolean)
            public constructor ($hdr: boolean, $colorSpace: UnityEngine.ColorSpace)
        }
        /** Attribute used to make a float, int, or string variable in a script be delayed.
        */
        class DelayedAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Disables reordering of an array or list in the Inspector window.
        */
        class NonReorderableAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Easily generate random data for games.
        */
        class Random extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets the full internal state of the random number generator.
            */
            public static get state(): UnityEngine.Random.State;
            public static set state(value: UnityEngine.Random.State);
            /** Returns a random float within [0.0..1.0] (range is inclusive) (Read Only).
            */
            public static get value(): number;
            /** Returns a random point inside or on a sphere with radius 1.0 (Read Only).
            */
            public static get insideUnitSphere(): UnityEngine.Vector3;
            /** Returns a random point inside or on a circle with radius 1.0 (Read Only).
            */
            public static get insideUnitCircle(): UnityEngine.Vector2;
            /** Returns a random point on the surface of a sphere with radius 1.0 (Read Only).
            */
            public static get onUnitSphere(): UnityEngine.Vector3;
            /** Returns a random rotation (Read Only).
            */
            public static get rotation(): UnityEngine.Quaternion;
            /** Returns a random rotation with uniform distribution (Read Only).
            */
            public static get rotationUniform(): UnityEngine.Quaternion;
            /** Initializes the random number generator state with a seed.
            * @param $seed Seed used to initialize the random number generator.
            */
            public static InitState ($seed: number) : void
            /** Returns a random float within [minInclusive..maxInclusive] (range is inclusive).
            */
            public static Range ($minInclusive: number, $maxInclusive: number) : number
            /** Return a random int within [minInclusive..maxExclusive) (Read Only).
            */
            public static Range ($minInclusive: number, $maxExclusive: number) : number
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV () : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number) : UnityEngine.Color
            /** Generates a random color from HSV and alpha ranges.
            * @param $hueMin Minimum hue [0..1].
            * @param $hueMax Maximum hue [0..1].
            * @param $saturationMin Minimum saturation [0..1].
            * @param $saturationMax Maximum saturation [0..1].
            * @param $valueMin Minimum value [0..1].
            * @param $valueMax Maximum value [0..1].
            * @param $alphaMin Minimum alpha [0..1].
            * @param $alphaMax Maximum alpha [0..1].
            * @returns A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value. 
            */
            public static ColorHSV ($hueMin: number, $hueMax: number, $saturationMin: number, $saturationMax: number, $valueMin: number, $valueMax: number, $alphaMin: number, $alphaMax: number) : UnityEngine.Color
        }
        /** Attribute to specify an icon for a MonoBehaviour or ScriptableObject.
        */
        class IconAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** A project-relative path to a texture.
            */
            public get path(): string;
            public constructor ($path: string)
        }
        /** Asynchronous load request from the Resources bundle.
        */
        class ResourceRequest extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** Asset object being loaded (Read Only).
            */
            public get asset(): UnityEngine.Object;
            public constructor ()
        }
        /** Derive from this base class to provide alternative implementations to the C# behavior of specific Resources methods.
        */
        class ResourcesAPI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The specific ResourcesAPI instance to use to handle overridden Resources methods.
            */
            public static get overrideAPI(): UnityEngine.ResourcesAPI;
            public static set overrideAPI(value: UnityEngine.ResourcesAPI);
        }
        /** The Resources class allows you to find and access Objects including assets.
        */
        class Resources extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns a list of all objects of Type type.
            */
            public static FindObjectsOfTypeAll ($type: System.Type) : System.Array$1<UnityEngine.Object>
            /** Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.
            * @param $path Path to the target resource to load.
            * @param $systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load ($path: string) : UnityEngine.Object
            /** Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.
            * @param $path Path to the target resource to load.
            * @param $systemTypeInstance Type filter for objects returned.
            * @returns The requested asset returned as an Object. 
            */
            public static Load ($path: string, $systemTypeInstance: System.Type) : UnityEngine.Object
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAsync ($path: string) : UnityEngine.ResourceRequest
            /** Asynchronously loads an asset stored at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param $systemTypeInstance Type filter for objects returned.
            */
            public static LoadAsync ($path: string, $type: System.Type) : UnityEngine.ResourceRequest
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            * @param $systemTypeInstance Type filter for objects returned.
            */
            public static LoadAll ($path: string, $systemTypeInstance: System.Type) : System.Array$1<UnityEngine.Object>
            /** Loads all assets in a folder or file at path in a Resources folder.
            * @param $path Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.
            */
            public static LoadAll ($path: string) : System.Array$1<UnityEngine.Object>
            public static GetBuiltinResource ($type: System.Type, $path: string) : UnityEngine.Object
            /** Unloads assetToUnload from memory.
            */
            public static UnloadAsset ($assetToUnload: UnityEngine.Object) : void
            /** Unloads assets that are not used.
            * @returns Object on which you can yield to wait until the operation completes. 
            */
            public static UnloadUnusedAssets () : UnityEngine.AsyncOperation
            /** Translates an instance ID to an object reference.
            * @param $instanceID Instance ID of an Object.
            * @returns Resolved reference or null if the instance ID didn't match anything. 
            */
            public static InstanceIDToObject ($instanceID: number) : UnityEngine.Object
            public static InstanceIDToObjectList ($instanceIDs: Unity.Collections.NativeArray$1<number>, $objects: System.Collections.Generic.List$1<UnityEngine.Object>) : void
            /** Returns true if the given instance ID corresponds to a valid Object in memory. The Object could have been deleted or not loaded into memory yet.
            * @param $instanceID ID of an Object.
            */
            public static InstanceIDIsValid ($instanceId: number) : boolean
            public static InstanceIDsToValidArray ($instanceIDs: Unity.Collections.NativeArray$1<number>, $validArray: Unity.Collections.NativeArray$1<boolean>) : void
            public constructor ()
        }
        /** Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.
        */
        class DisallowMultipleComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The RequireComponent attribute automatically adds required components as dependencies.
        */
        class RequireComponent extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public m_Type0 : System.Type
            public m_Type1 : System.Type
            public m_Type2 : System.Type
            public constructor ($requiredComponent: System.Type)
            public constructor ($requiredComponent: System.Type, $requiredComponent2: System.Type)
            public constructor ($requiredComponent: System.Type, $requiredComponent2: System.Type, $requiredComponent3: System.Type)
        }
        /** The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component->Scripts" menu.
        */
        class AddComponentMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get componentMenu(): string;
            /** The order of the component in the component menu (lower values appear higher in the menu).
            */
            public get componentOrder(): number;
            public constructor ($menuName: string)
            public constructor ($menuName: string, $order: number)
        }
        /** Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as ".asset" files.
        */
        class CreateAssetMenuAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The display name for this type shown in the Assets/Create menu.
            */
            public get menuName(): string;
            public set menuName(value: string);
            /** The default file name used by newly created instances of this type.
            */
            public get fileName(): string;
            public set fileName(value: string);
            /** The position of the menu item within the Assets/Create menu.
            */
            public get order(): number;
            public set order(value: number);
            public constructor ()
        }
        /** The ContextMenu attribute allows you to add commands to the context menu.
        */
        class ContextMenu extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public menuItem : string
            public validate : boolean
            public priority : number
            public disabledTooltip : string
            public constructor ($itemName: string)
            public constructor ($itemName: string, $isValidateFunction: boolean)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number, $disabledTooltip: string)
        }
        /** Makes all instances of a script execute in Edit Mode.
        */
        class ExecuteInEditMode extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Makes instances of a script always execute, both as part of Play Mode and when editing.
        */
        class ExecuteAlways extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Flags a variable to not appear in the Inspector.
        */
        class HideInInspector extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Marks the methods you want to hide from the Console window callstack. When you hide these methods they are removed from the detail area of the selected message in the Console window.
        */
        class HideInCallstackAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Provide a custom documentation URL for a class.
        */
        class HelpURLAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The documentation URL specified for this class.
            */
            public get URL(): string;
            public constructor ($url: string)
        }
        class DefaultExecutionOrder extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get order(): number;
            public constructor ($order: number)
        }
        /** Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.
        */
        class AssemblyIsEditorAssembly extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Add this attribute to a class to prevent creating a Preset from the instances of the class.
        */
        class ExcludeFromPresetAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Awaitable type used to expose asynchronous code, as well as an async return type specifically tailored for Unity.
        */
        class Awaitable extends System.Object implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            /** Indicates if the awaitable has run to completion.
            */
            public get IsCompleted(): boolean;
            /** Creates an Awaitable from an existing AsyncOperation object.
            * @param $op Async operation object.
            * @param $cancellationToken Optional cancellation token.
            */
            public static FromAsyncOperation ($op: UnityEngine.AsyncOperation, $cancellationToken?: System.Threading.CancellationToken) : UnityEngine.Awaitable
            public GetAwaiter () : UnityEngine.Awaitable.Awaiter
            /** Cancel the awaitable. If the awaitable is being awaited, the awaiter will get a System.OperationCanceledException.
            */
            public Cancel () : void
            /** Awaitable resuming on next frame.
            * @param $cancellationToken Optional cancellation token.
            */
            public static NextFrameAsync ($cancellationToken?: System.Threading.CancellationToken) : UnityEngine.Awaitable
            /** Awaitable resuming after the specified number of seconds.
            * @param $seconds Seconds to wait for.
            * @param $cancellationToken Optional cancellation token.
            */
            public static WaitForSecondsAsync ($seconds: number, $cancellationToken?: System.Threading.CancellationToken) : UnityEngine.Awaitable
            /** Awaitable resuming on the next fixed update frame (see Time.fixedDeltaTime).
            */
            public static FixedUpdateAsync ($cancellationToken?: System.Threading.CancellationToken) : UnityEngine.Awaitable
            /** Awaitable resuming after all Unity subsystem have run for the current frame.
            * @param $cancellationToken Optional cancellation token used to signal cancellation.
            */
            public static EndOfFrameAsync ($cancellationToken?: System.Threading.CancellationToken) : UnityEngine.Awaitable
            /** Resumes execution on the Unity main thread. If the caller is already on the main thread, it will complete immediately.
            * @returns Awaitable object that completes when switching on the main thread. 
            */
            public static MainThreadAsync () : UnityEngine.MainThreadAwaitable
            /** Resumes execution on a ThreadPool background thread. If the caller is already on a background thread, it will complete immediately.
            * @returns Awaitable object that completes when switching to a background thread. 
            */
            public static BackgroundThreadAsync () : UnityEngine.BackgroundThreadAwaitable
        }
        class MainThreadAwaitable extends System.ValueType implements System.Runtime.CompilerServices.INotifyCompletion
        {
            protected [__keep_incompatibility]: never;
            public get IsCompleted(): boolean;
            public GetAwaiter () : UnityEngine.MainThreadAwaitable
            public GetResult () : void
            public OnCompleted ($continuation: System.Action) : void
        }
        class BackgroundThreadAwaitable extends System.ValueType implements System.Runtime.CompilerServices.INotifyCompletion
        {
            protected [__keep_incompatibility]: never;
            public get IsCompleted(): boolean;
            public GetAwaiter () : UnityEngine.BackgroundThreadAwaitable
            public GetResult () : void
            public OnCompleted ($continuation: System.Action) : void
        }
        class AsyncOperationAwaitableExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetAwaiter ($op: UnityEngine.AsyncOperation) : UnityEngine.Awaitable.Awaiter
        }
        class UnityEventAwaitableExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetAwaiter ($ev: UnityEngine.Events.UnityEvent) : UnityEngine.Awaitable.Awaiter
        }
        interface ISerializationCallbackReceiver
        {
            /** Implement this method to receive a callback before Unity serializes your object.
            */
            OnBeforeSerialize () : void
            /** Implement this method to receive a callback after Unity deserializes your object.
            */
            OnAfterDeserialize () : void
        }
        /** Objects allowing to control completion of an Awaitable object from user code.
        */
        class AwaitableCompletionSource extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get the awaitable controlled by the completion source.
            */
            public get Awaitable(): UnityEngine.Awaitable;
            /** Raise completion.
            */
            public SetResult () : void
            /** Raise cancellation.
            */
            public SetCanceled () : void
            /** Raise completion with an exception.
            * @param $exception Exception to raise in the continuation.
            */
            public SetException ($exception: System.Exception) : void
            /** Raise the awaitable completion.
            * @returns Indicates if the completion was successfully raised. 
            */
            public TrySetResult () : boolean
            /** Raise cancellation (returns false if the awaitable was already completed or canceled).
            * @returns Indicates if the cancellation was successfuly raised. 
            */
            public TrySetCanceled () : boolean
            /** Raise completion with an exception.
            * @param $exception Exception to raise in the continuation.
            * @returns Indicates if the completion was successfully raised. 
            */
            public TrySetException ($exception: System.Exception) : boolean
            /** Reset the completion source (this will set the Awaitable property to a new Awaitable object).
            */
            public Reset () : void
            public constructor ()
        }
        /** A handle to one of the tag values that can be applied to a GameObject.
        */
        class TagHandle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Get a handle to a existing defined tag.
            * @param $tagName The name of the tag to get a handle to.
            * @returns A new TagHandle for the existing tag. 
            */
            public static GetExistingTag ($tagName: string) : UnityEngine.TagHandle
        }
        /** MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines, and do not hold any exposed properties or functions.
        */
        class Coroutine extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
        }
        /** Base class for custom yield instructions to suspend coroutines.
        */
        class CustomYieldInstruction extends System.Object implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            /** Indicates if coroutine should be kept suspended.
            */
            public get keepWaiting(): boolean;
            public get Current(): any;
            public MoveNext () : boolean
            public Reset () : void
        }
        /** Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods.
        */
        class ExcludeFromObjectFactoryAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Shows sorted enum values in the Inspector enum UI dropdowns i.e. EditorGUI.EnumPopup, PropertyField etc. This attribute can be applied to enum types only.
        */
        class InspectorOrderAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($inspectorSort?: UnityEngine.InspectorSort, $sortDirection?: UnityEngine.InspectorSortDirection)
        }
        /** Defines if enum should be shown sorted by name or by value.
        */
        enum InspectorSort
        { ByName = 0, ByValue = 1 }
        /** Defines if enum should be shown in ascending or descending order.
        */
        enum InspectorSortDirection
        { Ascending = 0, Descending = 1 }
        /** Specifies Layers to use in a Physics.Raycast.
        */
        class LayerMask extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Converts a layer mask value to an integer value.
            */
            public get value(): number;
            public set value(value: number);
            public static op_Implicit ($mask: UnityEngine.LayerMask) : number
            public static op_Implicit ($intVal: number) : UnityEngine.LayerMask
            /** Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the.
            */
            public static LayerToName ($layer: number) : string
            /** Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the.
            */
            public static NameToLayer ($layerName: string) : number
            /** Given a set of layer names as defined by either a Builtin or a User Layer in the, returns the equivalent layer mask for all of them.
            * @param $layerNames List of layer names to convert to a layer mask.
            * @returns The layer mask created from the layerNames. 
            */
            public static GetMask (...layerNames: string[]) : number
        }
        /** MonoBehaviour is a base class that many Unity scripts derive from.
        */
        class MonoBehaviour extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** Cancellation token raised when the MonoBehaviour is destroyed (Read Only).
            */
            public get destroyCancellationToken(): System.Threading.CancellationToken;
            /** Disabling this lets you skip the GUI layout phase.
            */
            public get useGUILayout(): boolean;
            public set useGUILayout(value: boolean);
            /** Returns a boolean value which represents if Start was called.
            */
            public get didStart(): boolean;
            /** Returns a boolean value which represents if Awake was called.
            */
            public get didAwake(): boolean;
            /** Allow a specific instance of a MonoBehaviour to run in edit mode (only available in the editor).
            */
            public get runInEditMode(): boolean;
            public set runInEditMode(value: boolean);
            /** Is any invoke pending on this MonoBehaviour?
            */
            public IsInvoking () : boolean
            /** Cancels all Invoke calls on this MonoBehaviour.
            */
            public CancelInvoke () : void
            /** Invokes the method methodName in time seconds.
            */
            public Invoke ($methodName: string, $time: number) : void
            /** Invokes the method methodName in time seconds, then repeatedly every repeatRate seconds.
            * @param $methodName The name of a method to invoke.
            * @param $time Start invoking after n seconds.
            * @param $repeatRate Repeat every n seconds.
            */
            public InvokeRepeating ($methodName: string, $time: number, $repeatRate: number) : void
            /** Cancels all Invoke calls with name methodName on this behaviour.
            */
            public CancelInvoke ($methodName: string) : void
            /** Is any invoke on methodName pending?
            */
            public IsInvoking ($methodName: string) : boolean
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine ($methodName: string) : UnityEngine.Coroutine
            /** Starts a coroutine named methodName.
            */
            public StartCoroutine ($methodName: string, $value: any) : UnityEngine.Coroutine
            /** Starts a Coroutine.
            */
            public StartCoroutine ($routine: System.Collections.IEnumerator) : UnityEngine.Coroutine
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($routine: System.Collections.IEnumerator) : void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($routine: UnityEngine.Coroutine) : void
            /** Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.
            * @param $methodName Name of coroutine.
            * @param $routine Name of the function in code, including coroutines.
            */
            public StopCoroutine ($methodName: string) : void
            /** Stops all coroutines running on this behaviour.
            */
            public StopAllCoroutines () : void
            /** Logs message to the Unity Console (identical to Debug.Log).
            */
            public static print ($message: any) : void
            public constructor ()
        }
        /** Describes an integer range.
        */
        class RangeInt extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The starting index of the range, where 0 is the first position, 1 is the second, 2 is the third, and so on.
            */
            public start : number
            /** The length of the range.
            */
            public length : number
            /** The end index of the range (not inclusive).
            */
            public get end(): number;
            public constructor ($start: number, $length: number)
        }
        /** Specifies when to get a callback during the startup of the runtime or when entering play mode in the Editor. Used with RuntimeInitializeOnLoadMethodAttribute.
        */
        enum RuntimeInitializeLoadType
        { AfterSceneLoad = 0, BeforeSceneLoad = 1, AfterAssembliesLoaded = 2, BeforeSplashScreen = 3, SubsystemRegistration = 4 }
        /** Use this attribute to get a callback when the runtime is starting up and loading the first scene.
        */
        class RuntimeInitializeOnLoadMethodAttribute extends UnityEngine.Scripting.PreserveAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Controling the callback invocation time.
            */
            public get loadType(): UnityEngine.RuntimeInitializeLoadType;
            public constructor ()
            public constructor ($loadType: UnityEngine.RuntimeInitializeLoadType)
        }
        /** Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.
        */
        class SelectionBaseAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class StackTraceUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ExtractStackTrace () : string
            public static ExtractStringFromException ($exception: any) : string
        }
        class UnityException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingComponentException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class UnassignedReferenceException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        class MissingReferenceException extends System.SystemException implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
            public constructor ($message: string, $innerException: System.Exception)
        }
        /** Represents a raw text or binary file asset.
        */
        class TextAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The raw bytes of the text asset. (Read Only)
            */
            public get bytes(): System.Array$1<number>;
            /** The text contents of the file as a string. (Read Only)
            */
            public get text(): string;
            /** The size of the text asset data in bytes. (Read Only)
            */
            public get dataSize(): bigint;
            public constructor ()
            public constructor ($text: string)
        }
        class TrackedReference extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference) : boolean
            public static op_Inequality ($x: UnityEngine.TrackedReference, $y: UnityEngine.TrackedReference) : boolean
            public static op_Implicit ($exists: UnityEngine.TrackedReference) : boolean
        }
        /** Declares an assembly to be compatible (API wise) with a specific Unity API. Used by internal tools to avoid processing the assembly in order to decide whether assemblies may be using old Unity API.
        */
        class UnityAPICompatibilityVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Version of Unity API.
            */
            public get version(): string;
            public constructor ($version: string, $checkOnlyUnityVersion: boolean)
            public constructor ($version: string, $configurationAssembliesHashes: System.Array$1<string>)
        }
        /** Bit mask that controls object destruction, saving and visibility in inspectors.
        */
        enum HideFlags
        { None = 0, HideInHierarchy = 1, HideInInspector = 2, DontSaveInEditor = 4, NotEditable = 8, DontSaveInBuild = 16, DontUnloadUnusedAsset = 32, DontSave = 52, HideAndDontSave = 61 }
        /** Options to specify if and how to sort objects returned by a function.
        */
        enum FindObjectsSortMode
        { None = 0, InstanceID = 1 }
        /** Options to control whether object find functions return inactive objects.
        */
        enum FindObjectsInactive
        { Exclude = 0, Include = 1 }
        /** Waits until the end of the frame after Unity has rendered every Camera and GUI, just before displaying the frame on screen.
        */
        class WaitForEndOfFrame extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Waits until next fixed frame rate update function. Additional resources: MonoBehaviour.FixedUpdate.
        */
        class WaitForFixedUpdate extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Suspends the coroutine execution for the given amount of seconds using scaled time.
        */
        class WaitForSeconds extends UnityEngine.YieldInstruction
        {
            protected [__keep_incompatibility]: never;
            public constructor ($seconds: number)
            public constructor ()
        }
        /** Suspends the coroutine execution for the given amount of seconds using unscaled time.
        */
        class WaitForSecondsRealtime extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            /** The given amount of seconds that the yield instruction will wait for.
            */
            public get waitTime(): number;
            public set waitTime(value: number);
            public get keepWaiting(): boolean;
            public constructor ($time: number)
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to true.
        */
        class WaitUntil extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor ($predicate: System.Func$1<boolean>)
        }
        /** Suspends the coroutine execution until the supplied delegate evaluates to false.
        */
        class WaitWhile extends UnityEngine.CustomYieldInstruction implements System.Collections.IEnumerator
        {
            protected [__keep_incompatibility]: never;
            public get keepWaiting(): boolean;
            public constructor ($predicate: System.Func$1<boolean>)
        }
        /** Webplayer security related class. Not supported from 5.4.0 onwards.
        */
        class Security extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class Types extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Force Unity to serialize a private field.
        */
        class SerializeField extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** A that instructs Unity to serialize a field as a reference instead of as a value.
        */
        class SerializeReference extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode.
        */
        class PreferBinarySerialization extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Compute Shader asset.
        */
        class ComputeShader extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The local keyword space of this compute shader.
            */
            public get keywordSpace(): UnityEngine.Rendering.LocalKeywordSpace;
            /** An array containing names of the local shader keywords that are currently enabled for this compute shader.
            */
            public get shaderKeywords(): System.Array$1<string>;
            public set shaderKeywords(value: System.Array$1<string>);
            /** An array containing the local shader keywords that are currently enabled for this compute shader.
            */
            public get enabledKeywords(): System.Array$1<UnityEngine.Rendering.LocalKeyword>;
            public set enabledKeywords(value: System.Array$1<UnityEngine.Rendering.LocalKeyword>);
            /** Find ComputeShader kernel index.
            * @param $name Name of kernel function.
            * @returns The Kernel index. If the kernel is not found, Unity logs a "FindKernel failed" error message and raises an ArgumentException. 
            */
            public FindKernel ($name: string) : number
            /** Checks whether a shader contains a given kernel.
            * @param $name The name of the kernel to look for.
            * @returns True if the kernel is found, false otherwise. 
            */
            public HasKernel ($name: string) : boolean
            /** Set a float parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetFloat ($nameID: number, $val: number) : void
            /** Set an integer parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetInt ($nameID: number, $val: number) : void
            /** Set a vector parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetVector ($nameID: number, $val: UnityEngine.Vector4) : void
            /** Set a Matrix parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetMatrix ($nameID: number, $val: UnityEngine.Matrix4x4) : void
            /** Set a vector array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetVectorArray ($nameID: number, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a Matrix array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetMatrixArray ($nameID: number, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture, $mipLevel: number) : void
            /** Set a texture parameter from a global texture property.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $globalTextureName Global texture property to assign to shader.
            * @param $globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal ($kernelIndex: number, $nameID: number, $globalTextureNameID: number) : void
            /** Sets a RayTracingAccelerationStructure to be used for Inline Ray Tracing (Ray Queries).
            * @param $kernelIndex For which kernel the RayTracingAccelerationStructure is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $accelerationStructure The RayTracingAccelerationStructure object to bind.
            * @param $name Resource name in shader code.
            */
            public SetRayTracingAccelerationStructure ($kernelIndex: number, $nameID: number, $accelerationStructure: UnityEngine.Rendering.RayTracingAccelerationStructure) : void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $nameID: number, $buffer: UnityEngine.ComputeBuffer) : void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $nameID: number, $buffer: UnityEngine.GraphicsBuffer) : void
            /** Get kernel thread group sizes.
            * @param $kernelIndex Which kernel to query. A single compute shader asset can have multiple kernel entry points.
            * @param $x Thread group size in the X dimension.
            * @param $y Thread group size in the Y dimension.
            * @param $z Thread group size in the Z dimension.
            */
            public GetKernelThreadGroupSizes ($kernelIndex: number, $x: $Ref<number>, $y: $Ref<number>, $z: $Ref<number>) : void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $threadGroupsX Number of work groups in the X dimension.
            * @param $threadGroupsY Number of work groups in the Y dimension.
            * @param $threadGroupsZ Number of work groups in the Z dimension.
            */
            public Dispatch ($kernelIndex: number, $threadGroupsX: number, $threadGroupsY: number, $threadGroupsZ: number) : void
            /** Enables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword ($keyword: string) : void
            /** Disables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword ($keyword: string) : void
            /** Checks whether a local shader keyword is enabled for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if the given Rendering.LocalKeyword is enabled for this compute shader. Otherwise, returns false. 
            */
            public IsKeywordEnabled ($keyword: string) : boolean
            /** Enables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to enable.
            */
            public EnableKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : void
            /** Disables a local shader keyword for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to disable.
            */
            public DisableKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : void
            /** Sets the state of a local shader keyword for this compute shader.
            * @param $keyword The Rendering.LocalKeyword keyword to enable or disable.
            * @param $value The desired keyword state.
            */
            public SetKeyword ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $value: boolean) : void
            /** Checks whether a local shader keyword is enabled for this compute shader.
            * @param $keyword The name of the Rendering.LocalKeyword to check.
            * @returns Returns true if the given Rendering.LocalKeyword is enabled for this compute shader. Otherwise, returns false. 
            */
            public IsKeywordEnabled ($keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : boolean
            /** Allows you to check whether the current end user device supports the features required to run the specified compute shader kernel.
            * @param $kernelIndex Which kernel to query.
            * @returns True if the specified compute kernel is able to run on the current end user device, false otherwise. 
            */
            public IsSupported ($kernelIndex: number) : boolean
            /** Set a float parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetFloat ($name: string, $val: number) : void
            /** Set an integer parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetInt ($name: string, $val: number) : void
            /** Set a vector parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetVector ($name: string, $val: UnityEngine.Vector4) : void
            /** Set a Matrix parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetMatrix ($name: string, $val: UnityEngine.Matrix4x4) : void
            /** Set a vector array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetVectorArray ($name: string, $values: System.Array$1<UnityEngine.Vector4>) : void
            /** Set a Matrix array parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value to set.
            */
            public SetMatrixArray ($name: string, $values: System.Array$1<UnityEngine.Matrix4x4>) : void
            /** Set multiple consecutive float parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetFloats ($name: string, ...values: number[]) : void
            /** Set multiple consecutive float parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetFloats ($nameID: number, ...values: number[]) : void
            /** Set multiple consecutive integer parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetInts ($name: string, ...values: number[]) : void
            /** Set multiple consecutive integer parameters at once.
            * @param $name Array variable name in the shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $values Value array to set.
            */
            public SetInts ($nameID: number, ...values: number[]) : void
            /** Set a bool parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetBool ($name: string, $val: boolean) : void
            /** Set a bool parameter.
            * @param $name Variable name in shader code.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $val Value to set.
            */
            public SetBool ($nameID: number, $val: boolean) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.Texture) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.Texture) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.Texture, $mipLevel: number) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $nameID: number, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture parameter.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $texture Texture to set.
            * @param $mipLevel Optional mipmap level of the read-write texture.
            * @param $element Optional parameter that specifies the type of data to set from the RenderTexture.
            */
            public SetTexture ($kernelIndex: number, $name: string, $texture: UnityEngine.RenderTexture, $mipLevel: number, $element: UnityEngine.Rendering.RenderTextureSubElement) : void
            /** Set a texture parameter from a global texture property.
            * @param $kernelIndex For which kernel the texture is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $globalTextureName Global texture property to assign to shader.
            * @param $globalTextureNameID Property name ID, use Shader.PropertyToID to get it.
            */
            public SetTextureFromGlobal ($kernelIndex: number, $name: string, $globalTextureName: string) : void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $name: string, $buffer: UnityEngine.ComputeBuffer) : void
            /** Sets an input or output compute buffer.
            * @param $kernelIndex For which kernel the buffer is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $name Name of the buffer variable in shader code.
            * @param $buffer Buffer to set.
            */
            public SetBuffer ($kernelIndex: number, $name: string, $buffer: UnityEngine.GraphicsBuffer) : void
            /** Sets a RayTracingAccelerationStructure to be used for Inline Ray Tracing (Ray Queries).
            * @param $kernelIndex For which kernel the RayTracingAccelerationStructure is being set. See FindKernel.
            * @param $nameID Property name ID, use Shader.PropertyToID to get it.
            * @param $accelerationStructure The RayTracingAccelerationStructure object to bind.
            * @param $name Resource name in shader code.
            */
            public SetRayTracingAccelerationStructure ($kernelIndex: number, $name: string, $accelerationStructure: UnityEngine.Rendering.RayTracingAccelerationStructure) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer ($nameID: number, $buffer: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer ($name: string, $buffer: UnityEngine.ComputeBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer ($nameID: number, $buffer: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the ComputeShader.
            * @param $nameID The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.
            * @param $name The name of the buffer to bind as constant buffer.
            * @param $buffer The buffer to bind as constant buffer.
            * @param $offset The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.
            * @param $size The number of bytes to bind.
            */
            public SetConstantBuffer ($name: string, $buffer: UnityEngine.GraphicsBuffer, $offset: number, $size: number) : void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $argsBuffer Buffer with dispatch arguments.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            */
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer, $argsOffset: number) : void
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.ComputeBuffer) : void
            /** Execute a compute shader.
            * @param $kernelIndex Which kernel to execute. A single compute shader asset can have multiple kernel entry points.
            * @param $argsBuffer Buffer with dispatch arguments.
            * @param $argsOffset The byte offset into the buffer, where the draw arguments start.
            */
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.GraphicsBuffer, $argsOffset: number) : void
            public DispatchIndirect ($kernelIndex: number, $argsBuffer: UnityEngine.GraphicsBuffer) : void
        }
        /** ShaderVariantCollection records which shader variants are actually used in each shader.
        */
        class ShaderVariantCollection extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Number of shaders in this collection (Read Only).
            */
            public get shaderCount(): number;
            /** Number of total variants in this collection (Read Only).
            */
            public get variantCount(): number;
            /** Number of total variants in this collection that are already warmed up (Read Only).
            */
            public get warmedUpVariantCount(): number;
            /** Is this ShaderVariantCollection already warmed up? (Read Only)
            */
            public get isWarmedUp(): boolean;
            /** Remove all shader variants from the collection.
            */
            public Clear () : void
            /** Prewarms all shader variants in this shader variant collection.
            */
            public WarmUp () : void
            /** Prewarms the given number of shader variants in this shader variant collection.
            * @param $variantCount The maximum number of variants to warm up.
            * @returns True if all variants in this shader variant collection have been warmed up, false otherwise. 
            */
            public WarmUpProgressively ($variantCount: number) : boolean
            public Add ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public Remove ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public Contains ($variant: UnityEngine.ShaderVariantCollection.ShaderVariant) : boolean
            public constructor ()
        }
        /** Defines the axes that can be snapped.
        */
        enum SnapAxis
        { None = 0, X = 1, Y = 2, Z = 4, All = 7 }
        /** Snap values to rounded increments.
        */
        class Snapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap ($val: number, $snap: number) : number
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @returns The rounded value. 
            */
            public static Snap ($val: UnityEngine.Vector2, $snap: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Rounds value to the closest multiple of snap.
            * @param $val The value to round.
            * @param $snap The increment to round to.
            * @param $axis Restrict snapping to the components on these axes.
            * @returns The rounded value. 
            */
            public static Snap ($val: UnityEngine.Vector3, $snap: UnityEngine.Vector3, $axis?: UnityEngine.SnapAxis) : UnityEngine.Vector3
        }
        /** StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.
        */
        class StaticBatchingUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Combines all children GameObjects of the staticBatchRoot for static batching.
            * @param $staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine ($staticBatchRoot: UnityEngine.GameObject) : void
            /** SCombines all GameObjects in gos for static batching and treats staticBatchRoot as the root.
            * @param $gos The GameObjects to prepare for static batching.
            * @param $staticBatchRoot The GameObject that should become the root of the combined batch.
            */
            public static Combine ($gos: System.Array$1<UnityEngine.GameObject>, $staticBatchRoot: UnityEngine.GameObject) : void
            public constructor ()
        }
        /** Enumeration for SystemInfo.batteryStatus which represents the current status of the device's battery.
        */
        enum BatteryStatus
        { Unknown = 0, Charging = 1, Discharging = 2, NotCharging = 3, Full = 4 }
        /** Enumeration for SystemInfo.operatingSystemFamily.
        */
        enum OperatingSystemFamily
        { Other = 0, MacOSX = 1, Windows = 2, Linux = 3 }
        /** Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.
        */
        enum DeviceType
        { Unknown = 0, Handheld = 1, Console = 2, Desktop = 3 }
        /** Access system and hardware information.
        */
        class SystemInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Value returned by SystemInfo string properties which are not supported on the current platform.
            */
            public static unsupportedIdentifier : string
            /** The current battery level (Read Only).
            */
            public static get batteryLevel(): number;
            /** Returns the current status of the device's battery (Read Only).
            */
            public static get batteryStatus(): UnityEngine.BatteryStatus;
            /** Operating system name with version (Read Only).
            */
            public static get operatingSystem(): string;
            /** Returns the operating system family the game is running on (Read Only).
            */
            public static get operatingSystemFamily(): UnityEngine.OperatingSystemFamily;
            /** Processor name (Read Only).
            */
            public static get processorType(): string;
            /** Processor frequency in MHz (Read Only).
            */
            public static get processorFrequency(): number;
            /** Number of processors present (Read Only).
            */
            public static get processorCount(): number;
            /** Amount of system memory present (Read Only).
            */
            public static get systemMemorySize(): number;
            /** A unique device identifier. It's guaranteed to be unique for every device (Read Only).
            */
            public static get deviceUniqueIdentifier(): string;
            /** The user defined name of the device (Read Only).
            */
            public static get deviceName(): string;
            /** The model of the device (Read Only).
            */
            public static get deviceModel(): string;
            /** Is an accelerometer available on the device?
            */
            public static get supportsAccelerometer(): boolean;
            /** Is a gyroscope available on the device?
            */
            public static get supportsGyroscope(): boolean;
            /** Is the device capable of reporting its location?
            */
            public static get supportsLocationService(): boolean;
            /** Is the device capable of providing the user haptic feedback by vibration?
            */
            public static get supportsVibration(): boolean;
            /** Is there an Audio device available for playback? (Read Only)
            */
            public static get supportsAudio(): boolean;
            /** Returns the kind of device the application is running on (Read Only).
            */
            public static get deviceType(): UnityEngine.DeviceType;
            /** Amount of video memory present (Read Only).
            */
            public static get graphicsMemorySize(): number;
            /** The name of the graphics device (Read Only).
            */
            public static get graphicsDeviceName(): string;
            /** The vendor of the graphics device (Read Only).
            */
            public static get graphicsDeviceVendor(): string;
            /** The identifier code of the graphics device (Read Only).
            */
            public static get graphicsDeviceID(): number;
            /** The identifier code of the graphics device vendor (Read Only).
            */
            public static get graphicsDeviceVendorID(): number;
            /** The graphics API type used by the graphics device (Read Only).
            */
            public static get graphicsDeviceType(): UnityEngine.Rendering.GraphicsDeviceType;
            /** Returns true if the texture UV coordinate convention for this platform has Y starting at the top of the image.
            */
            public static get graphicsUVStartsAtTop(): boolean;
            /** The graphics API type and driver version used by the graphics device (Read Only).
            */
            public static get graphicsDeviceVersion(): string;
            /** Graphics device shader capability level (Read Only).
            */
            public static get graphicsShaderLevel(): number;
            /** Is graphics device using multi-threaded rendering (Read Only)?
            */
            public static get graphicsMultiThreaded(): boolean;
            /** Application's actual rendering threading mode (Read Only).
            */
            public static get renderingThreadingMode(): UnityEngine.Rendering.RenderingThreadingMode;
            /** The foveated rendering technique supported on this platform.
            */
            public static get foveatedRenderingCaps(): UnityEngine.Rendering.FoveatedRenderingCaps;
            /** True if the GPU supports hidden surface removal.
            */
            public static get hasHiddenSurfaceRemovalOnGPU(): boolean;
            /** Returns true when the GPU has native support for indexing uniform arrays in fragment shaders without restrictions.
            */
            public static get hasDynamicUniformArrayIndexingInFragmentShaders(): boolean;
            /** Are built-in shadows supported? (Read Only)
            */
            public static get supportsShadows(): boolean;
            /** Is sampling raw depth from shadowmaps supported? (Read Only)
            */
            public static get supportsRawShadowDepthSampling(): boolean;
            /** Whether motion vectors are supported on this platform.
            */
            public static get supportsMotionVectors(): boolean;
            /** Are 3D (volume) textures supported? (Read Only)
            */
            public static get supports3DTextures(): boolean;
            /** Are compressed formats for 3D (volume) textures supported? (Read Only).
            */
            public static get supportsCompressed3DTextures(): boolean;
            /** Are 2D Array textures supported? (Read Only)
            */
            public static get supports2DArrayTextures(): boolean;
            /** Are 3D (volume) RenderTextures supported? (Read Only)
            */
            public static get supports3DRenderTextures(): boolean;
            /** Are Cubemap Array textures supported? (Read Only)
            */
            public static get supportsCubemapArrayTextures(): boolean;
            /** Returns true when anisotropic filtering is supported on the device.
            */
            public static get supportsAnisotropicFilter(): boolean;
            /** Support for various Graphics.CopyTexture cases (Read Only).
            */
            public static get copyTextureSupport(): UnityEngine.Rendering.CopyTextureSupport;
            /** Are compute shaders supported? (Read Only)
            */
            public static get supportsComputeShaders(): boolean;
            /** Are geometry shaders supported? (Read Only)
            */
            public static get supportsGeometryShaders(): boolean;
            /** Are tessellation shaders supported? (Read Only)
            */
            public static get supportsTessellationShaders(): boolean;
            /** Boolean that indicates if SV_RenderTargetArrayIndex can be used in a vertex shader (true if it can be used, false if not).
            */
            public static get supportsRenderTargetArrayIndexFromVertexShader(): boolean;
            /** Is GPU draw call instancing supported? (Read Only)
            */
            public static get supportsInstancing(): boolean;
            /** Does the hardware support quad topology? (Read Only)
            */
            public static get supportsHardwareQuadTopology(): boolean;
            /** Are 32-bit index buffers supported? (Read Only)
            */
            public static get supports32bitsIndexBuffer(): boolean;
            /** Are sparse textures supported? (Read Only)
            */
            public static get supportsSparseTextures(): boolean;
            /** How many simultaneous render targets (MRTs) are supported? (Read Only)
            */
            public static get supportedRenderTargetCount(): number;
            /** Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.
            */
            public static get supportsSeparatedRenderTargetsBlend(): boolean;
            /** The maximum number of random write targets (UAV) that Unity supports simultaneously. (Read Only)
            */
            public static get supportedRandomWriteTargetCount(): number;
            /** Are multisampled textures supported? (Read Only)
            */
            public static get supportsMultisampledTextures(): number;
            /** Boolean that indicates whether multisampled texture arrays are supported (true if supported, false if not supported).
            */
            public static get supportsMultisampled2DArrayTextures(): boolean;
            /** Returns true if multisampled textures are resolved automatically
            */
            public static get supportsMultisampleAutoResolve(): boolean;
            /** Returns true if the 'Mirror Once' texture wrap mode is supported. (Read Only)
            */
            public static get supportsTextureWrapMirrorOnce(): number;
            /** This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far). (Read Only)
            */
            public static get usesReversedZBuffer(): boolean;
            /** What NPOT (non-power of two size) texture support does the GPU provide? (Read Only)
            */
            public static get npotSupport(): UnityEngine.NPOTSupport;
            /** Maximum texture size in pixels (Read Only).
            */
            public static get maxTextureSize(): number;
            /** Maximum 3D texture size in pixels (Read Only).
            */
            public static get maxTexture3DSize(): number;
            /** Maximum number of slices in a Texture array (Read Only).
            */
            public static get maxTextureArraySlices(): number;
            /** Maximum cubemap texture size in pixels (Read Only).
            */
            public static get maxCubemapSize(): number;
            /** Returns the maximum anisotropic level for anisotropic filtering that is supported on the device. 
            */
            public static get maxAnisotropyLevel(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a vertex shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsVertex(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a fragment shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsFragment(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a geometry shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsGeometry(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a domain shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsDomain(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a hull shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsHull(): number;
            /** Determines how many compute buffers Unity supports simultaneously in a compute shader for reading. (Read Only)
            */
            public static get maxComputeBufferInputsCompute(): number;
            /** The largest total number of invocations in a single local work group that can be dispatched to a compute shader (Read Only).
            */
            public static get maxComputeWorkGroupSize(): number;
            /** The maximum number of work groups that a compute shader can use in X dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeX(): number;
            /** The maximum number of work groups that a compute shader can use in Y dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeY(): number;
            /** The maximum number of work groups that a compute shader can use in Z dimension (Read Only).
            */
            public static get maxComputeWorkGroupSizeZ(): number;
            /** Size of the compute thread group that supports efficient memory sharing on the GPU (Read Only).
            */
            public static get computeSubGroupSize(): number;
            /** Returns true when the platform supports asynchronous compute queues and false if otherwise.
            */
            public static get supportsAsyncCompute(): boolean;
            /** Specifies whether the current platform supports the GPU Recorder or not. (Read Only).
            */
            public static get supportsGpuRecorder(): boolean;
            /** true if the platform supports GraphicsFences, otherwise false.
            */
            public static get supportsGraphicsFence(): boolean;
            /** Returns true if asynchronous readback of GPU data is available for this device and false otherwise.
            */
            public static get supportsAsyncGPUReadback(): boolean;
            /** Checks if ray tracing shaders are supported by the current system configuration. (Read Only)
            */
            public static get supportsRayTracingShaders(): boolean;
            /** Checks if any ray tracing features are supported by the current system configuration. (Read Only)
            */
            public static get supportsRayTracing(): boolean;
            /** Is inline ray tracing (ray query) supported? (Read Only)
            */
            public static get supportsInlineRayTracing(): boolean;
            /** Does the current renderer support binding constant buffers directly? (Read Only)
            */
            public static get supportsSetConstantBuffer(): boolean;
            /** Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.
            */
            public static get constantBufferOffsetAlignment(): number;
            /** The maximum size of a constant buffer binding (Read Only).
            */
            public static get maxConstantBufferSize(): number;
            /** The maximum size of a graphics buffer (GraphicsBuffer, ComputeBuffer, vertex/index buffer, etc.) in bytes (Read Only).
            */
            public static get maxGraphicsBufferSize(): bigint;
            /** Returns true if the GPU supports partial mipmap chains (Read Only).
            */
            public static get hasMipMaxLevel(): boolean;
            /** Is streaming of texture mip maps supported? (Read Only)
            */
            public static get supportsMipStreaming(): boolean;
            /** True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.
            */
            public static get usesLoadStoreActions(): boolean;
            /** Returns a bitwise combination of HDRDisplaySupportFlags describing the support for HDR displays on the system.
            */
            public static get hdrDisplaySupportFlags(): UnityEngine.HDRDisplaySupportFlags;
            /** Is conservative rasterization supported? (Read Only)
            */
            public static get supportsConservativeRaster(): boolean;
            /** Boolean that indicates whether Multiview is supported (true if supported, false if not supported). (Read Only)
            */
            public static get supportsMultiview(): boolean;
            /** This property is true if the graphics API of the target build platform takes RenderBufferStoreAction.StoreAndResolve into account, false if otherwise.
            */
            public static get supportsStoreAndResolveAction(): boolean;
            /** Returns true if the platform supports multisample resolve of depth textures.
            */
            public static get supportsMultisampleResolveDepth(): boolean;
            /** Returns true if the platform supports multisample resolve of stencil textures. Otherwise, returns false.
            */
            public static get supportsMultisampleResolveStencil(): boolean;
            /** Returns true if the graphics system supports GPU draw calls with indirect argument buffers. (Read Only)
            */
            public static get supportsIndirectArgumentsBuffer(): boolean;
            /** Is render texture format supported?
            * @param $format The format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsRenderTextureFormat ($format: UnityEngine.RenderTextureFormat) : boolean
            /** Is blending supported on render texture format?
            * @param $format The format to look up.
            * @returns True if blending is supported on the given format. 
            */
            public static SupportsBlendingOnRenderTextureFormat ($format: UnityEngine.RenderTextureFormat) : boolean
            /** Tests if a RenderTextureFormat can be used with RenderTexture.enableRandomWrite.
            * @param $format The format to look up.
            * @returns True if the format can be used for random access writes. 
            */
            public static SupportsRandomWriteOnRenderTextureFormat ($format: UnityEngine.RenderTextureFormat) : boolean
            /** Is texture format supported on this device?
            * @param $format The TextureFormat format to look up.
            * @returns True if the format is supported. 
            */
            public static SupportsTextureFormat ($format: UnityEngine.TextureFormat) : boolean
            /** Indicates whether the given combination of a vertex attribute format and dimension is supported on this device.
            * @param $format The VertexAttributeFormat format to look up.
            * @param $dimension The dimension of vertex data to check for.
            * @returns True if the format with the given dimension is supported. 
            */
            public static SupportsVertexAttributeFormat ($format: UnityEngine.Rendering.VertexAttributeFormat, $dimension: number) : boolean
            /** Verifies that the specified graphics format is supported for the specified usage.
            * @param $format The Experimental.Rendering.GraphicsFormat format to look up.
            * @param $usage The Experimental.Rendering.GraphicsFormatUsage usage to look up.
            * @returns Returns true if the format is supported for the specific usage. Returns false otherwise. 
            */
            public static IsFormatSupported ($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.GraphicsFormatUsage) : boolean
            /** Returns a format supported by the platform for the specified usage.
            * @param $format The Experimental.Rendering.GraphicsFormat format to look up.
            * @param $usage The Experimental.Rendering.GraphicsFormatUsage usage to look up.
            * @returns Returns a format supported by the platform. If no equivalent or compatible format is supported, the function returns GraphicsFormat.None. 
            */
            public static GetCompatibleFormat ($format: UnityEngine.Experimental.Rendering.GraphicsFormat, $usage: UnityEngine.Experimental.Rendering.GraphicsFormatUsage) : UnityEngine.Experimental.Rendering.GraphicsFormat
            /** Returns the platform-specific GraphicsFormat that is associated with the DefaultFormat.
            * @param $format The DefaultFormat format to look up.
            */
            public static GetGraphicsFormat ($format: UnityEngine.Experimental.Rendering.DefaultFormat) : UnityEngine.Experimental.Rendering.GraphicsFormat
            /** Checks if the target platform supports the MSAA samples count in the RenderTextureDescriptor argument.
            * @param $desc The RenderTextureDescriptor to check.
            * @returns If the target platform supports the given MSAA samples count of RenderTextureDescriptor, returns the given MSAA samples count. Otherwise returns a lower fallback MSAA samples count value that the target platform supports. 
            */
            public static GetRenderTextureSupportedMSAASampleCount ($desc: UnityEngine.RenderTextureDescriptor) : number
            public constructor ()
        }
        /** Provides an interface to get time information from Unity.
        */
        class Time extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The time at the beginning of this frame (Read Only).
            */
            public static get time(): number;
            /** The double precision time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get timeAsDouble(): number;
            /** The time this frame has started (Read Only). This is the time in seconds since the start of the game represented as a RationalTime.
            */
            public static get timeAsRational(): Unity.IntegerTime.RationalTime;
            /** The time since this frame started (Read Only). This is the time in seconds since the last non-additive scene has finished loading.
            */
            public static get timeSinceLevelLoad(): number;
            /** The double precision time since this frame started (Read Only). This is the time in seconds since the last non-additive scene has finished loading.
            */
            public static get timeSinceLevelLoadAsDouble(): number;
            /** The interval in seconds from the last frame to the current one (Read Only).
            */
            public static get deltaTime(): number;
            /** The time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedTime(): number;
            /** The double precision time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedTimeAsDouble(): number;
            /** The timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get unscaledTime(): number;
            /** The double precision timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.
            */
            public static get unscaledTimeAsDouble(): number;
            /** The timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate phase (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedUnscaledTime(): number;
            /** The double precision timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate (Read Only). This is the time in seconds since the start of the game.
            */
            public static get fixedUnscaledTimeAsDouble(): number;
            /** The timeScale-independent interval in seconds from the last frame to the current one (Read Only).
            */
            public static get unscaledDeltaTime(): number;
            /** The timeScale-independent interval in seconds from the last MonoBehaviour.FixedUpdate phase to the current one (Read Only).
            */
            public static get fixedUnscaledDeltaTime(): number;
            /** The interval in seconds at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.
            */
            public static get fixedDeltaTime(): number;
            public static set fixedDeltaTime(value: number);
            /** The maximum value of Time.deltaTime in any given frame. This is a time in seconds that limits the increase of Time.time between two frames.
            */
            public static get maximumDeltaTime(): number;
            public static set maximumDeltaTime(value: number);
            /** A smoothed out Time.deltaTime (Read Only).
            */
            public static get smoothDeltaTime(): number;
            /** The maximum time a frame can spend on particle updates. If the frame takes longer than this, then updates are split into multiple smaller updates.
            */
            public static get maximumParticleDeltaTime(): number;
            public static set maximumParticleDeltaTime(value: number);
            /** The scale at which time passes.
            */
            public static get timeScale(): number;
            public static set timeScale(value: number);
            /** The total number of frames since the start of the game (Read Only).
            */
            public static get frameCount(): number;
            public static get renderedFrameCount(): number;
            /** The real time in seconds since the game started (Read Only).
            */
            public static get realtimeSinceStartup(): number;
            /** The real time in seconds since the game started (Read Only). Double precision version of Time.realtimeSinceStartup. 
            */
            public static get realtimeSinceStartupAsDouble(): number;
            /** Slows your application’s playback time to allow Unity to save screenshots in between frames.
            */
            public static get captureDeltaTime(): number;
            public static set captureDeltaTime(value: number);
            /** Slows your application’s playback time to allow Unity to save screenshots in between frames.
            */
            public static get captureDeltaTimeRational(): Unity.IntegerTime.RationalTime;
            public static set captureDeltaTimeRational(value: Unity.IntegerTime.RationalTime);
            /** The reciprocal of Time.captureDeltaTime.
            */
            public static get captureFramerate(): number;
            public static set captureFramerate(value: number);
            /** Returns true if called inside a fixed time step callback (like MonoBehaviour's MonoBehaviour.FixedUpdate), otherwise returns false.
            */
            public static get inFixedTimeStep(): boolean;
            public constructor ()
        }
        /** Interface for on-screen keyboards. Only native iPhone, Android, and Windows Store Apps are supported.
        */
        class TouchScreenKeyboard extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is touch screen keyboard supported.
            */
            public static get isSupported(): boolean;
            /** Checks if the text within an input field can be selected and modified while TouchScreenKeyboard is open.
            * @returns Returns true when you are able to select and modify the input field, returns false otherwise. 
            */
            public static get isInPlaceEditingAllowed(): boolean;
            /** Returns the text displayed by the input field of the keyboard.
            */
            public get text(): string;
            public set text(value: string);
            /** Will text input field above the keyboard be hidden when the keyboard is on screen?
            */
            public static get hideInput(): boolean;
            public static set hideInput(value: boolean);
            /** Is the keyboard visible or sliding into the position on the screen?
            */
            public get active(): boolean;
            public set active(value: boolean);
            /** Returns the status of the on-screen keyboard. (Read Only)
            */
            public get status(): UnityEngine.TouchScreenKeyboard.Status;
            /** How many characters the keyboard input field is limited to. 0 = infinite.
            */
            public get characterLimit(): number;
            public set characterLimit(value: number);
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canGetSelection(): boolean;
            /** Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)
            */
            public get canSetSelection(): boolean;
            /** Gets or sets the character range of the selected text within the string currently being edited.
            */
            public get selection(): UnityEngine.RangeInt;
            public set selection(value: UnityEngine.RangeInt);
            /** Returns the TouchScreenKeyboardType of the keyboard.
            */
            public get type(): UnityEngine.TouchScreenKeyboardType;
            /** Specified on which display the on-screen keyboard will appear.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** Returns portion of the screen which is covered by the keyboard.
            */
            public static get area(): UnityEngine.Rect;
            /** Returns true whenever any keyboard is visible on the screen.
            */
            public static get visible(): boolean;
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType) : UnityEngine.TouchScreenKeyboard
            /** Opens the native keyboard provided by OS on the screen.
            * @param $text Text to edit.
            * @param $keyboardType Type of keyboard (eg, any text, numbers only, etc).
            * @param $autocorrection Is autocorrection applied?
            * @param $multiline Can more than one line of text be entered?
            * @param $secure Is the text masked (for passwords, etc)?
            * @param $alert Is the keyboard opened in alert mode?
            * @param $textPlaceholder Text to be used if no other text is present.
            * @param $characterLimit How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)
            */
            public static Open ($text: string) : UnityEngine.TouchScreenKeyboard
            public constructor ($text: string, $keyboardType: UnityEngine.TouchScreenKeyboardType, $autocorrection: boolean, $multiline: boolean, $secure: boolean, $alert: boolean, $textPlaceholder: string, $characterLimit: number)
        }
        /** Enumeration of the different types of supported touchscreen keyboards.
        */
        enum TouchScreenKeyboardType
        { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7, NintendoNetworkAccount = 8, Social = 9, Search = 10, DecimalPad = 11, OneTimeCode = 12 }
        class UnityEventQueueSystem extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GenerateEventIdForPayload ($eventPayloadName: string) : string
            public static GetGlobalEventQueue () : System.IntPtr
            public constructor ()
        }
        /** Representation of a Position, and a Rotation in 3D Space
        */
        class Pose extends System.ValueType implements System.IEquatable$1<UnityEngine.Pose>
        {
            protected [__keep_incompatibility]: never;
            /** The position component of the pose.
            */
            public position : UnityEngine.Vector3
            /** The rotation component of the pose.
            */
            public rotation : UnityEngine.Quaternion
            /** Returns the forward vector of the pose.
            */
            public get forward(): UnityEngine.Vector3;
            /** Returns the right vector of the pose.
            */
            public get right(): UnityEngine.Vector3;
            /** Returns the up vector of the pose.
            */
            public get up(): UnityEngine.Vector3;
            /** Shorthand for pose which represents zero position, and an identity rotation.
            */
            public static get identity(): UnityEngine.Pose;
            public ToString () : string
            public ToString ($format: string) : string
            /** Transforms the current pose into the local space of the provided pose.
            */
            public GetTransformedBy ($lhs: UnityEngine.Pose) : UnityEngine.Pose
            /** Transforms the current pose into the local space of the provided pose.
            */
            public GetTransformedBy ($lhs: UnityEngine.Transform) : UnityEngine.Pose
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.Pose) : boolean
            public static op_Equality ($a: UnityEngine.Pose, $b: UnityEngine.Pose) : boolean
            public static op_Inequality ($a: UnityEngine.Pose, $b: UnityEngine.Pose) : boolean
            public constructor ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion)
        }
        /** Controls the from a script.
        */
        class FrameDebugger extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Queries whether the is enabled.
            */
            public static get enabled(): boolean;
        }
        /** An enumeration of transform properties that can be driven on a RectTransform by an object.
        */
        enum DrivenTransformProperties
        { None = 0, All = -1, AnchoredPositionX = 2, AnchoredPositionY = 4, AnchoredPositionZ = 8, Rotation = 16, ScaleX = 32, ScaleY = 64, ScaleZ = 128, AnchorMinX = 256, AnchorMinY = 512, AnchorMaxX = 1024, AnchorMaxY = 2048, SizeDeltaX = 4096, SizeDeltaY = 8192, PivotX = 16384, PivotY = 32768, AnchoredPosition = 6, AnchoredPosition3D = 14, Scale = 224, AnchorMin = 768, AnchorMax = 3072, Anchors = 3840, SizeDelta = 12288, Pivot = 49152 }
        /** A component can be designed to drive a RectTransform. The DrivenRectTransformTracker struct is used to specify which RectTransforms it is driving.
        */
        class DrivenRectTransformTracker extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Stop recording undo actions from driven RectTransforms.
            */
            public static StopRecordingUndo () : void
            /** Resume recording undo of driven RectTransforms.
            */
            public static StartRecordingUndo () : void
            /** Add a RectTransform to be driven.
            * @param $driver The object to drive properties.
            * @param $rectTransform The RectTransform to be driven.
            * @param $drivenProperties The properties to be driven.
            */
            public Add ($driver: UnityEngine.Object, $rectTransform: UnityEngine.RectTransform, $drivenProperties: UnityEngine.DrivenTransformProperties) : void
            /** Clear the list of RectTransforms being driven.
            */
            public Clear () : void
        }
        /** Position, size, anchor and pivot information for a rectangle.
        */
        class RectTransform extends UnityEngine.Transform implements System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The calculated rectangle in the local space of the Transform.
            */
            public get rect(): UnityEngine.Rect;
            /** The normalized position in the parent RectTransform that the lower left corner is anchored to.
            */
            public get anchorMin(): UnityEngine.Vector2;
            public set anchorMin(value: UnityEngine.Vector2);
            /** The normalized position in the parent RectTransform that the upper right corner is anchored to.
            */
            public get anchorMax(): UnityEngine.Vector2;
            public set anchorMax(value: UnityEngine.Vector2);
            /** The position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition(): UnityEngine.Vector2;
            public set anchoredPosition(value: UnityEngine.Vector2);
            /** The size of this RectTransform relative to the distances between the anchors.
            */
            public get sizeDelta(): UnityEngine.Vector2;
            public set sizeDelta(value: UnityEngine.Vector2);
            /** The normalized position in this RectTransform that it rotates around.
            */
            public get pivot(): UnityEngine.Vector2;
            public set pivot(value: UnityEngine.Vector2);
            /** The 3D position of the pivot of this RectTransform relative to the anchor reference point.
            */
            public get anchoredPosition3D(): UnityEngine.Vector3;
            public set anchoredPosition3D(value: UnityEngine.Vector3);
            /** The offset of the lower left corner of the rectangle relative to the lower left anchor.
            */
            public get offsetMin(): UnityEngine.Vector2;
            public set offsetMin(value: UnityEngine.Vector2);
            /** The offset of the upper right corner of the rectangle relative to the upper right anchor.
            */
            public get offsetMax(): UnityEngine.Vector2;
            public set offsetMax(value: UnityEngine.Vector2);
            /** The object that is driving the values of this RectTransform. Value is null if not driven.
            */
            public get drivenByObject(): UnityEngine.Object;
            public static add_reapplyDrivenProperties ($value: UnityEngine.RectTransform.ReapplyDrivenProperties) : void
            public static remove_reapplyDrivenProperties ($value: UnityEngine.RectTransform.ReapplyDrivenProperties) : void
            /** Force the recalculation of RectTransforms internal data.
            */
            public ForceUpdateRectTransforms () : void
            /** Get the corners of the calculated rectangle in the local space of its Transform.
            * @param $fourCornersArray The array that corners are filled into.
            */
            public GetLocalCorners ($fourCornersArray: System.Array$1<UnityEngine.Vector3>) : void
            /** Get the corners of the calculated rectangle in world space.
            * @param $fourCornersArray The array that corners are filled into.
            */
            public GetWorldCorners ($fourCornersArray: System.Array$1<UnityEngine.Vector3>) : void
            public SetInsetAndSizeFromParentEdge ($edge: UnityEngine.RectTransform.Edge, $inset: number, $size: number) : void
            public SetSizeWithCurrentAnchors ($axis: UnityEngine.RectTransform.Axis, $size: number) : void
            public constructor ()
        }
        /** SpriteRenderer draw mode.
        */
        enum SpriteDrawMode
        { Simple = 0, Sliced = 1, Tiled = 2 }
        /** Tiling mode for SpriteRenderer.tileMode.
        */
        enum SpriteTileMode
        { Continuous = 0, Adaptive = 1 }
        /** Renders a Sprite for 2D graphics.
        */
        class SpriteRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            /** The Sprite to render.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** The current draw mode of the Sprite Renderer.
            */
            public get drawMode(): UnityEngine.SpriteDrawMode;
            public set drawMode(value: UnityEngine.SpriteDrawMode);
            /** Property to set or get the size to render when the SpriteRenderer.drawMode is set to SpriteDrawMode.Sliced or SpriteDrawMode.Tiled.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** The current threshold for Sprite Renderer tiling.
            */
            public get adaptiveModeThreshold(): number;
            public set adaptiveModeThreshold(value: number);
            /** The current tile mode of the Sprite Renderer.
            */
            public get tileMode(): UnityEngine.SpriteTileMode;
            public set tileMode(value: UnityEngine.SpriteTileMode);
            /** Rendering color for the Sprite graphic.
            */
            public get color(): UnityEngine.Color;
            public set color(value: UnityEngine.Color);
            /** Specifies how the sprite interacts with the masks.
            */
            public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
            public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
            /** Flips the sprite on the X axis.
            */
            public get flipX(): boolean;
            public set flipX(value: boolean);
            /** Flips the sprite on the Y axis.
            */
            public get flipY(): boolean;
            public set flipY(value: boolean);
            /** Determines the position of the Sprite used for sorting the SpriteRenderer.
            */
            public get spriteSortPoint(): UnityEngine.SpriteSortPoint;
            public set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
            public RegisterSpriteChangeCallback ($callback: UnityEngine.Events.UnityAction$1<UnityEngine.SpriteRenderer>) : void
            public UnregisterSpriteChangeCallback ($callback: UnityEngine.Events.UnityAction$1<UnityEngine.SpriteRenderer>) : void
            public constructor ()
        }
        /** Represents a Sprite object for use in 2D gameplay.
        */
        class Sprite extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Bounds of the Sprite, specified by its center and extents in world space units.
            */
            public get bounds(): UnityEngine.Bounds;
            /** Location of the Sprite on the original Texture, specified in pixels.
            */
            public get rect(): UnityEngine.Rect;
            /** Returns the border sizes of the Sprite.
            */
            public get border(): UnityEngine.Vector4;
            /** Get the reference to the used Texture. If packed this will point to the atlas, if not packed will point to the source Sprite.
            */
            public get texture(): UnityEngine.Texture2D;
            /** The number of pixels in the Sprite that correspond to one unit in world space. (Read Only)
            */
            public get pixelsPerUnit(): number;
            /** The Variant scale of Texture used by the Sprite. This is useful to check when a Variant SpriteAtlas is being used by Sprites.
            */
            public get spriteAtlasTextureScale(): number;
            /** Returns the Texture that contains the alpha channel from the source Texture. Unity generates this Texture under the hood for Sprites that have alpha in the source, and need to be compressed using techniques like ETC1.
            Returns NULL if there is no associated alpha Texture for the source Sprite. This is the case if the Sprite has not been setup to use ETC1 compression.
            */
            public get associatedAlphaSplitTexture(): UnityEngine.Texture2D;
            /** Location of the Sprite's center point in the Rect on the original Texture, specified in pixels.
            */
            public get pivot(): UnityEngine.Vector2;
            /** Returns true if this Sprite is packed in an atlas.
            */
            public get packed(): boolean;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.
            */
            public get packingMode(): UnityEngine.SpritePackingMode;
            /** If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.
            */
            public get packingRotation(): UnityEngine.SpritePackingRotation;
            /** Get the rectangle this Sprite uses on its Texture. Raises an exception if this Sprite is tightly packed in an atlas.
            */
            public get textureRect(): UnityEngine.Rect;
            /** Gets the offset of the rectangle this Sprite uses on its Texture to the original Sprite bounds. If Sprite mesh type is FullRect, offset is zero.
            */
            public get textureRectOffset(): UnityEngine.Vector2;
            /** Returns a copy of the array containing Sprite mesh vertex positions.
            */
            public get vertices(): System.Array$1<UnityEngine.Vector2>;
            /** Returns a copy of the array containing Sprite mesh triangles.
            */
            public get triangles(): System.Array$1<number>;
            /** The base Texture coordinates of the Sprite mesh.
            */
            public get uv(): System.Array$1<UnityEngine.Vector2>;
            /** Gets the number of Secondary Textures that the Sprite is using.
            * @returns Returns the number of Secondary Textures that the Sprite is using. 
            */
            public GetSecondaryTextureCount () : number
            /** Retrieves an array of SecondarySpriteTexture used by the Sprite.
            * @param $secondaryTexture The array of SecondarySpriteTexture to contain the Secondary Textures properties used by the Sprite.
            * @returns Returns the number of Secondary Textures properties retrieved. 
            */
            public GetSecondaryTextures ($secondaryTexture: System.Array$1<UnityEngine.SecondarySpriteTexture>) : number
            /** The number of physics shapes for the Sprite.
            * @returns The number of physics shapes for the Sprite. 
            */
            public GetPhysicsShapeCount () : number
            /** Gets the number of ScriptableObject that the sprite references.
            * @returns Returns the number of ScriptableObject that the sprite is referencing.
            */
            public GetScriptableObjectsCount () : number
            /** Retrieves an array of ScriptableObject referenced by the sprite.
            * @param $scriptableObjects The array of ScriptableObject to contain the ScriptableObjects referenced by the sprite.
            * @returns Returns the number of ScriptableObjects retrieved. 
            */
            public GetScriptableObjects ($scriptableObjects: System.Array$1<UnityEngine.ScriptableObject>) : number
            /** Adds a ScriptableObject reference to the sprite.
            * @param $obj The ScriptableObject reference to add.
            * @returns Returns true if the reference is added. Returns false if the sprite is already referencing the ScriptableObject .
            */
            public AddScriptableObject ($obj: UnityEngine.ScriptableObject) : boolean
            /** Removes the ScriptableObject reference from the sprite.
            * @param $i The index of the ScriptableObject reference to remove.
            * @returns Returns true if the reference is removed. Returns false if the sprite is not referencing the ScriptableObject.
            */
            public RemoveScriptableObjectAt ($i: number) : boolean
            /** Replace the ScriptableObject reference from the sprite.
            * @param $obj The new ScriptableObject to reference.
            * @param $i The index of the ScriptableObject reference to be replaced.
            * @returns Returns true if the reference is replaced. Returns false otherwise. 
            */
            public SetScriptableObjectAt ($obj: UnityEngine.ScriptableObject, $i: number) : boolean
            /** Retrieves the number of points in the selected physics shape for the sprite.
            * @param $shapeIdx The index of the physics shape to retrieve the number of points from.
            * @returns Returns the number of points in the selected physics shape for the sprite.
            */
            public GetPhysicsShapePointCount ($shapeIdx: number) : number
            public GetPhysicsShape ($shapeIdx: number, $physicsShape: System.Collections.Generic.List$1<UnityEngine.Vector2>) : number
            public OverridePhysicsShape ($physicsShapes: System.Collections.Generic.IList$1<System.Array$1<UnityEngine.Vector2>>) : void
            /** Sets up new Sprite geometry.
            * @param $vertices Array of vertex positions in Sprite Rect space.
            * @param $triangles Array of sprite mesh triangle indices.
            */
            public OverrideGeometry ($vertices: System.Array$1<UnityEngine.Vector2>, $triangles: System.Array$1<number>) : void
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4, $generateFallbackPhysicsShape: boolean) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4, $generateFallbackPhysicsShape: boolean, $secondaryTextures: System.Array$1<UnityEngine.SecondarySpriteTexture>) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType, $border: UnityEngine.Vector4) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number, $meshType: UnityEngine.SpriteMeshType) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number, $extrude: number) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2, $pixelsPerUnit: number) : UnityEngine.Sprite
            /** Create a new Sprite object.
            * @param $texture The Texture to obtain the Sprite graphic from.
            * @param $rect The rectangular section of the Texture to use for the Sprite.
            * @param $pivot The Sprite's pivot point relative to its graphic rectangle.
            * @param $pixelsPerUnit The number of pixels in the Sprite that correspond to one unit in world space.
            * @param $extrude The amount by which the Sprite mesh should be expanded outwards.
            * @param $meshType The type of mesh that is generated for the Sprite.
            * @param $border The border sizes of the Sprite (X=left, Y=bottom, Z=right, W=top).
            * @param $generateFallbackPhysicsShape Whether to generate a default physics shape for the Sprite.
            * @param $secondaryTextures The Secondary Texture properties to be used by the created Sprite.
            */
            public static Create ($texture: UnityEngine.Texture2D, $rect: UnityEngine.Rect, $pivot: UnityEngine.Vector2) : UnityEngine.Sprite
        }
        /** Determines the position of the Sprite used for sorting the Renderer.
        */
        enum SpriteSortPoint
        { Center = 0, Pivot = 1 }
        /** Defines the type of mesh generated for a sprite.
        */
        enum SpriteMeshType
        { FullRect = 0, Tight = 1 }
        /** How a Sprite's graphic rectangle is aligned with its pivot point.
        */
        enum SpriteAlignment
        { Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9 }
        /** Sprite packing modes for the Sprite Packer.
        */
        enum SpritePackingMode
        { Tight = 0, Rectangle = 1 }
        /** Sprite rotation modes for the Sprite Packer.
        */
        enum SpritePackingRotation
        { None = 0, FlipHorizontal = 1, FlipVertical = 2, Rotate180 = 3, Any = 15 }
        /** Encapsulates a Texture2D and its shader property name to give Sprite-based renderers access to a secondary texture, in addition to the main Sprite texture.
        */
        class SecondarySpriteTexture extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The shader property name of the secondary Sprite texture. Use this name to identify and sample the texture in the shader.
            */
            public name : string
            /** The texture to be used as a secondary Sprite texture.
            */
            public texture : UnityEngine.Texture2D
        }
        /** Use these flags to constrain motion of Rigidbodies.
        */
        enum RigidbodyConstraints
        { None = 0, FreezePositionX = 2, FreezePositionY = 4, FreezePositionZ = 8, FreezeRotationX = 16, FreezeRotationY = 32, FreezeRotationZ = 64, FreezePosition = 14, FreezeRotation = 112, FreezeAll = 126 }
        /** Use ForceMode to specify how to apply a force using Rigidbody.AddForce or ArticulationBody.AddForce.
        */
        enum ForceMode
        { Force = 0, Acceleration = 5, Impulse = 1, VelocityChange = 2 }
        /** Determines how to snap physics joints back to its constrained position when it drifts off too much.
        */
        enum JointProjectionMode
        { None = 0, PositionAndRotation = 1, PositionOnly = 2 }
        /** Cooking options that are available with MeshCollider.
        */
        enum MeshColliderCookingOptions
        { None = 0, InflateConvexMesh = 1, CookForFasterSimulation = 2, EnableMeshCleaning = 4, WeldColocatedVertices = 8, UseFastMidphase = 16 }
        /** WheelFrictionCurve is used by the WheelCollider to describe friction properties of the wheel tire.
        */
        class WheelFrictionCurve extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Extremum point slip (default 1).
            */
            public get extremumSlip(): number;
            public set extremumSlip(value: number);
            /** Force at the extremum slip (default 20000).
            */
            public get extremumValue(): number;
            public set extremumValue(value: number);
            /** Asymptote point slip (default 2).
            */
            public get asymptoteSlip(): number;
            public set asymptoteSlip(value: number);
            /** Force at the asymptote slip (default 10000).
            */
            public get asymptoteValue(): number;
            public set asymptoteValue(value: number);
            /** Multiplier for the extremumValue and asymptoteValue values (default 1).
            */
            public get stiffness(): number;
            public set stiffness(value: number);
        }
        /** The limits defined by the CharacterJoint.
        */
        class SoftJointLimit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The limit position/angle of the joint (in degrees).
            */
            public get limit(): number;
            public set limit(value: number);
            /** When the joint hits the limit, it can be made to bounce off it.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** Determines how far ahead in space the solver can "see" the joint limit.
            */
            public get contactDistance(): number;
            public set contactDistance(value: number);
        }
        /** The configuration of the spring attached to the joint's limits: linear and angular. Used by CharacterJoint and ConfigurableJoint.
        */
        class SoftJointLimitSpring extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The stiffness of the spring limit. When stiffness is zero the limit is hard, otherwise soft.
            */
            public get spring(): number;
            public set spring(value: number);
            /** The damping of the spring limit. In effect when the stiffness of the sprint limit is not zero.
            */
            public get damper(): number;
            public set damper(value: number);
        }
        /** How the joint's movement will behave along its local X axis.
        */
        class JointDrive extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Strength of a rubber-band pull toward the defined direction. Only used if mode includes Position.
            */
            public get positionSpring(): number;
            public set positionSpring(value: number);
            /** Resistance strength against the Position Spring. Only used if mode includes Position.
            */
            public get positionDamper(): number;
            public set positionDamper(value: number);
            /** Amount of force applied to push the object toward the defined direction.
            */
            public get maximumForce(): number;
            public set maximumForce(value: number);
            /** Defines whether the drive is an acceleration drive or a force drive.
            */
            public get useAcceleration(): boolean;
            public set useAcceleration(value: boolean);
        }
        /** The ConfigurableJoint attempts to attain position / velocity targets based on this flag.
        */
        enum JointDriveMode
        { None = 0, Position = 1, Velocity = 2, PositionAndVelocity = 3 }
        /** Rigidbody interpolation mode.
        */
        enum RigidbodyInterpolation
        { None = 0, Interpolate = 1, Extrapolate = 2 }
        /** The JointMotor is used to motorize a joint.
        */
        class JointMotor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The motor will apply a force up to force to achieve targetVelocity.
            */
            public get targetVelocity(): number;
            public set targetVelocity(value: number);
            /** The motor will apply a force.
            */
            public get force(): number;
            public set force(value: number);
            /** If freeSpin is enabled the motor will only accelerate but never slow down.
            */
            public get freeSpin(): boolean;
            public set freeSpin(value: boolean);
        }
        /** JointSpring is used add a spring force to HingeJoint and PhysicMaterial.
        */
        class JointSpring extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The spring forces used to reach the target position.
            */
            public spring : number
            /** The damper force uses to dampen the spring.
            */
            public damper : number
            /** The target position the joint attempts to reach.
            */
            public targetPosition : number
        }
        /** JointLimits is used by the HingeJoint to limit the joints angle.
        */
        class JointLimits extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The lower angular limit (in degrees) of the joint.
            */
            public get min(): number;
            public set min(value: number);
            /** The upper angular limit (in degrees) of the joint.
            */
            public get max(): number;
            public set max(value: number);
            /** Determines the size of the bounce when the joint hits it's limit. Also known as restitution.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** The minimum impact velocity which will cause the joint to bounce.
            */
            public get bounceMinVelocity(): number;
            public set bounceMinVelocity(value: number);
            /** Distance inside the limit value at which the limit will be considered to be active by the solver.
            */
            public get contactDistance(): number;
            public set contactDistance(value: number);
        }
        /** ControllerColliderHit is used by CharacterController.OnControllerColliderHit to give detailed information about the collision and how to deal with it.
        */
        class ControllerColliderHit extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The controller that hit the collider.
            */
            public get controller(): UnityEngine.CharacterController;
            /** The collider that was hit by the controller.
            */
            public get collider(): UnityEngine.Collider;
            /** The rigidbody that was hit by the controller.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The game object that was hit by the controller.
            */
            public get gameObject(): UnityEngine.GameObject;
            /** The transform that was hit by the controller.
            */
            public get transform(): UnityEngine.Transform;
            /** The impact point in world space.
            */
            public get point(): UnityEngine.Vector3;
            /** The normal of the surface we collided with in world space.
            */
            public get normal(): UnityEngine.Vector3;
            /** The direction the CharacterController was moving in when the collision occured.
            */
            public get moveDirection(): UnityEngine.Vector3;
            /** How far the character has travelled until it hit the collider.
            */
            public get moveLength(): number;
            public constructor ()
        }
        /** A base class of all colliders.
        */
        class Collider extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** Enabled Colliders will collide with other Colliders, disabled Colliders won't.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The rigidbody the collider is attached to.
            */
            public get attachedRigidbody(): UnityEngine.Rigidbody;
            /** The articulation body the collider is attached to.
            */
            public get attachedArticulationBody(): UnityEngine.ArticulationBody;
            /** Specify if this collider is configured as a trigger.
            */
            public get isTrigger(): boolean;
            public set isTrigger(value: boolean);
            /** Contact offset value of this collider.
            */
            public get contactOffset(): number;
            public set contactOffset(value: number);
            /** The world space bounding volume of the collider (Read Only).
            */
            public get bounds(): UnityEngine.Bounds;
            /** Specify whether this Collider's contacts are modifiable or not.
            */
            public get hasModifiableContacts(): boolean;
            public set hasModifiableContacts(value: boolean);
            /** Whether or not this Collider generates contacts for Physics.ContactEvent.
            */
            public get providesContacts(): boolean;
            public set providesContacts(value: boolean);
            /** A decision priority assigned to this Collider used when there is a conflicting decision on whether a Collider can contact another Collider.
            */
            public get layerOverridePriority(): number;
            public set layerOverridePriority(value: number);
            /** The additional layers that this Collider should exclude when deciding if the Collider can contact another Collider.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional layers that this Collider should include when deciding if the Collider can contact another Collider.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** The structure holding the geometric shape of the collider and its type. (Read Only)
            */
            public get GeometryHolder(): UnityEngine.LowLevelPhysics.GeometryHolder;
            /** The shared physic material of this collider.
            */
            public get sharedMaterial(): UnityEngine.PhysicMaterial;
            public set sharedMaterial(value: UnityEngine.PhysicMaterial);
            /** The material used by the collider.
            */
            public get material(): UnityEngine.PhysicMaterial;
            public set material(value: UnityEngine.PhysicMaterial);
            /** Returns a point on the collider that is closest to a given location.
            * @param $position Location you want to find the closest point to.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public ClosestPoint ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Casts a Ray that ignores all Colliders except this one.
            * @param $ray The starting point and direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit.
            * @param $maxDistance The max length of the ray.
            * @returns True when the ray intersects the collider, otherwise false. 
            */
            public Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            /** The closest point to the bounding box of the attached collider.
            */
            public ClosestPointOnBounds ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            public constructor ()
        }
        /** A CharacterController allows you to easily do movement constrained by collisions without having to deal with a rigidbody.
        */
        class CharacterController extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The current relative velocity of the Character (see notes).
            */
            public get velocity(): UnityEngine.Vector3;
            /** Was the CharacterController touching the ground during the last move?
            */
            public get isGrounded(): boolean;
            /** What part of the capsule collided with the environment during the last CharacterController.Move call.
            */
            public get collisionFlags(): UnityEngine.CollisionFlags;
            /** The radius of the character's capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the character's capsule.
            */
            public get height(): number;
            public set height(value: number);
            /** The center of the character's capsule relative to the transform's position.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The character controllers slope limit in degrees.
            */
            public get slopeLimit(): number;
            public set slopeLimit(value: number);
            /** The character controllers step offset in meters.
            */
            public get stepOffset(): number;
            public set stepOffset(value: number);
            /** The character's collision skin width.
            */
            public get skinWidth(): number;
            public set skinWidth(value: number);
            /** Gets or sets the minimum move distance of the character controller.
            */
            public get minMoveDistance(): number;
            public set minMoveDistance(value: number);
            /** Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** Enables or disables overlap recovery.
            Enables or disables overlap recovery. Used to depenetrate character controllers from static objects when an overlap is detected.
            */
            public get enableOverlapRecovery(): boolean;
            public set enableOverlapRecovery(value: boolean);
            /** Moves the character with speed.
            */
            public SimpleMove ($speed: UnityEngine.Vector3) : boolean
            /** Supplies the movement of a GameObject with an attached CharacterController component.
            */
            public Move ($motion: UnityEngine.Vector3) : UnityEngine.CollisionFlags
            public constructor ()
        }
        /** Control of an object's position through physics simulation.
        */
        class Rigidbody extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** The velocity vector of the rigidbody. It represents the rate of change of Rigidbody position.
            */
            public get velocity(): UnityEngine.Vector3;
            public set velocity(value: UnityEngine.Vector3);
            /** The angular velocity vector of the rigidbody measured in radians per second.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            public set angularVelocity(value: UnityEngine.Vector3);
            /** The drag of the object.
            */
            public get drag(): number;
            public set drag(value: number);
            /** The angular drag of the object.
            */
            public get angularDrag(): number;
            public set angularDrag(value: number);
            /** The mass of the rigidbody.
            */
            public get mass(): number;
            public set mass(value: number);
            /** Controls whether gravity affects this rigidbody.
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Maximum velocity of a rigidbody when moving out of penetrating state.
            */
            public get maxDepenetrationVelocity(): number;
            public set maxDepenetrationVelocity(value: number);
            /** Controls whether physics affects the rigidbody.
            */
            public get isKinematic(): boolean;
            public set isKinematic(value: boolean);
            /** Controls whether physics will change the rotation of the object.
            */
            public get freezeRotation(): boolean;
            public set freezeRotation(value: boolean);
            /** Controls which degrees of freedom are allowed for the simulation of this Rigidbody.
            */
            public get constraints(): UnityEngine.RigidbodyConstraints;
            public set constraints(value: UnityEngine.RigidbodyConstraints);
            /** The Rigidbody's collision detection mode.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode);
            /** Whether or not to calculate the center of mass automatically.
            */
            public get automaticCenterOfMass(): boolean;
            public set automaticCenterOfMass(value: boolean);
            /** The center of mass relative to the transform's origin.
            */
            public get centerOfMass(): UnityEngine.Vector3;
            public set centerOfMass(value: UnityEngine.Vector3);
            /** The center of mass of the rigidbody in world space (Read Only).
            */
            public get worldCenterOfMass(): UnityEngine.Vector3;
            /** Whether or not to calculate the inertia tensor automatically.
            */
            public get automaticInertiaTensor(): boolean;
            public set automaticInertiaTensor(value: boolean);
            /** The rotation of the inertia tensor.
            */
            public get inertiaTensorRotation(): UnityEngine.Quaternion;
            public set inertiaTensorRotation(value: UnityEngine.Quaternion);
            /** The inertia tensor of this body, defined as a diagonal matrix in a reference frame positioned at this body's center of mass and rotated by Rigidbody.inertiaTensorRotation.
            */
            public get inertiaTensor(): UnityEngine.Vector3;
            public set inertiaTensor(value: UnityEngine.Vector3);
            /** Should collision detection be enabled? (By default always enabled).
            */
            public get detectCollisions(): boolean;
            public set detectCollisions(value: boolean);
            /** The position of the rigidbody.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** The rotation of the Rigidbody.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** Interpolation provides a way to manage the appearance of jitter in the movement of your Rigidbody GameObjects at run time.
            */
            public get interpolation(): UnityEngine.RigidbodyInterpolation;
            public set interpolation(value: UnityEngine.RigidbodyInterpolation);
            /** The solverIterations determines how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverIterations. Must be positive.
            */
            public get solverIterations(): number;
            public set solverIterations(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** The maximum angular velocity of the rigidbody measured in radians per second. (Default 7) range { 0, infinity }.
            */
            public get maxAngularVelocity(): number;
            public set maxAngularVelocity(value: number);
            /** The maximum linear velocity of the rigidbody measured in meters per second.
            */
            public get maxLinearVelocity(): number;
            public set maxLinearVelocity(value: number);
            /** The solverVelocityIterations affects how how accurately Rigidbody joints and collision contacts are resolved. Overrides Physics.defaultSolverVelocityIterations. Must be positive.
            */
            public get solverVelocityIterations(): number;
            public set solverVelocityIterations(value: number);
            /** The additional layers that all Colliders attached to this Rigidbody should exclude when deciding if the Collider can come into contact with another Collider.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional layers that all Colliders attached to this Rigidbody should include when deciding if the Collider can come into contact with another Collider.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** Sets the mass based on the attached colliders assuming a constant density.
            */
            public SetDensity ($density: number) : void
            /** Moves the kinematic Rigidbody towards position.
            * @param $position Provides the new position for the Rigidbody object.
            */
            public MovePosition ($position: UnityEngine.Vector3) : void
            /** Rotates the rigidbody to rotation.
            * @param $rot The new rotation for the Rigidbody.
            */
            public MoveRotation ($rot: UnityEngine.Quaternion) : void
            /** Moves the Rigidbody to position and rotates the Rigidbody to rotation.
            * @param $position The new position for the Rigidbody.
            * @param $rotation The new rotation for the Rigidbody.
            */
            public Move ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Forces a rigidbody to sleep at least one frame.
            */
            public Sleep () : void
            /** Is the rigidbody sleeping?
            */
            public IsSleeping () : boolean
            /** Forces a rigidbody to wake up.
            */
            public WakeUp () : void
            /** Reset the center of mass of the rigidbody.
            */
            public ResetCenterOfMass () : void
            /** Reset the inertia tensor value and rotation.
            */
            public ResetInertiaTensor () : void
            /** The velocity relative to the rigidbody at the point relativePoint.
            */
            public GetRelativePointVelocity ($relativePoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** The velocity of the rigidbody at the point worldPoint in global space.
            */
            public GetPointVelocity ($worldPoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Applies the position and rotation of the Rigidbody to the corresponding Transform component.
            */
            public PublishTransform () : void
            /** Returns the force that the Rigidbody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated force expressed in ForceMode.Force. 
            */
            public GetAccumulatedForce ($step: number) : UnityEngine.Vector3
            public GetAccumulatedForce () : UnityEngine.Vector3
            /** Returns the torque that the Rigidbody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated torque expressed in ForceMode.Force. 
            */
            public GetAccumulatedTorque ($step: number) : UnityEngine.Vector3
            public GetAccumulatedTorque () : UnityEngine.Vector3
            /** Adds a force to the Rigidbody.
            * @param $force Force vector in world coordinates.
            * @param $mode Type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the Rigidbody.
            * @param $force Force vector in world coordinates.
            * @param $mode Type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3) : void
            /** Adds a force to the Rigidbody.
            * @param $x Size of force along the world x-axis.
            * @param $y Size of force along the world y-axis.
            * @param $z Size of force along the world z-axis.
            * @param $mode Type of force to apply.
            */
            public AddForce ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the Rigidbody.
            * @param $x Size of force along the world x-axis.
            * @param $y Size of force along the world y-axis.
            * @param $z Size of force along the world z-axis.
            * @param $mode Type of force to apply.
            */
            public AddForce ($x: number, $y: number, $z: number) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $force Force vector in local coordinates.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $force Force vector in local coordinates.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $x Size of force along the local x-axis.
            * @param $y Size of force along the local y-axis.
            * @param $z Size of force along the local z-axis.
            */
            public AddRelativeForce ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a force to the rigidbody relative to its coordinate system.
            * @param $x Size of force along the local x-axis.
            * @param $y Size of force along the local y-axis.
            * @param $z Size of force along the local z-axis.
            */
            public AddRelativeForce ($x: number, $y: number, $z: number) : void
            /** Adds a torque to the rigidbody.
            * @param $torque Torque vector in world coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody.
            * @param $torque Torque vector in world coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($torque: UnityEngine.Vector3) : void
            /** Adds a torque to the rigidbody.
            * @param $x Size of torque along the world x-axis.
            * @param $y Size of torque along the world y-axis.
            * @param $z Size of torque along the world z-axis.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody.
            * @param $x Size of torque along the world x-axis.
            * @param $y Size of torque along the world y-axis.
            * @param $z Size of torque along the world z-axis.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($x: number, $y: number, $z: number) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $torque Torque vector in local coordinates.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $torque Torque vector in local coordinates.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $x Size of torque along the local x-axis.
            * @param $y Size of torque along the local y-axis.
            * @param $z Size of torque along the local z-axis.
            */
            public AddRelativeTorque ($x: number, $y: number, $z: number, $mode: UnityEngine.ForceMode) : void
            /** Adds a torque to the rigidbody relative to its coordinate system.
            * @param $x Size of torque along the local x-axis.
            * @param $y Size of torque along the local y-axis.
            * @param $z Size of torque along the local z-axis.
            */
            public AddRelativeTorque ($x: number, $y: number, $z: number) : void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param $force Force vector in world coordinates.
            * @param $position Position in world coordinates.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies force at position. As a result this will apply a torque and force on the object.
            * @param $force Force vector in world coordinates.
            * @param $position Position in world coordinates.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number, $mode: UnityEngine.ForceMode) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number, $upwardsModifier: number) : void
            /** Applies a force to a rigidbody that simulates explosion effects.
            * @param $explosionForce The force of the explosion (which may be modified by distance).
            * @param $explosionPosition The centre of the sphere within which the explosion has its effect.
            * @param $explosionRadius The radius of the sphere within which the explosion has its effect.
            * @param $upwardsModifier Adjustment to the apparent position of the explosion to make it seem to lift objects.
            * @param $mode The method used to apply the force to its targets.
            */
            public AddExplosionForce ($explosionForce: number, $explosionPosition: UnityEngine.Vector3, $explosionRadius: number) : void
            /** The closest point to the bounding box of the attached colliders.
            */
            public ClosestPointOnBounds ($position: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Tests if a rigidbody would collide with anything, if it was moved through the Scene.
            * @param $direction The direction into which to sweep the rigidbody.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit (Additional resources: RaycastHit).
            * @param $maxDistance The length of the sweep.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the rigidbody sweep intersects any collider, otherwise false. 
            */
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public SweepTest ($direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Like Rigidbody.SweepTest, but returns all hits.
            * @param $direction The direction into which to sweep the rigidbody.
            * @param $maxDistance The length of the sweep.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public SweepTestAll ($direction: UnityEngine.Vector3, $maxDistance: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll ($direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public SweepTestAll ($direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            public constructor ()
        }
        /** Describes how physics materials of the colliding objects are combined.
        The friction force as well as the residual bounce impulse are applied symmertrically to both of the colliders in contact, so each pair of overlapping colliders must have a single set of friction and bouciness settings. However, one can set arbitrary physics materials to any colliders. For that particular reason, there is a mechanism that allows the combination of two different sets of properties that correspond to each of the colliders in contact into one set to be used in the solver.
        Specifying Average, Maximum, Minimum or Multiply as the physics material combine mode, you directly set the function that is used to combine the settings corresponding to the two overlapping colliders into one set of settings that can be used to apply the material effect.
        Note that there is a special case when the two overlapping colliders have physics materials with different combine modes set. In this particular case, the function that has the highest priority is used. The priority order is as follows: Average < Minimum < Multiply < Maximum. For example, if one material has Average set but the other one has Maximum, then the combine function to be used is Maximum, since it has higher priority.
        */
        enum PhysicMaterialCombine
        { Average = 0, Minimum = 2, Multiply = 1, Maximum = 3 }
        /** Describes a collision.
        */
        class Collision extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The total impulse applied to this contact pair to resolve the collision.
            */
            public get impulse(): UnityEngine.Vector3;
            /** The relative linear velocity of the two colliding objects (Read Only).
            */
            public get relativeVelocity(): UnityEngine.Vector3;
            /** The Rigidbody we hit (Read Only). This is null if the object we hit is a collider with no rigidbody attached.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The ArticulationBody of the collider that your GameObject collides with (Read Only).
            */
            public get articulationBody(): UnityEngine.ArticulationBody;
            /** The Rigidbody or ArticulationBody of the collider that your Component collides with (Read Only).
            */
            public get body(): UnityEngine.Component;
            /** The Collider we hit (Read Only).
            */
            public get collider(): UnityEngine.Collider;
            /** The Transform of the object we hit (Read Only).
            */
            public get transform(): UnityEngine.Transform;
            /** The GameObject whose collider you are colliding with. (Read Only).
            */
            public get gameObject(): UnityEngine.GameObject;
            /** Gets the number of contacts for this collision.
            */
            public get contactCount(): number;
            /** The contact points generated by the physics engine. You should avoid using this as it produces memory garbage. Use GetContact or GetContacts instead.
            */
            public get contacts(): System.Array$1<UnityEngine.ContactPoint>;
            /** Gets the contact point at the specified index.
            * @param $index The index of the contact to retrieve.
            * @returns The contact at the specified index. 
            */
            public GetContact ($index: number) : UnityEngine.ContactPoint
            /** Retrieves all contact points for this collision.
            * @param $contacts An array of ContactPoint used to receive the results.
            * @returns Returns the number of contacts placed in the contacts array. 
            */
            public GetContacts ($contacts: System.Array$1<UnityEngine.ContactPoint>) : number
            public GetContacts ($contacts: System.Collections.Generic.List$1<UnityEngine.ContactPoint>) : number
            public constructor ()
        }
        /** A body that forms part of a Physics articulation.
        */
        class ArticulationBody extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The type of joint connecting this body to its parent body.
            */
            public get jointType(): UnityEngine.ArticulationJointType;
            public set jointType(value: UnityEngine.ArticulationJointType);
            /** Position of the anchor relative to this body.
            */
            public get anchorPosition(): UnityEngine.Vector3;
            public set anchorPosition(value: UnityEngine.Vector3);
            /** Position of the anchor relative to this body's parent.
            */
            public get parentAnchorPosition(): UnityEngine.Vector3;
            public set parentAnchorPosition(value: UnityEngine.Vector3);
            /** Rotation of the anchor relative to this body.
            */
            public get anchorRotation(): UnityEngine.Quaternion;
            public set anchorRotation(value: UnityEngine.Quaternion);
            /** Rotation of the anchor relative to this body's parent.
            */
            public get parentAnchorRotation(): UnityEngine.Quaternion;
            public set parentAnchorRotation(value: UnityEngine.Quaternion);
            /** Indicates whether this body is the root body of the articulation (Read Only).
            */
            public get isRoot(): boolean;
            /** Whether the parent anchor should be computed automatically or not.
            */
            public get matchAnchors(): boolean;
            public set matchAnchors(value: boolean);
            /** The type of lock along X axis of movement.
            */
            public get linearLockX(): UnityEngine.ArticulationDofLock;
            public set linearLockX(value: UnityEngine.ArticulationDofLock);
            /** The type of lock along Y axis of movement.
            */
            public get linearLockY(): UnityEngine.ArticulationDofLock;
            public set linearLockY(value: UnityEngine.ArticulationDofLock);
            /** The type of lock along Z axis of movement.
            */
            public get linearLockZ(): UnityEngine.ArticulationDofLock;
            public set linearLockZ(value: UnityEngine.ArticulationDofLock);
            /** The magnitude of the conical swing angle relative to Y axis.
            */
            public get swingYLock(): UnityEngine.ArticulationDofLock;
            public set swingYLock(value: UnityEngine.ArticulationDofLock);
            /** The magnitude of the conical swing angle relative to Z axis.
            */
            public get swingZLock(): UnityEngine.ArticulationDofLock;
            public set swingZLock(value: UnityEngine.ArticulationDofLock);
            /** The type of lock for twist movement.
            */
            public get twistLock(): UnityEngine.ArticulationDofLock;
            public set twistLock(value: UnityEngine.ArticulationDofLock);
            /** The properties of drive along or around X.
            */
            public get xDrive(): UnityEngine.ArticulationDrive;
            public set xDrive(value: UnityEngine.ArticulationDrive);
            /** The properties of drive along or around Y.
            */
            public get yDrive(): UnityEngine.ArticulationDrive;
            public set yDrive(value: UnityEngine.ArticulationDrive);
            /** The properties of drive along or around Z.
            */
            public get zDrive(): UnityEngine.ArticulationDrive;
            public set zDrive(value: UnityEngine.ArticulationDrive);
            /** Allows you to specify that this body is not movable.
            */
            public get immovable(): boolean;
            public set immovable(value: boolean);
            /** Controls whether gravity affects this articulation body.
            */
            public get useGravity(): boolean;
            public set useGravity(value: boolean);
            /** Damping factor that affects how this body resists linear motion.
            */
            public get linearDamping(): number;
            public set linearDamping(value: number);
            /** Damping factor that affects how this body resists rotations.
            */
            public get angularDamping(): number;
            public set angularDamping(value: number);
            /** Allows you to specify the amount of friction that is applied as a result of the parent body moving relative to this body.
            */
            public get jointFriction(): number;
            public set jointFriction(value: number);
            /** The additional layers that all Colliders attached to this ArticulationBody should exclude when deciding if the Collider can come into contact with another Collider.
            */
            public get excludeLayers(): UnityEngine.LayerMask;
            public set excludeLayers(value: UnityEngine.LayerMask);
            /** The additional layers that all Colliders attached to this ArticulationBody should include when deciding if a the Collider can come into contact with another Collider.
            */
            public get includeLayers(): UnityEngine.LayerMask;
            public set includeLayers(value: UnityEngine.LayerMask);
            /** Linear velocity of the body defined in world space.
            */
            public get velocity(): UnityEngine.Vector3;
            public set velocity(value: UnityEngine.Vector3);
            /** The angular velocity of the body defined in world space.
            */
            public get angularVelocity(): UnityEngine.Vector3;
            public set angularVelocity(value: UnityEngine.Vector3);
            /** The mass of this articulation body.
            */
            public get mass(): number;
            public set mass(value: number);
            /** Whether or not to calculate the center of mass automatically.
            */
            public get automaticCenterOfMass(): boolean;
            public set automaticCenterOfMass(value: boolean);
            /** The center of mass of the body defined in local space.
            */
            public get centerOfMass(): UnityEngine.Vector3;
            public set centerOfMass(value: UnityEngine.Vector3);
            /** The center of mass of the body defined in world space (Read Only).
            */
            public get worldCenterOfMass(): UnityEngine.Vector3;
            /** Whether or not to calculate the inertia tensor automatically.
            */
            public get automaticInertiaTensor(): boolean;
            public set automaticInertiaTensor(value: boolean);
            /** The inertia tensor of this body.
            */
            public get inertiaTensor(): UnityEngine.Vector3;
            public set inertiaTensor(value: UnityEngine.Vector3);
            /** The rotation of the inertia tensor.
            */
            public get inertiaTensorRotation(): UnityEngine.Quaternion;
            public set inertiaTensorRotation(value: UnityEngine.Quaternion);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public get sleepThreshold(): number;
            public set sleepThreshold(value: number);
            /** The solverIterations determines how accurately articulation body joints and collision contacts are resolved.
            */
            public get solverIterations(): number;
            public set solverIterations(value: number);
            /** The solverVelocityIterations affects how accurately articulation body joints and collision contacts are resolved during bounce.
            */
            public get solverVelocityIterations(): number;
            public set solverVelocityIterations(value: number);
            /** The maximum angular velocity of the articulation body measured in radians per second.
            */
            public get maxAngularVelocity(): number;
            public set maxAngularVelocity(value: number);
            /** The maximum linear velocity of the articulation body measured in meters per second.
            */
            public get maxLinearVelocity(): number;
            public set maxLinearVelocity(value: number);
            /** The maximum joint velocity of the articulation body joint in reduced coordinates.
            */
            public get maxJointVelocity(): number;
            public set maxJointVelocity(value: number);
            /** The maximum velocity of an articulation body when moving out of penetrating state.
            */
            public get maxDepenetrationVelocity(): number;
            public set maxDepenetrationVelocity(value: number);
            /** The joint position in reduced coordinates.
            */
            public get jointPosition(): UnityEngine.ArticulationReducedSpace;
            public set jointPosition(value: UnityEngine.ArticulationReducedSpace);
            /** The joint velocity in reduced coordinates.
            */
            public get jointVelocity(): UnityEngine.ArticulationReducedSpace;
            public set jointVelocity(value: UnityEngine.ArticulationReducedSpace);
            /** The joint acceleration in reduced coordinates.
            */
            public get jointAcceleration(): UnityEngine.ArticulationReducedSpace;
            public set jointAcceleration(value: UnityEngine.ArticulationReducedSpace);
            /** The joint force in reduced coordinates.
            */
            public get jointForce(): UnityEngine.ArticulationReducedSpace;
            public set jointForce(value: UnityEngine.ArticulationReducedSpace);
            /** The drive force in reduced coordinates.
            */
            public get driveForce(): UnityEngine.ArticulationReducedSpace;
            /** The amount of degrees of freedom of a body.
            */
            public get dofCount(): number;
            /** The index of the body in the hierarchy of articulation bodies.
            */
            public get index(): number;
            /** The ArticulationBody's collision detection mode.
            */
            public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
            public set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode);
            /** Returns the force that the ArticulationBody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated force expressed in ForceMode.Force. 
            */
            public GetAccumulatedForce ($step: number) : UnityEngine.Vector3
            public GetAccumulatedForce () : UnityEngine.Vector3
            /** Returns the torque that the ArticulationBody has accumulated before the simulation step.
            * @param $step The timestep of the next physics simulation.
            * @returns Accumulated torque expressed in ForceMode.Force. 
            */
            public GetAccumulatedTorque ($step: number) : UnityEngine.Vector3
            public GetAccumulatedTorque () : UnityEngine.Vector3
            /** Applies a force to the ArticulationBody.
            * @param $force The force vector to apply.
            * @param $mode The type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies a force to the ArticulationBody.
            * @param $force The force vector to apply.
            * @param $mode The type of force to apply.
            */
            public AddForce ($force: UnityEngine.Vector3) : void
            /** Applies a force to the Articulation Body, relative to its local coordinate system.
            * @param $force The force vector in local coordinates.
            * @param $mode The type of force to apply.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies a force to the Articulation Body, relative to its local coordinate system.
            * @param $force The force vector in local coordinates.
            * @param $mode The type of force to apply.
            */
            public AddRelativeForce ($force: UnityEngine.Vector3) : void
            /** Add torque to the articulation body.
            * @param $torque The torque to apply.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Add torque to the articulation body.
            * @param $torque The torque to apply.
            * @param $mode The type of torque to apply.
            */
            public AddTorque ($torque: UnityEngine.Vector3) : void
            /** Applies a torque to the articulation body, relative to its local coordinate system.
            * @param $torque The torque vector in local coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies a torque to the articulation body, relative to its local coordinate system.
            * @param $torque The torque vector in local coordinates.
            * @param $mode The type of torque to apply.
            */
            public AddRelativeTorque ($torque: UnityEngine.Vector3) : void
            /** Applies a force at a specific position, resulting in applying a torque and force on the object.
            * @param $force The force vector in world coordinates.
            * @param $position A position in world coordinates.
            * @param $mode The type of force to apply.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3, $mode: UnityEngine.ForceMode) : void
            /** Applies a force at a specific position, resulting in applying a torque and force on the object.
            * @param $force The force vector in world coordinates.
            * @param $position A position in world coordinates.
            * @param $mode The type of force to apply.
            */
            public AddForceAtPosition ($force: UnityEngine.Vector3, $position: UnityEngine.Vector3) : void
            /** Resets the center of mass of the articulation body.
            */
            public ResetCenterOfMass () : void
            /** Resets the inertia tensor value and rotation.
            */
            public ResetInertiaTensor () : void
            /** Forces an articulation body to sleep.
            */
            public Sleep () : void
            /** Indicates whether the articulation body is sleeping.
            */
            public IsSleeping () : boolean
            /** Forces an articulation body to wake up.
            */
            public WakeUp () : void
            /** Teleport the root body of the articulation to a new pose.
            * @param $position The new position of the root articulation body.
            * @param $rotation The new orientation of the root articulation body.
            */
            public TeleportRoot ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : void
            /** Return the point on the articulation body that is closest to a given one.
            * @param $point The point of interest.
            * @returns The point on the surfaces of all Colliders attached to this articulation body that is closest to the given one. 
            */
            public GetClosestPoint ($point: UnityEngine.Vector3) : UnityEngine.Vector3
            /** The velocity relative to the articulation body at the point relativePoint.
            */
            public GetRelativePointVelocity ($relativePoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Gets the velocity of the articulation body at the specified worldPoint in global space.
            */
            public GetPointVelocity ($worldPoint: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculates and writes dense Jacobian matrix of the articulation body hierarchy to the supplied struct.
            * @param $jacobian Supplied struct to read back and store Jacobian matrix values. 
            * @returns Number of elements in Jacobian matrix. 
            */
            public GetDenseJacobian ($jacobian: $Ref<UnityEngine.ArticulationJacobian>) : number
            public GetJointPositions ($positions: System.Collections.Generic.List$1<number>) : number
            public SetJointPositions ($positions: System.Collections.Generic.List$1<number>) : void
            public GetJointVelocities ($velocities: System.Collections.Generic.List$1<number>) : number
            public SetJointVelocities ($velocities: System.Collections.Generic.List$1<number>) : void
            public GetJointAccelerations ($accelerations: System.Collections.Generic.List$1<number>) : number
            public GetJointForces ($forces: System.Collections.Generic.List$1<number>) : number
            public SetJointForces ($forces: System.Collections.Generic.List$1<number>) : void
            /** Returns the forces required for the body to reach the provided acceleration in reduced space.
            * @param $acceleration The desired acceleration in reduced space.
            * @returns The forces needed for the body to reach the desired acceleration in reduced space. 
            */
            public GetJointForcesForAcceleration ($acceleration: UnityEngine.ArticulationReducedSpace) : UnityEngine.ArticulationReducedSpace
            public GetDriveForces ($forces: System.Collections.Generic.List$1<number>) : number
            public GetJointGravityForces ($forces: System.Collections.Generic.List$1<number>) : number
            public GetJointCoriolisCentrifugalForces ($forces: System.Collections.Generic.List$1<number>) : number
            public GetJointExternalForces ($forces: System.Collections.Generic.List$1<number>, $step: number) : number
            public GetDriveTargets ($targets: System.Collections.Generic.List$1<number>) : number
            public SetDriveTargets ($targets: System.Collections.Generic.List$1<number>) : void
            public GetDriveTargetVelocities ($targetVelocities: System.Collections.Generic.List$1<number>) : number
            public SetDriveTargetVelocities ($targetVelocities: System.Collections.Generic.List$1<number>) : void
            public GetDofStartIndices ($dofStartIndices: System.Collections.Generic.List$1<number>) : number
            /** Sets the target value of the specified drive.
            * @param $axis The drive axis.
            * @param $value The value to set the target to.
            */
            public SetDriveTarget ($axis: UnityEngine.ArticulationDriveAxis, $value: number) : void
            /** Sets the target velocity value of the specified drive.
            * @param $axis The drive axis.
            * @param $value The value to set the target velocity to.
            */
            public SetDriveTargetVelocity ($axis: UnityEngine.ArticulationDriveAxis, $value: number) : void
            /** Sets the lower and upper limits of the drive.
            * @param $axis The drive axis.
            * @param $lower The lower limit of the drive.
            * @param $upper The upper limit of the drive.
            */
            public SetDriveLimits ($axis: UnityEngine.ArticulationDriveAxis, $lower: number, $upper: number) : void
            /** Sets the stiffness value of the specified drive.
            * @param $axis The drive axis.
            * @param $value The value to set the stiffness to.
            */
            public SetDriveStiffness ($axis: UnityEngine.ArticulationDriveAxis, $value: number) : void
            /** Sets the damping value of the specified drive.
            * @param $axis The drive axis.
            * @param $value The value to set the damping to.
            */
            public SetDriveDamping ($axis: UnityEngine.ArticulationDriveAxis, $value: number) : void
            /** Sets the force limit of the specified drive.
            * @param $axis The drive axis.
            * @param $value The value to set the force limit to.
            */
            public SetDriveForceLimit ($axis: UnityEngine.ArticulationDriveAxis, $value: number) : void
            /** Reads the position and rotation of the Articulation Body from the physics system and applies it to the corresponding Transform component.
            */
            public PublishTransform () : void
            /** Snap the anchor to the closest contact between the connected bodies.
            */
            public SnapAnchorToClosestContact () : void
            public constructor ()
        }
        /** Describes a contact point where the collision occurs.
        */
        class ContactPoint extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The point of contact.
            */
            public get point(): UnityEngine.Vector3;
            /** Normal of the contact point.
            */
            public get normal(): UnityEngine.Vector3;
            /** The impulse applied to this contact pair to resolve the collision.
            */
            public get impulse(): UnityEngine.Vector3;
            /** The first collider in contact at the point.
            */
            public get thisCollider(): UnityEngine.Collider;
            /** The other collider in contact at the point.
            */
            public get otherCollider(): UnityEngine.Collider;
            /** The distance between the colliders at the contact point.
            */
            public get separation(): number;
        }
        /** CollisionFlags is a bitmask returned by CharacterController.Move.
        */
        enum CollisionFlags
        { None = 0, Sides = 1, Above = 2, Below = 4, CollidedSides = 1, CollidedAbove = 2, CollidedBelow = 4 }
        /** Overrides the global Physics.queriesHitTriggers.
        */
        enum QueryTriggerInteraction
        { UseGlobal = 0, Ignore = 1, Collide = 2 }
        /** The collision detection mode constants used for Rigidbody.collisionDetectionMode.
        */
        enum CollisionDetectionMode
        { Discrete = 0, Continuous = 1, ContinuousDynamic = 2, ContinuousSpeculative = 3 }
        /** Constrains movement for a ConfigurableJoint along the 6 axes.
        */
        enum ConfigurableJointMotion
        { Locked = 0, Limited = 1, Free = 2 }
        /** Control ConfigurableJoint's rotation with either X & YZ or Slerp Drive.
        */
        enum RotationDriveMode
        { XYAndZ = 0, Slerp = 1 }
        /** The type of the joint that restricts movement of the two connected articulation bodies.
        */
        enum ArticulationJointType
        { FixedJoint = 0, PrismaticJoint = 1, RevoluteJoint = 2, SphericalJoint = 3 }
        /** The lock type applied to a particular degree of freedom of an articulation body.
        */
        enum ArticulationDofLock
        { LockedMotion = 0, LimitedMotion = 1, FreeMotion = 2 }
        /** The drive type applied to a particular drive of an ArticulationBody.
        */
        enum ArticulationDriveType
        { Force = 0, Acceleration = 1, Target = 2, Velocity = 3 }
        /** Drive applies forces and torques to the connected bodies.
        */
        class ArticulationDrive extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The lower limit of motion for a particular degree of freedom.
            */
            public lowerLimit : number
            /** The upper limit of motion for a particular degree of freedom.
            */
            public upperLimit : number
            /** The stiffness of the spring connected to this drive.
            */
            public stiffness : number
            /** The damping of the spring attached to this drive.
            */
            public damping : number
            /** The maximum force this drive can apply to a body.
            */
            public forceLimit : number
            /** The target value the drive will try to reach.
            */
            public target : number
            /** The velocity of the body this drive will try to reach.
            */
            public targetVelocity : number
            /** Specifies which drive type to use for this drive.
            */
            public driveType : UnityEngine.ArticulationDriveType
        }
        /** Coordinates in reduced space.
        */
        class ArticulationReducedSpace extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The number of degrees of freedom of a body.
            */
            public dofCount : number
            public get_Item ($i: number) : number
            public set_Item ($i: number, $value: number) : void
            public constructor ($a: number)
            public constructor ($a: number, $b: number)
            public constructor ($a: number, $b: number, $c: number)
        }
        /** The floating point dense Jacobian matrix of the articulation body hierarchy.
        */
        class ArticulationJacobian extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Number of rows of the matrix is equal to the number of articulation bodies in hierarchy times 6: 3 rows of linearpositional DOF and 3 rows of angularrotational DOF for each body.
            */
            public get rows(): number;
            public set rows(value: number);
            /** Number of columns of the matrix is equal to the total number of all joint degrees of freedom(DOF), plus 6 if ArticulationBody.immovable is false.
            */
            public get columns(): number;
            public set columns(value: number);
            /** List of floats representing Jacobian matrix.
            */
            public get elements(): System.Collections.Generic.List$1<number>;
            public set elements(value: System.Collections.Generic.List$1<number>);
            public constructor ($rows: number, $cols: number)
        }
        /** An axis of a drive of an ArticulationBody.
        */
        enum ArticulationDriveAxis
        { X = 0, Y = 1, Z = 2 }
        /** Global physics properties and helper methods.
        */
        class Physics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Layer mask constant to select ignore raycast layer.
            */
            public static IgnoreRaycastLayer : number
            /** Layer mask constant to select default raycast layers.
            */
            public static DefaultRaycastLayers : number
            /** Layer mask constant to select all layers.
            */
            public static AllLayers : number
            /** The gravity applied to all rigid bodies in the Scene.
            */
            public static get gravity(): UnityEngine.Vector3;
            public static set gravity(value: UnityEngine.Vector3);
            /** The default contact offset of the newly created colliders.
            */
            public static get defaultContactOffset(): number;
            public static set defaultContactOffset(value: number);
            /** The mass-normalized energy threshold, below which objects start going to sleep.
            */
            public static get sleepThreshold(): number;
            public static set sleepThreshold(value: number);
            /** Specifies whether queries (raycasts, spherecasts, overlap tests, etc.) hit Triggers by default.
            */
            public static get queriesHitTriggers(): boolean;
            public static set queriesHitTriggers(value: boolean);
            /** Whether physics queries should hit back-face triangles.
            */
            public static get queriesHitBackfaces(): boolean;
            public static set queriesHitBackfaces(value: boolean);
            /** Two colliding objects with a relative velocity below this will not bounce (default 2). Must be positive.
            */
            public static get bounceThreshold(): number;
            public static set bounceThreshold(value: number);
            /** The maximum default velocity needed to move a Rigidbody's collider out of another collider's surface penetration. Must be positive.
            */
            public static get defaultMaxDepenetrationVelocity(): number;
            public static set defaultMaxDepenetrationVelocity(value: number);
            /** The defaultSolverIterations determines how accurately Rigidbody joints and collision contacts are resolved. (default 6). Must be positive.
            */
            public static get defaultSolverIterations(): number;
            public static set defaultSolverIterations(value: number);
            /** The defaultSolverVelocityIterations affects how accurately the Rigidbody joints and collision contacts are resolved. (default 1). Must be positive.
            */
            public static get defaultSolverVelocityIterations(): number;
            public static set defaultSolverVelocityIterations(value: number);
            /** Controls when Unity executes the physics simulation.
            */
            public static get simulationMode(): UnityEngine.SimulationMode;
            public static set simulationMode(value: UnityEngine.SimulationMode);
            /** Default maximum angular speed of the dynamic Rigidbody, in radians (default 50).
            */
            public static get defaultMaxAngularSpeed(): number;
            public static set defaultMaxAngularSpeed(value: number);
            /** Enables an improved patch friction mode that guarantees static and dynamic friction do not exceed analytical results.
            */
            public static get improvedPatchFriction(): boolean;
            public static set improvedPatchFriction(value: boolean);
            /** Whether or not MonoBehaviour collision messages will be sent by the physics system.
            */
            public static get invokeCollisionCallbacks(): boolean;
            public static set invokeCollisionCallbacks(value: boolean);
            /** The PhysicsScene automatically created when Unity starts.
            */
            public static get defaultPhysicsScene(): UnityEngine.PhysicsScene;
            /** Whether or not to automatically sync transform changes with the physics system whenever a Transform component changes.
            */
            public static get autoSyncTransforms(): boolean;
            public static set autoSyncTransforms(value: boolean);
            /** Determines whether the garbage collector should reuse only a single instance of a Collision type for all collision callbacks.
            */
            public static get reuseCollisionCallbacks(): boolean;
            public static set reuseCollisionCallbacks(value: boolean);
            /** Sets the minimum separation distance for cloth inter-collision.
            */
            public static get interCollisionDistance(): number;
            public static set interCollisionDistance(value: number);
            /** Sets the cloth inter-collision stiffness.
            */
            public static get interCollisionStiffness(): number;
            public static set interCollisionStiffness(value: number);
            public static get interCollisionSettingsToggle(): boolean;
            public static set interCollisionSettingsToggle(value: boolean);
            /** Cloth Gravity setting.
            Set gravity for all cloth components.
            */
            public static get clothGravity(): UnityEngine.Vector3;
            public static set clothGravity(value: UnityEngine.Vector3);
            public static add_ContactModifyEvent ($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>) : void
            public static remove_ContactModifyEvent ($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>) : void
            public static add_ContactModifyEventCCD ($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>) : void
            public static remove_ContactModifyEventCCD ($value: System.Action$2<UnityEngine.PhysicsScene, Unity.Collections.NativeArray$1<UnityEngine.ModifiableContactPair>>) : void
            /** Makes the collision detection system ignore all collisions between collider1 and collider2.
            * @param $collider1 Any collider.
            * @param $collider2 Another collider you want to have collider1 to start or stop ignoring collisions with.
            * @param $ignore Whether or not the collisions between the two colliders should be ignored or not.
            */
            public static IgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider, $ignore: boolean) : void
            public static IgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider) : void
            /** Makes the collision detection system ignore all collisions between any collider in layer1 and any collider in layer2.
            Note that IgnoreLayerCollision will reset the trigger state of affected colliders, so you might receive OnTriggerExit and OnTriggerEnter messages in response to calling this.
            */
            public static IgnoreLayerCollision ($layer1: number, $layer2: number, $ignore: boolean) : void
            public static IgnoreLayerCollision ($layer1: number, $layer2: number) : void
            /** Are collisions between layer1 and layer2 being ignored?
            */
            public static GetIgnoreLayerCollision ($layer1: number, $layer2: number) : boolean
            /** Checks whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not.
            * @param $collider1 The first collider to compare to collider2.
            * @param $collider2 The second collider to compare to collider1.
            * @returns Whether the collision detection system will ignore all collisionstriggers between collider1 and collider2/ or not. 
            */
            public static GetIgnoreCollision ($collider1: UnityEngine.Collider, $collider2: UnityEngine.Collider) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true if the ray intersects with a Collider, otherwise false. 
            */
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : boolean
            /** Casts a ray against all colliders in the Scene and returns detailed information on what was hit.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the closest collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param $ray The starting point and direction of the ray.
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $maxDistance: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray) : boolean
            /** Same as above using ray.origin and ray.direction instead of origin and direction.
            * @param $ray The starting point and direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the closest collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns true when the ray intersects any collider, otherwise false. 
            */
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static Raycast ($ray: UnityEngine.Ray, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param $start Start point.
            * @param $end End point.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $layerMask: number) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3) : boolean
            /** Returns true if there is any collider intersecting the line between start and end.
            * @param $start Start point.
            * @param $end End point.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            */
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $layerMask: number) : boolean
            public static Linecast ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the capsule sweep intersects any collider, otherwise false. 
            */
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : boolean
            /** * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction into which to sweep the sphere.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number) : boolean
            /** * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance: number) : boolean
            public static SphereCast ($ray: UnityEngine.Ray, $radius: number, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : boolean
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion) : boolean
            public static BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Additional resources: Raycast.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layermask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Casts a ray through the Scene and returns all hits. Note that order of the results is undefined.
            * @param $ray The starting point and direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of RaycastHit objects. Note that the order of the results is undefined. 
            */
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static RaycastAll ($ray: UnityEngine.Ray) : System.Array$1<UnityEngine.RaycastHit>
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param $ray The starting point and direction of the ray.
            * @param $results The buffer to store the hits into.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static RaycastNonAlloc ($ray: UnityEngine.Ray, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast a ray through the Scene and store the hits into the buffer.
            * @param $origin The starting point and direction of the ray.
            * @param $results The buffer to store the hits into.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static RaycastNonAlloc ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Like Physics.CapsuleCast, but this function will return all hits the capsule sweep intersects.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $maxDistance The max length of the sweep.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static CapsuleCastAll ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction in which to sweep the sphere.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns An array of all colliders hit in the sweep. 
            */
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Like Physics.SphereCast, but this function will return all hits the sphere sweep intersects.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static SphereCastAll ($ray: UnityEngine.Ray, $radius: number) : System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders.
            * @param $point0 The center of the sphere at the start of the capsule.
            * @param $point1 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders touching or inside the capsule. 
            */
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number) : System.Array$1<UnityEngine.Collider>
            /** Computes and stores colliders touching or inside the sphere.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $layerMask A defines which layers of colliders to include in the query.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns an array with all colliders touching or inside the sphere. 
            */
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapSphere ($position: UnityEngine.Vector3, $radius: number) : System.Array$1<UnityEngine.Collider>
            /** Simulate physics in the Scene.
            * @param $step The time to advance physics by.
            */
            public static Simulate ($step: number) : void
            /** Apply Transform changes to the physics engine.
            */
            public static SyncTransforms () : void
            /** Compute the minimal translation required to separate the given colliders apart at specified poses.
            * @param $colliderA The first collider.
            * @param $positionA Position of the first collider.
            * @param $rotationA Rotation of the first collider.
            * @param $colliderB The second collider.
            * @param $positionB Position of the second collider.
            * @param $rotationB Rotation of the second collider.
            * @param $direction Direction along which the translation required to separate the colliders apart is minimal.
            * @param $distance The distance along direction that is required to separate the colliders apart.
            * @returns True, if the colliders overlap at the given poses. 
            */
            public static ComputePenetration ($colliderA: UnityEngine.Collider, $positionA: UnityEngine.Vector3, $rotationA: UnityEngine.Quaternion, $colliderB: UnityEngine.Collider, $positionB: UnityEngine.Vector3, $rotationB: UnityEngine.Quaternion, $direction: $Ref<UnityEngine.Vector3>, $distance: $Ref<number>) : boolean
            /** Returns a point on the given collider that is closest to the specified location.
            * @param $point Location you want to find the closest point to.
            * @param $collider The collider that you find the closest point on.
            * @param $position The position of the collider.
            * @param $rotation The rotation of the collider.
            * @returns The point on the collider that is closest to the specified location. 
            */
            public static ClosestPoint ($point: UnityEngine.Vector3, $collider: UnityEngine.Collider, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            /** Computes and stores colliders touching or inside the sphere into the provided buffer.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $results The buffer to store the results into.
            * @param $layerMask A defines which layers of colliders to include in the query.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Returns the amount of colliders stored into the results buffer. 
            */
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number) : number
            public static OverlapSphereNonAlloc ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number, $layerMask: number) : boolean
            public static CheckSphere ($position: UnityEngine.Vector3, $radius: number) : boolean
            /** Casts a capsule against all colliders in the Scene and returns detailed information on what was hit into the buffer.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $results The buffer to store the hits into.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the buffer. 
            */
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static CapsuleCastNonAlloc ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast sphere along the direction and store the results into buffer.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction in which to sweep the sphere.
            * @param $results The buffer to save the hits into.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static SphereCastNonAlloc ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Cast sphere along the direction and store the results into buffer.
            * @param $ray The starting point and direction of the ray into which the sphere sweep is cast.
            * @param $radius The radius of the sphere.
            * @param $results The buffer to save the results to.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a sphere.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored into the results buffer. 
            */
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number, $layerMask: number) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance: number) : number
            public static SphereCastNonAlloc ($ray: UnityEngine.Ray, $radius: number, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Checks if any colliders overlap a capsule-shaped volume in world space.
            * @param $start The center of the sphere at the start of the capsule.
            * @param $end The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            */
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number, $layerMask: number) : boolean
            public static CheckCapsule ($start: UnityEngine.Vector3, $end: UnityEngine.Vector3, $radius: number) : boolean
            /** Check whether the given box overlaps with other colliders or not.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $orientation Rotation of the box.
            * @param $layermask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if the box overlaps with any colliders. 
            */
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layermask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : boolean
            public static CheckBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3) : boolean
            /** Find all colliders touching or inside of the given box.
            * @param $center Center of the box.
            * @param $halfExtents Half of the size of the box in each dimension.
            * @param $orientation Rotation of the box.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns Colliders that overlap with the given box. 
            */
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $layerMask: number) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : System.Array$1<UnityEngine.Collider>
            public static OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3) : System.Array$1<UnityEngine.Collider>
            /** Find all colliders touching or inside of the given box, and store them into the buffer.
            * @param $center Center of the box.
            * @param $halfExtents Half of the size of the box in each dimension.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored in results. 
            */
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $mask: number) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion) : number
            public static OverlapBoxNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Cast the box along the direction, and store hits in the provided buffer.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : number
            public static BoxCastNonAlloc ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
            /** Like Physics.BoxCast, but returns all hits.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layermask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns All colliders that were hit. 
            */
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number, $layerMask: number) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $maxDistance: number) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion) : System.Array$1<UnityEngine.RaycastHit>
            public static BoxCastAll ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : System.Array$1<UnityEngine.RaycastHit>
            /** Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
            * @param $point0 The center of the sphere at the start of the capsule.
            * @param $point1 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $results The buffer to store the results into.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of entries written to the buffer. 
            */
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number) : number
            public static OverlapCapsuleNonAlloc ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Prepares the mesh for use with a MeshCollider.
            * @param $meshID The instance ID of the mesh to bake collision data from.
            * @param $convex A flag to indicate whether to bake convex geometry or not.
            * @param $cookingOptions The cooking options to use when you bake the mesh.
            */
            public static BakeMesh ($meshID: number, $convex: boolean, $cookingOptions: UnityEngine.MeshColliderCookingOptions) : void
            /** Prepares the mesh for use with a MeshCollider and uses default cooking options.
            * @param $meshID The instance ID of the mesh to bake collision data from.
            * @param $convex A flag to indicate whether to bake convex geometry or not.
            */
            public static BakeMesh ($meshID: number, $convex: boolean) : void
            public static add_ContactEvent ($value: UnityEngine.Physics.ContactEventDelegate) : void
            public static remove_ContactEvent ($value: UnityEngine.Physics.ContactEventDelegate) : void
            public constructor ()
        }
        /** Represents a single instance of a 3D physics Scene.
        */
        class PhysicsScene extends System.ValueType implements System.IEquatable$1<UnityEngine.PhysicsScene>
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($lhs: UnityEngine.PhysicsScene, $rhs: UnityEngine.PhysicsScene) : boolean
            public static op_Inequality ($lhs: UnityEngine.PhysicsScene, $rhs: UnityEngine.PhysicsScene) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.PhysicsScene) : boolean
            /** Gets whether the physics Scene is valid or not.
            * @returns Is the physics scene valid? 
            */
            public IsValid () : boolean
            /** Gets whether the physics Scene is empty or not.
            * @returns Is the physics Scene is empty? 
            */
            public IsEmpty () : boolean
            /** Simulate physics associated with this PhysicsScene.
            * @param $step The time to advance physics by.
            * @returns Whether the simulation was run or not.  Running the simulation during physics callbacks will always fail. 
            */
            public Simulate ($step: number) : void
            /** Runs specified physics simulation stages on this physics scene.
            * @param $step The time to advance physics by.
            * @param $stages An enum to specify which stages to run.
            * @param $options A flag enum to specify any additional simulation options.
            */
            public RunSimulationStages ($step: number, $stages: UnityEngine.SimulationStage, $options?: UnityEngine.SimulationOption) : void
            /** Interpolates Rigidbodies in this PhysicsScene.
            */
            public InterpolateBodies () : void
            /** Resets the Transform positions of interpolated and extrapolated Rigidbodies in this PhysicsScene to Rigidbody.position and Transform rotations to Rigidbody.rotation.
            */
            public ResetInterpolationPoses () : void
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param $origin The starting point of the ray in world coordinates.
            * @param $direction The direction of the ray.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max distance the ray should check for collisions.
            * @param $layerMask A that is used to selectively ignore Colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a ray, from point origin, in direction direction, of length maxDistance, against all colliders in the Scene.
            * @param $origin The starting point and direction of the ray.
            * @param $direction The direction of the ray.
            * @param $raycastHits The buffer to store the hits into.
            * @param $maxDistance The max distance the rayhit is allowed to be from the start of the ray.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction The amount of hits stored into the results buffer.
            * @returns True if the ray intersects with a Collider, otherwise false. 
            */
            public Raycast ($origin: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $raycastHits: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Casts a capsule against all colliders in this physics scene and returns detailed information on what was hit.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the capsule sweep intersects any collider, otherwise false. 
            */
            public CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Casts a capsule against all colliders in this physics scene and returns detailed information on what was hit.
            * @param $point1 The center of the sphere at the start of the capsule.
            * @param $point2 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $direction The direction into which to sweep the capsule.
            * @param $results The buffer to store the results in.
            * @param $maxDistance The max length of the sweep.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public CapsuleCast ($point1: UnityEngine.Vector3, $point2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Check the given capsule against the physics world and return all overlapping colliders in the user-provided buffer.
            * @param $point0 The center of the sphere at the start of the capsule.
            * @param $point1 The center of the sphere at the end of the capsule.
            * @param $radius The radius of the capsule.
            * @param $results The buffer to store the results into.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of entries written to the buffer. 
            */
            public OverlapCapsule ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Casts a sphere along a ray and returns detailed information on what was hit.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction into which to sweep the sphere.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True when the sphere sweep intersects any collider, otherwise false. 
            */
            public SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            /** Cast sphere along the direction and store the results into buffer.
            * @param $origin The center of the sphere at the start of the sweep.
            * @param $radius The radius of the sphere.
            * @param $direction The direction into which to sweep the sphere.
            * @param $results The buffer to save the results to.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction A that is used to selectively ignore colliders when casting a capsule.
            * @returns The amount of hits stored into the results buffer. 
            */
            public SphereCast ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            /** Computes and stores colliders touching or inside the sphere into the provided buffer.
            * @param $position Center of the sphere.
            * @param $radius Radius of the sphere.
            * @param $results The buffer to store the results into.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored into the results buffer. 
            */
            public OverlapSphere ($position: UnityEngine.Vector3, $radius: number, $results: System.Array$1<UnityEngine.Collider>, $layerMask: number, $queryTriggerInteraction: UnityEngine.QueryTriggerInteraction) : number
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $hitInfo If true is returned, hitInfo will contain more information about where the collider was hit. (Additional resources: RaycastHit).
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns True, if any intersections were found. 
            */
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : boolean
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $hitInfo: $Ref<UnityEngine.RaycastHit>) : boolean
            /** Find all colliders touching or inside of the given box, and store them into the buffer.
            * @param $center Center of the box.
            * @param $halfExtents Half of the size of the box in each dimension.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $layerMask A that is used to selectively ignore colliders when casting a ray.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of colliders stored in results. 
            */
            public OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>, $orientation: UnityEngine.Quaternion, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            public OverlapBox ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.Collider>) : number
            /** Casts the box along a ray and returns detailed information on what was hit.
            * @param $center Center of the box.
            * @param $halfExtents Half the size of the box in each dimension.
            * @param $direction The direction in which to cast the box.
            * @param $results The buffer to store the results in.
            * @param $orientation Rotation of the box.
            * @param $maxDistance The max length of the cast.
            * @param $layerMask A that is used to selectively ignore colliders when casting a capsule.
            * @param $queryTriggerInteraction Specifies whether this query should hit Triggers.
            * @returns The amount of hits stored to the results buffer. 
            */
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>, $orientation: UnityEngine.Quaternion, $maxDistance?: number, $layerMask?: number, $queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction) : number
            public BoxCast ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $results: System.Array$1<UnityEngine.RaycastHit>) : number
        }
        /** A light-weight proxy that allows to access the contact buffers directly.
        */
        class ModifiableContactPair extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** World-space rotation of the first collider in this contact pair as seen by the solver.
            */
            public rotation : UnityEngine.Quaternion
            /** World-space position of the first collider in this contact pair as seen by the solver.
            */
            public position : UnityEngine.Vector3
            /** World-space rotation of the second collider in this contact pair as seen by the solver.
            */
            public otherRotation : UnityEngine.Quaternion
            /** World-space position of the second collider in this contact pair as seen by the solver.
            */
            public otherPosition : UnityEngine.Vector3
            /** Instance ID of the first Collider in this contact pair.
            */
            public get colliderInstanceID(): number;
            /** Instance ID of the second collider in this contact pair.
            */
            public get otherColliderInstanceID(): number;
            /** Instance ID of the first body in this contact pair.
            */
            public get bodyInstanceID(): number;
            /** Instance ID of the second body in this contact pair.
            */
            public get otherBodyInstanceID(): number;
            /** Linear velocity of the first body in the contact pair.
            */
            public get bodyVelocity(): UnityEngine.Vector3;
            /** Angular velocity of the first body in the contact pair.
            */
            public get bodyAngularVelocity(): UnityEngine.Vector3;
            /** Linear velocity of the second body in the contact pair.
            */
            public get otherBodyVelocity(): UnityEngine.Vector3;
            /** Angular velocity of the second body in the contact pair.
            */
            public get otherBodyAngularVelocity(): UnityEngine.Vector3;
            /** The amount of the contact points generated for this contact pair.
            */
            public get contactCount(): number;
            /** Mass-related properties of this contact pair, such as the mass ratio.
            */
            public get massProperties(): UnityEngine.ModifiableMassProperties;
            public set massProperties(value: UnityEngine.ModifiableMassProperties);
            /** Get the location of a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns The location of a contact point. 
            */
            public GetPoint ($i: number) : UnityEngine.Vector3
            /** Set the location of a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $v The location of a contact point.
            */
            public SetPoint ($i: number, $v: UnityEngine.Vector3) : void
            /** Get the normal at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns Normal at the contact point. 
            */
            public GetNormal ($i: number) : UnityEngine.Vector3
            /** Set the normal at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $normal Normal at the contact point.
            */
            public SetNormal ($i: number, $normal: UnityEngine.Vector3) : void
            /** Get the separation value at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns The separation at a contact point. 
            */
            public GetSeparation ($i: number) : number
            /** Set the separation value at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $separation The separation at a contact point.
            */
            public SetSeparation ($i: number, $separation: number) : void
            /** Get the target velocity the solver should aim reaching at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns The target velocity at a contact point. 
            */
            public GetTargetVelocity ($i: number) : UnityEngine.Vector3
            /** Set the target velocity the solver should aim reaching at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $velocity The target velocity at a contact point.
            */
            public SetTargetVelocity ($i: number, $velocity: UnityEngine.Vector3) : void
            /** Get the restitution value for the specified contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns Bounciness value for the specified contact point. 
            */
            public GetBounciness ($i: number) : number
            /** Set the restitution value for the specified contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $bounciness Bounciness value for the specified contact point.
            */
            public SetBounciness ($i: number, $bounciness: number) : void
            /** Get the static friction coefficient at a particular point of the contact pair.
            * @param $i Index of the contact point.
            * @returns The static friction coefficient at a contact point. 
            */
            public GetStaticFriction ($i: number) : number
            /** Set the static friction coefficient at a particular point of the contact pair.
            * @param $i Index of the contact point.
            * @param $staticFriction The static friction coefficient at a contact point.
            */
            public SetStaticFriction ($i: number, $staticFriction: number) : void
            /** Get the value of the dynamic friction for a specified contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns Dynamic friction coefficient. 
            */
            public GetDynamicFriction ($i: number) : number
            /** Set the value of the dynamic friction for a specified contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $dynamicFriction Dynamic friction coefficient.
            */
            public SetDynamicFriction ($i: number, $dynamicFriction: number) : void
            /** Get the maximum impulse that the solver can apply at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @returns The maximum impulse that can be applied. 
            */
            public GetMaxImpulse ($i: number) : number
            /** Set the maximum impulse that the solver can apply at a particular contact point in this contact pair.
            * @param $i Index of the contact point.
            * @param $value The maximum impulse that can be applied.
            */
            public SetMaxImpulse ($i: number, $value: number) : void
            /** Ignore the specified contact point in this contact pair.
            * @param $i Index of the contact point.
            */
            public IgnoreContact ($i: number) : void
            /** Get the index of a face a particular contact point belongs to in this contact pair. Use this with Mesh.triangles.
            * @param $i Index of the contact point.
            * @returns Index of a face this contact point belongs to. 
            */
            public GetFaceIndex ($i: number) : number
        }
        /** A selection of modes that control when Unity executes the physics simulation.
        */
        enum SimulationMode
        { FixedUpdate = 0, Update = 1, Script = 2 }
        /** Structure used to get information back from a raycast.
        */
        class RaycastHit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Collider that was hit.
            */
            public get collider(): UnityEngine.Collider;
            /** Instance ID of the Collider that was hit.
            */
            public get colliderInstanceID(): number;
            /** The impact point in world space where the ray hit the collider.
            */
            public get point(): UnityEngine.Vector3;
            public set point(value: UnityEngine.Vector3);
            /** The normal of the surface the ray hit.
            */
            public get normal(): UnityEngine.Vector3;
            public set normal(value: UnityEngine.Vector3);
            /** The barycentric coordinate of the triangle we hit.
            */
            public get barycentricCoordinate(): UnityEngine.Vector3;
            public set barycentricCoordinate(value: UnityEngine.Vector3);
            /** The distance from the ray's origin to the impact point.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The index of the triangle that was hit.
            */
            public get triangleIndex(): number;
            /** The uv texture coordinate at the collision location.
            */
            public get textureCoord(): UnityEngine.Vector2;
            /** The secondary uv texture coordinate at the impact point.
            */
            public get textureCoord2(): UnityEngine.Vector2;
            /** The Transform of the rigidbody or collider that was hit.
            */
            public get transform(): UnityEngine.Transform;
            /** The Rigidbody of the collider that was hit. If the collider is not attached to a rigidbody then it is null.
            */
            public get rigidbody(): UnityEngine.Rigidbody;
            /** The ArticulationBody of the collider that was hit. If the collider is not attached to an articulation body then it is null.
            */
            public get articulationBody(): UnityEngine.ArticulationBody;
            /** The uv lightmap coordinate at the impact point.
            */
            public get lightmapCoord(): UnityEngine.Vector2;
        }
        /** A header struct which contains colliding bodies.
        */
        class ContactPairHeader extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Instance ID of the first Rigidbody or the ArticualtionBody in the pair.
            */
            public get bodyInstanceID(): number;
            /** Instance ID of the second Rigidbody or the ArticualtionBody in the pair.
            */
            public get otherBodyInstanceID(): number;
            /** The first Rigidbody or ArticulationBody in the pair.
            */
            public get body(): UnityEngine.Component;
            /** The second Rigidbody or ArticulationBody in the pair.
            */
            public get otherBody(): UnityEngine.Component;
            /** Number of ContactPairs that this header contains.
            */
            public get pairCount(): number;
            /** Gets the ContactPair at index of this pair header.
            * @param $index The ContactPair index.
            * @returns A reference or a copy of the ContactPair struct at index. 
            */
            public GetContactPair ($index: number) : $Ref<UnityEngine.ContactPair>
        }
        /** Mass-related modifiable properties of a contact pair.
        */
        class ModifiableMassProperties extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The inverse mass scaling that the solver should apply to the first body of this contact pair.
            */
            public inverseMassScale : number
            /** The inverse inertia scaling that the solver should apply to the first body of this contact pair.
            */
            public inverseInertiaScale : number
            /** The inverse mass scaling that the solver should apply to the second body of this contact pair.
            */
            public otherInverseMassScale : number
            /** The inverse inertia scaling that the solver should apply to the second body of this contact pair.
            */
            public otherInverseInertiaScale : number
        }
        /** Physics material describes how to handle colliding objects (friction, bounciness).
        */
        class PhysicMaterial extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.
            */
            public get bounciness(): number;
            public set bounciness(value: number);
            /** The friction used when already moving.  This value is usually between 0 and 1.
            */
            public get dynamicFriction(): number;
            public set dynamicFriction(value: number);
            /** The friction coefficient used when an object is lying on a surface.
            */
            public get staticFriction(): number;
            public set staticFriction(value: number);
            /** Determines how the friction is combined.
            */
            public get frictionCombine(): UnityEngine.PhysicMaterialCombine;
            public set frictionCombine(value: UnityEngine.PhysicMaterialCombine);
            /** Determines how the bounciness is combined.
            */
            public get bounceCombine(): UnityEngine.PhysicMaterialCombine;
            public set bounceCombine(value: UnityEngine.PhysicMaterialCombine);
            public constructor ()
            public constructor ($name: string)
        }
        /** A mesh collider allows you to do between meshes and primitives.
        */
        class MeshCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The mesh object used for collision detection.
            */
            public get sharedMesh(): UnityEngine.Mesh;
            public set sharedMesh(value: UnityEngine.Mesh);
            /** Use a convex collider from the mesh.
            */
            public get convex(): boolean;
            public set convex(value: boolean);
            /** Options used to enable or disable certain features in mesh cooking.
            */
            public get cookingOptions(): UnityEngine.MeshColliderCookingOptions;
            public set cookingOptions(value: UnityEngine.MeshColliderCookingOptions);
            public constructor ()
        }
        /** A capsule-shaped primitive collider.
        */
        class CapsuleCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the capsule, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere, measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The height of the capsule measured in the object's local space.
            */
            public get height(): number;
            public set height(value: number);
            /** The direction of the capsule.
            */
            public get direction(): number;
            public set direction(value: number);
            public constructor ()
        }
        /** A box-shaped primitive collider.
        */
        class BoxCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the box, measured in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The size of the box, measured in the object's local space.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** A sphere-shaped primitive collider.
        */
        class SphereCollider extends UnityEngine.Collider
        {
            protected [__keep_incompatibility]: never;
            /** The center of the sphere in the object's local space.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The radius of the sphere measured in the object's local space.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor ()
        }
        /** A force applied constantly.
        */
        class ConstantForce extends UnityEngine.Behaviour
        {
            protected [__keep_incompatibility]: never;
            /** The force applied to the rigidbody every frame.
            */
            public get force(): UnityEngine.Vector3;
            public set force(value: UnityEngine.Vector3);
            /** The force - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeForce(): UnityEngine.Vector3;
            public set relativeForce(value: UnityEngine.Vector3);
            /** The torque applied to the rigidbody every frame.
            */
            public get torque(): UnityEngine.Vector3;
            public set torque(value: UnityEngine.Vector3);
            /** The torque - relative to the rigid bodies coordinate system - applied every frame.
            */
            public get relativeTorque(): UnityEngine.Vector3;
            public set relativeTorque(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** Joint is the base class for all joints.
        */
        class Joint extends UnityEngine.Component
        {
            protected [__keep_incompatibility]: never;
            /** A reference to another rigidbody this joint connects to.
            */
            public get connectedBody(): UnityEngine.Rigidbody;
            public set connectedBody(value: UnityEngine.Rigidbody);
            /** A reference to an articulation body this joint connects to.
            */
            public get connectedArticulationBody(): UnityEngine.ArticulationBody;
            public set connectedArticulationBody(value: UnityEngine.ArticulationBody);
            /** The Direction of the axis around which the body is constrained.
            */
            public get axis(): UnityEngine.Vector3;
            public set axis(value: UnityEngine.Vector3);
            /** The Position of the anchor around which the joints motion is constrained.
            */
            public get anchor(): UnityEngine.Vector3;
            public set anchor(value: UnityEngine.Vector3);
            /** Position of the anchor relative to the connected Rigidbody.
            */
            public get connectedAnchor(): UnityEngine.Vector3;
            public set connectedAnchor(value: UnityEngine.Vector3);
            /** Should the connectedAnchor be calculated automatically?
            */
            public get autoConfigureConnectedAnchor(): boolean;
            public set autoConfigureConnectedAnchor(value: boolean);
            /** The force that needs to be applied for this joint to break.
            */
            public get breakForce(): number;
            public set breakForce(value: number);
            /** The torque that needs to be applied for this joint to break. To be able to break, a joint must be _Locked_ or _Limited_ on the axis of rotation where the torque is being applied. This means that some joints cannot break, such as an unconstrained Configurable Joint.
            */
            public get breakTorque(): number;
            public set breakTorque(value: number);
            /** Enable collision between bodies connected with the joint.
            */
            public get enableCollision(): boolean;
            public set enableCollision(value: boolean);
            /** Toggle preprocessing for this joint.
            */
            public get enablePreprocessing(): boolean;
            public set enablePreprocessing(value: boolean);
            /** The scale to apply to the inverse mass and inertia tensor of the body prior to solving the constraints.
            */
            public get massScale(): number;
            public set massScale(value: number);
            /** The scale to apply to the inverse mass and inertia tensor of the connected body prior to solving the constraints.
            */
            public get connectedMassScale(): number;
            public set connectedMassScale(value: number);
            /** The force applied by the solver to satisfy all constraints.
            */
            public get currentForce(): UnityEngine.Vector3;
            /** The torque applied by the solver to satisfy all constraints.
            */
            public get currentTorque(): UnityEngine.Vector3;
            public constructor ()
        }
        /** The HingeJoint groups together 2 rigid bodies, constraining them to move like connected by a hinge.
        */
        class HingeJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.
            */
            public get motor(): UnityEngine.JointMotor;
            public set motor(value: UnityEngine.JointMotor);
            /** Limit of angular rotation (in degrees) on the hinge joint.
            */
            public get limits(): UnityEngine.JointLimits;
            public set limits(value: UnityEngine.JointLimits);
            /** The spring attempts to reach a target angle by adding spring and damping forces.
            */
            public get spring(): UnityEngine.JointSpring;
            public set spring(value: UnityEngine.JointSpring);
            /** Enables the joint's motor. Disabled by default.
            */
            public get useMotor(): boolean;
            public set useMotor(value: boolean);
            /** Enables the joint's limits. Disabled by default.
            */
            public get useLimits(): boolean;
            public set useLimits(value: boolean);
            /** If enabled, the angle of the hinge is extended to [-360, 360] degrees.
            */
            public get extendedLimits(): boolean;
            public set extendedLimits(value: boolean);
            /** Enables the joint's spring. Disabled by default.
            */
            public get useSpring(): boolean;
            public set useSpring(value: boolean);
            /** The angular velocity of the joint in degrees per second. (Read Only)
            */
            public get velocity(): number;
            /** The current angle in degrees of the joint relative to its rest position. (Read Only)
            */
            public get angle(): number;
            /** Defines whether the HingeJoint.spring outputs accelerations instead of forces.
            */
            public get useAcceleration(): boolean;
            public set useAcceleration(value: boolean);
            public constructor ()
        }
        /** The spring joint ties together 2 rigid bodies, spring forces will be automatically applied to keep the object at the given distance.
        */
        class SpringJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The spring force used to keep the two objects together.
            */
            public get spring(): number;
            public set spring(value: number);
            /** The damper force used to dampen the spring force.
            */
            public get damper(): number;
            public set damper(value: number);
            /** The minimum distance between the bodies relative to their initial distance.
            */
            public get minDistance(): number;
            public set minDistance(value: number);
            /** The maximum distance between the bodies relative to their initial distance.
            */
            public get maxDistance(): number;
            public set maxDistance(value: number);
            /** The maximum allowed error between the current spring length and the length defined by minDistance and maxDistance.
            */
            public get tolerance(): number;
            public set tolerance(value: number);
            public constructor ()
        }
        /** The Fixed joint groups together 2 rigidbodies, making them stick together in their bound position.
        */
        class FixedJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Character Joints are mainly used for Ragdoll effects.
        */
        class CharacterJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The secondary axis around which the joint can rotate.
            */
            public get swingAxis(): UnityEngine.Vector3;
            public set swingAxis(value: UnityEngine.Vector3);
            /** The configuration of the spring attached to the twist limits of the joint.
            */
            public get twistLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set twistLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the swing limits of the joint.
            */
            public get swingLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set swingLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The lower limit around the primary axis of the character joint.
            */
            public get lowTwistLimit(): UnityEngine.SoftJointLimit;
            public set lowTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The upper limit around the primary axis of the character joint.
            */
            public get highTwistLimit(): UnityEngine.SoftJointLimit;
            public set highTwistLimit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing1Limit(): UnityEngine.SoftJointLimit;
            public set swing1Limit(value: UnityEngine.SoftJointLimit);
            /** The angular limit of rotation (in degrees) around the primary axis of the character joint.
            */
            public get swing2Limit(): UnityEngine.SoftJointLimit;
            public set swing2Limit(value: UnityEngine.SoftJointLimit);
            /** Brings violated constraints back into alignment even when the solver fails.
            */
            public get enableProjection(): boolean;
            public set enableProjection(value: boolean);
            /** Set the linear tolerance threshold for projection.
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            public constructor ()
        }
        /** The configurable joint is an extremely flexible joint giving you complete control over rotation and linear motion.
        */
        class ConfigurableJoint extends UnityEngine.Joint
        {
            protected [__keep_incompatibility]: never;
            /** The joint's secondary axis.
            */
            public get secondaryAxis(): UnityEngine.Vector3;
            public set secondaryAxis(value: UnityEngine.Vector3);
            /** Allow movement along the X axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get xMotion(): UnityEngine.ConfigurableJointMotion;
            public set xMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Y axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get yMotion(): UnityEngine.ConfigurableJointMotion;
            public set yMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow movement along the Z axis to be Free, completely Locked, or Limited according to Linear Limit.
            */
            public get zMotion(): UnityEngine.ConfigurableJointMotion;
            public set zMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the X axis to be Free, completely Locked, or Limited according to Low and High Angular XLimit.
            */
            public get angularXMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularXMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Y axis to be Free, completely Locked, or Limited according to Angular YLimit.
            */
            public get angularYMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularYMotion(value: UnityEngine.ConfigurableJointMotion);
            /** Allow rotation around the Z axis to be Free, completely Locked, or Limited according to Angular ZLimit.
            */
            public get angularZMotion(): UnityEngine.ConfigurableJointMotion;
            public set angularZMotion(value: UnityEngine.ConfigurableJointMotion);
            /** The configuration of the spring attached to the linear limit of the joint.
            */
            public get linearLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set linearLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular X limit of the joint.
            */
            public get angularXLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularXLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** The configuration of the spring attached to the angular Y and angular Z limits of the joint.
            */
            public get angularYZLimitSpring(): UnityEngine.SoftJointLimitSpring;
            public set angularYZLimitSpring(value: UnityEngine.SoftJointLimitSpring);
            /** Boundary defining movement restriction, based on distance from the joint's origin.
            */
            public get linearLimit(): UnityEngine.SoftJointLimit;
            public set linearLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining lower rotation restriction, based on delta from original rotation.
            */
            public get lowAngularXLimit(): UnityEngine.SoftJointLimit;
            public set lowAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining upper rotation restriction, based on delta from original rotation.
            */
            public get highAngularXLimit(): UnityEngine.SoftJointLimit;
            public set highAngularXLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularYLimit(): UnityEngine.SoftJointLimit;
            public set angularYLimit(value: UnityEngine.SoftJointLimit);
            /** Boundary defining rotation restriction, based on delta from original rotation.
            */
            public get angularZLimit(): UnityEngine.SoftJointLimit;
            public set angularZLimit(value: UnityEngine.SoftJointLimit);
            /** The desired position that the joint should move into.
            */
            public get targetPosition(): UnityEngine.Vector3;
            public set targetPosition(value: UnityEngine.Vector3);
            /** The desired velocity that the joint should move along.
            */
            public get targetVelocity(): UnityEngine.Vector3;
            public set targetVelocity(value: UnityEngine.Vector3);
            /** Definition of how the joint's movement will behave along its local X axis.
            */
            public get xDrive(): UnityEngine.JointDrive;
            public set xDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Y axis.
            */
            public get yDrive(): UnityEngine.JointDrive;
            public set yDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's movement will behave along its local Z axis.
            */
            public get zDrive(): UnityEngine.JointDrive;
            public set zDrive(value: UnityEngine.JointDrive);
            /** This is a Quaternion. It defines the desired rotation that the joint should rotate into.
            */
            public get targetRotation(): UnityEngine.Quaternion;
            public set targetRotation(value: UnityEngine.Quaternion);
            /** This is a Vector3. It defines the desired angular velocity that the joint should rotate into.
            */
            public get targetAngularVelocity(): UnityEngine.Vector3;
            public set targetAngularVelocity(value: UnityEngine.Vector3);
            /** Control the object's rotation with either X & YZ or Slerp Drive by itself.
            */
            public get rotationDriveMode(): UnityEngine.RotationDriveMode;
            public set rotationDriveMode(value: UnityEngine.RotationDriveMode);
            /** Definition of how the joint's rotation will behave around its local X axis. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularXDrive(): UnityEngine.JointDrive;
            public set angularXDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around its local Y and Z axes. Only used if Rotation Drive Mode is Swing & Twist.
            */
            public get angularYZDrive(): UnityEngine.JointDrive;
            public set angularYZDrive(value: UnityEngine.JointDrive);
            /** Definition of how the joint's rotation will behave around all local axes. Only used if Rotation Drive Mode is Slerp Only.
            */
            public get slerpDrive(): UnityEngine.JointDrive;
            public set slerpDrive(value: UnityEngine.JointDrive);
            /** Brings violated constraints back into alignment even when the solver fails. Projection is not a physical process and does not preserve momentum or respect collision geometry. It is best avoided if practical, but can be useful in improving simulation quality where joint separation results in unacceptable artifacts.
            */
            public get projectionMode(): UnityEngine.JointProjectionMode;
            public set projectionMode(value: UnityEngine.JointProjectionMode);
            /** Set the linear tolerance threshold for projection.
            If the joint separates by more than this distance along its locked degrees of freedom, the solver
            will move the bodies to close the distance.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionDistance(): number;
            public set projectionDistance(value: number);
            /** Set the angular tolerance threshold (in degrees) for projection.
            If the joint deviates by more than this angle around its locked angular degrees of freedom,
            the solver will move the bodies to close the angle.
            Setting a very small tolerance may result in simulation jitter or other artifacts.
            Sometimes it is not possible to project (for example when the joints form a cycle).
            */
            public get projectionAngle(): number;
            public set projectionAngle(value: number);
            /** If enabled, all Target values will be calculated in world space instead of the object's local space.
            */
            public get configuredInWorldSpace(): boolean;
            public set configuredInWorldSpace(value: boolean);
            /** Enable this property to swap the order in which the physics engine processes the Rigidbodies involved in the joint. This results in different joint motion but has no impact on Rigidbodies and anchors.
            */
            public get swapBodies(): boolean;
            public set swapBodies(value: boolean);
            public constructor ()
        }
        /** A flag enum to determine which simulation stages to run.
        */
        enum SimulationStage
        { None = 0, PrepareSimulation = 1, RunSimulation = 2, PublishSimulationResults = 4, All = 7 }
        /** An enumerator that specifies physics simulation options.
        */
        enum SimulationOption
        { None = 0, SyncTransforms = 1, IgnoreEmptyScenes = 2, All = 3 }
        /** Scene extensions to access the underlying physics scene.
        */
        class PhysicsSceneExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An extension method that returns the 3D physics Scene from the Scene.
            * @param $scene The Scene from which to return the 3D physics Scene.
            * @returns The 3D physics Scene used by the Scene. 
            */
            public static GetPhysicsScene ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.PhysicsScene
        }
        /** A pair of Colliders that belong to the bodies in the parent ContactPairHeader struct.
        */
        class ContactPair extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Instance ID of the first Collider in the ContactPair.
            */
            public get colliderInstanceID(): number;
            /** Instance ID of the second Collider in the ContactPair.
            */
            public get otherColliderInstanceID(): number;
            /** The first Collider component of the ContactPair.
            */
            public get collider(): UnityEngine.Collider;
            /** The second Collider component of the ContactPair.
            */
            public get otherCollider(): UnityEngine.Collider;
            /** The number of ContactPairPoints that this pair contains.
            */
            public get contactCount(): number;
            /** Total impulse sum of the pair.
            */
            public get impulseSum(): UnityEngine.Vector3;
            /** Whether or not this pair is equivalent to a pair reported in MonoBehaviour.OnCollisionEnter events.
            */
            public get isCollisionEnter(): boolean;
            /** Whether or not this pair is equivalent to a pair reported in MonoBehaviour.OnCollisionExit events.
            */
            public get isCollisionExit(): boolean;
            /** Whether or not this pair is equivalent to a pair reported in MonoBehaviour.OnCollisionStay events.
            */
            public get isCollisionStay(): boolean;
            public CopyToNativeArray ($buffer: Unity.Collections.NativeArray$1<UnityEngine.ContactPairPoint>) : void
            /** Gets the ContactPairPoint at the provided index of this pair.
            * @param $index The ContactPairPoint index.
            * @returns A reference or a copy of the ContactPairPoint struct at index. 
            */
            public GetContactPoint ($index: number) : $Ref<UnityEngine.ContactPairPoint>
            /** Get the index of a face that a particular contact point belongs to in this ContactPairPoint.
            * @param $contactIndex The ContactPairPoint index.
            * @returns Index of a face this contact point belongs to. 
            */
            public GetContactPointFaceIndex ($contactIndex: number) : number
        }
        /** A readonly struct describing a contact point between two Colliders.
        */
        class ContactPairPoint extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The position of the contact point between the Colliders, in world space.
            */
            public get position(): UnityEngine.Vector3;
            /** The distance between the edges of Colliders at the contact point.
            */
            public get separation(): number;
            /** Normal of the contact point.
            */
            public get normal(): UnityEngine.Vector3;
            /** The impulse applied to this contact pair to resolve the collision.
            */
            public get impulse(): UnityEngine.Vector3;
        }
        /** Creates a struct to set up parameters for batch queries: RaycastCommand, BoxcastCommand, CapsulecastCommand, SpherecastCommand.
        */
        class QueryParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** A LayerMask that is used to selectively ignore Colliders when casting a ray.
            */
            public layerMask : number
            /** Whether raycast batch query should hit multiple faces.
            */
            public hitMultipleFaces : boolean
            /** Whether queries hit Triggers by default.
            */
            public hitTriggers : UnityEngine.QueryTriggerInteraction
            /** Whether physics queries should hit back-face triangles.
            */
            public hitBackfaces : boolean
            /** Create a default QueryParameters struct.
            */
            public static get Default(): UnityEngine.QueryParameters;
            public constructor ($layerMask?: number, $hitMultipleFaces?: boolean, $hitTriggers?: UnityEngine.QueryTriggerInteraction, $hitBackfaces?: boolean)
        }
        /** Struct used to retrieve information from an Overlap batch query.
        */
        class ColliderHit extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the Collider that was hit.
            */
            public get instanceID(): number;
            /** The Collider that was hit.
            */
            public get collider(): UnityEngine.Collider;
        }
        /** Struct used to set up a raycast command to be performed asynchronously during a job.
        */
        class RaycastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask, hit multiple mesh faces, hit triggers and hit backfaces.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The starting point of the ray in world coordinates.
            */
            public get from(): UnityEngine.Vector3;
            public set from(value: UnityEngine.Vector3);
            /** The direction of the ray.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            /** The maximum distance the ray should check for collisions.
            */
            public get distance(): number;
            public set distance(value: number);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.RaycastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.RaycastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($from: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $from: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
        }
        /** Use this struct to set up a sphere cast command that is performed asynchronously during a job.
        */
        class SpherecastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask, hit triggers and hit backfaces.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The starting point of the sphere cast in world coordinates.
            */
            public get origin(): UnityEngine.Vector3;
            public set origin(value: UnityEngine.Vector3);
            /** The radius of the casting sphere.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The direction of the sphere cast.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance the sphere should check for collisions.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.SpherecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.SpherecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $origin: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
        }
        /** Use this struct to set up a capsule cast command that is performed asynchronously during a job.
        */
        class CapsulecastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask, hit triggers and hit backfaces.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The center of the sphere at the start of the capsule.
            */
            public get point1(): UnityEngine.Vector3;
            public set point1(value: UnityEngine.Vector3);
            /** The center of the sphere at the end of the capsule.
            */
            public get point2(): UnityEngine.Vector3;
            public set point2(value: UnityEngine.Vector3);
            /** The radius of the capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The direction of the capsule cast.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance the capsule cast checks for collision.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.CapsulecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.CapsulecastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $radius: number, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
        }
        /** Use this struct to set up a box cast command to be performed asynchronously during a job.
        */
        class BoxcastCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask, hit triggers and hit backfaces.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The center of the box.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** The half size of the box in each dimension.
            */
            public get halfExtents(): UnityEngine.Vector3;
            public set halfExtents(value: UnityEngine.Vector3);
            /** The rotation of the box.
            */
            public get orientation(): UnityEngine.Quaternion;
            public set orientation(value: UnityEngine.Quaternion);
            /** The direction in which to sweep the box.
            */
            public get direction(): UnityEngine.Vector3;
            public set direction(value: UnityEngine.Vector3);
            /** The maximum distance of the sweep.
            */
            public get distance(): number;
            public set distance(value: number);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.BoxcastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.BoxcastCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.RaycastHit>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $direction: UnityEngine.Vector3, $queryParameters: UnityEngine.QueryParameters, $distance?: number)
        }
        /** Struct used to set up a closest point command to be performed asynchronously during a job.
        When you use this struct to schedule a batch of closest commands, they are performed asynchronously and in parallel to each other. The results of the closest points are written to the results buffer. Because the results are written asynchronously, the results buffer cannot be accessed until the job has been completed.
        The result for a command at index N in the command buffer is stored at index N in the results buffer.
        */
        class ClosestPointCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Location you want to find the closest point to.
            */
            public get point(): UnityEngine.Vector3;
            public set point(value: UnityEngine.Vector3);
            /** The ID of the Collider that you find the closest point on.
            */
            public get colliderInstanceID(): number;
            public set colliderInstanceID(value: number);
            /** The position of the Collider.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
            /** The rotation of the Collider.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The global scale of the Collider.
            */
            public get scale(): UnityEngine.Vector3;
            public set scale(value: UnityEngine.Vector3);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.ClosestPointCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.Vector3>, $minCommandsPerJob: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($point: UnityEngine.Vector3, $colliderInstanceID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3)
            public constructor ($point: UnityEngine.Vector3, $collider: UnityEngine.Collider, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $scale: UnityEngine.Vector3)
        }
        /** Struct used to setup an overlap sphere command to be performed asynchronously during a job.
        */
        class OverlapSphereCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask or hit triggers.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The center of the sphere.
            */
            public get point(): UnityEngine.Vector3;
            public set point(value: UnityEngine.Vector3);
            /** The radius of the sphere.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The physics scene the command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.OverlapSphereCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.ColliderHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($point: UnityEngine.Vector3, $radius: number, $queryParameters: UnityEngine.QueryParameters)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $point: UnityEngine.Vector3, $radius: number, $queryParameters: UnityEngine.QueryParameters)
        }
        /** Struct used to set up an overlap box command to be performed asynchronously during a job.
        */
        class OverlapBoxCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask or hit triggers.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The center of the box.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Half of the size of the box in each dimension.
            */
            public get halfExtents(): UnityEngine.Vector3;
            public set halfExtents(value: UnityEngine.Vector3);
            /** The orientation of the box.
            */
            public get orientation(): UnityEngine.Quaternion;
            public set orientation(value: UnityEngine.Quaternion);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.OverlapBoxCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.ColliderHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $queryParameters: UnityEngine.QueryParameters)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $center: UnityEngine.Vector3, $halfExtents: UnityEngine.Vector3, $orientation: UnityEngine.Quaternion, $queryParameters: UnityEngine.QueryParameters)
        }
        /** Struct used to set up an overlap capsule command to be performed asynchronously during a job.
        */
        class OverlapCapsuleCommand extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Structure for specifying additional parameters for a batch query such as layer mask or hit triggers.
            */
            public queryParameters : UnityEngine.QueryParameters
            /** The center of the sphere at the start of the capsule.
            */
            public get point0(): UnityEngine.Vector3;
            public set point0(value: UnityEngine.Vector3);
            /** The center of the sphere at the end of the capsule.
            */
            public get point1(): UnityEngine.Vector3;
            public set point1(value: UnityEngine.Vector3);
            /** The radius of the capsule.
            */
            public get radius(): number;
            public set radius(value: number);
            /** The physics scene this command is run in.
            */
            public get physicsScene(): UnityEngine.PhysicsScene;
            public set physicsScene(value: UnityEngine.PhysicsScene);
            public static ScheduleBatch ($commands: Unity.Collections.NativeArray$1<UnityEngine.OverlapCapsuleCommand>, $results: Unity.Collections.NativeArray$1<UnityEngine.ColliderHit>, $minCommandsPerJob: number, $maxHits: number, $dependsOn?: Unity.Jobs.JobHandle) : Unity.Jobs.JobHandle
            public constructor ($point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $queryParameters: UnityEngine.QueryParameters)
            public constructor ($physicsScene: UnityEngine.PhysicsScene, $point0: UnityEngine.Vector3, $point1: UnityEngine.Vector3, $radius: number, $queryParameters: UnityEngine.QueryParameters)
        }
        /** Scaling mode to draw textures with.
        */
        enum ScaleMode
        { StretchToFill = 0, ScaleAndCrop = 1, ScaleToFit = 2 }
        /** Types of modifier key that can be active during a keystroke event.
        */
        enum EventModifiers
        { None = 0, Shift = 1, Control = 2, Alt = 4, Command = 8, Numeric = 16, CapsLock = 32, FunctionKey = 64 }
        /** A UnityGUI event.
        */
        class Event extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Options for specifying the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed. You can combine states using bitwise OR operators.
        */
        enum PenStatus
        { None = 0, Contact = 1, Barrel = 2, Inverted = 4, Eraser = 8 }
        /** Script interface for.
        */
        class Font extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Font Style applied to GUI Texts, Text Meshes or GUIStyles.
        */
        enum FontStyle
        { Normal = 0, Bold = 1, Italic = 2, BoldAndItalic = 3 }
        /** Where the anchor of the text is placed.
        */
        enum TextAnchor
        { UpperLeft = 0, UpperCenter = 1, UpperRight = 2, MiddleLeft = 3, MiddleCenter = 4, MiddleRight = 5, LowerLeft = 6, LowerCenter = 7, LowerRight = 8 }
        /** Controls IME input.
        */
        enum IMECompositionMode
        { Auto = 0, On = 1, Off = 2 }
        /** Structure describing the status of a finger touching the screen.
        */
        class Touch extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Runtime.Serialization {
        interface ISerializable
        {
        }
        interface IDeserializationCallback
        {
        }
    }
    namespace UnityEngine.SortingLayer {
        interface LayerCallback
        { 
        (layer: UnityEngine.SortingLayer) : void; 
        Invoke?: (layer: UnityEngine.SortingLayer) => void;
        }
        var LayerCallback: { new (func: (layer: UnityEngine.SortingLayer) => void): LayerCallback; }
    }
    namespace System.Collections.Generic {
        interface IEnumerable$1<T> extends System.Collections.IEnumerable
        {
        }
        class List$1<T> extends System.Object implements System.Collections.Generic.IReadOnlyList$1<T>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<T>, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.IList, System.Collections.Generic.ICollection$1<T>
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<T>
        }
        interface IReadOnlyList$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<T>
        {
        }
        interface IReadOnlyCollection$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable
        {
        }
        interface IList$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<T>
        {
        }
        interface ICollection$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable
        {
        }
        interface IEnumerator$1<T> extends System.Collections.IEnumerator, System.IDisposable
        {
        }
        class HashSet$1<T> extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<T>, System.Collections.Generic.ISet$1<T>, System.Collections.Generic.ICollection$1<T>
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<T>
        }
        interface ISet$1<T> extends System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<T>
        {
        }
        class Dictionary$2<TKey, TValue> extends System.Object implements System.Runtime.Serialization.IDeserializationCallback, System.Collections.Generic.IReadOnlyDictionary$2<TKey, TValue>, System.Collections.Generic.IDictionary$2<TKey, TValue>, System.Runtime.Serialization.ISerializable, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        }
        interface IReadOnlyDictionary$2<TKey, TValue> extends System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
        }
        class KeyValuePair$2<TKey, TValue> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        interface IDictionary$2<TKey, TValue> extends System.Collections.Generic.IEnumerable$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<System.Collections.Generic.KeyValuePair$2<TKey, TValue>>
        {
        }
    }
    namespace System.Collections {
        interface IEnumerable
        {
        }
        interface IStructuralComparable
        {
        }
        interface IStructuralEquatable
        {
        }
        interface ICollection extends System.Collections.IEnumerable
        {
        }
        interface IList extends System.Collections.ICollection, System.Collections.IEnumerable
        {
        }
        interface IEnumerator
        {
        }
        interface IDictionary extends System.Collections.ICollection, System.Collections.IEnumerable
        {
        }
    }
    namespace UnityEngine.Application {
        interface AdvertisingIdentifierCallback
        { 
        (advertisingId: string, trackingEnabled: boolean, errorMsg: string) : void; 
        Invoke?: (advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void;
        }
        var AdvertisingIdentifierCallback: { new (func: (advertisingId: string, trackingEnabled: boolean, errorMsg: string) => void): AdvertisingIdentifierCallback; }
        interface LowMemoryCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var LowMemoryCallback: { new (func: () => void): LowMemoryCallback; }
        interface MemoryUsageChangedCallback
        { 
        (usage: $Ref<UnityEngine.ApplicationMemoryUsageChange>) : void; 
        Invoke?: (usage: $Ref<UnityEngine.ApplicationMemoryUsageChange>) => void;
        }
        var MemoryUsageChangedCallback: { new (func: (usage: $Ref<UnityEngine.ApplicationMemoryUsageChange>) => void): MemoryUsageChangedCallback; }
        interface LogCallback
        { 
        (condition: string, stackTrace: string, type: UnityEngine.LogType) : void; 
        Invoke?: (condition: string, stackTrace: string, type: UnityEngine.LogType) => void;
        }
        var LogCallback: { new (func: (condition: string, stackTrace: string, type: UnityEngine.LogType) => void): LogCallback; }
    }
    namespace UnityEngine.Events {
        /** Zero argument delegate used by UnityEvents.
        */
        interface UnityAction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var UnityAction: { new (func: () => void): UnityAction; }
        /** Abstract base class for UnityEvents.
        */
        class UnityEventBase extends System.Object implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** Implement this method to receive a callback before Unity serializes your object.
            */
            public OnBeforeSerialize () : void
            /** Implement this method to receive a callback after Unity deserializes your object.
            */
            public OnAfterDeserialize () : void
        }
        /** A zero argument persistent callback that can be saved with the Scene.
        */
        class UnityEvent extends UnityEngine.Events.UnityEventBase implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** A zero argument persistent callback that can be saved with the Scene.
        */
        interface UnityEvent {
            GetAwaiter () : UnityEngine.Awaitable.Awaiter;
        }
        class UnityEvent$1<T0> extends UnityEngine.Events.UnityEventBase implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        class UnityEvent$2<T0, T1> extends UnityEngine.Events.UnityEventBase implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        class UnityEvent$3<T0, T1, T2> extends UnityEngine.Events.UnityEventBase implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        class UnityEvent$4<T0, T1, T2, T3> extends UnityEngine.Events.UnityEventBase implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        interface UnityAction$1<T0>
        { 
        (arg0: T0) : void; 
        Invoke?: (arg0: T0) => void;
        }
    }
    namespace System.Threading {
        class CancellationToken extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Camera {
        interface CameraCallback
        { 
        (cam: UnityEngine.Camera) : void; 
        Invoke?: (cam: UnityEngine.Camera) => void;
        }
        var CameraCallback: { new (func: (cam: UnityEngine.Camera) => void): CameraCallback; }
        enum GateFitMode
        { Vertical = 1, Horizontal = 2, Fill = 3, Overscan = 4, None = 0 }
        enum MonoOrStereoscopicEye
        { Left = 0, Right = 1, Mono = 2 }
        class GateFitParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum StereoscopicEye
        { Left = 0, Right = 1 }
        enum SceneViewFilterMode
        { Off = 0, ShowFiltered = 1 }
        class RenderRequest extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Rendering {
        /** Opaque object sorting mode of a Camera.
        */
        enum OpaqueSortMode
        { Default = 0, FrontToBack = 1, NoDistanceSort = 2 }
        /** Defines a place in camera's rendering to attach Rendering.CommandBuffer objects to.
        */
        enum CameraEvent
        { BeforeDepthTexture = 0, AfterDepthTexture = 1, BeforeDepthNormalsTexture = 2, AfterDepthNormalsTexture = 3, BeforeGBuffer = 4, AfterGBuffer = 5, BeforeLighting = 6, AfterLighting = 7, BeforeFinalPass = 8, AfterFinalPass = 9, BeforeForwardOpaque = 10, AfterForwardOpaque = 11, BeforeImageEffectsOpaque = 12, AfterImageEffectsOpaque = 13, BeforeSkybox = 14, AfterSkybox = 15, BeforeForwardAlpha = 16, AfterForwardAlpha = 17, BeforeImageEffects = 18, AfterImageEffects = 19, AfterEverything = 20, BeforeReflections = 21, AfterReflections = 22, BeforeHaloAndLensFlares = 23, AfterHaloAndLensFlares = 24 }
        /** List of graphics commands to execute.
        */
        class CommandBuffer extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** Describes the desired characteristics with respect to prioritisation and load balancing of the queue that a command buffer being submitted via Graphics.ExecuteCommandBufferAsync or [[ScriptableRenderContext.ExecuteCommandBufferAsync] should be sent to.
        */
        enum ComputeQueueType
        { Default = 0, Background = 1, Urgent = 2 }
        /** Parameters that configure a culling operation in the Scriptable Render Pipeline.
        */
        class ScriptableCullingParameters extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.ScriptableCullingParameters>
        {
            protected [__keep_incompatibility]: never;
        }
        enum ReflectionProbeType
        { Cube = 0, Card = 1 }
        /** Values for ReflectionProbe.clearFlags, determining what to clear when rendering a ReflectionProbe.
        */
        enum ReflectionProbeClearFlags
        { Skybox = 1, SolidColor = 2 }
        /** Reflection probe's update mode.
        */
        enum ReflectionProbeMode
        { Baked = 0, Realtime = 1, Custom = 2 }
        /** An enum describing the way a real-time reflection probe refreshes in the Player.
        */
        enum ReflectionProbeRefreshMode
        { OnAwake = 0, EveryFrame = 1, ViaScripting = 2 }
        /** When a probe's ReflectionProbe.refreshMode is set to ReflectionProbeRefreshMode.EveryFrame, this enum specify whether or not Unity should update the probe's cubemap over several frames or update the whole cubemap in one frame.
        Updating a probe's cubemap is a costly operation. Unity needs to render the entire Scene for each face of the cubemap, as well as perform special blurring in order to get glossy reflections. The impact on frame rate can be significant. Time-slicing helps maintaning a more constant frame rate during these updates by performing the rendering over several frames.
        */
        enum ReflectionProbeTimeSlicingMode
        { AllFacesAtOnce = 0, IndividualFaces = 1, NoTimeSlicing = 2 }
        /** Spherical harmonics up to the second order (3 bands, 9 coefficients).
        */
        class SphericalHarmonicsL2 extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.SphericalHarmonicsL2>
        {
            protected [__keep_incompatibility]: never;
        }
        /** An enum that represents.
        */
        enum GraphicsTier
        { Tier1 = 0, Tier2 = 1, Tier3 = 2 }
        /** Specifies the OpenGL ES version.
        */
        enum OpenGLESVersion
        { None = 0, OpenGLES20 = 1, OpenGLES30 = 2, OpenGLES31 = 3, OpenGLES31AEP = 4, OpenGLES32 = 5 }
        /** Represents the view on a single texture resource that is uploaded to the graphics device.
        */
        class GraphicsTexture extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** Used to manage synchronisation between tasks on async compute queues and the graphics queue.
        */
        class GraphicsFence extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** The stages of the draw call processing on the GPU.
        */
        enum SynchronisationStage
        { VertexProcessing = 0, PixelProcessing = 1 }
        /** The type of GraphicFence.
        */
        enum GraphicsFenceType
        { AsyncQueueSynchronisation = 0, CPUSynchronisation = 1 }
        /** Describes the various stages of GPU processing against which the GraphicsFence can be set and waited against.
        */
        enum SynchronisationStageFlags
        { VertexProcessing = 1, PixelProcessing = 2, ComputeProcessing = 4, AllGPUOperations = 7 }
        /** How shadows are cast from this object.
        */
        enum ShadowCastingMode
        { Off = 0, On = 1, TwoSided = 2, ShadowsOnly = 3 }
        /** Light probe interpolation type.
        */
        enum LightProbeUsage
        { Off = 0, BlendProbes = 1, UseProxyVolume = 2, CustomProvided = 4 }
        /** This functionality is deprecated, and should no longer be used. Please use GraphicsFence.
        */
        class GPUFence extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** This enum describes what should be done on the render target when it is activated (loaded).
        */
        enum RenderBufferLoadAction
        { Load = 0, Clear = 1, DontCare = 2 }
        /** This enum describes what should be done on the render target when the GPU is done rendering into it.
        */
        enum RenderBufferStoreAction
        { Store = 0, Resolve = 1, StoreAndResolve = 2, DontCare = 3 }
        /** Reflection Probe usage.
        */
        enum ReflectionProbeUsage
        { Off = 0, BlendProbes = 1, BlendProbesAndSkybox = 2, Simple = 3 }
        /** An asset that produces a specific IRenderPipeline.
        */
        class RenderPipelineAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
        /** Format of the mesh index buffer data.
        */
        enum IndexFormat
        { UInt16 = 0, UInt32 = 1 }
        /** Information about a single VertexAttribute of a Mesh vertex.
        */
        class VertexAttributeDescriptor extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.VertexAttributeDescriptor>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Possible attribute types that describe a vertex in a Mesh.
        */
        enum VertexAttribute
        { Position = 0, Normal = 1, Tangent = 2, Color = 3, TexCoord0 = 4, TexCoord1 = 5, TexCoord2 = 6, TexCoord3 = 7, TexCoord4 = 8, TexCoord5 = 9, TexCoord6 = 10, TexCoord7 = 11, BlendWeight = 12, BlendIndices = 13 }
        /** Data type of a VertexAttribute.
        */
        enum VertexAttributeFormat
        { Float32 = 0, Float16 = 1, UNorm8 = 2, SNorm8 = 3, UNorm16 = 4, SNorm16 = 5, UInt8 = 6, SInt8 = 7, UInt16 = 8, SInt16 = 9, UInt32 = 10, SInt32 = 11 }
        /** Contains information about a single sub-mesh of a Mesh.
        */
        class SubMeshDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Mesh data update flags.
        */
        enum MeshUpdateFlags
        { Default = 0, DontValidateIndices = 1, DontResetBoneBounds = 2, DontNotifyMeshUsers = 4, DontRecalculateBounds = 8 }
        /** Determines the data that Unity returns when you call Mesh.GetBlendShapeBuffer.
        */
        enum BlendShapeBufferLayout
        { PerShape = 0, PerVertex = 1 }
        /** Specifies how Unity builds the acceleration structure on the GPU.
        */
        enum RayTracingAccelerationStructureBuildFlags
        { None = 0, PreferFastTrace = 1, PreferFastBuild = 2, MinimizeMemory = 4 }
        /** ReflectionProbeBlendInfo contains information required for blending probes.
        */
        class ReflectionProbeBlendInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum ShaderHardwareTier
        { Tier1 = 0, Tier2 = 1, Tier3 = 2 }
        /** Represents a global shader keyword.
        */
        class GlobalKeyword extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents the local keyword space of a Shader or ComputeShader.
        */
        class LocalKeywordSpace extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.LocalKeywordSpace>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Shader tag ids are used to refer to various names in shaders.
        */
        class ShaderTagId extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.ShaderTagId>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Types of data that you can encapsulate within a render texture.
        */
        enum RenderTextureSubElement
        { Color = 0, Depth = 1, Stencil = 2, Default = 3 }
        /** A data structure used to represent the geometry in the Scene for GPU ray tracing.
        */
        class RayTracingAccelerationStructure extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** Type of a given shader property.
        */
        enum ShaderPropertyType
        { Color = 0, Vector = 1, Float = 2, Range = 3, Texture = 4, Int = 5 }
        /** Flags that control how a shader property behaves.
        */
        enum ShaderPropertyFlags
        { None = 0, HideInInspector = 1, PerRendererData = 2, NoScaleOffset = 4, Normal = 8, HDR = 16, Gamma = 32, NonModifiableTextureData = 64, MainTexture = 128, MainColor = 256 }
        /** Texture "dimension" (type).
        */
        enum TextureDimension
        { Unknown = -1, None = 0, Any = 1, Tex2D = 2, Tex3D = 3, Cube = 4, Tex2DArray = 5, CubeArray = 6 }
        /** Ambient lighting mode.
        */
        enum AmbientMode
        { Skybox = 0, Trilight = 1, Flat = 3, Custom = 4 }
        /** Default reflection mode.
        */
        enum DefaultReflectionMode
        { Skybox = 0, Custom = 1 }
        /** Represents a shader keyword declared in a shader source file.
        */
        class LocalKeyword extends System.ValueType implements System.IEquatable$1<UnityEngine.Rendering.LocalKeyword>
        {
            protected [__keep_incompatibility]: never;
        }
        /** Shadow resolution options for a Light.
        */
        enum LightShadowResolution
        { FromQualitySettings = -1, Low = 0, Medium = 1, High = 2, VeryHigh = 3 }
        /** Defines a place in light's rendering to attach Rendering.CommandBuffer objects to.
        */
        enum LightEvent
        { BeforeShadowMap = 0, AfterShadowMap = 1, BeforeScreenspaceMask = 2, AfterScreenspaceMask = 3, BeforeShadowMapPass = 4, AfterShadowMapPass = 5 }
        /** Allows precise control over which shadow map passes to execute Rendering.CommandBuffer objects attached using Light.AddCommandBuffer.
        */
        enum ShadowMapPass
        { PointlightPositiveX = 1, PointlightNegativeX = 2, PointlightPositiveY = 4, PointlightNegativeY = 8, PointlightPositiveZ = 16, PointlightNegativeZ = 32, DirectionalCascade0 = 64, DirectionalCascade1 = 128, DirectionalCascade2 = 256, DirectionalCascade3 = 512, Spotlight = 1024, AreaLight = 2048, Pointlight = 63, Directional = 960, All = 2047 }
        /** Used by CommandBuffer.SetShadowSamplingMode.
        */
        enum ShadowSamplingMode
        { CompareDepths = 0, RawDepth = 1, None = 2 }
        /** Graphics device API type.
        */
        enum GraphicsDeviceType
        { OpenGL2 = 0, Direct3D9 = 1, Direct3D11 = 2, PlayStation3 = 3, Null = 4, Xbox360 = 6, OpenGLES2 = 8, OpenGLES3 = 11, PlayStationVita = 12, PlayStation4 = 13, XboxOne = 14, PlayStationMobile = 15, Metal = 16, OpenGLCore = 17, Direct3D12 = 18, N3DS = 19, Vulkan = 21, Switch = 22, XboxOneD3D12 = 23, GameCoreXboxOne = 24, GameCoreScarlett = -1, GameCoreXboxSeries = 25, PlayStation5 = 26, PlayStation5NGGC = 27, WebGPU = 28 }
        /** Options for the application's actual rendering threading mode.
        */
        enum RenderingThreadingMode
        { Direct = 0, SingleThreaded = 1, MultiThreaded = 2, LegacyJobified = 3, NativeGraphicsJobs = 4, NativeGraphicsJobsWithoutRenderThread = 5, NativeGraphicsJobsSplitThreading = 6 }
        /** Capabilities of the foveated rendering implementation.
        */
        enum FoveatedRenderingCaps
        { None = 0, FoveationImage = 1, NonUniformRaster = 2, ModeChangeOnlyBeforeRenderTargetSet = 4 }
        /** Support for various Graphics.CopyTexture cases.
        */
        enum CopyTextureSupport
        { None = 0, Basic = 1, Copy3D = 2, DifferentTypes = 4, TextureToRT = 8, RTToTexture = 16 }
    }
    namespace UnityEngine.SceneManagement {
        /** Run-time data structure for *.unity file.
        */
        class Scene extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Run-time data structure for *.unity file.
        */
        interface Scene {
            /** An extension method that returns the 3D physics Scene from the Scene.
            * @param $scene The Scene from which to return the 3D physics Scene.
            * @returns The 3D physics Scene used by the Scene. 
            */
            GetPhysicsScene () : UnityEngine.PhysicsScene;
        }
    }
    namespace UnityEngine.CullingGroup {
        interface StateChanged
        { 
        (sphere: UnityEngine.CullingGroupEvent) : void; 
        Invoke?: (sphere: UnityEngine.CullingGroupEvent) => void;
        }
        var StateChanged: { new (func: (sphere: UnityEngine.CullingGroupEvent) => void): StateChanged; }
    }
    namespace UnityEngine.ReflectionProbe {
        enum ReflectionProbeEvent
        { ReflectionProbeAdded = 0, ReflectionProbeRemoved = 1 }
    }
    namespace System.Runtime.InteropServices {
        interface _Exception
        {
        }
        interface _Attribute
        {
        }
        interface _MemberInfo
        {
        }
        interface _Type
        {
        }
        interface _Assembly
        {
        }
    }
    namespace UnityEngine.Debug {
        class StartupLog extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.BoundsInt {
        class PositionEnumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.Vector3Int>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.RectInt {
        class PositionEnumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.Vector2Int>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.LightingSettings {
        enum Lightmapper
        { Enlighten = 0, ProgressiveCPU = 1, ProgressiveGPU = 2 }
        enum Sampling
        { Auto = 0, Fixed = 1 }
        enum FilterMode
        { None = 0, Auto = 1, Advanced = 2 }
        enum DenoiserType
        { None = 0, Optix = 1, OpenImage = 2, RadeonPro = 3 }
        enum FilterType
        { Gaussian = 0, ATrous = 1, None = 2 }
    }
    namespace UnityEngine.Display {
        interface DisplaysUpdatedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var DisplaysUpdatedDelegate: { new (func: () => void): DisplaysUpdatedDelegate; }
    }
    namespace Unity.Jobs {
        /** A handle to a job, which uniquely identifies a job scheduled in the job system.
        */
        class JobHandle extends System.ValueType implements System.IEquatable$1<Unity.Jobs.JobHandle>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IJobParallelFor
        {
        }
    }
    namespace Unity.Collections {
        class NativeArray$1<T> extends System.ValueType implements System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.IDisposable, System.IEquatable$1<Unity.Collections.NativeArray$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<T>
        }
        /** Used to specify allocation type for NativeArray.
        */
        enum Allocator
        { Invalid = 0, None = 1, Temp = 2, TempJob = 3, Persistent = 4, AudioKernel = 5, Domain = 6, FirstUserIndex = 64 }
        class NativeSlice$1<T> extends System.ValueType implements System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable, System.IEquatable$1<Unity.Collections.NativeSlice$1<T>>
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<T>
        }
    }
    namespace UnityEngine.Experimental.Rendering {
        /** Use this format to create either Textures or RenderTextures from scripts.
        */
        enum GraphicsFormat
        { None = 0, R8_SRGB = 1, R8G8_SRGB = 2, R8G8B8_SRGB = 3, R8G8B8A8_SRGB = 4, R8_UNorm = 5, R8G8_UNorm = 6, R8G8B8_UNorm = 7, R8G8B8A8_UNorm = 8, R8_SNorm = 9, R8G8_SNorm = 10, R8G8B8_SNorm = 11, R8G8B8A8_SNorm = 12, R8_UInt = 13, R8G8_UInt = 14, R8G8B8_UInt = 15, R8G8B8A8_UInt = 16, R8_SInt = 17, R8G8_SInt = 18, R8G8B8_SInt = 19, R8G8B8A8_SInt = 20, R16_UNorm = 21, R16G16_UNorm = 22, R16G16B16_UNorm = 23, R16G16B16A16_UNorm = 24, R16_SNorm = 25, R16G16_SNorm = 26, R16G16B16_SNorm = 27, R16G16B16A16_SNorm = 28, R16_UInt = 29, R16G16_UInt = 30, R16G16B16_UInt = 31, R16G16B16A16_UInt = 32, R16_SInt = 33, R16G16_SInt = 34, R16G16B16_SInt = 35, R16G16B16A16_SInt = 36, R32_UInt = 37, R32G32_UInt = 38, R32G32B32_UInt = 39, R32G32B32A32_UInt = 40, R32_SInt = 41, R32G32_SInt = 42, R32G32B32_SInt = 43, R32G32B32A32_SInt = 44, R16_SFloat = 45, R16G16_SFloat = 46, R16G16B16_SFloat = 47, R16G16B16A16_SFloat = 48, R32_SFloat = 49, R32G32_SFloat = 50, R32G32B32_SFloat = 51, R32G32B32A32_SFloat = 52, B8G8R8_SRGB = 56, B8G8R8A8_SRGB = 57, B8G8R8_UNorm = 58, B8G8R8A8_UNorm = 59, B8G8R8_SNorm = 60, B8G8R8A8_SNorm = 61, B8G8R8_UInt = 62, B8G8R8A8_UInt = 63, B8G8R8_SInt = 64, B8G8R8A8_SInt = 65, R4G4B4A4_UNormPack16 = 66, B4G4R4A4_UNormPack16 = 67, R5G6B5_UNormPack16 = 68, B5G6R5_UNormPack16 = 69, R5G5B5A1_UNormPack16 = 70, B5G5R5A1_UNormPack16 = 71, A1R5G5B5_UNormPack16 = 72, E5B9G9R9_UFloatPack32 = 73, B10G11R11_UFloatPack32 = 74, A2B10G10R10_UNormPack32 = 75, A2B10G10R10_UIntPack32 = 76, A2B10G10R10_SIntPack32 = 77, A2R10G10B10_UNormPack32 = 78, A2R10G10B10_UIntPack32 = 79, A2R10G10B10_SIntPack32 = 80, A2R10G10B10_XRSRGBPack32 = 81, A2R10G10B10_XRUNormPack32 = 82, R10G10B10_XRSRGBPack32 = 83, R10G10B10_XRUNormPack32 = 84, A10R10G10B10_XRSRGBPack32 = 85, A10R10G10B10_XRUNormPack32 = 86, D16_UNorm = 90, D24_UNorm = 91, D24_UNorm_S8_UInt = 92, D32_SFloat = 93, D32_SFloat_S8_UInt = 94, S8_UInt = 95, RGB_DXT1_SRGB = 96, RGBA_DXT1_SRGB = 96, RGB_DXT1_UNorm = 97, RGBA_DXT1_UNorm = 97, RGBA_DXT3_SRGB = 98, RGBA_DXT3_UNorm = 99, RGBA_DXT5_SRGB = 100, RGBA_DXT5_UNorm = 101, R_BC4_UNorm = 102, R_BC4_SNorm = 103, RG_BC5_UNorm = 104, RG_BC5_SNorm = 105, RGB_BC6H_UFloat = 106, RGB_BC6H_SFloat = 107, RGBA_BC7_SRGB = 108, RGBA_BC7_UNorm = 109, RGB_PVRTC_2Bpp_SRGB = 110, RGB_PVRTC_2Bpp_UNorm = 111, RGB_PVRTC_4Bpp_SRGB = 112, RGB_PVRTC_4Bpp_UNorm = 113, RGBA_PVRTC_2Bpp_SRGB = 114, RGBA_PVRTC_2Bpp_UNorm = 115, RGBA_PVRTC_4Bpp_SRGB = 116, RGBA_PVRTC_4Bpp_UNorm = 117, RGB_ETC_UNorm = 118, RGB_ETC2_SRGB = 119, RGB_ETC2_UNorm = 120, RGB_A1_ETC2_SRGB = 121, RGB_A1_ETC2_UNorm = 122, RGBA_ETC2_SRGB = 123, RGBA_ETC2_UNorm = 124, R_EAC_UNorm = 125, R_EAC_SNorm = 126, RG_EAC_UNorm = 127, RG_EAC_SNorm = 128, RGBA_ASTC4X4_SRGB = 129, RGBA_ASTC4X4_UNorm = 130, RGBA_ASTC5X5_SRGB = 131, RGBA_ASTC5X5_UNorm = 132, RGBA_ASTC6X6_SRGB = 133, RGBA_ASTC6X6_UNorm = 134, RGBA_ASTC8X8_SRGB = 135, RGBA_ASTC8X8_UNorm = 136, RGBA_ASTC10X10_SRGB = 137, RGBA_ASTC10X10_UNorm = 138, RGBA_ASTC12X12_SRGB = 139, RGBA_ASTC12X12_UNorm = 140, YUV2 = 141, DepthAuto = 142, ShadowAuto = 143, VideoAuto = 144, RGBA_ASTC4X4_UFloat = 145, RGBA_ASTC5X5_UFloat = 146, RGBA_ASTC6X6_UFloat = 147, RGBA_ASTC8X8_UFloat = 148, RGBA_ASTC10X10_UFloat = 149, RGBA_ASTC12X12_UFloat = 150, D16_UNorm_S8_UInt = 151 }
        /** Indicates how a Renderer is updated.
        */
        enum RayTracingMode
        { Off = 0, Static = 1, DynamicTransform = 2, DynamicGeometry = 3 }
        /** 
        Use a default format to create either Textures or RenderTextures from scripts based on platform specific capability.
        */
        enum DefaultFormat
        { LDR = 0, HDR = 1, DepthStencil = 2, Shadow = 3, Video = 4 }
        enum TextureCreationFlags
        { None = 0, MipChain = 1, DontInitializePixels = 4, Crunch = 64, DontUploadUponCreate = 1024, IgnoreMipmapLimit = 2048 }
        /** Obsolete. Use the GraphicsFormatUsage enum instead.
        */
        enum FormatUsage
        { Sample = 0, Linear = 1, Sparse = 2, Render = 4, Blend = 5, GetPixels = 6, SetPixels = 7, SetPixels32 = 8, ReadPixels = 9, LoadStore = 10, MSAA2x = 11, MSAA4x = 12, MSAA8x = 13, StencilSampling = 16 }
        /** Use this format usages to figure out the capabilities of specific GraphicsFormat
        */
        enum GraphicsFormatUsage
        { None = 0, Sample = 1, Linear = 2, Sparse = 4, Render = 16, Blend = 32, GetPixels = 64, SetPixels = 128, SetPixels32 = 256, ReadPixels = 512, LoadStore = 1024, MSAA2x = 2048, MSAA4x = 4096, MSAA8x = 8192, StencilSampling = 65536 }
    }
    namespace UnityEngine.GraphicsBuffer {
        enum Target
        { Vertex = 1, Index = 2, CopySource = 4, CopyDestination = 8, Structured = 16, Raw = 32, Append = 64, Counter = 128, IndirectArguments = 256, Constant = 512 }
        enum UsageFlags
        { None = 0, LockBufferForWrite = 1 }
    }
    namespace UnityEngine.Mesh {
        class MeshDataArray extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.LightProbeProxyVolume {
        enum BoundingBoxMode
        { AutomaticLocal = 0, AutomaticWorld = 1, Custom = 2 }
        enum ResolutionMode
        { Automatic = 0, Custom = 1 }
        enum ProbePositionMode
        { CellCorner = 0, CellCenter = 1 }
        enum RefreshMode
        { Automatic = 0, EveryFrame = 1, ViaScripting = 2 }
        enum QualityMode
        { Low = 0, Normal = 1 }
        enum DataFormat
        { HalfFloat = 0, Float = 1 }
    }
    namespace UnityEngine.iOS {
        /** ActivityIndicator Style (iOS Specific).
        */
        enum ActivityIndicatorStyle
        { DontShow = -1, WhiteLarge = 0, White = 1, Gray = 2 }
    }
    namespace UnityEngine.ADBannerView {
        interface BannerWasClickedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var BannerWasClickedDelegate: { new (func: () => void): BannerWasClickedDelegate; }
        interface BannerWasLoadedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var BannerWasLoadedDelegate: { new (func: () => void): BannerWasLoadedDelegate; }
        enum Layout
        { Top = 0, Bottom = 1, TopLeft = 0, TopRight = 4, TopCenter = 8, BottomLeft = 1, BottomRight = 5, BottomCenter = 9, CenterLeft = 2, CenterRight = 6, Center = 10, Manual = -1 }
        enum Type
        { Banner = 0, MediumRect = 1 }
    }
    namespace UnityEngine.ADInterstitialAd {
        interface InterstitialWasLoadedDelegate
        { 
        () : void; 
        Invoke?: () => void;
        }
        var InterstitialWasLoadedDelegate: { new (func: () => void): InterstitialWasLoadedDelegate; }
    }
    namespace UnityEngine.Random {
        class State extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Reflection {
        class MemberInfo extends System.Object implements System.Runtime.InteropServices._MemberInfo, System.Reflection.ICustomAttributeProvider
        {
            protected [__keep_incompatibility]: never;
        }
        interface ICustomAttributeProvider
        {
        }
        interface IReflect
        {
        }
        class Assembly extends System.Object implements System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider, System.Security.IEvidenceFactory, System.Runtime.InteropServices._Assembly
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Awaitable {
        class Awaiter extends System.ValueType implements System.Runtime.CompilerServices.INotifyCompletion
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Runtime.CompilerServices {
        interface INotifyCompletion
        {
        }
        interface ITuple
        {
        }
    }
    namespace UnityEngine.Awaitable$1 {
        class Awaiter<T> extends System.ValueType implements System.Runtime.CompilerServices.INotifyCompletion
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.Scripting {
        /** PreserveAttribute prevents byte code stripping from removing a class, method, field, or property.
        */
        class PreserveAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace System.Security {
        interface IEvidenceFactory
        {
        }
    }
    namespace UnityEngine.ShaderVariantCollection {
        class ShaderVariant extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace Unity.IntegerTime {
        /** Data type that represents time as an integer count of a rational number.
        */
        class RationalTime extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.TouchScreenKeyboard {
        enum Status
        { Visible = 0, Done = 1, Canceled = 2, LostFocus = 3 }
    }
    namespace UnityEngine.RectTransform {
        interface ReapplyDrivenProperties
        { 
        (driven: UnityEngine.RectTransform) : void; 
        Invoke?: (driven: UnityEngine.RectTransform) => void;
        }
        var ReapplyDrivenProperties: { new (func: (driven: UnityEngine.RectTransform) => void): ReapplyDrivenProperties; }
        enum Edge
        { Left = 0, Right = 1, Top = 2, Bottom = 3 }
        enum Axis
        { Horizontal = 0, Vertical = 1 }
    }
    namespace UnityEngine.Physics {
        interface ContactEventDelegate
        { 
        (scene: UnityEngine.PhysicsScene, headerArray: Unity.Collections.NativeArray$1.ReadOnly<UnityEngine.ContactPairHeader>) : void; 
        Invoke?: (scene: UnityEngine.PhysicsScene, headerArray: Unity.Collections.NativeArray$1.ReadOnly<UnityEngine.ContactPairHeader>) => void;
        }
        var ContactEventDelegate: { new (func: (scene: UnityEngine.PhysicsScene, headerArray: Unity.Collections.NativeArray$1.ReadOnly<UnityEngine.ContactPairHeader>) => void): ContactEventDelegate; }
    }
    namespace Unity.Collections.NativeArray$1 {
        class ReadOnly<T> extends System.ValueType implements System.Collections.Generic.IEnumerable$1<T>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            public [Symbol.iterator]() : IterableIterator<T>
        }
    }
    namespace UnityEngine.LowLevelPhysics {
        /** Holds the basic information of a geometric shape and its type.
        */
        class GeometryHolder extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements {
        /** 
        Options to enable or disable filters for the dynamic atlas.
        */
        enum DynamicAtlasFilters
        { None = 0, Readability = 1, Size = 2, Format = 4, ColorSpace = 8, FilterMode = 16 }
        /** 
        Delegate that can be used as a custom filter for the dynamic atlas.
        * @param $texture The texture to filter.
        * @param $filtersToApply The filters the dynamic atlas applies when the delegate returns <c>true<c>.
        by default, this value is equal to <see cref="DynamicAtlasSettings.activeFilters" >.
        * @returns 
        When false, the texture cannot be added to the atlas. When true the texture is added to the atlas,
        as long as it is not excluded by filtersToApply.
        */
        interface DynamicAtlasCustomFilter
        { 
        (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) : boolean; 
        Invoke?: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean;
        }
        var DynamicAtlasCustomFilter: { new (func: (texture: UnityEngine.Texture2D, filtersToApply: $Ref<UnityEngine.UIElements.DynamicAtlasFilters>) => boolean): DynamicAtlasCustomFilter; }
        /** 
        Script interface for VisualElement background-position style property IStyle.BackgroundPosition.
        */
        class BackgroundPosition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background position type
            */
            public keyword : UnityEngine.UIElements.BackgroundPositionKeyword
            /** 
            Background offset
            */
            public offset : UnityEngine.UIElements.Length
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundPosition, $style2: UnityEngine.UIElements.BackgroundPosition) : boolean
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword)
            public constructor ($keyword: UnityEngine.UIElements.BackgroundPositionKeyword, $offset: UnityEngine.UIElements.Length)
        }
        /** 
        Defines the position of the background.
        */
        enum BackgroundPositionKeyword
        { Center = 0, Top = 1, Bottom = 2, Left = 3, Right = 4 }
        /** 
        Represents a distance value.
        */
        class Length extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Length>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The length value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.LengthUnit;
            public set unit(value: UnityEngine.UIElements.LengthUnit);
            /** 
            Creates a percentage Length from a float.
            * @returns The created length. 
            */
            public static Percent ($value: number) : UnityEngine.UIElements.Length
            /** 
            Creates an Auto Length Length.
            * @returns Auto length. 
            */
            public static Auto () : UnityEngine.UIElements.Length
            /** 
            Creates a None Length Length.
            * @returns None length. 
            */
            public static None () : UnityEngine.UIElements.Length
            /** 
            Check if Length is Auto.
            * @returns true if Length is Auto, false otherwise 
            */
            public IsAuto () : boolean
            /** 
            Check if Length is None.
            * @returns true if Length is None, false otherwise 
            */
            public IsNone () : boolean
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Length
            public static op_Equality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Length, $rhs: UnityEngine.UIElements.Length) : boolean
            public Equals ($other: UnityEngine.UIElements.Length) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.LengthUnit)
        }
        /** 
        Script interface for VisualElement background-repeat style property IStyle.backgroundRepeat.
        */
        class BackgroundRepeat extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background repeat in the x direction.
            */
            public x : UnityEngine.UIElements.Repeat
            /** 
            Background repeat in the y direction.
            */
            public y : UnityEngine.UIElements.Repeat
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundRepeat, $style2: UnityEngine.UIElements.BackgroundRepeat) : boolean
            public constructor ($repeatX: UnityEngine.UIElements.Repeat, $repeatY: UnityEngine.UIElements.Repeat)
        }
        /** 
        Defines how the background is repeated.
        */
        enum Repeat
        { NoRepeat = 0, Space = 1, Round = 2, Repeat = 3 }
        /** 
        Script interface for VisualElement background-size style property IStyle.BackgroundSize.
        */
        class BackgroundSize extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Background size type
            */
            public get sizeType(): UnityEngine.UIElements.BackgroundSizeType;
            public set sizeType(value: UnityEngine.UIElements.BackgroundSizeType);
            /** 
            Background size x
            */
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            /** 
            Background size y
            */
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.BackgroundSize, $style2: UnityEngine.UIElements.BackgroundSize) : boolean
            public constructor ($sizeX: UnityEngine.UIElements.Length, $sizeY: UnityEngine.UIElements.Length)
            public constructor ($sizeType: UnityEngine.UIElements.BackgroundSizeType)
        }
        /** 
        Defines the size of the background.
        */
        enum BackgroundSizeType
        { Length = 0, Cover = 1, Contain = 2 }
        /** 
        Interface for classes capable of having callbacks to handle events.
        */
        class CallbackEventHandler extends System.Object implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if object has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Return true if event handlers for the event propagation BubbleUp phase have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        interface IEventHandler
        {
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            HasBubbleUpHandlers () : boolean
        }
        interface IEventHandler {
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            HasMouseCapture () : boolean;
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            CaptureMouse () : void;
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            ReleaseMouse () : void;
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            HasPointerCapture ($pointerId: number) : boolean;
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            CapturePointer ($pointerId: number) : void;
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            ReleasePointer ($pointerId: number) : void;
        }
        /** 
        Base class for objects that can get the focus.
        */
        class Focusable extends UnityEngine.UIElements.CallbackEventHandler implements UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Return the focus controller for this element.
            */
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            True if the element can be focused.
            */
            public get focusable(): boolean;
            public set focusable(value: boolean);
            /** 
            An integer used to sort focusables in the focus ring. Must be greater than or equal to zero.
            */
            public get tabIndex(): number;
            public set tabIndex(value: number);
            /** 
            Whether the element should delegate the focus to its children.
            */
            public get delegatesFocus(): boolean;
            public set delegatesFocus(value: boolean);
            /** 
            Return true if the element can be focused.
            */
            public get canGrabFocus(): boolean;
            /** 
            Attempt to give the focus to this element.
            */
            public Focus () : void
            /** 
            Tell the element to release the focus.
            */
            public Blur () : void
        }
        /** 
        Base class for objects that are part of the UIElements visual tree.
        */
        class VisualElement extends UnityEngine.UIElements.Focusable implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of local disabled elements.
            */
            public static disabledUssClassName : string
            /** 
            Used for view data persistence, such as tree expanded states, scroll position, or zoom level.
            */
            public get viewDataKey(): string;
            public set viewDataKey(value: string);
            /** 
            This property can be used to associate application-specific user data with this VisualElement.
            */
            public get userData(): any;
            public set userData(value: any);
            public get canGrabFocus(): boolean;
            public get focusController(): UnityEngine.UIElements.FocusController;
            /** 
            A combination of hint values that specify high-level intended usage patterns for the VisualElement.
            This property can only be set when the VisualElement is not yet part of a Panel. Once part of a Panel, this property becomes effectively read-only, and attempts to change it will throw an exception.
            The specification of proper UsageHints drives the system to make better decisions on how to process or accelerate certain operations based on the anticipated usage pattern.
            Note that those hints do not affect behavioral or visual results, but only affect the overall performance of the panel and the elements within.
            It's advised to always consider specifying the proper UsageHints, but keep in mind that some UsageHints might be internally ignored under certain conditions (e.g. due to hardware limitations on the target platform).
            */
            public get usageHints(): UnityEngine.UIElements.UsageHints;
            public set usageHints(value: UnityEngine.UIElements.UsageHints);
            /** 
            Returns a transform object for this VisualElement.
            ITransform
            */
            public get transform(): UnityEngine.UIElements.ITransform;
            /** 
            The position and size of the VisualElement relative to its parent, as computed by the layout system.
            */
            public get layout(): UnityEngine.Rect;
            /** 
            The rectangle of the content area of the element, in the local space of the element.
            */
            public get contentRect(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the world transform.
            */
            public get worldBound(): UnityEngine.Rect;
            /** 
            Returns a Rect representing the Axis-aligned Bounding Box (AABB) after applying the transform, but before applying the layout translation.
            */
            public get localBound(): UnityEngine.Rect;
            /** 
            Returns a matrix that cumulates the following operations (in order):
            -Local Scaling
            -Local Rotation
            -Local Translation
            -Layout Translation
            -Parent worldTransform (recursive definition - consider identity when there is no parent)
            */
            public get worldTransform(): UnityEngine.Matrix4x4;
            /** 
            Determines if this element can be pick during mouseEvents or IPanel.Pick queries.
            */
            public get pickingMode(): UnityEngine.UIElements.PickingMode;
            public set pickingMode(value: UnityEngine.UIElements.PickingMode);
            /** 
            The name of this VisualElement.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            Returns true if the VisualElement is enabled in its own hierarchy.
            */
            public get enabledInHierarchy(): boolean;
            /** 
            Returns true if the VisualElement is enabled locally.
            */
            public get enabledSelf(): boolean;
            /** 
            Indicates the directionality of the element's text. The value will propagate to the element's children.
            */
            public get languageDirection(): UnityEngine.UIElements.LanguageDirection;
            public set languageDirection(value: UnityEngine.UIElements.LanguageDirection);
            /** 
            Indicates whether or not this element should be rendered.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            Called when the VisualElement visual contents need to be (re)generated.
            */
            public get generateVisualContent(): System.Action$1<UnityEngine.UIElements.MeshGenerationContext>;
            public set generateVisualContent(value: System.Action$1<UnityEngine.UIElements.MeshGenerationContext>);
            /** 
            Assigns a data source to this VisualElement which overrides any inherited data source. This data source is
            inherited by all children.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            Returns the UIElements experimental interfaces.
            */
            public get experimental(): UnityEngine.UIElements.IExperimentalFeatures;
            /** 
            Access to this element physical hierarchy
            */
            public get hierarchy(): UnityEngine.UIElements.VisualElement.Hierarchy;
            /** 
            The parent of this VisualElement.
            */
            public get parent(): UnityEngine.UIElements.VisualElement;
            /** 
            The panel onto which this VisualElement is attached.
            */
            public get panel(): UnityEngine.UIElements.IPanel;
            /** 
            Child elements are added to it, usually this is the same as the element itself.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Stores the asset reference, if the generated element is cloned from a VisualTreeAsset.
            */
            public get visualTreeAssetSource(): UnityEngine.UIElements.VisualTreeAsset;
            /** 
            Number of child elements in this object's contentContainer.
            */
            public get childCount(): number;
            /** 
            Retrieves this VisualElement's IVisualElementScheduler
            */
            public get schedule(): UnityEngine.UIElements.IVisualElementScheduler;
            /** 
            Sets the VisualElement style values.
            */
            public get style(): UnityEngine.UIElements.IStyle;
            /** 
            Returns the VisualElement resolved style values.
            */
            public get resolvedStyle(): UnityEngine.UIElements.IResolvedStyle;
            /** 
            Returns the custom style properties accessor for this element.
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            /** 
            Returns a VisualElementStyleSheetSet that manipulates style sheets attached to this element.
            */
            public get styleSheets(): UnityEngine.UIElements.VisualElementStyleSheetSet;
            /** 
            Text to display inside an information box after the user hovers the element for a small amount of time. This is only supported in the Editor UI.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Changes the VisualElement enabled state. A disabled VisualElement does not receive most events.
            * @param $value New enabled state
            */
            public SetEnabled ($value: boolean) : void
            /** 
            Triggers a repaint of the VisualElement on the next frame.
            This method is called internally when a change occurs that requires a repaint, such as when UIElements.BaseField_1.value is changed or the text in a Label.
            If you are implementing a custom control, you can call this method to trigger a repaint when a change occurs that requires a repaint such as when using
            generateVisualContent to render a mesh and the mesh data has now changed.
            */
            public MarkDirtyRepaint () : void
            /** 
            Checks if the specified point intersects with this VisualElement's layout.
            * @param $localPoint The point in the local space of the element.
            * @returns Returns true if the point is contained within the element's layout. Otherwise, returns false. 
            */
            public ContainsPoint ($localPoint: UnityEngine.Vector2) : boolean
            public Overlaps ($rectangle: UnityEngine.Rect) : boolean
            /** 
            Retrieve the classes for this element.
            * @returns A class list. 
            */
            public GetClasses () : System.Collections.Generic.IEnumerable$1<string>
            /** 
            Removes all classes from the class list of this element.
            AddToClassList
            */
            public ClearClassList () : void
            /** 
            Adds a class to the class list of the element in order to assign styles from USS. Note the class name is case-sensitive.
            * @param $className The name of the class to add to the list.
            */
            public AddToClassList ($className: string) : void
            /** 
            Removes a class from the class list of the element.
            * @param $className The name of the class to remove to the list.
            */
            public RemoveFromClassList ($className: string) : void
            /** 
            Toggles between adding and removing the given class name from the class list.
            * @param $className The class name to add or remove from the class list.
            */
            public ToggleInClassList ($className: string) : void
            /** 
            Enables or disables the class with the given name.
            * @param $className The name of the class to enable or disable.
            * @param $enable A boolean flag that adds or removes the class name from the class list. If true, EnableInClassList adds the class name to the class list. If false, EnableInClassList removes the class name from the class list.
            */
            public EnableInClassList ($className: string, $enable: boolean) : void
            /** 
            Searches for a class in the class list of this element.
            * @param $cls The name of the class for the search query.
            * @returns Returns true if the class is part of the list. Otherwise, returns false. 
            */
            public ClassListContains ($cls: string) : boolean
            /** 
            Searches up the hierarchy of this VisualElement and retrieves stored userData, if any is found.
            */
            public FindAncestorUserData () : any
            /** 
            Assigns a binding between a target and a source.
            * @param $bindingId The binding ID.
            * @param $binding The binding object.
            */
            public SetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: UnityEngine.UIElements.Binding) : void
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @returns The binding instance, if it exists. 
            */
            public GetBinding ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.Binding
            /** 
            Gets the binding instance for the provided targeted property.
            * @param $bindingId The binding ID.
            * @param $binding When this method returns, contains the binding associated with the target property, if it exists; otherwise contains <see langword="null" />
            * @returns true if the binding exists; false otherwise. 
            */
            public TryGetBinding ($bindingId: UnityEngine.UIElements.BindingId, $binding: $Ref<UnityEngine.UIElements.Binding>) : boolean
            /** 
            Gets information on all the bindings of the current element.
            * @returns The bindings information. 
            */
            public GetBindingInfos () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.BindingInfo>
            /** 
            Allows to know if a target property has a binding associated to it.
            * @param $bindingId The binding ID.
            * @returns true if the property has a binding; false otherwise. 
            */
            public HasBinding ($bindingId: UnityEngine.UIElements.BindingId) : boolean
            /** 
            Removes a binding from the element.
            * @param $bindingId The id of the binding to unbind on this element.
            */
            public ClearBinding ($bindingId: UnityEngine.UIElements.BindingId) : void
            /** 
            Removes all bindings from the element.
            */
            public ClearBindings () : void
            /** 
            Queries the dataSource and dataSourcePath inherited from the hierarchy.
            * @returns A context object with the hierarchical data source and data source path. 
            */
            public GetHierarchicalDataSourceContext () : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @returns A context object with the data source and data source path of a binding object. 
            */
            public GetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId) : UnityEngine.UIElements.DataSourceContext
            /** 
            Queries the dataSource and dataSourcePath of a binding object.
            * @param $bindingId The binding ID to query.
            * @param $context The resulting context object.
            * @returns Returns true if a binding with the provided id was registered on the element; false otherwise. 
            */
            public TryGetDataSourceContext ($bindingId: UnityEngine.UIElements.BindingId, $context: $Ref<UnityEngine.UIElements.DataSourceContext>) : boolean
            /** 
            Add an element to this element's contentContainer
            */
            public Add ($child: UnityEngine.UIElements.VisualElement) : void
            /** 
            Insert an element into this element's contentContainer
            */
            public Insert ($index: number, $element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this child from the contentContainerhierarchy.
            */
            public Remove ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Remove the child element located at this position from this element's contentContainer
            */
            public RemoveAt ($index: number) : void
            /** 
            Remove all child elements from this element's contentContainer
            */
            public Clear () : void
            /** 
            Retrieves the child element at a specific index.
            * @param $index The index of the element.
            */
            public ElementAt ($index: number) : UnityEngine.UIElements.VisualElement
            public get_Item ($key: number) : UnityEngine.UIElements.VisualElement
            /** 
            Retrieves the child index of the specified VisualElement.
            * @param $element The child element to retrieve.
            * @returns The index of the child, or -1 if the child is not found. 
            */
            public IndexOf ($element: UnityEngine.UIElements.VisualElement) : number
            /** 
            Returns the elements from its contentContainer.
            */
            public Children () : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualElement>
            public Sort ($comp: System.Comparison$1<UnityEngine.UIElements.VisualElement>) : void
            /** 
            Brings this element to the end of its parent children list. The element will be visually in front of any overlapping sibling elements.
            */
            public BringToFront () : void
            /** 
            Sends this element to the beginning of its parent children list. The element will be visually behind any overlapping sibling elements.
            */
            public SendToBack () : void
            /** 
            Places this element right before the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually behind of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceBehind ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Places this element right after the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually in front of its sibling.
            * @param $sibling The sibling element.
            */
            public PlaceInFront ($sibling: UnityEngine.UIElements.VisualElement) : void
            /** 
            Removes this element from its parent hierarchy.
            */
            public RemoveFromHierarchy () : void
            /** 
            Checks if this element is an ancestor of the specified child element.
            * @param $child The child element to test against.
            * @returns Returns true if this element is a ancestor of the child element, false otherwise. 
            */
            public Contains ($child: UnityEngine.UIElements.VisualElement) : boolean
            /** 
            Finds the lowest common ancestor between two VisualElements inside the VisualTree hierarchy.
            */
            public FindCommonAncestor ($other: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.VisualElement
            public constructor ()
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        /** 
        Base class for objects that are part of the UIElements visual tree.
        */
        interface VisualElement {
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            Q ($name?: string, ...classes: string[]) : UnityEngine.UIElements.VisualElement;
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            Q ($name?: string, $className?: string) : UnityEngine.UIElements.VisualElement;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query ($name?: string, ...classes: string[]) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query ($name?: string, $className?: string) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            Query () : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>;
            /** 
            Aligns a VisualElement's left, top, right and bottom edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            StretchToParentSize () : void;
            /** 
            Aligns a VisualElement's left and right edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            StretchToParentWidth () : void;
            /** 
            Add a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be added to the VisualElement.
            */
            AddManipulator ($manipulator: UnityEngine.UIElements.IManipulator) : void;
            /** 
            Remove a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be removed from the VisualElement.
            */
            RemoveManipulator ($manipulator: UnityEngine.UIElements.IManipulator) : void;
            /** 
            Transforms a point from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in world space.
            * @returns A point in the local space of the element. 
            */
            WorldToLocal ($p: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a point from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in local space.
            * @returns A point in the world space. 
            */
            LocalToWorld ($p: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a rectangle from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in world space.
            * @returns A rectangle in the local space of the element. 
            */
            WorldToLocal ($r: UnityEngine.Rect) : UnityEngine.Rect;
            /** 
            Transforms a rectangle from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in local space.
            * @returns A rectangle in the world space. 
            */
            LocalToWorld ($r: UnityEngine.Rect) : UnityEngine.Rect;
            /** 
            Transforms a point from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $point The point to transform, in the local space of the source element.
            * @returns A point in the local space of destination element. 
            */
            ChangeCoordinatesTo ($dest: UnityEngine.UIElements.VisualElement, $point: UnityEngine.Vector2) : UnityEngine.Vector2;
            /** 
            Transforms a rectangle from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $rect The rectangle to transform, in the local space of the source element.
            * @returns A rectangle in the local space of destination element. 
            */
            ChangeCoordinatesTo ($dest: UnityEngine.UIElements.VisualElement, $rect: UnityEngine.Rect) : UnityEngine.Rect;
        }
        interface IStylePropertyAnimations
        {
        }
        interface IVisualElementScheduler
        {
            Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        interface IResolvedStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.Align
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.Align
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.Align
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.Color
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.Background
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.BackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.BackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.BackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.Color
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : number
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : number
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : number
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.Color
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : number
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.Color
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : number
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.Color
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : number
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : number
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : number
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : number
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.Color
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.DisplayStyle
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleFloat
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.FlexDirection
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : number
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : number
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.Wrap
            /** 
            Font size to draw the element's text.
            */
            fontSize : number
            /** 
            Fixed height of an element for the layout.
            */
            height : number
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.Justify
            /** 
            Left distance from the element's box during layout.
            */
            left : number
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : number
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : number
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : number
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : number
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : number
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleFloat
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : number
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : number
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : number
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : number
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : number
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.Position
            /** 
            Right distance from the element's box during layout.
            */
            right : number
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.Rotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.Scale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.TextOverflow
            /** 
            Top distance from the element's box during layout.
            */
            top : number
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.Vector3
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.Vector3
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.Color
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.Font
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.FontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.FontStyle
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : number
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : number
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : number
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : number
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : number
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : number
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.TextAnchor
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.Color
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : number
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.TextOverflowPosition
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.Visibility
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.WhiteSpace
            /** 
            Fixed width of an element for the layout.
            */
            width : number
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : number
        }
        interface IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
        }
        interface ITransform
        {
            /** 
            The position of the VisualElement transform.
            */
            position : UnityEngine.Vector3
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            rotation : UnityEngine.Quaternion
            /** 
            The scale of the VisualElement transform.
            */
            scale : UnityEngine.Vector3
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            matrix : UnityEngine.Matrix4x4
        }
        /** 
        Element that can be bound to a property. For more information, refer to.
        */
        class BindableElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            public constructor ()
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
        }
        interface IBindable
        {
            /** 
            Binding object that will be updated.
            */
            binding : UnityEngine.UIElements.IBinding
            /** 
            Path of the target property to be bound.
            */
            bindingPath : string
        }
        interface IBindable {
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            IsBound () : boolean;
        }
        interface IBinding
        {
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
            */
            PreUpdate () : void
            /** 
            Called at regular intervals to synchronize bound properties to their IBindable counterparts. Called before the Update() method.
            */
            Update () : void
            /** 
            Disconnects the field from its bound property
            */
            Release () : void
        }
        /** 
        Option to tell a binding when to update.
        */
        enum BindingUpdateTrigger
        { WhenDirty = 0, OnSourceChanged = 1, EveryUpdate = 2 }
        /** 
        Base class for defining a binding.
        */
        class Binding extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            When set to true, the binding instance updates during the next update cycle.
            When set to false, the binding instance updates only if a change is detected.
            */
            public get isDirty(): boolean;
            /** 
            When set to BindingUpdateTrigger.EveryUpdate, the binding instance updates in every update, regardless of the
            data source version.
            */
            public get updateTrigger(): UnityEngine.UIElements.BindingUpdateTrigger;
            public set updateTrigger(value: UnityEngine.UIElements.BindingUpdateTrigger);
            /** 
            Sets the log level for all binding failures.
            * @param $logLevel The log level.
            */
            public static SetGlobalLogLevel ($logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Sets the log level for binding failures on a panel.
            * @param $panel The panel to apply to.
            * @param $logLevel The log level.
            */
            public static SetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel, $logLevel: UnityEngine.UIElements.BindingLogLevel) : void
            /** 
            Resets the log level for binding failures on a panel to use the global setting.
            * @param $panel The panel to reset the global log level.
            */
            public static ResetPanelLogLevel ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the binding system to process this binding.
            */
            public MarkDirty () : void
        }
        /** 
        Options to change the log level for warnings that occur during the update of data bindings.
        */
        enum BindingLogLevel
        { None = 0, Once = 1, All = 2 }
        interface IPanel extends System.IDisposable
        {
            /** 
            Root of the VisualElement hierarchy.
            */
            visualTree : UnityEngine.UIElements.VisualElement
            /** 
            This Panel EventDispatcher.
            */
            dispatcher : UnityEngine.UIElements.EventDispatcher
            /** 
            Describes in which context a VisualElement hierarchy is being ran.
            */
            contextType : UnityEngine.UIElements.ContextType
            /** 
            Return the focus controller for this panel.
            */
            focusController : UnityEngine.UIElements.FocusController
            /** 
            The Contextual menu manager for the panel.
            */
            contextualMenuManager : UnityEngine.UIElements.ContextualMenuManager
            /** 
            Checks whether any element within the panel has had any changes to its state since the panel was last rendered.
            */
            isDirty : boolean
            /** 
            Returns the top element at this position. Will not return elements with pickingMode set to PickingMode.Ignore.
            * @param $point World coordinates.
            * @returns Top VisualElement at the position. Null if none was found. 
            */
            Pick ($point: UnityEngine.Vector2) : UnityEngine.UIElements.VisualElement
            PickAll ($point: UnityEngine.Vector2, $picked: System.Collections.Generic.List$1<UnityEngine.UIElements.VisualElement>) : UnityEngine.UIElements.VisualElement
        }
        interface IPanel {
            /** 
            Resets the dynamic atlas of the panel. Textured elements will be repainted.
            */
            ResetDynamicAtlas () : void;
            /** 
            Notifies the dynamic atlas of the panel that the content of the provided texture has changed. If the dynamic
            atlas contains the texture, it will update it.
            * @param $panel The current panel
            * @param $texture The texture whose content has changed.
            */
            SetTextureDirty ($texture: UnityEngine.Texture2D) : void;
            /** 
            Returns the element that is capturing the pointer.
            * @param $panel The panel that holds the element.
            * @param $pointerId The captured pointer.
            * @returns The element that is capturing the pointer. 
            */
            GetCapturingElement ($pointerId: number) : UnityEngine.UIElements.IEventHandler;
            /** 
            Releases the pointer.
            * @param $panel The panel that holds the element that captured the pointer.
            * @param $pointerId The captured pointer.
            */
            ReleasePointer ($pointerId: number) : void;
        }
        /** 
        Contains information passed to binding instances during registration and deregistration.
        */
        class BindingActivationContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id being activated/deactivated.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
        }
        /** 
        Defines a binding property that serves as an identifier for the binding system.
        */
        class BindingId extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.BindingId>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an invalid binding property.
            */
            public static Invalid : UnityEngine.UIElements.BindingId
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : Unity.Properties.PropertyPath
            public static op_Implicit ($vep: $Ref<UnityEngine.UIElements.BindingId>) : string
            public static op_Implicit ($name: string) : UnityEngine.UIElements.BindingId
            public static op_Implicit ($path: $Ref<Unity.Properties.PropertyPath>) : UnityEngine.UIElements.BindingId
            /** 
            Indicates whether two binding properties are equal.
            * @param $other The object to compare with the current instance.
            * @returns true if obj and this instance are the same type and represent the same value; otherwise, false. 
            */
            public Equals ($other: UnityEngine.UIElements.BindingId) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public static op_Inequality ($lhs: $Ref<UnityEngine.UIElements.BindingId>, $rhs: $Ref<UnityEngine.UIElements.BindingId>) : boolean
            public constructor ($path: string)
            public constructor ($path: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Context object containing the necessary information to resolve a binding.
        */
        class BindingContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding ID of the element to bind.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The resolved path to the value in the source, including relative data source paths found in the hierarchy
            between the target and to the resolved source owner.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            /** 
            The data source that was resolved for a given binding.
            */
            public get dataSource(): any;
        }
        /** 
        Status to report the result of a binding update.
        */
        enum BindingStatus
        { Success = 0, Failure = 1, Pending = 2 }
        /** 
        Provides information about the binding update.
        */
        class BindingResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The status from the binding update.
            */
            public get status(): UnityEngine.UIElements.BindingStatus;
            /** 
            Gets the message associated with the binding update.
            */
            public get message(): string;
            public constructor ($status: UnityEngine.UIElements.BindingStatus, $message?: string)
        }
        /** 
        A type to hold information about a conversion registry used locally on bindings.
        */
        class ConverterGroup extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The group id.
            */
            public get id(): string;
            /** 
            Optional and alternative name for a converter group ID, to be displayed to users to assist while authoring.
            */
            public get displayName(): string;
            /** 
            Optional description for a converter group ID that may include information about what this group contains
            or is used for, to be displayed to users to assist while authoring.
            */
            public get description(): string;
            public constructor ($id: string, $displayName?: string, $description?: string)
        }
        /** 
        Provides a set of static methods to register and use converter groups and registers a set of global converters.
        ConverterGroup.
        DataBinding.
        */
        class ConverterGroups extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Registers a converter group by ID. Converter groups can be applied on a binding using local converters.
            * @param $converterGroup The converter group to register.
            */
            public static RegisterConverterGroup ($converterGroup: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Retrieves a converter group by ID.
            * @param $groupId The group ID.
            * @param $converterGroup The converter group.
            */
            public static TryGetConverterGroup ($groupId: string, $converterGroup: $Ref<UnityEngine.UIElements.ConverterGroup>) : boolean
        }
        /** 
        Base class for general purpose binding extensibility.
        */
        class CustomBinding extends UnityEngine.UIElements.Binding
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Binding mode to control how a binding is updated.
        */
        enum BindingMode
        { TwoWay = 0, ToSource = 1, ToTarget = 2, ToTargetOnce = 3 }
        /** 
        Binding type that enables data synchronization between a property of a data source and a property of a VisualElement.
        */
        class DataBinding extends UnityEngine.UIElements.Binding implements UnityEngine.UIElements.IDataSourceProvider
        {
            protected [__keep_incompatibility]: never;
            /** 
            Object that serves as a local source for the binding, and is particularly useful when the data source is not
            part of the UI hierarchy, such as a static localization table. If this object is null, the binding resolves
            the data source using its normal resolution method.
            */
            public get dataSource(): any;
            public set dataSource(value: any);
            /** 
            Path from the data source to the value.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public set dataSourcePath(value: Unity.Properties.PropertyPath);
            /** 
            Controls how this binding should be updated.
            The default value is BindingMode.TwoWay.
            */
            public get bindingMode(): UnityEngine.UIElements.BindingMode;
            public set bindingMode(value: UnityEngine.UIElements.BindingMode);
            /** 
            Returns the ConverterGroup used when trying to convert data from the data source to a UI property.
            */
            public get sourceToUiConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Returns the ConverterGroup used when trying to convert data from a UI property back to the data source.
            */
            public get uiToSourceConverters(): UnityEngine.UIElements.ConverterGroup;
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            UI control to a data source.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToSource ($group: UnityEngine.UIElements.ConverterGroup) : void
            /** 
            Applies a ConverterGroup to this binding that will be used when converting data between a
            data source to a UI control.
            * @param $group The converter group.
            */
            public ApplyConverterGroupToUI ($group: UnityEngine.UIElements.ConverterGroup) : void
            public constructor ()
        }
        interface IDataSourceProvider
        {
            /** 
            Data source object that is local to the binding object.
            */
            dataSource : any
            /** 
            Data source path that is local to the binding object.
            */
            dataSourcePath : Unity.Properties.PropertyPath
        }
        /** 
        Provides information about a binding.
        */
        class BindingInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The visual element targeted by the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The binding id.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            The binding matching this information.
            */
            public get binding(): UnityEngine.UIElements.Binding;
        }
        /** 
        Contains information about the data source and data source path of a binding.
        */
        class DataSourceContext extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The resolved data source.
            */
            public get dataSource(): any;
            /** 
            The resolved data source path.
            */
            public get dataSourcePath(): Unity.Properties.PropertyPath;
            public constructor ($dataSource: any, $dataSourcePath: $Ref<Unity.Properties.PropertyPath>)
        }
        /** 
        Contains information passed to binding instances when the resolved data source context has changed.
        */
        class DataSourceContextChanged extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the target element of the binding.
            */
            public get targetElement(): UnityEngine.UIElements.VisualElement;
            /** 
            Returns the id of the binding.
            */
            public get bindingId(): UnityEngine.UIElements.BindingId;
            /** 
            Returns the previous resolved data source context of the binding.
            */
            public get previousContext(): UnityEngine.UIElements.DataSourceContext;
            /** 
            Returns the newly resolved data source of the binding.
            */
            public get newContext(): UnityEngine.UIElements.DataSourceContext;
        }
        interface IDataSourceViewHashProvider
        {
            /** 
            Returns the hash code of the view, which can be used to notify the data binding system to refresh.
            * @returns The hash code of the view. 
            */
            GetViewHashCode () : bigint
        }
        /** 
        Provides information about the property that has changed.
        */
        class BindablePropertyChangedEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the name of the property that has changed.
            */
            public get propertyName(): UnityEngine.UIElements.BindingId;
            public constructor ($propertyName: $Ref<UnityEngine.UIElements.BindingId>)
        }
        interface INotifyBindablePropertyChanged
        {
            add_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
            remove_propertyChanged ($value: System.EventHandler$1<UnityEngine.UIElements.BindablePropertyChangedEventArgs>) : void
        }
        /** 
        Base class for all Manipulator implementations. For more information, refer to.
        */
        class Manipulator extends System.Object implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            VisualElement being manipulated.
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            public set target(value: UnityEngine.UIElements.VisualElement);
        }
        interface IManipulator
        {
            /** 
            VisualElement being manipulated.
            */
            target : UnityEngine.UIElements.VisualElement
        }
        /** 
        MouseManipulators have a list of activation filters.
        */
        class MouseManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            List of Activationfilters.
            */
            public get activators(): System.Collections.Generic.List$1<UnityEngine.UIElements.ManipulatorActivationFilter>;
        }
        /** 
        PointerManipulators have a list of activation filters.
        */
        class PointerManipulator extends UnityEngine.UIElements.MouseManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Manipulator that tracks Mouse events on an element and callbacks when the elements is clicked.
        */
        class Clickable extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the mouse position saved during the last mouse event on the target Element.
            */
            public get lastMousePosition(): UnityEngine.Vector2;
            public add_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public remove_clickedWithEventInfo ($value: System.Action$1<UnityEngine.UIElements.EventBase>) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ($handler: System.Action, $delay: bigint, $interval: bigint)
            public constructor ($handler: System.Action$1<UnityEngine.UIElements.EventBase>)
            public constructor ($handler: System.Action)
        }
        /** 
        The base class for all UIElements events.  The class implements IDisposable to ensure proper release of the event from the pool and of any unmanaged resources, when necessary.
        */
        class EventBase extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Retrieves the type ID for this event instance.
            */
            public get eventTypeId(): bigint;
            /** 
            The time when the event was created, in milliseconds.
            */
            public get timestamp(): bigint;
            /** 
            Returns whether this event type bubbles up in the event propagation path.
            */
            public get bubbles(): boolean;
            /** 
            Returns whether this event is sent down the event propagation path during the TrickleDown phase.
            */
            public get tricklesDown(): boolean;
            /** 
            The target visual element that received this event. Unlike currentTarget, this target does not change when
            the event is sent to other elements along the propagation path.
            */
            public get target(): UnityEngine.UIElements.IEventHandler;
            public set target(value: UnityEngine.UIElements.IEventHandler);
            /** 
            Whether StopPropagation() was called for this event.
            */
            public get isPropagationStopped(): boolean;
            /** 
            Indicates whether StopImmediatePropagation() was called for this event.
            */
            public get isImmediatePropagationStopped(): boolean;
            /** 
            The current propagation phase for this event.
            */
            public get propagationPhase(): UnityEngine.UIElements.PropagationPhase;
            /** 
            The current target of the event. This is the VisualElement, in the propagation path, for which event handlers are currently being executed.
            */
            public get currentTarget(): UnityEngine.UIElements.IEventHandler;
            /** 
            Indicates whether the event is being dispatched to a visual element. An event cannot be redispatched while it being dispatched. If you need to recursively dispatch an event, it is recommended that you use a copy of the event.
            */
            public get dispatch(): boolean;
            /** 
            The IMGUIEvent at the source of this event. The source can be null since not all events are generated by IMGUI.
            */
            public get imguiEvent(): UnityEngine.Event;
            /** 
            The original mouse position of the IMGUI event, before it is transformed to the current target local coordinates.
            */
            public get originalMousePosition(): UnityEngine.Vector2;
            /** 
            Stops propagating this event. The event is not sent to other elements along the propagation path.
            This method does not prevent other event handlers from executing on the current target.
            If this method is called during the TrickleDown propagation phase, it will prevent default actions
            to be processed, such as an element getting focused as a result of a PointerDownEvent.
            */
            public StopPropagation () : void
            /** 
            Immediately stops the propagation of the event. The event isn't sent to other elements along the propagation path. This method prevents other event handlers from executing on the current target.
            */
            public StopImmediatePropagation () : void
            /** 
            Implementation of IDisposable.
            */
            public Dispose () : void
        }
        /** 
        Base collection view controller. View controllers are meant to take care of data virtualized by any BaseVerticalCollectionView inheritor.
        */
        class CollectionViewController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The items source stored in a non-generic list.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            /** 
            Sets the view for this controller.
            * @param $collectionView The view for this controller. Must not be null.
            */
            public SetView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Called when this controller is not longer needed to provide a way to release resources.
            */
            public Dispose () : void
            /** 
            Returns the expected item count in the source.
            * @returns The item count. 
            */
            public GetItemsCount () : number
            /** 
            Returns the index for the specified id.
            * @param $id The item id..
            * @returns The item index. 
            */
            public GetIndexForId ($id: number) : number
            /** 
            Returns the id for the specified index.
            * @param $index The item index.
            * @returns The item id. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Returns the item with the specified index.
            * @param $index The item index.
            * @returns The object in the source at this index. 
            */
            public GetItemForIndex ($index: number) : any
            /** 
            Returns the item with the specified ID.
            * @param $id The item ID.
            * @returns The object in the source with this ID. 
            */
            public GetItemForId ($id: number) : any
        }
        /** 
        Base collection list view controller. View controllers of this type are meant to take care of data virtualized by any BaseListView inheritor.
        */
        class BaseListViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public add_itemsSourceSizeChanged ($value: System.Action) : void
            public remove_itemsSourceSizeChanged ($value: System.Action) : void
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            /** 
            Returns whether this item needs a drag handle or not with the Animated drag mode.
            * @param $index Item index.
            * @returns Whether or not the drag handle is needed. 
            */
            public NeedsDragHandle ($index: number) : boolean
            /** 
            Adds a certain amount of items at the end of the collection.
            * @param $itemCount The number of items to add.
            */
            public AddItems ($itemCount: number) : void
            /** 
            Moves an item in the source.
            * @param $index The source index.
            * @param $newIndex The destination index.
            */
            public Move ($index: number, $newIndex: number) : void
            /** 
            Removes an item from the source, by index.
            * @param $index The item index.
            */
            public RemoveItem ($index: number) : void
            public RemoveItems ($indices: System.Collections.Generic.List$1<number>) : void
            /** 
            Removes all items from the source.
            */
            public ClearItems () : void
        }
        /** 
        Base collection tree view controller. View controllers of this type are meant to take care of data virtualized by any BaseTreeView inheritor.
        */
        class BaseTreeViewController extends UnityEngine.UIElements.CollectionViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Items for this tree. Contains items that are expanded in the tree.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Rebuilds the tree item data and regenerates wrappers to fill the source.
            */
            public RebuildTree () : void
            /** 
            Returns the root items of the tree, by IDs.
            * @returns The root item IDs. 
            */
            public GetRootItemIds () : System.Collections.Generic.IEnumerable$1<number>
            public GetAllItemIds ($rootIds?: System.Collections.Generic.IEnumerable$1<number>) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Returns the parent ID of an item, by ID.
            * @param $id The ID of the item to fetch the parent from.
            * @returns The parent ID, or -1 if the item is at the root of the tree. 
            */
            public GetParentId ($id: number) : number
            /** 
            Get all children of a specific ID in the tree.
            * @param $id The item ID.
            * @returns The children IDs. 
            */
            public GetChildrenIds ($id: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Moves an item by ID, to a new parent and child index.
            * @param $id The ID of the item to move.
            * @param $newParentId The new parent ID. -1 if moved at the root.
            * @param $childIndex The child index to insert at under the parent. -1 will add as the last child.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to false when doing multiple operations.
            */
            public Move ($id: number, $newParentId: number, $childIndex?: number, $rebuildTree?: boolean) : void
            /** 
            Removes an item by id.
            * @param $id The item id.
            * @param $rebuildTree Whether we need to rebuild tree data. Set to <c>false<c> when doing multiple operations and call <see cref="TreeViewController.RebuildTree()" >.
            * @returns Whether the item was successfully found and removed. 
            */
            public TryRemoveItem ($id: number, $rebuildTree?: boolean) : boolean
            /** 
            Get the number of items in the whole tree.
            * @returns The number of items in the tree. 
            */
            public GetTreeItemsCount () : number
            /** 
            Return whether the item with the specified ID has one or more child.
            * @param $id The item id.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildren ($id: number) : boolean
            /** 
            Checks if an ID exists within this tree.
            * @param $id The id to look for.
            * @returns Whether an item with this id exists in the tree. 
            */
            public Exists ($id: number) : boolean
            /** 
            Return whether the item with the specified index has one or more child.
            * @param $index The item index.
            * @returns Whether the item with the specified ID has one or more child. 
            */
            public HasChildrenByIndex ($index: number) : boolean
            /** 
            Gets the children IDs of the item with the specified index.
            * @param $index The item index.
            * @returns The children IDs. 
            */
            public GetChildrenIdsByIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the child index under the parent of the item with the specified ID.
            * @param $id The item ID.
            * @returns The child index under the parent. Returns -1 if the item has no parent or doesn't exist in the tree. 
            */
            public GetChildIndexForId ($id: number) : number
            /** 
            Returns the depth of the element at that ID.
            * @param $id The item ID.
            * @returns The depth of the element. 
            */
            public GetIndentationDepth ($id: number) : number
            /** 
            Return the depth of the element at that index.
            * @param $index The item index.
            * @returns The depth of the element. 
            */
            public GetIndentationDepthByIndex ($index: number) : number
            /** 
            Determines whether the item with the specified ID can be expanded or collapsed.
            */
            public CanChangeExpandedState ($id: number) : boolean
            /** 
            Return whether the item with the specified ID is expanded in the tree.
            * @param $id The item ID
            * @returns Whether the item with the specified ID is expanded in the tree. 
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Return whether the item with the specified index is expanded in the tree.
            * @param $index The item index
            * @returns Whether the item with the specified index is expanded in the tree. Will return false if the index is not valid. 
            */
            public IsExpandedByIndex ($index: number) : boolean
            /** 
            Expands the item with the specified index, making his children visible. Allows to expand the whole hierarchy under that item.
            * @param $index The item index.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public ExpandItemByIndex ($index: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Expands the item with the specified ID, making its children visible. Allows to expand the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $expandAllChildren Whether the whole hierarchy under that item will be expanded.
            * @param $refresh Whether to refresh items or not. Set to false when doing multiple operations on the tree, to only do one RefreshItems once all operations are done.
            */
            public ExpandItem ($id: number, $expandAllChildren: boolean, $refresh?: boolean) : void
            /** 
            Collapses the item with the specified index, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $index The item index.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            */
            public CollapseItemByIndex ($index: number, $collapseAllChildren: boolean) : void
            /** 
            Collapses the item with the specified ID, hiding its children. Allows to collapse the whole hierarchy under that item.
            * @param $id The item ID.
            * @param $collapseAllChildren Whether the whole hierarchy under that item will be collapsed.
            */
            public CollapseItem ($id: number, $collapseAllChildren: boolean) : void
            /** 
            Expands all items in the tree and refreshes the view.
            */
            public ExpandAll () : void
            /** 
            Collapses all items in the tree and refreshes the view.
            */
            public CollapseAll () : void
        }
        /** 
        Base class for controls that display virtualized vertical content inside a scroll view.
        */
        class BaseVerticalCollectionView extends UnityEngine.UIElements.BindableElement implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for BaseVerticalCollectionView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for BaseVerticalCollectionView elements with a border.
            */
            public static borderUssClassName : string
            /** 
            The USS class name of item elements in BaseVerticalCollectionView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name of the drag hover bar.
            */
            public static dragHoverBarUssClassName : string
            /** 
            The USS class name of the drag hover circular marker used to indicate depth.
            */
            public static dragHoverMarkerUssClassName : string
            /** 
            The USS class name applied to an item element on drag hover.
            */
            public static itemDragHoverUssClassName : string
            /** 
            The USS class name of selected item elements in the BaseVerticalCollectionView.
            */
            public static itemSelectedVariantUssClassName : string
            /** 
            The USS class name for odd rows in the BaseVerticalCollectionView.
            */
            public static itemAlternativeBackgroundUssClassName : string
            /** 
            The USS class name of the scroll view in the BaseVerticalCollectionView.
            */
            public static listScrollViewUssClassName : string
            /** 
            The data source for collection items.
            */
            public get itemsSource(): System.Collections.IList;
            public set itemsSource(value: System.Collections.IList);
            /** 
            Returns the content container for the BaseVerticalCollectionView. Because the BaseVerticalCollectionView
            control automatically manages its content, this always returns null.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls the selection type.
            */
            public get selectionType(): UnityEngine.UIElements.SelectionType;
            public set selectionType(value: UnityEngine.UIElements.SelectionType);
            /** 
            Returns the selected item from the data source. If multiple items are selected, returns the first selected item.
            */
            public get selectedItem(): any;
            /** 
            Returns the selected items from the data source. Always returns an enumerable, even if no item is selected, or a single
            item is selected.
            */
            public get selectedItems(): System.Collections.Generic.IEnumerable$1<any>;
            /** 
            Returns or sets the selected item's index in the data source. If multiple items are selected, returns the
            first selected item's index. If multiple items are provided, sets them all as selected.
            */
            public get selectedIndex(): number;
            public set selectedIndex(value: number);
            /** 
            Returns the indices of selected items in the data source. Always returns an enumerable, even if no item  is selected, or a
            single item is selected.
            */
            public get selectedIndices(): System.Collections.Generic.IEnumerable$1<number>;
            /** 
            The view controller for this view.
            */
            public get viewController(): UnityEngine.UIElements.CollectionViewController;
            /** 
            Enable this property to display a border around the collection view.
            */
            public get showBorder(): boolean;
            public set showBorder(value: boolean);
            /** 
            Gets or sets a value that indicates whether the user can drag list items to reorder them.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            This property controls whether the collection view shows a horizontal scroll bar when its content
            does not fit in the visible area.
            */
            public get horizontalScrollingEnabled(): boolean;
            public set horizontalScrollingEnabled(value: boolean);
            /** 
            This property controls whether the background colors of collection view rows alternate.
            Takes a value from the AlternatingRowBackground enum.
            */
            public get showAlternatingRowBackgrounds(): UnityEngine.UIElements.AlternatingRowBackground;
            public set showAlternatingRowBackgrounds(value: UnityEngine.UIElements.AlternatingRowBackground);
            /** 
            The virtualization method to use for this collection when a scroll bar is visible.
            Takes a value from the CollectionVirtualizationMethod enum.
            */
            public get virtualizationMethod(): UnityEngine.UIElements.CollectionVirtualizationMethod;
            public set virtualizationMethod(value: UnityEngine.UIElements.CollectionVirtualizationMethod);
            /** 
            The height of a single item in the list, in pixels.
            */
            public get fixedItemHeight(): number;
            public set fixedItemHeight(value: number);
            public add_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onItemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_itemsChosen ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_onSelectionChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public remove_selectionChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<any>>) : void
            public add_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_onSelectedIndicesChange ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_selectedIndicesChanged ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public remove_itemIndexChanged ($value: System.Action$2<number, number>) : void
            public add_itemsSourceChanged ($value: System.Action) : void
            public remove_itemsSourceChanged ($value: System.Action) : void
            public add_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public remove_canStartDrag ($value: System.Func$2<UnityEngine.UIElements.CanStartDragArgs, boolean>) : void
            public add_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public remove_setupDragAndDrop ($value: System.Func$2<UnityEngine.UIElements.SetupDragAndDropArgs, UnityEngine.UIElements.StartDragArgs>) : void
            public add_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_dragAndDropUpdate ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public add_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            public remove_handleDrop ($value: System.Func$2<UnityEngine.UIElements.HandleDragAndDropArgs, UnityEngine.UIElements.DragVisualMode>) : void
            /** 
            Assigns the view controller for this view and registers all events required for it to function properly.
            * @param $controller The controller to use with this view.
            */
            public SetViewController ($controller: UnityEngine.UIElements.CollectionViewController) : void
            /** 
            Gets the root element of the specified collection view item.
            * @param $id The item identifier.
            * @returns The item's root element. 
            */
            public GetRootElementForId ($id: number) : UnityEngine.UIElements.VisualElement
            /** 
            Gets the root element of the specified collection view item.
            * @param $index The item index.
            * @returns The item's root element. 
            */
            public GetRootElementForIndex ($index: number) : UnityEngine.UIElements.VisualElement
            /** 
            Rebinds a single item if it is currently visible in the collection view.
            * @param $index The item index.
            */
            public RefreshItem ($index: number) : void
            /** 
            Rebinds all items currently visible.
            */
            public RefreshItems () : void
            /** 
            Clears the collection view, recreates all visible visual elements, and rebinds all items.
            */
            public Rebuild () : void
            /** 
            Scrolls to a specific VisualElement.
            * @param $visualElement The element to scroll to.
            */
            public ScrollTo ($visualElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Scrolls to a specific item index and makes it visible.
            * @param $index Item index to scroll to. Specify -1 to make the last item visible.
            */
            public ScrollToItem ($index: number) : void
            /** 
            Scrolls to a specific item id and makes it visible.
            * @param $id Item id to scroll to.
            */
            public ScrollToItemById ($id: number) : void
            /** 
            Adds an item to the collection of selected items.
            * @param $index Item index.
            */
            public AddToSelection ($index: number) : void
            /** 
            Removes an item from the collection of selected items.
            * @param $index The item index.
            */
            public RemoveFromSelection ($index: number) : void
            /** 
            Sets the currently selected item.
            * @param $index The item index.
            */
            public SetSelection ($index: number) : void
            public SetSelection ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionWithoutNotify ($indices: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Deselects any selected items.
            */
            public ClearSelection () : void
            /** Implement this method to receive a callback before Unity serializes your object.
            */
            public OnBeforeSerialize () : void
            /** Implement this method to receive a callback after Unity deserializes your object.
            */
            public OnAfterDeserialize () : void
        }
        /** 
        List view controller. View controllers of this type are meant to take care of data virtualized by any ListView inheritor.
        */
        class ListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Multi-column list view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnListView inheritor.
        */
        class MultiColumnListViewController extends UnityEngine.UIElements.BaseListViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        The default controller for a multi column view. Takes care of adding the MultiColumnCollectionHeader and
        reacting to the various callbacks.
        */
        class MultiColumnController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for the header container inside a multi column view.
            */
            public static headerContainerUssClassName : string
            /** 
            The USS class name for all row containers inside a multi column view.
            */
            public static rowContainerUssClassName : string
            /** 
            The USS class name for all cells inside a multi column view.
            */
            public static cellUssClassName : string
            /** 
            The USS class name for default labels cells inside a multi column view.
            */
            public static cellLabelUssClassName : string
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            /** 
            Creates a VisualElement to use in the virtualization of the collection view.
            It will create a cell for every visible column.
            * @returns A VisualElement for the row. 
            */
            public MakeItem () : UnityEngine.UIElements.VisualElement
            /** 
            Unbinds the row at the item index.
            * @param $element The element from that row, created by MakeItem().
            * @param $index The item index.
            */
            public UnbindItem ($element: UnityEngine.UIElements.VisualElement, $index: number) : void
            /** 
            Destroys a VisualElement when the view is rebuilt or cleared.
            * @param $element The element being destroyed.
            */
            public DestroyItem ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Initialization step once the view is set.
            It will insert the multi column header in the hierarchy and register to important callbacks.
            * @param $collectionView The view to register to.
            */
            public PrepareView ($collectionView: UnityEngine.UIElements.BaseVerticalCollectionView) : void
            /** 
            Unregisters events and removes the header from the hierarchy.
            */
            public Dispose () : void
            public constructor ($columns: UnityEngine.UIElements.Columns, $sortDescriptions: UnityEngine.UIElements.SortColumnDescriptions, $sortedColumns: System.Collections.Generic.List$1<UnityEngine.UIElements.SortColumnDescription>)
        }
        /** 
        Represents a collection of columns.
        */
        class Columns extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.Column>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.Column>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates the column that needs to be considered as the primary column, by ID.
            */
            public get primaryColumnName(): string;
            public set primaryColumnName(value: string);
            /** 
            Indicates whether the columns can be reordered interactively by user.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            /** 
            Indicates whether the columns can be resized interactively by user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Indicates whether columns are resized as the user drags resize handles or only upon mouse release.
            */
            public get resizePreview(): boolean;
            public set resizePreview(value: boolean);
            /** 
            Indicates how the size of columns in this collection is automatically adjusted as other columns or the containing view get resized.
            The default value is StretchMode.GrowAndFill
            */
            public get stretchMode(): UnityEngine.UIElements.Columns.StretchMode;
            public set stretchMode(value: UnityEngine.UIElements.Columns.StretchMode);
            /** 
            Gets the number of columns in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            /** 
            Checks if the specified column is the primary one.
            * @param $column The column to check.
            * @returns Whether or not the specified column is the primary one. 
            */
            public IsPrimary ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.Column>
            /** 
            Adds a column at the end of the collection.
            * @param $item The column to add.
            */
            public Add ($item: UnityEngine.UIElements.Column) : void
            /** 
            Removes all columns from the collection.
            */
            public Clear () : void
            public Contains ($item: UnityEngine.UIElements.Column) : boolean
            /** 
            Whether the columns contain the specified name.
            * @param $name The name of the column to look for.
            * @returns Whether a column with the given name exists or not. 
            */
            public Contains ($name: string) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.Column>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a column from the collection.
            * @param $column The column to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($column: UnityEngine.UIElements.Column) : boolean
            /** 
            Returns the index of the specified column if it is contained in the collection; returns -1 otherwise.
            * @param $column The column to locate in the <see cref="Columns" />.
            * @returns The index of the column if found in the collection; otherwise, -1. 
            */
            public IndexOf ($column: UnityEngine.UIElements.Column) : number
            /** 
            Inserts a column into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $column The column to insert.
            */
            public Insert ($index: number, $column: UnityEngine.UIElements.Column) : void
            /** 
            Removes the column at the specified index.
            * @param $index The index of the column to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.Column
            public get_Item ($name: string) : UnityEngine.UIElements.Column
            /** 
            Reorders the display of a column at the specified source index, to the destination index.
            * @param $from The display index of the column to move.
            * @param $to The display index where the column will be moved to.
            */
            public ReorderDisplay ($from: number, $to: number) : void
            public constructor ()
        }
        /** 
        Represents a column in multi-column views such as multi-column list view or multi-column tree view.
        Provides the properties to define how user interacts with a column in a multi-column view, how its data and the data of each
        cell in this column are represented.
        */
        class Column extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            The title of the column.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            The icon of the column.
            */
            public get icon(): UnityEngine.UIElements.Background;
            public set icon(value: UnityEngine.UIElements.Background);
            /** 
            Indicates whether the column is visible.
            */
            public get visible(): boolean;
            public set visible(value: boolean);
            /** 
            The desired width of the column.
            */
            public get width(): UnityEngine.UIElements.Length;
            public set width(value: UnityEngine.UIElements.Length);
            /** 
            The minimum width of the column.
            */
            public get minWidth(): UnityEngine.UIElements.Length;
            public set minWidth(value: UnityEngine.UIElements.Length);
            /** 
            The maximum width of the column.
            */
            public get maxWidth(): UnityEngine.UIElements.Length;
            public set maxWidth(value: UnityEngine.UIElements.Length);
            /** 
            Indicates whether the column can be sorted.
            */
            public get sortable(): boolean;
            public set sortable(value: boolean);
            /** 
            Indicates whether the column will be automatically resized to fill the available space within its container.
            */
            public get stretchable(): boolean;
            public set stretchable(value: boolean);
            /** 
            Indicates whether the column is optional. Optional columns be shown or hidden interactively by the user.
            */
            public get optional(): boolean;
            public set optional(value: boolean);
            /** 
            Indicates whether the column can be resized interactively by the user.
            */
            public get resizable(): boolean;
            public set resizable(value: boolean);
            /** 
            Callback for constructing the visual representation of the column in the header.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the header element to this column.
            */
            public get bindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set bindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for unbinding the header element to this column.
            */
            public get unbindHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set unbindHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for destroying the visual representation of the column in the header.
            */
            public get destroyHeader(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyHeader(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for constructing the VisualElement that is the template for each cell of the column.
            */
            public get makeCell(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeCell(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            Callback for binding the specified data item at the given row to the visual element.
            */
            public get bindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding the specified data item at the given row from the visual element.
            */
            public get unbindCell(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindCell(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for destroying the VisualElement that was built for this column.
            */
            public get destroyCell(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyCell(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The column collection that contains this column.
            */
            public get collection(): UnityEngine.UIElements.Columns;
            public constructor ()
        }
        /** 
        This represents a collection or SortColumnDescriptions in multi SortColumnDescription views.
        */
        class SortColumnDescriptions extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>, System.Collections.IEnumerable, System.Collections.Generic.ICollection$1<UnityEngine.UIElements.SortColumnDescription>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the number of sort descriptions in the collection.
            */
            public get Count(): number;
            /** 
            Gets a value indicating whether the collection is readonly.
            */
            public get IsReadOnly(): boolean;
            /** 
            Returns an enumerator that iterates through the collection.
            * @returns The enumerator. 
            */
            public GetEnumerator () : System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.SortColumnDescription>
            /** 
            Adds a sort description at the end of the collection.
            * @param $item The sort description to add.
            */
            public Add ($item: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes all sort descriptions from the collection.
            */
            public Clear () : void
            /** 
            Determines whether the current collection contains a specific value.
            * @param $item The object to locate in the current collection.
            * @returns Whether the item is in the collection or not. 
            */
            public Contains ($item: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Copies the elements of the current collection to a Array, starting at the specified index.
            * @param $array The array to copy to.
            * @param $arrayIndex The starting index.
            */
            public CopyTo ($array: System.Array$1<UnityEngine.UIElements.SortColumnDescription>, $arrayIndex: number) : void
            /** 
            Removes the first occurence of a sort description from the collection.
            * @param $desc The sort description to remove.
            * @returns Whether it was removed or not. 
            */
            public Remove ($desc: UnityEngine.UIElements.SortColumnDescription) : boolean
            /** 
            Returns the index of the specified SortColumnDescription if it is contained in the collection; returns -1 otherwise.
            * @param $desc The description to locate in the <see cref="SortColumnDescriptions" />.
            * @returns The index of the SortColumnDescriptions if found in the collection; otherwise, -1. 
            */
            public IndexOf ($desc: UnityEngine.UIElements.SortColumnDescription) : number
            /** 
            Inserts a sort description into the current instance at the specified index.
            * @param $index Index to insert to.
            * @param $desc The sort description to insert.
            */
            public Insert ($index: number, $desc: UnityEngine.UIElements.SortColumnDescription) : void
            /** 
            Removes the sort description at the specified index.
            * @param $index The index of the sort description to remove.
            */
            public RemoveAt ($index: number) : void
            public get_Item ($index: number) : UnityEngine.UIElements.SortColumnDescription
            public constructor ()
        }
        /** 
        This represents a description on what column to sort and in which order.
        */
        class SortColumnDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the column.
            */
            public get columnName(): string;
            public set columnName(value: string);
            /** 
            The index of the column to be used to find the column only if the SortColumnDescription.columnName|columnName isn't set.
            */
            public get columnIndex(): number;
            public set columnIndex(value: number);
            /** 
            The sorted column.
            */
            public get column(): UnityEngine.UIElements.Column;
            /** 
            The sort direction.
            */
            public get direction(): UnityEngine.UIElements.SortDirection;
            public set direction(value: UnityEngine.UIElements.SortDirection);
            public constructor ()
            public constructor ($columnIndex: number, $direction: UnityEngine.UIElements.SortDirection)
            public constructor ($columnName: string, $direction: UnityEngine.UIElements.SortDirection)
        }
        /** 
        Multi-column tree view controller. View controllers of this type are meant to take care of data virtualized by any MultiColumnTreeView inheritor.
        */
        class MultiColumnTreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The column controller, taking care of operations on the header.
            */
            public get columnController(): UnityEngine.UIElements.MultiColumnController;
        }
        /** 
        Tree view controller. View controllers of this type are meant to take care of data virtualized by any TreeView inheritor.
        */
        class TreeViewController extends UnityEngine.UIElements.BaseTreeViewController implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Use this class to display a contextual menu.
        */
        class ContextualMenuManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the event triggers the display of the contextual menu. This method also displays the menu.
            * @param $evt The event to inspect.
            * @param $eventHandler The element for which the menu is displayed.
            */
            public DisplayMenuIfEventMatches ($evt: UnityEngine.UIElements.EventBase, $eventHandler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Displays the contextual menu.
            * @param $triggerEvent The event that triggered the display of the menu.
            * @param $target The element for which the menu is displayed.
            * @returns True if a contextual menu was effectively displayed. 
            */
            public DisplayMenu ($triggerEvent: UnityEngine.UIElements.EventBase, $target: UnityEngine.UIElements.IEventHandler) : void
        }
        /** 
        Manipulator that displays a contextual menu when the user clicks the right mouse button or presses the menu key on the keyboard.
        */
        class ContextualMenuManipulator extends UnityEngine.UIElements.PointerManipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($menuBuilder: System.Action$1<UnityEngine.UIElements.ContextualMenuPopulateEvent>)
        }
        class EventBase$1<T> extends UnityEngine.UIElements.EventBase implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        class MouseEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
        }
        interface IMouseEvent
        {
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            The mouse position in the panel coordinate system.
            */
            mousePosition : UnityEngine.Vector2
            /** 
            The mouse position in the current target coordinate system.
            */
            localMousePosition : UnityEngine.Vector2
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            mouseDelta : UnityEngine.Vector2
            /** 
            The number of times the button is pressed.
            */
            clickCount : number
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            pressedButtons : number
            /** 
            Return true if the Shift key is pressed.
            */
            shiftKey : boolean
            /** 
            Return true if the Ctrl key is pressed.
            */
            ctrlKey : boolean
            /** 
            Return true if the Windows/Command key is pressed.
            */
            commandKey : boolean
            /** 
            Return true if the Alt key is pressed.
            */
            altKey : boolean
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            actionKey : boolean
        }
        interface IMouseEventInternal
        {
        }
        /** 
        The event sent when a contextual menu requires menu items.
        The event trickles down and bubbles up.
        */
        class ContextualMenuPopulateEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextualMenuPopulateEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The menu to populate.
            */
            public get menu(): UnityEngine.UIElements.DropdownMenu;
            /** 
            The event that triggered the ContextualMenuPopulateEvent.
            */
            public get triggerEvent(): UnityEngine.UIElements.EventBase;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $triggerEvent The event that triggered the display of the contextual menu.
            * @param $menu The menu to populate.
            * @param $target The element that triggered the display of the contextual menu.
            * @param $menuManager The menu manager that displays the menu.
            * @returns An initialized event. 
            */
            public static GetPooled ($triggerEvent: UnityEngine.UIElements.EventBase, $menu: UnityEngine.UIElements.DropdownMenu, $target: UnityEngine.UIElements.IEventHandler, $menuManager: UnityEngine.UIElements.ContextualMenuManager) : UnityEngine.UIElements.ContextualMenuPopulateEvent
            public constructor ()
        }
        class BaseField$1<TValueType> extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
        }
        interface IMixedValueSupport
        {
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            showMixedValue : boolean
        }
        interface INotifyValueChanged$1<T>
        {
        }
        interface IPrefixLabel
        {
        }
        interface IEditableElement
        {
        }
        /** 
        A BaseBoolField is a clickable element that represents a boolean value.
        */
        class BaseBoolField extends UnityEngine.UIElements.BaseField$1<boolean> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Optional text that appears after the BaseBoolField.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Options to change the drag-and-drop mode for items in the ListView.
        */
        enum ListViewReorderMode
        { Simple = 0, Animated = 1 }
        /** 
        Base class for a list view, a vertically scrollable area that links to, and displays, a list of items.
        */
        class BaseListView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for ListView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of item elements in ListView elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for label displayed when ListView is empty.
            */
            public static emptyLabelUssClassName : string
            /** 
            The USS class name for label displayed when ListView is trying to edit too many items.
            */
            public static overMaxMultiEditLimitClassName : string
            /** 
            The USS class name for reorderable animated ListView elements.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for item elements in reorderable animated ListView.
            */
            public static reorderableItemUssClassName : string
            /** 
            The USS class name for item container in reorderable animated ListView.
            */
            public static reorderableItemContainerUssClassName : string
            /** 
            The USS class name for drag handle in reorderable animated ListView.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            The USS class name for drag handle bar in reorderable animated ListView.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for the footer of the ListView.
            */
            public static footerUssClassName : string
            /** 
            The USS class name for the foldout header of the ListView.
            */
            public static foldoutHeaderUssClassName : string
            /** 
            The USS class name for the size field of the ListView when foldout header is enabled.
            */
            public static arraySizeFieldUssClassName : string
            /** 
            The USS class name for ListView when foldout header is enabled.
            */
            public static listViewWithHeaderUssClassName : string
            /** 
            The USS class name for ListView when add/remove footer is enabled.
            */
            public static listViewWithFooterUssClassName : string
            /** 
            The USS class name for scroll view when add/remove footer is enabled.
            */
            public static scrollViewWithFooterUssClassName : string
            /** 
            The name of the add button element in the footer.
            */
            public static footerAddButtonName : string
            /** 
            The name of the remove button element in the footer.
            */
            public static footerRemoveButtonName : string
            /** 
            This property controls whether the list view displays the collection size (number of items).
            */
            public get showBoundCollectionSize(): boolean;
            public set showBoundCollectionSize(value: boolean);
            /** 
            This property controls whether the list view displays a header, in the form of a foldout that can be expanded or collapsed.
            */
            public get showFoldoutHeader(): boolean;
            public set showFoldoutHeader(value: boolean);
            /** 
            This property controls the text of the foldout header when using showFoldoutHeader.
            */
            public get headerTitle(): string;
            public set headerTitle(value: string);
            /** 
            This callback allows the user to make their own header for this control.
            */
            public get makeHeader(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeHeader(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This callback allows the user to make their own footer for this control.
            */
            public get makeFooter(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeFooter(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property controls whether a footer will be added to the list view.
            */
            public get showAddRemoveFooter(): boolean;
            public set showAddRemoveFooter(value: boolean);
            /** 
            This property controls whether every element in the list will get its data source setup automatically to the
            correct item in the collection's source.
            */
            public get bindingSourceSelectionMode(): UnityEngine.UIElements.BindingSourceSelectionMode;
            public set bindingSourceSelectionMode(value: UnityEngine.UIElements.BindingSourceSelectionMode);
            /** 
            The view controller for this view, cast as a BaseListViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseListViewController;
            /** 
            This property controls the drag and drop mode for the list view.
            */
            public get reorderMode(): UnityEngine.UIElements.ListViewReorderMode;
            public set reorderMode(value: UnityEngine.UIElements.ListViewReorderMode);
            /** 
            This callback allows the user to set a Visual Element to replace the "List is empty" Label shown when the ListView is empty.
            */
            public get makeNoneElement(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeNoneElement(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            This property allows the user to allow or block the addition of an item when clicking on the Add Button.
            It must return true or false.
            */
            public get allowAdd(): boolean;
            public set allowAdd(value: boolean);
            /** 
            This callback allows the user to implement a DropdownMenu when the Add Button is clicked.
            */
            public get overridingAddButtonBehavior(): System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>;
            public set overridingAddButtonBehavior(value: System.Action$2<UnityEngine.UIElements.BaseListView, UnityEngine.UIElements.Button>);
            /** 
            This callback allows the user to implement their own code to be executed when the Add Button is clicked.
            */
            public get onAdd(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onAdd(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            /** 
            This property allows the user to allow or block the removal of an item when clicking on the Remove Button.
            It must return true or false.
            */
            public get allowRemove(): boolean;
            public set allowRemove(value: boolean);
            /** 
            This callback allows the user to implement their own code to be executed when the Remove Button is clicked.
            */
            public get onRemove(): System.Action$1<UnityEngine.UIElements.BaseListView>;
            public set onRemove(value: System.Action$1<UnityEngine.UIElements.BaseListView>);
            public add_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsAdded ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public add_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
            public remove_itemsRemoved ($value: System.Action$1<System.Collections.Generic.IEnumerable$1<number>>) : void
        }
        /** 
        Option to change the data source assignation when using Data Binding in collection views.
        */
        enum BindingSourceSelectionMode
        { Manual = 0, AutoAssign = 1 }
        /** 
        Use this as the super class if you are declaring a custom VisualElement that displays text. For example, Button or Label use this as their base class. For more information, refer to.
        */
        class TextElement extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of selectable text elements.
            */
            public static selectableUssClassName : string
            /** 
            The text to be displayed.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            When false, rich text tags will not be parsed.
            */
            public get enableRichText(): boolean;
            public set enableRichText(value: boolean);
            /** 
            Specifies the order in which the system should look for Emoji characters when rendering text.
            If this setting is enabled, the global Emoji Fallback list will be searched first for characters defined as
            Emoji in the Unicode 14.0 standard.
            */
            public get emojiFallbackSupport(): boolean;
            public set emojiFallbackSupport(value: boolean);
            /** 
            Specifies whether escape sequences are displayed as is or if they are replaced by the character they represent.
            */
            public get parseEscapeSequences(): boolean;
            public set parseEscapeSequences(value: boolean);
            /** 
            When true, a tooltip displays the full version of elided text, and also if a tooltip had been previously
            provided, it will be overwritten.
            */
            public get displayTooltipWhenElided(): boolean;
            public set displayTooltipWhenElided(value: boolean);
            /** 
            Returns true if text is elided, false otherwise.
            */
            public get isElided(): boolean;
            /** 
            Returns the TextElement experimental interface.
            */
            public get experimental(): UnityEngine.UIElements.ITextElementExperimentalFeatures;
            /** 
            Retrieves this TextElement's ITextSelection
            */
            public get selection(): UnityEngine.UIElements.ITextSelection;
            /** 
            Returns true if the element is read only.
            */
            public get isReadOnly(): boolean;
            public set isReadOnly(value: boolean);
            /** 
            Maximum number of characters for that element
            */
            public get maxLength(): number;
            public set maxLength(value: number);
            /** 
            The placeholder property represents a short hint intended to aid the users with data entry when the control has no value.
            */
            public get placeholder(): string;
            public set placeholder(value: string);
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            public get isDelayed(): boolean;
            public set isDelayed(value: boolean);
            /** 
            The character used for masking when in password mode.
            */
            public get maskChar(): number;
            public set maskChar(value: number);
            /** 
            Returns true if the field is used to edit a password.
            */
            public get isPassword(): boolean;
            public set isPassword(value: boolean);
            /** 
            Hides the placeholder on focus.
            */
            public get hidePlaceholderOnFocus(): boolean;
            public set hidePlaceholderOnFocus(value: boolean);
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            public get autoCorrection(): boolean;
            public set autoCorrection(value: boolean);
            /** 
            Hides or shows the mobile input field.
            */
            public get hideMobileInput(): boolean;
            public set hideMobileInput(value: boolean);
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            public get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
            /** 
            The type of mobile keyboard that will be used.
            */
            public get keyboardType(): UnityEngine.TouchScreenKeyboardType;
            public set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
            /** 
            Returns true if the field is selectable.
            */
            public get isSelectable(): boolean;
            public set isSelectable(value: boolean);
            /** 
            Color of the cursor.
            */
            public get cursorColor(): UnityEngine.Color;
            public set cursorColor(value: UnityEngine.Color);
            /** 
            Background color of selected text.
            */
            public get selectionColor(): UnityEngine.Color;
            public set selectionColor(value: UnityEngine.Color);
            /** 
            This is the cursor index in the text presented.
            */
            public get cursorIndex(): number;
            public set cursorIndex(value: number);
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            public get doubleClickSelectsWord(): boolean;
            public set doubleClickSelectsWord(value: boolean);
            /** 
            This is the selection index in the text presented.
            */
            public get selectIndex(): number;
            public set selectIndex(value: number);
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            public get tripleClickSelectsLine(): boolean;
            public set tripleClickSelectsLine(value: boolean);
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            public get selectAllOnFocus(): boolean;
            public set selectAllOnFocus(value: boolean);
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            public get selectAllOnMouseUp(): boolean;
            public set selectAllOnMouseUp(value: boolean);
            /** 
            The position of the text cursor inside the element.
            */
            public get cursorPosition(): UnityEngine.Vector2;
            public MeasureTextSize ($textToMeasure: string, $width: number, $widthMode: UnityEngine.UIElements.VisualElement.MeasureMode, $height: number, $heightMode: UnityEngine.UIElements.VisualElement.MeasureMode) : UnityEngine.Vector2
            public constructor ()
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            public SetRenderedText ($renderedText: string) : void
            /** 
            Return true is the TextElement has a selection.
            */
            public HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            public SelectAll () : void
            /** 
            Remove selection
            */
            public SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            public SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        interface ITextElement
        {
        }
        interface ITextEdition
        {
            /** 
            Returns true if the element is read only.
            */
            isReadOnly : boolean
            /** 
            Maximum number of characters for that element
            */
            maxLength : number
            /** 
            The placeholder property represents a short hint intended to aid the users with data entry when the control has no value.
            */
            placeholder : string
            /** 
            If set to true, the value property isn't updated until either the user presses Enter or the element loses focus.
            */
            isDelayed : boolean
            /** 
            The character used for masking when in password mode.
            */
            maskChar : number
            /** 
            Returns true if the field is used to edit a password.
            */
            isPassword : boolean
            /** 
            Hides the placeholder on focus.
            */
            hidePlaceholderOnFocus : boolean
            /** 
            Determines if the soft keyboard auto correction is turned on or off.
            */
            autoCorrection : boolean
            /** 
            Hides or shows the mobile input field.
            */
            hideMobileInput : boolean
            /** 
            The TouchScreenKeyboard being used to edit the Input Field.
            */
            touchScreenKeyboard : UnityEngine.TouchScreenKeyboard
            /** 
            The type of mobile keyboard that will be used.
            */
            keyboardType : UnityEngine.TouchScreenKeyboardType
        }
        interface ITextElementExperimentalFeatures extends UnityEngine.UIElements.IExperimentalFeatures
        {
            /** 
            Returns the animation experimental interface.
            */
            animation : UnityEngine.UIElements.Experimental.ITransitionAnimations
            /** 
            Setting this property will override the displayed text while preserving the original text value.
            */
            SetRenderedText ($renderedText: string) : void
        }
        interface ITextSelection
        {
            /** 
            Returns true if the field is selectable.
            */
            isSelectable : boolean
            /** 
            Color of the cursor.
            */
            cursorColor : UnityEngine.Color
            /** 
            Background color of selected text.
            */
            selectionColor : UnityEngine.Color
            /** 
            This is the cursor index in the text presented.
            */
            cursorIndex : number
            /** 
            Controls whether double clicking selects the word under the mouse pointer or not.
            */
            doubleClickSelectsWord : boolean
            /** 
            This is the selection index in the text presented.
            */
            selectIndex : number
            /** 
            Controls whether triple clicking selects the entire line under the mouse pointer or not.
            */
            tripleClickSelectsLine : boolean
            /** 
            Controls whether the element's content is selected upon receiving focus.
            */
            selectAllOnFocus : boolean
            /** 
            Controls whether the element's content is selected when you mouse up for the first time.
            */
            selectAllOnMouseUp : boolean
            /** 
            The position of the text cursor inside the element.
            */
            cursorPosition : UnityEngine.Vector2
            /** 
            Return true is the TextElement has a selection.
            */
            HasSelection () : boolean
            /** 
            Selects all the text contained in the field.
            */
            SelectAll () : void
            /** 
            Remove selection
            */
            SelectNone () : void
            /** 
            Select text between cursorIndex and selectIndex.
            */
            SelectRange ($cursorIndex: number, $selectionIndex: number) : void
        }
        /** 
        This is a clickable button.
        */
        class Button extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for Button elements with an icon.
            */
            public static iconUssClassName : string
            /** 
            The USS class name of the image element that will be used to display the icon texture.
            */
            public static imageUSSClassName : string
            /** 
            Clickable MouseManipulator for this Button.
            */
            public get clickable(): UnityEngine.UIElements.Clickable;
            public set clickable(value: UnityEngine.UIElements.Clickable);
            /** 
            The Texture, Sprite, or VectorImage that will represent an icon within a Button element.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            public get text(): string;
            public set text(value: string);
            public add_onClick ($value: System.Action) : void
            public remove_onClick ($value: System.Action) : void
            public add_clicked ($value: System.Action) : void
            public remove_clicked ($value: System.Action) : void
            public constructor ()
            public constructor ($iconImage: UnityEngine.UIElements.Background, $clickEvent?: System.Action)
            public constructor ($clickEvent: System.Action)
        }
        /** 
        This is the direction of the Slider and SliderInt.
        */
        enum SliderDirection
        { Horizontal = 0, Vertical = 1 }
        /** 
        Base class for a tree view, a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class BaseTreeView extends UnityEngine.UIElements.BaseVerticalCollectionView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for TreeView elements.
            */
            public static ussClassName : string
            /** 
            The USS class name for TreeView item elements.
            */
            public static itemUssClassName : string
            /** 
            The USS class name for TreeView item toggle elements.
            */
            public static itemToggleUssClassName : string
            /** 
            The USS class name for TreeView indent element.
            */
            public static itemIndentUssClassName : string
            /** 
            The USS class name for TreeView item container elements.
            */
            public static itemContentContainerUssClassName : string
            /** 
            Access to the itemsSource. For a TreeView, the source contains the items wrappers.
            */
            public get itemsSource(): System.Collections.IList;
            /** 
            The view controller for this view, cast as a BaseTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.BaseTreeViewController;
            /** 
            When true, items are automatically expanded when added to the TreeView.
            */
            public get autoExpand(): boolean;
            public set autoExpand(value: boolean);
            /** 
            Gets the root item identifiers.
            * @returns The root item identifiers. 
            */
            public GetRootIds () : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Gets the TreeView's total number of items.
            * @returns The TreeView's total number of items. 
            */
            public GetTreeCount () : number
            /** 
            Gets the specified TreeView item's identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's identifier. 
            */
            public GetIdForIndex ($index: number) : number
            /** 
            Gets the specified TreeView item's parent identifier.
            * @param $index The TreeView item index.
            * @returns The TreeView item's parent identifier. 
            */
            public GetParentIdForIndex ($index: number) : number
            /** 
            Gets children identifiers for the specified TreeView item.
            * @param $index The TreeView item index.
            * @returns The children item identifiers. 
            */
            public GetChildrenIdsForIndex ($index: number) : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Removes an item of the tree if it can find it.
            * @param $id The item id.
            * @returns If the item was removed from the tree. 
            */
            public TryRemoveItem ($id: number) : boolean
            /** 
            Sets the currently selected item by id.
            * @param $id The item id.
            */
            public SetSelectionById ($id: number) : void
            public SetSelectionById ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            public SetSelectionByIdWithoutNotify ($ids: System.Collections.Generic.IEnumerable$1<number>) : void
            /** 
            Adds an item to the current selection by id.
            * @param $id The item id.
            */
            public AddToSelectionById ($id: number) : void
            /** 
            Removes an item from the current selection by id.
            * @param $id The item id.
            */
            public RemoveFromSelectionById ($id: number) : void
            /** 
            Returns true if the specified TreeView item is expanded, false otherwise.
            * @param $id The TreeView item identifier.
            */
            public IsExpanded ($id: number) : boolean
            /** 
            Collapses the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $collapseAllChildren When true, all children will also get collapsed. This is false by default.
            */
            public CollapseItem ($id: number, $collapseAllChildren?: boolean) : void
            /** 
            Expands the specified TreeView item.
            * @param $id The TreeView item identifier.
            * @param $expandAllChildren When true, all children will also get expanded. This is false by default.
            */
            public ExpandItem ($id: number, $expandAllChildren?: boolean) : void
            /** 
            Expands all root TreeView items.
            */
            public ExpandRootItems () : void
            /** 
            Expands all TreeView items, including children.
            */
            public ExpandAll () : void
            /** 
            Collapses all TreeView items, including children.
            */
            public CollapseAll () : void
        }
        class TreeViewItemData$1<T> extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Options to display alternating background colors for collection view rows.
        */
        enum AlternatingRowBackground
        { None = 0, ContentOnly = 1, All = 2 }
        /** 
        Options to change the virtualization method used by the collection view to display its content.
        */
        enum CollectionVirtualizationMethod
        { FixedHeight = 0, DynamicHeight = 1 }
        /** 
        Information about a drag-and-drop operation that is about to start.
        See BaseVerticalCollectionView.canStartDrag.
        */
        class CanStartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation is starting.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The ID of the dragged element.
            */
            public id : number
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
        }
        /** 
        Information about a drag-and-drop operation that just started.
        You can use it to store generic data for the rest of the drag.
        See BaseVerticalCollectionView.setupDragAndDrop.
        */
        class SetupDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element on which the drag operation started.
            */
            public draggedElement : UnityEngine.UIElements.VisualElement
            /** 
            The selected IDs in the source.
            */
            public selectedIds : System.Collections.Generic.IEnumerable$1<number>
            /** 
            Provides entry points to initialize data and visual of the new drag-and-drop operation.
            */
            public startDragArgs : UnityEngine.UIElements.StartDragArgs
        }
        /** 
        Provides entry points to initialize the new drag-and-drop operation.
        */
        class StartDragArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The title displayed near the pointer to identify what is being dragged.
            Should be set during the BaseVerticalCollectionView.setupDragAndDrop callback.
            */
            public get title(): string;
            /** 
            The mode to use for this drag-and-drop operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
            public SetUnityObjectReferences ($references: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>) : void
            public constructor ($title: string, $visualMode: UnityEngine.UIElements.DragVisualMode)
        }
        /** 
        Information about a drag-and-drop operation in progress.
        See BaseVerticalCollectionView.dragAndDropUpdate and BaseVerticalCollectionView.handleDrop.
        */
        class HandleDragAndDropArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The world position of the pointer.
            */
            public get position(): UnityEngine.Vector2;
            /** 
            The target of the drop. There is only a target when hovering over an item. DropPosition.OverItem
            */
            public get target(): any;
            /** 
            The index at which the drop operation wants to happen.
            */
            public get insertAtIndex(): number;
            /** 
            The new parent targeted by the drag-and-drop operation. Used only for trees.
            */
            public get parentId(): number;
            /** 
            The child index under the parentId that the drag-and-drop operation targets. Used only for trees.
            */
            public get childIndex(): number;
            /** 
            The type of drop position.
            */
            public get dropPosition(): UnityEngine.UIElements.DragAndDropPosition;
            /** 
            Data stored for the drag-and-drop operation.
            */
            public get dragAndDropData(): UnityEngine.UIElements.DragAndDropData;
        }
        /** 
        The status of a drag-and-drop operation.
        */
        enum DragVisualMode
        { None = 0, Copy = 1, Move = 2, Rejected = 3 }
        /** 
        Controls how many items can be selected at once.
        */
        enum SelectionType
        { None = 0, Single = 1, Multiple = 2 }
        class KeyboardEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
        }
        interface IKeyboardEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets the character entered.
            */
            character : number
            /** 
            The key code.
            */
            keyCode : UnityEngine.KeyCode
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        /** 
        This event is sent when a key is pressed.
        */
        class KeyDownEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyDownEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Extensions methods to provide additional IBindable functionality.
        */
        class IBindingExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public static IsBound ($control: UnityEngine.UIElements.IBindable) : boolean
        }
        /** 
        A Bounds editor field. For more information, refer to.
        */
        class BoundsField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Bounds> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Bounds>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of center fields in elements of this type.
            */
            public static centerFieldUssClassName : string
            /** 
            USS class name of extents fields in elements of this type.
            */
            public static extentsFieldUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A BoundsInt field. For more information, refer to.
        */
        class BoundsIntField extends UnityEngine.UIElements.BaseField$1<UnityEngine.BoundsInt> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.BoundsInt>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of position fields in elements of this type.
            */
            public static positionUssClassName : string
            /** 
            USS class name of size fields in elements of this type.
            */
            public static sizeUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Styled visual element to match the IMGUI Box Style. For more information, refer to.
        */
        class Box extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        /** 
        Describes a VisualElement background.
        */
        class Background extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Background>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to display as a background.
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The sprite to display as a background.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The RenderTexture to display as a background.
            */
            public get renderTexture(): UnityEngine.RenderTexture;
            public set renderTexture(value: UnityEngine.RenderTexture);
            /** 
            The VectorImage to display as a background.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            Creates a background from a Texture2D.
            * @param $t The texture to use as a background.
            * @returns A new background object. 
            */
            public static FromTexture2D ($t: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a RenderTexture.
            * @param $rt The render texture to use as a background.
            * @returns A new background object. 
            */
            public static FromRenderTexture ($rt: UnityEngine.RenderTexture) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a Sprite.
            * @param $s The sprite to use as a background.
            * @returns A new background object. 
            */
            public static FromSprite ($s: UnityEngine.Sprite) : UnityEngine.UIElements.Background
            /** 
            Creates a background from a VectorImage.
            * @param $vi The vector image to use as a background.
            * @returns A new background object. 
            */
            public static FromVectorImage ($vi: UnityEngine.UIElements.VectorImage) : UnityEngine.UIElements.Background
            /** 
            Retrieves the selected asset which can be of a type of Texture, Sprite, RenderTexture or VectorImage.
            * @returns An asset as an object. 
            */
            public GetSelectedImage () : UnityEngine.Object
            /** 
            Help verify whether an asset has been assigned or not.
            * @returns True if no asset is assigned. 
            */
            public IsEmpty () : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Background, $rhs: UnityEngine.UIElements.Background) : boolean
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.Background
            public Equals ($other: UnityEngine.UIElements.Background) : boolean
            public Equals ($obj: any) : boolean
        }
        class TextInputBaseField$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
        }
        interface IDelayedField
        {
        }
        class TextValueField$1<TValueType> extends UnityEngine.UIElements.TextInputBaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
        }
        interface IValueField$1<T>
        {
        }
        /** 
        Makes a text field for entering a float. For more information, refer to.
        */
        class FloatField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        class BaseCompositeField$3<TValueType, TField, TFieldValue> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        A Rect field. For more information, refer to.
        */
        class RectField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Rect, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Rect>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering an integer. For more information, refer to.
        */
        class IntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A RectInt field. For more information, refer to.
        */
        class RectIntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.RectInt, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.RectInt>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector2 field. For more information, refer to.
        */
        class Vector2Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector3 field. For more information, refer to.
        */
        class Vector3Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector4 field. For more information, refer to.
        */
        class Vector4Field extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector4, UnityEngine.UIElements.FloatField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector4>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector2Int field. For more information, refer to.
        */
        class Vector2IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector2Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2Int>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Vector3Int field. For more information, refer to.
        */
        class Vector3IntField extends UnityEngine.UIElements.BaseCompositeField$3<UnityEngine.Vector3Int, UnityEngine.UIElements.IntegerField, number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector3Int>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering doubles.
        */
        class DoubleField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Speed at which the value changes for a given input device delta.
        */
        enum DeltaSpeed
        { Fast = 0, Normal = 1, Slow = 2 }
        class BasePopupField$2<TValueType, TValueChoice> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
        }
        class PopupField$1<T> extends UnityEngine.UIElements.BasePopupField$2<T, T> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<T>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A control that allows the user to pick a choice from a list of options. For more information, refer to.
        */
        class DropdownField extends UnityEngine.UIElements.PopupField$1<string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultValue: string, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultIndex: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a dropdown for switching between enum values. For more information, refer to.
        */
        class EnumField extends UnityEngine.UIElements.BaseField$1<System.Enum> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<System.Enum>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of text elements in elements of this type.
            */
            public static textUssClassName : string
            /** 
            USS class name of arrow indicators in elements of this type.
            */
            public static arrowUssClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Return the text value of the currently selected enum.
            */
            public get text(): string;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            */
            public Init ($defaultValue: System.Enum) : void
            /** 
            Initializes the EnumField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            * @param $includeObsoleteValues Set to true to display obsolete values as choices.
            */
            public Init ($defaultValue: System.Enum, $includeObsoleteValues: boolean) : void
            public constructor ()
            public constructor ($defaultValue: System.Enum)
            public constructor ($label: string, $defaultValue?: System.Enum)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A Foldout control is a collapsible section of a user interface. When toggled, it expands or collapses, which hides or reveals the elements it contains.
        */
        class Foldout extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Foldout elements.
            */
            public static ussClassName : string
            /** 
            The USS class name of Toggle sub-elements in Foldout elements.
            */
            public static toggleUssClassName : string
            /** 
            The USS class name for the content element in a Foldout.
            */
            public static contentUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static inputUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static checkmarkUssClassName : string
            /** 
            The USS class name for the Label element in a Foldout.
            */
            public static textUssClassName : string
            /** 
            This element contains the elements that are shown or hidden when you toggle the Foldout.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            This is the text of the toggle's label.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            This is the state of the Foldout's toggle. It is true if the Foldout is open and its contents are
            visible, and false if the Foldout is closed, and its contents are hidden.
            */
            public get value(): boolean;
            public set value(value: boolean);
            /** 
            Sets the value of the Foldout's Toggle sub-element, but does not notify the rest of the hierarchy of the change.
            * @param $newValue The new value of the foldout
            */
            public SetValueWithoutNotify ($newValue: boolean) : void
            public constructor ()
        }
        /** 
        Provides methods to display contextual menus with default textual options, VisualElement, or a combination of both.
        */
        class GenericDropdownMenu extends System.Object implements UnityEngine.UIElements.IGenericMenu
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name of items in elements of this type.
            */
            public static itemUssClassName : string
            /** 
            The USS class name of clicked items in elements of this type.
            */
            public static clickUssClassName : string
            /** 
            The USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            The USS class name of inner containers in elements of this type.
            */
            public static containerInnerUssClassName : string
            /** 
            The USS class name of outer containers in elements of this type.
            */
            public static containerOuterUssClassName : string
            /** 
            The USS class name of separators in elements of this type.
            */
            public static appendixUssClassName : string
            /** 
            The USS class name of checkmarks in elements of this type.
            */
            public static checkmarkUssClassName : string
            /** 
            The USS class name of separators in elements of this type.
            */
            public static separatorUssClassName : string
            /** 
            Adds an item to this menu using a default VisualElement.
            * @param $itemName The text to display to the user.
            * @param $isChecked Whether to display a checkmark next to the item.
            * @param $action The callback to invoke when the item is selected by the user.
            */
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action) : void
            public AddItem ($itemName: string, $isChecked: boolean, $action: System.Action$1<any>, $data: any) : void
            /** 
            Adds an item to this menu using a custom VisualElement.
            * @param $itemName The text that identifies this visual element.
            * @param $content Custom menu item visual element.
            */
            public AddItem ($itemName: string, $content: UnityEngine.UIElements.VisualElement) : void
            /** 
            Adds a disabled item to this menu using a default VisualElement.
            * @param $itemName The text that identifies this visual element.
            * @param $isChecked Whether to display a checkmark next to the item.
            */
            public AddDisabledItem ($itemName: string, $isChecked: boolean) : void
            /** 
            Adds a visual separator after the previously added items in this menu.
            * @param $path Path to submenu where the separator is added.
            */
            public AddSeparator ($path: string) : void
            /** 
            Displays the menu at the specified position.
            * @param $position The position in the coordinate space of the panel.
            * @param $targetElement The element used to determine in which root to parent the menu.
            * @param $anchored Whether the menu should use the width of the position argument instead of its normal width.
            */
            public DropDown ($position: UnityEngine.Rect, $targetElement?: UnityEngine.UIElements.VisualElement, $anchored?: boolean) : void
            public constructor ()
        }
        interface IGenericMenu
        {
        }
        /** 
        This is an enclosing container for a group of IGroupBoxOption. All group options within this
        container will interact together to allow a single selection, using the DefaultGroupManager.
        Default options are RadioButton, but users can provide other implementations.
        If no IGroupBox is found in the hierarchy, the default container will be the panel.
        */
        class GroupBox extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for GroupBox elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in GroupBox elements.
            */
            public static labelUssClassName : string
            /** 
            The title text of the box.
            */
            public get text(): string;
            public set text(value: string);
            public constructor ()
            public constructor ($text: string)
        }
        interface IGroupBox
        {
        }
        /** 
        Makes a field for editing an Hash128. For more information, refer to.
        */
        class Hash128Field extends UnityEngine.UIElements.TextInputBaseField$1<UnityEngine.Hash128> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Hash128>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            public get value(): UnityEngine.Hash128;
            public set value(value: UnityEngine.Hash128);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        User message types.
        */
        enum HelpBoxMessageType
        { None = 0, Info = 1, Warning = 2, Error = 3 }
        /** 
        Makes a help box with a message to the user. For more information, refer to.
        */
        class HelpBox extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The USS class name for Elements of this type.
            */
            public static ussClassName : string
            /** 
            The USS class name for labels in Elements of this type.
            */
            public static labelUssClassName : string
            /** 
            The USS class name for images in Elements of this type.
            */
            public static iconUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Info state in Elements of this type.
            */
            public static iconInfoUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Warning state in Elements of this type.
            */
            public static iconwarningUssClassName : string
            /** 
            The USS class name for the HelpBoxMessageType.Error state in Elements of this type.
            */
            public static iconErrorUssClassName : string
            /** 
            The message text.
            */
            public get text(): string;
            public set text(value: string);
            /** 
            The type of message.
            */
            public get messageType(): UnityEngine.UIElements.HelpBoxMessageType;
            public set messageType(value: UnityEngine.UIElements.HelpBoxMessageType);
            public constructor ()
            public constructor ($text: string, $messageType: UnityEngine.UIElements.HelpBoxMessageType)
        }
        /** 
        A VisualElement representing a source texture.
        Note: This is not related to the UnityEngine.UI.Image uGUI control. This is the Image control for the UI Toolkit framework.
        */
        class Image extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The texture to display in this image. If you assign a Texture or Texture2D, the Image element will resize and show the assigned texture.
            */
            public get image(): UnityEngine.Texture;
            public set image(value: UnityEngine.Texture);
            /** 
            The sprite to display in this image.
            */
            public get sprite(): UnityEngine.Sprite;
            public set sprite(value: UnityEngine.Sprite);
            /** 
            The VectorImage to display in this image.
            */
            public get vectorImage(): UnityEngine.UIElements.VectorImage;
            public set vectorImage(value: UnityEngine.UIElements.VectorImage);
            /** 
            The source rectangle inside the texture relative to the top left corner.
            */
            public get sourceRect(): UnityEngine.Rect;
            public set sourceRect(value: UnityEngine.Rect);
            /** 
            The base texture coordinates of the Image relative to the bottom left corner.
            */
            public get uv(): UnityEngine.Rect;
            public set uv(value: UnityEngine.Rect);
            /** 
            ScaleMode used to display the Image.
            */
            public get scaleMode(): UnityEngine.ScaleMode;
            public set scaleMode(value: UnityEngine.ScaleMode);
            /** 
            Tinting color for this Image.
            */
            public get tintColor(): UnityEngine.Color;
            public set tintColor(value: UnityEngine.Color);
            public constructor ()
        }
        /** 
        An asset that represents a vector image.
        */
        class VectorImage extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The width of the vector image.
            */
            public get width(): number;
            /** The height of the vector image.
            */
            public get height(): number;
            public constructor ()
        }
        /** 
        INotifyValueChangedExtensions is a set of extension methods useful for objects implementing INotifyValueChanged_1.
        */
        class INotifyValueChangedExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class ChangeEvent$1<T> extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.ChangeEvent$1<T>> implements UnityEngine.UIElements.IChangeEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        interface IChangeEvent
        {
        }
        interface EventCallback$1<TEventType>
        { 
        (evt: TEventType) : void; 
        Invoke?: (evt: TEventType) => void;
        }
        /** 
        A TextField accepts and displays text input. For more information, refer to.
        */
        class TextField extends UnityEngine.UIElements.TextInputBaseField$1<string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Set this to true to allow multiple lines in the textfield and false if otherwise.
            */
            public get multiline(): boolean;
            public set multiline(value: boolean);
            /** 
            The string currently being exposed by the field.
            */
            public get value(): string;
            public set value(value: string);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public constructor ($label: string)
            public constructor ($label: string, $maxLength: number, $multiline: boolean, $isPasswordField: boolean, $maskChar: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Provides an Element displaying text. For more information, refer to.
        */
        class Label extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
            public constructor ($text: string)
        }
        /** 
        A ListView is a vertically scrollable area that links to, and displays, a list of items.
        */
        class ListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the list.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            public constructor ()
            public constructor ($itemsSource: System.Collections.IList, $itemHeight?: number, $makeItem?: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem?: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        An instance of this class holds a tree of VisualElementAsset's, created from a UXML file. Each node in the file corresponds to a VisualElementAsset. You can clone a VisualTreeAsset to create a tree of VisualElement's.
        Note: You can't generate a VisualTreeAsset from raw UXML at runtime.
        */
        class VisualTreeAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the UXML File
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the UXML File
            */
            public get importedWithWarnings(): boolean;
            /** 
            The UXML templates used by this VisualTreeAsset.
            */
            public get templateDependencies(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.VisualTreeAsset>;
            /** 
            The stylesheets used by this VisualTreeAsset.
            */
            public get stylesheets(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StyleSheet>;
            /** 
            A hash value computed from the template content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public Instantiate ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree () : UnityEngine.UIElements.TemplateContainer
            /** 
            Build a tree of VisualElements from the asset.
            * @param $bindingPath The path to the property that you want to bind to the root of the cloned tree.
            * @returns The root of the tree of VisualElements that was just cloned. 
            */
            public CloneTree ($bindingPath: string) : UnityEngine.UIElements.TemplateContainer
            /** 
            Builds a tree of VisualElements from the asset.
            * @param $target A VisualElement that will act as the root of the cloned tree.
            */
            public CloneTree ($target: UnityEngine.UIElements.VisualElement) : void
            public CloneTree ($target: UnityEngine.UIElements.VisualElement, $firstElementIndex: $Ref<number>, $elementAddedCount: $Ref<number>) : void
            public constructor ()
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Clones the object original and returns the clone.
            * @param $original An existing object that you want to make a copy of.
            * @param $position Position for the new object.
            * @param $rotation Orientation of the new object.
            * @param $parent Parent that will be assigned to the new object.
            * @param $instantiateInWorldSpace When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent.
            * @returns The instantiated clone. 
            */
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $instantiateInWorldSpace: boolean) : UnityEngine.Object
            public static Instantiate ($original: UnityEngine.Object, $parent: UnityEngine.Transform, $worldPositionStays: boolean) : UnityEngine.Object
        }
        /** 
        Makes a text field for entering long integers. For more information, refer to.
        */
        class LongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A min/max slider containing a representation of a range. For more information, refer to.
        */
        class MinMaxSlider extends UnityEngine.UIElements.BaseField$1<UnityEngine.Vector2> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Vector2>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of tracker elements in elements of this type.
            */
            public static trackerUssClassName : string
            /** 
            USS class name of dragger elements in elements of this type.
            */
            public static draggerUssClassName : string
            /** 
            USS class name of the minimum thumb elements in elements of this type.
            */
            public static minThumbUssClassName : string
            /** 
            USS class name of the maximum thumb elements in elements of this type.
            */
            public static maxThumbUssClassName : string
            /** 
            This is the low value of the range represented on the slider.
            */
            public get minValue(): number;
            public set minValue(value: number);
            /** 
            This is the high value of the range represented on the slider.
            */
            public get maxValue(): number;
            public set maxValue(value: number);
            /** 
            This is the value of the slider. This is a Vector2 where the x is the lower bound and the y is the higher bound.
            */
            public get value(): UnityEngine.Vector2;
            public set value(value: UnityEngine.Vector2);
            /** 
            Returns the range of the low/high limits of the slider.
            */
            public get range(): number;
            /** 
            This is the low limit of the slider.
            */
            public get lowLimit(): number;
            public set lowLimit(value: number);
            /** 
            This is the high limit of the slider.
            */
            public get highLimit(): number;
            public set highLimit(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($minValue: number, $maxValue: number, $minLimit: number, $maxLimit: number)
            public constructor ($label: string, $minValue?: number, $maxValue?: number, $minLimit?: number, $maxLimit?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A list view with multi column support.
        */
        class MultiColumnListView extends UnityEngine.UIElements.BaseListView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnListViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnListViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Whether or not sorting is enabled in the multi-column header.
            */
            public get sortingEnabled(): boolean;
            public set sortingEnabled(value: boolean);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        A tree view with multi column support.
        */
        class MultiColumnTreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The view controller for this view, cast as a MultiColumnTreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.MultiColumnTreeViewController;
            /** 
            Contains information about which columns are currently being sorted.
            */
            public get sortedColumns(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.SortColumnDescription>;
            /** 
            The collection of columns for the multi-column header.
            */
            public get columns(): UnityEngine.UIElements.Columns;
            /** 
            The collection of sorted columns by default.
            */
            public get sortColumnDescriptions(): UnityEngine.UIElements.SortColumnDescriptions;
            /** 
            Whether or not sorting is enabled in the multi-column header.
            */
            public get sortingEnabled(): boolean;
            public set sortingEnabled(value: boolean);
            public add_columnSortingChanged ($value: System.Action) : void
            public remove_columnSortingChanged ($value: System.Action) : void
            public add_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public remove_headerContextMenuPopulateEvent ($value: System.Action$2<UnityEngine.UIElements.ContextualMenuPopulateEvent, UnityEngine.UIElements.Column>) : void
            public constructor ()
            public constructor ($columns: UnityEngine.UIElements.Columns)
        }
        /** 
        The sort direction.
        */
        enum SortDirection
        { Ascending = 0, Descending = 1 }
        /** 
        Styled visual text element. This element doesn't have any functionality. It's just a container with a border and a title, rather than a window or popup. For more information, refer to.
        */
        class PopupWindow extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
        }
        /** 
        Abstract base class for the ProgressBar.
        */
        class AbstractProgressBar extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS Class Name used to style the ProgressBar.
            */
            public static ussClassName : string
            /** 
            USS Class Name used to style the container of the ProgressBar.
            */
            public static containerUssClassName : string
            /** 
            USS Class Name used to style the title of the ProgressBar.
            */
            public static titleUssClassName : string
            /** 
            USS Class Name used to style the container of the title of the ProgressBar.
            */
            public static titleContainerUssClassName : string
            /** 
            USS Class Name used to style the progress bar of the ProgressBar.
            */
            public static progressUssClassName : string
            /** 
            USS Class Name used to style the background of the ProgressBar.
            */
            public static backgroundUssClassName : string
            /** 
            Sets the title of the ProgressBar that displays in the center of the control.
            */
            public get title(): string;
            public set title(value: string);
            /** 
            Sets the minimum value of the ProgressBar.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Sets the maximum value of the ProgressBar.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Sets the progress value. If the value has changed, dispatches an ChangeEvent_1 of type float.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Sets the progress value.
            */
            public SetValueWithoutNotify ($newValue: number) : void
        }
        /** 
        A control that displays the progress between a lower and upper bound value.
        */
        class ProgressBar extends UnityEngine.UIElements.AbstractProgressBar implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A control that allows users to select a single option inside a RadioButtonGroup. For more information, refer to.
        */
        class RadioButton extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.IGroupBoxOption, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButton elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in RadioButton elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in RadioButton elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of checkmark background in RadioButton elements.
            */
            public static checkmarkBackgroundUssClassName : string
            /** 
            USS class name of checkmark in RadioButton elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in RadioButton elements.
            */
            public static textUssClassName : string
            public get value(): boolean;
            public set value(value: boolean);
            public constructor ()
            public constructor ($label: string)
        }
        interface IGroupBoxOption
        {
        }
        /** 
        A control that allows single selection out of a logical group of RadioButton elements. Selecting one will deselect the others. For more information, refer to.
        */
        class RadioButtonGroup extends UnityEngine.UIElements.BaseField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IGroupBox, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for RadioButtonGroup elements.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            The list of available choices in the group.
            */
            public get choices(): System.Collections.Generic.IEnumerable$1<string>;
            public set choices(value: System.Collections.Generic.IEnumerable$1<string>);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string, $radioButtonChoices?: System.Collections.Generic.List$1<string>)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A button that executes an action repeatedly while it is pressed. For more information, refer to.
        */
        class RepeatButton extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public SetAction ($clickEvent: System.Action, $delay: bigint, $interval: bigint) : void
            public constructor ()
            public constructor ($clickEvent: System.Action, $delay: bigint, $interval: bigint)
        }
        /** 
        A vertical or horizontal scrollbar. For more information, refer to.
        */
        class Scroller extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of elements of this type, when they are displayed horizontally.
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed vertically.
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name of slider elements in elements of this type.
            */
            public static sliderUssClassName : string
            /** 
            USS class name of low buttons in elements of this type.
            */
            public static lowButtonUssClassName : string
            /** 
            USS class name of high buttons in elements of this type.
            */
            public static highButtonUssClassName : string
            /** 
            The slider used by this scroller.
            */
            public get slider(): UnityEngine.UIElements.Slider;
            /** 
            Bottom or left scroll button.
            */
            public get lowButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Top or right scroll button.
            */
            public get highButton(): UnityEngine.UIElements.RepeatButton;
            /** 
            Value that defines the slider position. It lies between lowValue and highValue.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            Minimum value.
            */
            public get lowValue(): number;
            public set lowValue(value: number);
            /** 
            Maximum value.
            */
            public get highValue(): number;
            public set highValue(value: number);
            /** 
            Direction of this scrollbar.
            */
            public get direction(): UnityEngine.UIElements.SliderDirection;
            public set direction(value: UnityEngine.UIElements.SliderDirection);
            public add_valueChanged ($value: System.Action$1<number>) : void
            public remove_valueChanged ($value: System.Action$1<number>) : void
            /** 
            Updates the slider element size as a ratio of total range. A value greater than or equal to 1 will disable the Scroller.
            * @param $factor Slider size ratio.
            */
            public Adjust ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown () : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageUp ($factor: number) : void
            /** 
            Will change the value according to the current slider pageSize.
            */
            public ScrollPageDown ($factor: number) : void
            public constructor ()
            public constructor ($lowValue: number, $highValue: number, $valueChanged: System.Action$1<number>, $direction?: UnityEngine.UIElements.SliderDirection)
        }
        class BaseSlider$1<TValueType> extends UnityEngine.UIElements.BaseField$1<TValueType> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<TValueType>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TValueType>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        A slider containing floating point values. For more information, refer to.
        */
        class Slider extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Configurations of the ScrollView to influence the layout of its contents and how scrollbars appear.
        ScrollView.mode
        */
        enum ScrollViewMode
        { Vertical = 0, Horizontal = 1, VerticalAndHorizontal = 2 }
        /** 
        Options for controlling the visibility of scroll bars in the ScrollView.
        */
        enum ScrollerVisibility
        { Auto = 0, AlwaysVisible = 1, Hidden = 2 }
        /** 
        Displays its contents inside a scrollable frame. For more information, see.
        */
        class ScrollView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of viewport elements in elements of this type.
            */
            public static viewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantViewportUssClassName : string
            /** 
            USS class name that's added when the Viewport is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantViewportUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentAndVerticalScrollUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantContentUssClassName : string
            /** 
            USS class name that's added when the ContentContainer is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantContentUssClassName : string
            /** 
            USS class name of horizontal scrollers in elements of this type.
            */
            public static hScrollerUssClassName : string
            /** 
            USS class name of vertical scrollers in elements of this type.
            */
            public static vScrollerUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in horizontal mode.
            ScrollViewMode.Horizontal
            */
            public static horizontalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in vertical mode.
            ScrollViewMode.Vertical
            */
            public static verticalVariantUssClassName : string
            /** 
            USS class name that's added when the ScrollView is in both horizontal and vertical mode.
            ScrollViewMode.VerticalAndHorizontal
            */
            public static verticalHorizontalVariantUssClassName : string
            public static scrollVariantUssClassName : string
            /** 
            Specifies whether the horizontal scroll bar is visible.
            */
            public get horizontalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set horizontalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            Specifies whether the vertical scroll bar is visible.
            */
            public get verticalScrollerVisibility(): UnityEngine.UIElements.ScrollerVisibility;
            public set verticalScrollerVisibility(value: UnityEngine.UIElements.ScrollerVisibility);
            /** 
            Specifies the minimum amount of time in milliseconds between each elastic spring animation execution.
            */
            public get elasticAnimationIntervalMs(): bigint;
            public set elasticAnimationIntervalMs(value: bigint);
            /** 
            The current scrolling position.
            */
            public get scrollOffset(): UnityEngine.Vector2;
            public set scrollOffset(value: UnityEngine.Vector2);
            /** 
            This property controls the speed of the horizontal scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get horizontalPageSize(): number;
            public set horizontalPageSize(value: number);
            /** 
            This property controls the speed of the vertical scrolling when using a keyboard or the on-screen scrollbar buttons (arrows and handle), based on the size of the page.
            */
            public get verticalPageSize(): number;
            public set verticalPageSize(value: number);
            /** 
            This property controls the scrolling speed only when using a mouse scroll wheel, based on the size of the page. It takes precedence over the --unity-metrics-single_line-height USS variable.
            */
            public get mouseWheelScrollSize(): number;
            public set mouseWheelScrollSize(value: number);
            /** 
            Controls the rate at which the scrolling movement slows after a user scrolls using a touch interaction.
            */
            public get scrollDecelerationRate(): number;
            public set scrollDecelerationRate(value: number);
            /** 
            The amount of elasticity to use when a user tries to scroll past the boundaries of the scroll view.
            */
            public get elasticity(): number;
            public set elasticity(value: number);
            /** 
            The behavior to use when a user tries to scroll past the boundaries of the ScrollView content using a touch interaction.
            */
            public get touchScrollBehavior(): UnityEngine.UIElements.ScrollView.TouchScrollBehavior;
            public set touchScrollBehavior(value: UnityEngine.UIElements.ScrollView.TouchScrollBehavior);
            /** 
            The behavior to use when scrolling reaches limits of a nested ScrollView.
            */
            public get nestedInteractionKind(): UnityEngine.UIElements.ScrollView.NestedInteractionKind;
            public set nestedInteractionKind(value: UnityEngine.UIElements.ScrollView.NestedInteractionKind);
            /** 
            Represents the visible part of contentContainer.
            */
            public get contentViewport(): UnityEngine.UIElements.VisualElement;
            /** 
            Horizontal scrollbar.
            */
            public get horizontalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Vertical Scrollbar.
            */
            public get verticalScroller(): UnityEngine.UIElements.Scroller;
            /** 
            Contains full content, potentially partially visible.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Controls how the ScrollView allows the user to scroll the contents.
            ScrollViewMode
            */
            public get mode(): UnityEngine.UIElements.ScrollViewMode;
            public set mode(value: UnityEngine.UIElements.ScrollViewMode);
            /** 
            Scroll to a specific child element.
            * @param $child The child to scroll to.
            */
            public ScrollTo ($child: UnityEngine.UIElements.VisualElement) : void
            public constructor ()
            public constructor ($scrollViewMode: UnityEngine.UIElements.ScrollViewMode)
        }
        /** 
        A slider containing Integer discrete values. For more information, refer to.
        */
        class SliderInt extends UnityEngine.UIElements.BaseSlider$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            The value to add or remove to the SliderInt.value when it is clicked.
            */
            public get pageSize(): number;
            public set pageSize(value: number);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($start: number, $end: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public constructor ($label: string, $start?: number, $end?: number, $direction?: UnityEngine.UIElements.SliderDirection, $pageSize?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Creates a tab to organize content on different screens.
        */
        class Tab extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header of this type.
            */
            public static tabHeaderUssClassName : string
            /** 
            USS class name for the icon inside the header.
            */
            public static tabHeaderImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the value is null.
            */
            public static tabHeaderEmptyImageUssClassName : string
            /** 
            USS class name for the icon inside the header when the label is empty or null.
            */
            public static tabHeaderStandaloneImageUssClassName : string
            /** 
            USS class name for the label of the header.
            */
            public static tabHeaderLabelUssClassName : string
            /** 
            USS class name for the label of the header when the value is empty or null.
            */
            public static tabHeaderEmptyLabeUssClassName : string
            /** 
            USS class name for the active state underline of the header.
            */
            public static tabHeaderUnderlineUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static contentUssClassName : string
            /** 
            USS class name for the dragging state of this type.
            */
            public static draggingUssClassName : string
            /** 
            USS class name for reorderable tab elements.
            */
            public static reorderableUssClassName : string
            /** 
            USS class name for drag handle in reorderable tabs.
            */
            public static reorderableItemHandleUssClassName : string
            /** 
            USS class name for drag handlebar in reorderable tabs.
            */
            public static reorderableItemHandleBarUssClassName : string
            /** 
            The USS class name for a closeable tab.
            */
            public static closeableUssClassName : string
            /** 
            The USS class name for close button in closable tabs.
            */
            public static closeButtonUssClassName : string
            /** 
            Returns the Tab's header.
            */
            public get tabHeader(): UnityEngine.UIElements.VisualElement;
            /** 
            Sets the label of the Tab's header.
            */
            public get label(): string;
            public set label(value: string);
            /** 
            Sets the icon for the Tab's header.
            */
            public get iconImage(): UnityEngine.UIElements.Background;
            public set iconImage(value: UnityEngine.UIElements.Background);
            /** 
            A property that adds the ability to close tabs.
            */
            public get closeable(): boolean;
            public set closeable(value: boolean);
            /** 
            The container for the content of the Tab.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public add_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_selected ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public add_closing ($value: System.Func$1<boolean>) : void
            public remove_closing ($value: System.Func$1<boolean>) : void
            public add_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public remove_closed ($value: System.Action$1<UnityEngine.UIElements.Tab>) : void
            public constructor ()
            public constructor ($label: string)
            public constructor ($iconImage: UnityEngine.UIElements.Background)
            public constructor ($label: string, $iconImage: UnityEngine.UIElements.Background)
        }
        /** 
        Creates a tab view that groups a one or more Tab elements.
        */
        class TabView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for the header container of this type.
            */
            public static headerContainerClassName : string
            /** 
            USS class name for the content container of this type.
            */
            public static contentContainerUssClassName : string
            /** 
            The USS class name for reorderable tab view.
            */
            public static reorderableUssClassName : string
            /** 
            The USS class name for vertical tab view.
            */
            public static verticalUssClassName : string
            /** 
            The container for the content of the TabView.
            */
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Property that holds the current active tab.
            */
            public get activeTab(): UnityEngine.UIElements.Tab;
            public set activeTab(value: UnityEngine.UIElements.Tab);
            /** 
            A property that returns the index of current active tab inside a list of available tabs.
            */
            public get selectedTabIndex(): number;
            public set selectedTabIndex(value: number);
            /** 
            A property that adds dragging support to tabs.
            */
            public get reorderable(): boolean;
            public set reorderable(value: boolean);
            public add_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public remove_activeTabChanged ($value: System.Action$2<UnityEngine.UIElements.Tab, UnityEngine.UIElements.Tab>) : void
            public constructor ()
        }
        /** 
        A Toggle is a clickable element that represents a boolean value.
        */
        class Toggle extends UnityEngine.UIElements.BaseBoolField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for Toggle elements.
            */
            public static ussClassName : string
            /** 
            USS class name for Labels in Toggle elements.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in Toggle elements.
            */
            public static inputUssClassName : string
            /** 
            USS class name of Images in Toggle elements.
            */
            public static checkmarkUssClassName : string
            /** 
            USS class name of Text elements in Toggle elements.
            */
            public static textUssClassName : string
            /** 
            USS class name of Toggle elements that have mixed values
            */
            public static mixedValuesUssClassName : string
            public constructor ()
            public constructor ($label: string)
        }
        /** 
        The structure that keeps track of the Button states inside a ToggleButtonGroup.
        */
        class ToggleButtonGroupState extends System.ValueType implements System.IComparable$1<UnityEngine.UIElements.ToggleButtonGroupState>, System.IEquatable$1<UnityEngine.UIElements.ToggleButtonGroupState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the number of toggle button options available.
            */
            public get length(): number;
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            /** 
            Sets all the available options to active.
            */
            public SetAllOptions () : void
            /** 
            Resets the states of the toggle buttons.
            */
            public ResetAllOptions () : void
            /** 
            Toggles all the available options' state.
            */
            public ToggleAllOptions () : void
            public static CreateFromOptions ($options: System.Collections.Generic.IList$1<boolean>) : UnityEngine.UIElements.ToggleButtonGroupState
            public static FromEnumFlags ($options: System.Enum, $length?: number) : UnityEngine.UIElements.ToggleButtonGroupState
            /** 
            Compares two ToggleButtonGroupState.
            * @param $other The option set to be compared against.
            * @returns True if both option sets are the same, otherwise returns false. 
            */
            public CompareTo ($other: UnityEngine.UIElements.ToggleButtonGroupState) : number
            public static Compare ($options: UnityEngine.UIElements.ToggleButtonGroupState, $value: System.Enum) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.ToggleButtonGroupState, $rhs: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Checks if a given ToggleButtonGroupState matches with the current one.
            * @param $other A ToggleButtonGroupState to be compared against.
            * @returns True if both option has the same data and number of options, otherwise returns false. 
            */
            public Equals ($other: UnityEngine.UIElements.ToggleButtonGroupState) : boolean
            /** 
            Compares the the current option set with an Object.
            * @param $obj An object to be compared against.
            * @returns True if both option sets are not the same, otherwise returns false. 
            */
            public Equals ($obj: any) : boolean
            public constructor ($optionsBitMask: bigint, $length: number)
        }
        /** 
        A control that allows single or multiple selection out of a logical group of Button elements.
        */
        class ToggleButtonGroup extends UnityEngine.UIElements.BaseField$1<UnityEngine.UIElements.ToggleButtonGroupState> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.UIElements.ToggleButtonGroupState>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements for this type.
            */
            public static ussClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static containerUssClassName : string
            /** 
            USS class name of container element of this type.
            */
            public static buttonGroupClassName : string
            /** 
            USS class name for any Buttons in the group.
            */
            public static buttonClassName : string
            /** 
            USS class name for the leftmost Button in the group.
            */
            public static buttonLeftClassName : string
            /** 
            USS class name for any Buttons in the middle of the group.
            */
            public static buttonMidClassName : string
            /** 
            USS class name for the rightmost Button in the group.
            */
            public static buttonRightClassName : string
            /** 
            USS class name for the Button if only one is available in the group.
            */
            public static buttonStandaloneClassName : string
            /** 
            Whether all buttons can be selected.
            */
            public get isMultipleSelection(): boolean;
            public set isMultipleSelection(value: boolean);
            /** 
            Allows having all buttons to be unchecked when set to true.
            */
            public get allowEmptySelection(): boolean;
            public set allowEmptySelection(value: boolean);
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($label: string)
            public constructor ($toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public constructor ($label: string, $toggleButtonGroupState: UnityEngine.UIElements.ToggleButtonGroupState)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        A TreeView is a vertically scrollable area that links to, and displays, a list of items organized in a tree.
        */
        class TreeView extends UnityEngine.UIElements.BaseTreeView implements UnityEngine.ISerializationCallbackReceiver, UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            Callback for constructing the VisualElement that is the template for each recycled and re-bound element in the list.
            */
            public get makeItem(): System.Func$1<UnityEngine.UIElements.VisualElement>;
            public set makeItem(value: System.Func$1<UnityEngine.UIElements.VisualElement>);
            /** 
            A UXML template that constructs each recycled and rebound element within the tree.
            This template is designed to replace the makeItem definition.
            */
            public get itemTemplate(): UnityEngine.UIElements.VisualTreeAsset;
            public set itemTemplate(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            Callback for binding a data item to the visual element.
            */
            public get bindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set bindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback for unbinding a data item from the VisualElement.
            */
            public get unbindItem(): System.Action$2<UnityEngine.UIElements.VisualElement, number>;
            public set unbindItem(value: System.Action$2<UnityEngine.UIElements.VisualElement, number>);
            /** 
            Callback invoked when a VisualElement created via makeItem is no longer needed and will be destroyed.
            */
            public get destroyItem(): System.Action$1<UnityEngine.UIElements.VisualElement>;
            public set destroyItem(value: System.Action$1<UnityEngine.UIElements.VisualElement>);
            /** 
            The view controller for this view, cast as a TreeViewController.
            */
            public get viewController(): UnityEngine.UIElements.TreeViewController;
            public constructor ()
            public constructor ($makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
            public constructor ($itemHeight: number, $makeItem: System.Func$1<UnityEngine.UIElements.VisualElement>, $bindItem: System.Action$2<UnityEngine.UIElements.VisualElement, number>)
        }
        /** 
        A SplitView that contains two resizable panes. One pane is fixed-size while the other pane has flex-grow style set to 1 to take all remaining space. The border between the panes is draggable to resize both panes. Both horizontal and vertical modes are supported. Requires exactly two child elements to operate.
        */
        class TwoPaneSplitView extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The child element that is set as the fixed size pane.
            */
            public get fixedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            The child element that is set as the flexable size pane.
            */
            public get flexedPane(): UnityEngine.UIElements.VisualElement;
            /** 
            0 for setting first child as the fixed pane, 1 for the second child element.
            */
            public get fixedPaneIndex(): number;
            public set fixedPaneIndex(value: number);
            /** 
            The initial width or height for the fixed pane.
            */
            public get fixedPaneInitialDimension(): number;
            public set fixedPaneInitialDimension(value: number);
            /** 
            Orientation of the split view.
            */
            public get orientation(): UnityEngine.UIElements.TwoPaneSplitViewOrientation;
            public set orientation(value: UnityEngine.UIElements.TwoPaneSplitViewOrientation);
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            /** 
            Collapse one of the panes of the split view. This will hide the resizer and make the other child take up all available space.
            * @param $index Index of child to collapse.
            */
            public CollapseChild ($index: number) : void
            /** 
            Un-collapse the split view. This will restore the split view to the state it was before the previous collapse.
            */
            public UnCollapse () : void
            public constructor ()
            public constructor ($fixedPaneIndex: number, $fixedPaneStartDimension: number, $orientation: UnityEngine.UIElements.TwoPaneSplitViewOrientation)
        }
        /** 
        Determines the orientation of the two resizable panes.
        */
        enum TwoPaneSplitViewOrientation
        { Horizontal = 0, Vertical = 1 }
        /** 
        Makes a text field for entering an unsigned integer. For more information, refer to.
        */
        class UnsignedIntegerField extends UnityEngine.UIElements.TextValueField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<number>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Makes a text field for entering unsigned long integers. For more information, refer to.
        */
        class UnsignedLongField extends UnityEngine.UIElements.TextValueField$1<bigint> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IValueField$1<bigint>, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<bigint>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IDelayedField, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            public get alignContent(): UnityEngine.UIElements.Align;
            /** 
            Alignment of children on the cross axis of this container.
            */
            public get alignItems(): UnityEngine.UIElements.Align;
            /** 
            Similar to align-items, but only for this specific element.
            */
            public get alignSelf(): UnityEngine.UIElements.Align;
            /** 
            Background color to paint in the element's box.
            */
            public get backgroundColor(): UnityEngine.Color;
            /** 
            Background image to paint in the element's box.
            */
            public get backgroundImage(): UnityEngine.UIElements.Background;
            /** 
            Background image x position value.
            */
            public get backgroundPositionX(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image y position value.
            */
            public get backgroundPositionY(): UnityEngine.UIElements.BackgroundPosition;
            /** 
            Background image repeat value.
            */
            public get backgroundRepeat(): UnityEngine.UIElements.BackgroundRepeat;
            /** 
            Background image size value.
            */
            public get backgroundSize(): UnityEngine.UIElements.BackgroundSize;
            /** 
            Color of the element's bottom border.
            */
            public get borderBottomColor(): UnityEngine.Color;
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomLeftRadius(): number;
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderBottomRightRadius(): number;
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            public get borderBottomWidth(): number;
            /** 
            Color of the element's left border.
            */
            public get borderLeftColor(): UnityEngine.Color;
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            public get borderLeftWidth(): number;
            /** 
            Color of the element's right border.
            */
            public get borderRightColor(): UnityEngine.Color;
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            public get borderRightWidth(): number;
            /** 
            Color of the element's top border.
            */
            public get borderTopColor(): UnityEngine.Color;
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopLeftRadius(): number;
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            public get borderTopRightRadius(): number;
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            public get borderTopWidth(): number;
            /** 
            Bottom distance from the element's box during layout.
            */
            public get bottom(): number;
            /** 
            Color to use when drawing the text of an element.
            */
            public get color(): UnityEngine.Color;
            /** 
            Defines how an element is displayed in the layout.
            */
            public get display(): UnityEngine.UIElements.DisplayStyle;
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            public get flexBasis(): UnityEngine.UIElements.StyleFloat;
            /** 
            Direction of the main axis to layout children in a container.
            */
            public get flexDirection(): UnityEngine.UIElements.FlexDirection;
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            public get flexGrow(): number;
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            public get flexShrink(): number;
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            public get flexWrap(): UnityEngine.UIElements.Wrap;
            /** 
            Font size to draw the element's text.
            */
            public get fontSize(): number;
            /** 
            Fixed height of an element for the layout.
            */
            public get height(): number;
            /** 
            Justification of children on the main axis of this container.
            */
            public get justifyContent(): UnityEngine.UIElements.Justify;
            /** 
            Left distance from the element's box during layout.
            */
            public get left(): number;
            /** 
            Increases or decreases the space between characters.
            */
            public get letterSpacing(): number;
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            public get marginBottom(): number;
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            public get marginLeft(): number;
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            public get marginRight(): number;
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            public get marginTop(): number;
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            public get maxHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            public get maxWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            public get minHeight(): UnityEngine.UIElements.StyleFloat;
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            public get minWidth(): UnityEngine.UIElements.StyleFloat;
            /** 
            Specifies the transparency of an element and of its children.
            */
            public get opacity(): number;
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            public get paddingBottom(): number;
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            public get paddingLeft(): number;
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            public get paddingRight(): number;
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            public get paddingTop(): number;
            /** 
            Element's positioning in its parent container.
            */
            public get position(): UnityEngine.UIElements.Position;
            /** 
            Right distance from the element's box during layout.
            */
            public get right(): number;
            /** 
            A rotation transformation.
            */
            public get rotate(): UnityEngine.UIElements.Rotate;
            /** 
            A scaling transformation.
            */
            public get scale(): UnityEngine.UIElements.Scale;
            /** 
            The element's text overflow mode.
            */
            public get textOverflow(): UnityEngine.UIElements.TextOverflow;
            /** 
            Top distance from the element's box during layout.
            */
            public get top(): number;
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            public get transformOrigin(): UnityEngine.Vector3;
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            public get transitionDelay(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Time a transition animation should take to complete.
            */
            public get transitionDuration(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.TimeValue>;
            /** 
            Properties to which a transition effect should be applied.
            */
            public get transitionProperty(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>;
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            public get transitionTimingFunction(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.EasingFunction>;
            /** 
            A translate transformation.
            */
            public get translate(): UnityEngine.Vector3;
            /** 
            Tinting color for the element's backgroundImage.
            */
            public get unityBackgroundImageTintColor(): UnityEngine.Color;
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            public get unityFont(): UnityEngine.Font;
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            public get unityFontDefinition(): UnityEngine.UIElements.FontDefinition;
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            public get unityFontStyleAndWeight(): UnityEngine.FontStyle;
            /** 
            Increases or decreases the space between paragraphs.
            */
            public get unityParagraphSpacing(): number;
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            public get unitySliceBottom(): number;
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            public get unitySliceLeft(): number;
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            public get unitySliceRight(): number;
            /** 
            Scale applied to an element's slices.
            */
            public get unitySliceScale(): number;
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            public get unitySliceTop(): number;
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            public get unityTextAlign(): UnityEngine.TextAnchor;
            /** 
            Outline color of the text.
            */
            public get unityTextOutlineColor(): UnityEngine.Color;
            /** 
            Outline width of the text.
            */
            public get unityTextOutlineWidth(): number;
            /** 
            The element's text overflow position.
            */
            public get unityTextOverflowPosition(): UnityEngine.UIElements.TextOverflowPosition;
            /** 
            Specifies whether or not an element is visible.
            */
            public get visibility(): UnityEngine.UIElements.Visibility;
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            public get whiteSpace(): UnityEngine.UIElements.WhiteSpace;
            /** 
            Fixed width of an element for the layout.
            */
            public get width(): number;
            /** 
            Increases or decreases the space between words.
            */
            public get wordSpacing(): number;
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Returns the animation experimental interface.
            */
            public get animation(): UnityEngine.UIElements.Experimental.ITransitionAnimations;
            /** 
            Indicates whether to enable the mixed value state on the value field.
            */
            public get showMixedValue(): boolean;
            public set showMixedValue(value: boolean);
            /** 
            The rotation of the VisualElement transform stored as a Quaternion.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** 
            Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).
            */
            public get matrix(): UnityEngine.Matrix4x4;
            public constructor ()
            public constructor ($maxLength: number)
            public constructor ($label: string, $maxLength?: number)
            public Execute ($timerUpdateEvent: System.Action$1<UnityEngine.UIElements.TimerState>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Schedule this action to be executed later.
            * @param $updateEvent The action to be executed.
            * @returns Reference to the scheduled action. 
            */
            public Execute ($updateEvent: System.Action) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Checks if a IBindable is bound to a property.
            * @param $control This Bindable object.
            * @returns True if this IBindable is bound to a property. 
            */
            public IsBound () : boolean
            /** 
            Sends an event to the event handler.
            * @param $e The event to send.
            */
            public SendEvent ($e: UnityEngine.UIElements.EventBase) : void
            /** 
            Handles an event according to its propagation phase and current target, by executing the element's
            default action or callbacks associated with the event.
            * @param $evt The event to handle.
            */
            public HandleEvent ($evt: UnityEngine.UIElements.EventBase) : void
            /** 
            Returns true if event handlers, for the event propagation TrickleDown phase, are attached to this object.
            * @returns True if the object already has event handlers for the TrickleDown phase. 
            */
            public HasTrickleDownHandlers () : boolean
            /** 
            Returns true if event handlers for the event propagation BubbleUp phase, have been attached on this object.
            * @returns True if object has event handlers for the BubbleUp phase. 
            */
            public HasBubbleUpHandlers () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public HasMouseCapture () : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public CaptureMouse () : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public ReleaseMouse () : void
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public HasPointerCapture ($pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public CapturePointer ($pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public ReleasePointer ($pointerId: number) : void
        }
        /** 
        Script interface for VisualElement cursor style property IStyle.cursor.
        */
        class Cursor extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Cursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The texture to use for the cursor style. To use a texture as a cursor, import the texture with "Read/Write enabled" in the texture importer (or using the "Cursor" defaults).
            */
            public get texture(): UnityEngine.Texture2D;
            public set texture(value: UnityEngine.Texture2D);
            /** 
            The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).
            */
            public get hotspot(): UnityEngine.Vector2;
            public set hotspot(value: UnityEngine.Vector2);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.Cursor) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.Cursor, $style2: UnityEngine.UIElements.Cursor) : boolean
        }
        /** 
        Data stored during drag-and-drop operations, enabling information to be carried throughout the process.
        */
        class DragAndDropData extends System.Object implements UnityEngine.UIElements.IDragAndDropData
        {
            protected [__keep_incompatibility]: never;
            /** 
            The object that started the drag.
            */
            public get source(): any;
            /** 
            The state of the current drag operation.
            */
            public get visualMode(): UnityEngine.UIElements.DragVisualMode;
            /** 
            Unity Object references being dragged.
            */
            public get unityObjectReferences(): System.Collections.Generic.IEnumerable$1<UnityEngine.Object>;
            /** 
            Gets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @returns The object stored for this key. 
            */
            public GetGenericData ($key: string) : any
            /** 
            Sets data associated with the current drag-and-drop operation.
            * @param $key The key for this entry.
            * @param $data The data to store.
            */
            public SetGenericData ($key: string, $data: any) : void
        }
        interface IDragAndDropData
        {
        }
        /** 
        Position where the drop operation occurs.
        */
        enum DragAndDropPosition
        { OverItem = 0, BetweenItems = 1, OutsideItems = 2 }
        /** 
        Provides information about the event that caused the dropdown menu to display.
        */
        class DropdownMenuEventInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The modifier keys that were pressed if those keys triggered the dropdown menu to
            display of the dropdown menu. For example, Alt, Ctrl, Shift, Windows, and Command.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position expressed in the global coordinate system if the event that triggered the dropdown
            menu to display was a mouse event.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The position of the mouse if the event that triggered the dropdown menu to display was a mouse event.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            public constructor ($e: UnityEngine.UIElements.EventBase)
        }
        /** 
        Represents an item in a dropdown menu.
        */
        class DropdownMenuItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Provides a separator menu item.
        */
        class DropdownMenuSeparator extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The submenu path to the separator. Path components are delimited by forward slashes ('/').
            */
            public get subMenuPath(): string;
            public constructor ($subMenuPath: string)
        }
        /** 
        Represents a menu action item.
        */
        class DropdownMenuAction extends UnityEngine.UIElements.DropdownMenuItem
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the item.
            */
            public get name(): string;
            /** 
            The tooltip of the item.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            The icon of the item.
            */
            public get icon(): UnityEngine.Texture2D;
            /** 
            The status of the item.
            */
            public get status(): UnityEngine.UIElements.DropdownMenuAction.Status;
            /** 
            Provides information about the event that triggered the dropdown menu.
            */
            public get eventInfo(): UnityEngine.UIElements.DropdownMenuEventInfo;
            /** 
            The userData object stored by the constructor.
            */
            public get userData(): any;
            /** 
            Creates a status callback that always returns Status.Enabled.
            * @param $a Unused parameter.
            * @returns Always returns Status.Enabled 
            */
            public static AlwaysEnabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Creates a status callback that always returns Status.Disabled status.
            * @param $a Unused parameter.
            * @returns Always returns Status.Disabled. 
            */
            public static AlwaysDisabled ($a: UnityEngine.UIElements.DropdownMenuAction) : UnityEngine.UIElements.DropdownMenuAction.Status
            /** 
            Updates the status flag of this item by calling the item status callback.
            * @param $eventInfo Information about the event that caused the dropdown menu to display, such as the mouse position or the key pressed.
            */
            public UpdateActionStatus ($eventInfo: UnityEngine.UIElements.DropdownMenuEventInfo) : void
            /** 
            Executes the callback associated with this item.
            */
            public Execute () : void
            public constructor ($actionName: string, $actionCallback: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any)
            public constructor ($actionName: string, $actionCallback: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D)
            public constructor ($contentName: string, $content: UnityEngine.UIElements.VisualElement, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any)
        }
        /** 
        Represents a dropdown menu.
        */
        class DropdownMenu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the list of menu items.
            * @returns The list of items in the menu. 
            */
            public MenuItems () : System.Collections.Generic.List$1<UnityEngine.UIElements.DropdownMenuItem>
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            public AppendAction ($actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status: UnityEngine.UIElements.DropdownMenuAction.Status, $icon: UnityEngine.Texture2D) : void
            public AppendHeaderAction ($icon: UnityEngine.Texture2D, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData: any, $icon: UnityEngine.Texture2D) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status?: UnityEngine.UIElements.DropdownMenuAction.Status) : void
            public InsertAction ($atIndex: number, $actionName: string, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $status: UnityEngine.UIElements.DropdownMenuAction.Status, $icon: UnityEngine.Texture2D) : void
            public InsertHeaderAction ($atIndex: number, $icon: UnityEngine.Texture2D, $action: System.Action$1<UnityEngine.UIElements.DropdownMenuAction>, $actionStatusCallback: System.Func$2<UnityEngine.UIElements.DropdownMenuAction, UnityEngine.UIElements.DropdownMenuAction.Status>, $userData?: any) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            */
            public AppendSeparator ($subMenuPath?: string) : void
            /** 
            Adds a separator line in the menu.
            * @param $subMenuPath The submenu path to add the separator to. Path components are delimited by forward slashes ('/').
            * @param $atIndex The index to insert the separator at.
            */
            public InsertSeparator ($subMenuPath: string, $atIndex: number) : void
            /** 
            Removes the menu item at index.
            * @param $index The index of the item to remove.
            */
            public RemoveItemAt ($index: number) : void
            /** 
            Removes the menu header item at index.
            * @param $index The index of the item to remove.
            */
            public RemoveHeaderItemAt ($index: number) : void
            /** 
            Clears all items from the menu.
            */
            public ClearItems () : void
            /** 
            Clears all header items from the menu.
            */
            public ClearHeaderItems () : void
            /** 
            Gets the status of all items by calling their status callback and removes the excess separators.
            * @param $e The source event.
            */
            public PrepareForDisplay ($e: UnityEngine.UIElements.EventBase) : void
            public constructor ()
        }
        /** 
        Gates control when the dispatcher processes events.
        */
        class EventDispatcherGate extends System.ValueType implements System.IDisposable, System.IEquatable$1<UnityEngine.UIElements.EventDispatcherGate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Implementation of IDisposable.Dispose. Opens the gate. If all gates are open, events in the queue are processed.
            */
            public Dispose () : void
            public Equals ($other: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.EventDispatcherGate, $right: UnityEngine.UIElements.EventDispatcherGate) : boolean
            public constructor ($d: UnityEngine.UIElements.EventDispatcher)
        }
        /** 
        Dispatches events to a IPanel.
        */
        class EventDispatcher extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPointerCaptureEvent
        {
        }
        class PointerCaptureEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        interface IPointerCaptureEventInternal
        {
        }
        /** 
        Event sent when a VisualElement releases a pointer.
        */
        class PointerCaptureOutEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureOutEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent when a pointer is captured by a VisualElement.
        */
        class PointerCaptureEvent extends UnityEngine.UIElements.PointerCaptureEventBase$1<UnityEngine.UIElements.PointerCaptureEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IMouseCaptureEvent
        {
        }
        class MouseCaptureEventBase$1<T> extends UnityEngine.UIElements.PointerCaptureEventBase$1<T> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Event sent before a handler stops capturing the mouse.
        */
        class MouseCaptureOutEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureOutEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent after a handler starts capturing the mouse.
        */
        class MouseCaptureEvent extends UnityEngine.UIElements.MouseCaptureEventBase$1<UnityEngine.UIElements.MouseCaptureEvent> implements UnityEngine.UIElements.IPointerCaptureEvent, UnityEngine.UIElements.IPointerCaptureEventInternal, UnityEngine.UIElements.IMouseCaptureEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface ICommandEvent
        {
            /** 
            Name of the command.
            */
            commandName : string
        }
        class CommandEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
        }
        /** 
        This event is sent by the Editor while it determines whether the command will be handled by an element in the panel.
        */
        class ValidateCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ValidateCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        /** 
        This event is sent by the Editor when an element in the panel should execute a command.
        */
        class ExecuteCommandEvent extends UnityEngine.UIElements.CommandEventBase$1<UnityEngine.UIElements.ExecuteCommandEvent> implements UnityEngine.UIElements.ICommandEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Name of the command.
            */
            public get commandName(): string;
            public constructor ()
        }
        interface IDragAndDropEvent
        {
        }
        class DragAndDropEventBase$1<T> extends UnityEngine.UIElements.MouseEventBase$1<T> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        The event sent to a dragged element when the drag and drop process ends.
        */
        class DragExitedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragExitedEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag exited event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragExitedEvent
            public constructor ()
        }
        /** 
        Use the DragEnterEvent class to manage events that occur when dragging enters an element or one of its descendants. The DragEnterEvent does not trickle down and does not bubble up.
        */
        class DragEnterEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragEnterEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Use the DragLeaveEvent class to manage events sent when dragging leaves an element or one of its descendants. The DragLeaveEvent does not trickle down and does not bubble up.
        */
        class DragLeaveEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragLeaveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The event sent when the element being dragged enters a possible drop target.
        */
        class DragUpdatedEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragUpdatedEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI drag updated event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.DragUpdatedEvent
            public constructor ()
        }
        /** 
        The event sent to an element when another element is dragged and dropped on the element.
        */
        class DragPerformEvent extends UnityEngine.UIElements.DragAndDropEventBase$1<UnityEngine.UIElements.DragPerformEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, UnityEngine.UIElements.IDragAndDropEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        The propagation phases of an event.
        */
        enum PropagationPhase
        { None = 0, TrickleDown = 1, BubbleUp = 3, AtTarget = 2, DefaultAction = 4, DefaultActionAtTarget = 5 }
        /** 
        Use this enum to specify during which phases the event handler is executed.
        */
        enum TrickleDown
        { NoTrickleDown = 0, TrickleDown = 1 }
        interface EventCallback$2<TEventType, TCallbackArgs>
        { 
        (evt: TEventType, userArgs: TCallbackArgs) : void; 
        Invoke?: (evt: TEventType, userArgs: TCallbackArgs) => void;
        }
        interface IFocusEvent
        {
            /** 
            Related target. See implementation for specific meaning.
            */
            relatedTarget : UnityEngine.UIElements.Focusable
            /** 
            Direction of the focus change.
            */
            direction : UnityEngine.UIElements.FocusChangeDirection
        }
        /** 
        Base class for defining in which direction the focus moves in a focus ring.
        */
        class FocusChangeDirection extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Focus came from an unspecified direction, for example after a mouse down.
            */
            public static get unspecified(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The null direction. This is usually used when the focus stays on the same element.
            */
            public static get none(): UnityEngine.UIElements.FocusChangeDirection;
            public static op_Implicit ($fcd: UnityEngine.UIElements.FocusChangeDirection) : number
        }
        class FocusEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
        }
        /** 
        Event sent immediately before an element loses focus. This event trickles down and bubbles up.
        */
        class FocusOutEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusOutEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has lost focus. This event trickles down and does not bubbles up.
        */
        class BlurEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.BlurEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately before an element gains focus. This event trickles down and bubbles up.
        */
        class FocusInEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusInEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Event sent immediately after an element has gained focus. This event trickles down and does not bubbles up.
        */
        class FocusEvent extends UnityEngine.UIElements.FocusEventBase$1<UnityEngine.UIElements.FocusEvent> implements UnityEngine.UIElements.IFocusEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Related target. See implementation for specific meaning.
            */
            public get relatedTarget(): UnityEngine.UIElements.Focusable;
            /** 
            Direction of the focus change.
            */
            public get direction(): UnityEngine.UIElements.FocusChangeDirection;
            public constructor ()
        }
        /** 
        Sends an event when text from a TextField changes.
        */
        class InputEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.InputEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The text before the change occured.
            */
            public get previousData(): string;
            /** 
            The new text.
            */
            public get newData(): string;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $previousData The text before the change occured.
            * @param $newData The new text.
            * @returns An initialized event. 
            */
            public static GetPooled ($previousData: string, $newData: string) : UnityEngine.UIElements.InputEvent
            public constructor ()
        }
        /** 
        This event is sent when a pressed key is released.
        */
        class KeyUpEvent extends UnityEngine.UIElements.KeyboardEventBase$1<UnityEngine.UIElements.KeyUpEvent> implements UnityEngine.UIElements.IKeyboardEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets the character entered.
            */
            public get character(): number;
            /** 
            The key code.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent after layout calculations, when the position or the dimension of an element changes.
        */
        class GeometryChangedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.GeometryChangedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the element's old dimensions.
            */
            public get oldRect(): UnityEngine.Rect;
            /** 
            Gets the elements's new dimensions.
            */
            public get newRect(): UnityEngine.Rect;
            /** 
            Gets an event from the event pool, and initializes it with the specified values. Use this method
            instead of instancing new events. Use Dispose() to release events back to the event pool.
            * @param $oldRect The old dimensions of the element.
            * @param $newRect The new dimensions of the element.
            * @returns An initialized event. 
            */
            public static GetPooled ($oldRect: UnityEngine.Rect, $newRect: UnityEngine.Rect) : UnityEngine.UIElements.GeometryChangedEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is pressed.
        */
        class MouseDownEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseDownEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseDownEvent
            public constructor ()
        }
        /** 
        This event is sent when a mouse button is released.
        */
        class MouseUpEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseUpEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseUpEvent
            public constructor ()
        }
        /** 
        This event is sent when the mouse moves.
        */
        class MouseMoveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseMoveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI mouse event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseMoveEvent
            public constructor ()
        }
        /** 
        The event sent when clicking the right mouse button.
        */
        class ContextClickEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.ContextClickEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the mouse wheel moves.
        */
        class WheelEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.WheelEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The amount of scrolling applied with the mouse wheel.
            */
            public get delta(): UnityEngine.Vector3;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent A wheel IMGUI event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.WheelEvent
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element or one of its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseEnterEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element and all its descendent elements.
        The event trickles down but does not bubble up.
        */
        class MouseLeaveEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters an element.
        The event trickles down and bubbles up.
        */
        class MouseOverEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOverEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits an element.
        The event trickles down and bubbles up.
        */
        class MouseOutEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseOutEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer enters a window.
        The event bubbles up but does not trickle down.
        */
        class MouseEnterWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseEnterWindowEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the mouse pointer exits a window.
        The event bubbles up but does not trickle down.
        */
        class MouseLeaveWindowEvent extends UnityEngine.UIElements.MouseEventBase$1<UnityEngine.UIElements.MouseLeaveWindowEvent> implements UnityEngine.UIElements.IMouseEvent, UnityEngine.UIElements.IMouseEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Flag set holding the pressed modifier keys (Alt, Ctrl, Shift, Windows/Command).
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            The mouse position in the panel coordinate system.
            */
            public get mousePosition(): UnityEngine.Vector2;
            /** 
            The mouse position in the current target coordinate system.
            */
            public get localMousePosition(): UnityEngine.Vector2;
            /** 
            Mouse position difference between the last mouse event and this one.
            */
            public get mouseDelta(): UnityEngine.Vector2;
            /** 
            The number of times the button is pressed.
            */
            public get clickCount(): number;
            /** 
            A value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            A bitmask that describes the currently pressed buttons.
            */
            public get pressedButtons(): number;
            /** 
            Return true if the Shift key is pressed.
            */
            public get shiftKey(): boolean;
            /** 
            Return true if the Ctrl key is pressed.
            */
            public get ctrlKey(): boolean;
            /** 
            Return true if the Windows/Command key is pressed.
            */
            public get commandKey(): boolean;
            /** 
            Return true if the Alt key is pressed.
            */
            public get altKey(): boolean;
            /** 
            Returns true if the platform-specific action key is pressed. This key is Cmd on macOS, and Ctrl on all other platforms.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent An IMGUI MouseLeaveWindow event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.MouseLeaveWindowEvent
            public constructor ()
        }
        interface INavigationEvent
        {
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class NavigationEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
        }
        /** 
        Event typically sent when the user presses the D-pad, moves a joystick or presses the arrow keys.
        */
        class NavigationMoveEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationMoveEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The direction of the navigation.
            */
            public get direction(): UnityEngine.UIElements.NavigationMoveEvent.Direction;
            /** 
            The move vector, if applicable.
            */
            public get move(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            /** 
            Gets an event from the event pool and initializes it with the given values.
            Use this function instead of creating new events.
            Events obtained from this method should be released back to the pool using Dispose().
            * @param $moveVector The move vector.
            * @param $modifiers The modifier keys held down during the event.
            * @returns An initialized navigation event. 
            */
            public static GetPooled ($moveVector: UnityEngine.Vector2, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public static GetPooled ($direction: UnityEngine.UIElements.NavigationMoveEvent.Direction, $modifiers?: UnityEngine.EventModifiers) : UnityEngine.UIElements.NavigationMoveEvent
            public constructor ()
        }
        /** 
        Event sent when the user presses the cancel button.
        */
        class NavigationCancelEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationCancelEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent when the user presses the submit button.
        */
        class NavigationSubmitEvent extends UnityEngine.UIElements.NavigationEventBase$1<UnityEngine.UIElements.NavigationSubmitEvent> implements UnityEngine.UIElements.INavigationEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        interface IPanelChangedEvent
        {
        }
        class PanelChangedEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Event sent after an element is added to an element that is a descendent of a panel.
        */
        class AttachToPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.AttachToPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Event sent just before an element is detach from its parent, if the parent is the descendant of a panel.
        */
        class DetachFromPanelEvent extends UnityEngine.UIElements.PanelChangedEventBase$1<UnityEngine.UIElements.DetachFromPanelEvent> implements UnityEngine.UIElements.IPanelChangedEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        A static class that holds pointer type values.
        */
        class PointerType extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The pointer type for mouse events.
            */
            public static mouse : string
            /** 
            The pointer type for touch events.
            */
            public static touch : string
            /** 
            The pointer type for pen events.
            */
            public static pen : string
            /** 
            The pointer type for events created by unknown devices.
            */
            public static unknown : string
        }
        /** 
        A static class that holds pointer ID values.
        */
        class PointerId extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The maximum number of pointers the implementation supports.
            */
            public static maxPointers : number
            /** 
            Represents an invalid pointer ID value.
            */
            public static invalidPointerId : number
            /** 
            The mouse pointer ID.
            */
            public static mousePointerId : number
            /** 
            The base ID for touch pointers.
            */
            public static touchPointerIdBase : number
            /** 
            The number of touch pointers the implementation supports.
            */
            public static touchPointerCount : number
            /** 
            The base ID for pen pointers.
            */
            public static penPointerIdBase : number
            /** 
            The number of pen pointers the implementation supports.
            */
            public static penPointerCount : number
        }
        interface IPointerEvent
        {
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            pointerId : number
            /** 
            Gets the type of pointer that created the event.
            */
            pointerType : string
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            isPrimary : boolean
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            button : number
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            pressedButtons : number
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            position : UnityEngine.Vector3
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            localPosition : UnityEngine.Vector3
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            deltaPosition : UnityEngine.Vector3
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            deltaTime : number
            /** 
            Gets the number of times the button was pressed.
            */
            clickCount : number
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            pressure : number
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            tangentialPressure : number
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            altitudeAngle : number
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            azimuthAngle : number
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            twist : number
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            tilt : UnityEngine.Vector2
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            penStatus : UnityEngine.PenStatus
            /** 
            Gets an estimate of the radius of a touch.
            */
            radius : UnityEngine.Vector2
            /** 
            Gets the accuracy of the touch radius.
            */
            radiusVariance : UnityEngine.Vector2
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            modifiers : UnityEngine.EventModifiers
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            shiftKey : boolean
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            ctrlKey : boolean
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            commandKey : boolean
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            altKey : boolean
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            actionKey : boolean
        }
        class PointerEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
        }
        interface IPointerEventInternal
        {
        }
        /** 
        This event is sent when a pointer is pressed.
        */
        class PointerDownEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerDownEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer changes state.
        */
        class PointerMoveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerMoveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer does not change for a set amount of time, determined by the operating system.
        */
        class PointerStationaryEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerStationaryEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer's last pressed button is released.
        */
        class PointerUpEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerUpEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when pointer interaction is cancelled.
        */
        class PointerCancelEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerCancelEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when the left mouse button is clicked.
        */
        class ClickEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.ClickEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters a VisualElement or one of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerEnterEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerEnterEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element and all of its descendants.
        The event does not trickle down and does not bubble up.
        */
        class PointerLeaveEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerLeaveEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer enters an element.
        The event trickles down and bubbles up.
        */
        class PointerOverEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOverEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        This event is sent when a pointer exits an element.
        The event trickles down and bubbles up.
        */
        class PointerOutEvent extends UnityEngine.UIElements.PointerEventBase$1<UnityEngine.UIElements.PointerOutEvent> implements UnityEngine.UIElements.IPointerEvent, UnityEngine.UIElements.IPointerEventInternal, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets the identifier of the pointer that sends the event.
            */
            public get pointerId(): number;
            /** 
            Gets the type of pointer that created the event.
            */
            public get pointerType(): string;
            /** 
            Gets a boolean value that indicates whether the pointer is a primary pointer. True means the pointer is a primary
            pointer. False means it isn't.
            */
            public get isPrimary(): boolean;
            /** 
            Gets a value that indicates which mouse button was pressed or released (if any) to cause this event:
            0 is the left button, 1 is the right button, 2 is the middle button.
            A negative value indicates that no mouse button changed state during this event.
            */
            public get button(): number;
            /** 
            Gets a bitmask that describes the buttons that are currently pressed.
            */
            public get pressedButtons(): number;
            /** 
            Gets the pointer position in the Screen or World coordinate system.
            */
            public get position(): UnityEngine.Vector3;
            /** 
            Gets the pointer position in the current target's coordinate system.
            */
            public get localPosition(): UnityEngine.Vector3;
            /** 
            Gets the difference between the pointer's position during the previous mouse event and its position during the
            current mouse event.
            */
            public get deltaPosition(): UnityEngine.Vector3;
            /** 
            Gets the amount of time that has elapsed since the last recorded change in pointer values, in seconds.
            */
            public get deltaTime(): number;
            /** 
            Gets the number of times the button was pressed.
            */
            public get clickCount(): number;
            /** 
            Gets the amount of pressure currently applied by a touch.
            */
            public get pressure(): number;
            /** 
            Gets the pressure applied to an additional pressure-sensitive control on the stylus.
            */
            public get tangentialPressure(): number;
            /** 
            Gets the angle of the stylus relative to the surface, in radians
            */
            public get altitudeAngle(): number;
            /** 
            Gets the angle of the stylus relative to the x-axis, in radians.
            */
            public get azimuthAngle(): number;
            /** 
            Gets the rotation of the stylus around its axis, in radians.
            */
            public get twist(): number;
            /** 
            Specifies the angle of the pen relative to the X and Y axis respectively, in radians.
            */
            public get tilt(): UnityEngine.Vector2;
            /** 
            Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed.
            On macOS, penStatus will not reflect changes to button mappings.
            */
            public get penStatus(): UnityEngine.PenStatus;
            /** 
            Gets an estimate of the radius of a touch.
            */
            public get radius(): UnityEngine.Vector2;
            /** 
            Gets the accuracy of the touch radius.
            */
            public get radiusVariance(): UnityEngine.Vector2;
            /** 
            Gets flags that indicate whether modifier keys (Alt, Ctrl, Shift, Windows/Cmd) are pressed.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            /** 
            Gets a boolean value that indicates whether the Shift key is pressed. True means the Shift key is pressed.
            False means it isn't.
            */
            public get shiftKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Ctrl key is pressed. True means the Ctrl key is pressed.
            False means it isn't.
            */
            public get ctrlKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the WindowsCmd key is pressed. True means the WindowsCmd key
            is pressed. False means it isn't.
            */
            public get commandKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the Alt key is pressed. True means the Alt key is pressed.
            False means it isn't.
            */
            public get altKey(): boolean;
            /** 
            Gets a boolean value that indicates whether the platform-specific action key is pressed. True means the action
            key is pressed. False means it isn't.
            */
            public get actionKey(): boolean;
            public constructor ()
        }
        /** 
        Event sent after the custom style properties of a VisualElement have been resolved.
        */
        class CustomStyleResolvedEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.CustomStyleResolvedEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns the custom style properties accessor for the targeted VisualElement.
            */
            public get customStyle(): UnityEngine.UIElements.ICustomStyle;
            public constructor ()
        }
        interface ICustomStyle
        {
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<number>, $value: $Ref<number>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<number>, $value: $Ref<number>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<boolean>, $value: $Ref<boolean>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Color>, $value: $Ref<UnityEngine.Color>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Texture2D>, $value: $Ref<UnityEngine.Texture2D>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Sprite>, $value: $Ref<UnityEngine.Sprite>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.UIElements.VectorImage>, $value: $Ref<UnityEngine.UIElements.VectorImage>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<UnityEngine.Object>, $value: $Ref<T>) : boolean
            TryGetValue ($property: UnityEngine.UIElements.CustomStyleProperty$1<string>, $value: $Ref<string>) : boolean
        }
        /** 
        Event sent to find the first VisualElement that displays a tooltip.
        */
        class TooltipEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.TooltipEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Text to display inside the tooltip box.
            */
            public get tooltip(): string;
            public set tooltip(value: string);
            /** 
            Rectangle of the hovered VisualElement in the panel coordinate system.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            public constructor ()
        }
        interface ITransitionEvent
        {
            /** 
            The names of the properties associated with the transition.
            */
            stylePropertyNames : UnityEngine.UIElements.StylePropertyNameCollection
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            elapsedTime : number
        }
        /** 
        Collection of StylePropertyName.
        */
        class StylePropertyNameCollection extends System.ValueType implements System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.StylePropertyName>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerator that iterates through the StylePropertyNameCollection.
            * @returns An enumerator that can be used to iterate through the StylePropertyNameCollection. 
            */
            public GetEnumerator () : UnityEngine.UIElements.StylePropertyNameCollection.Enumerator
            /** 
            Determines whether a StylePropertyNameCollection contains the specified element.
            * @param $stylePropertyName The element to locate in the <see cref="StylePropertyNameCollection" />.
            * @returns true if the StylePropertyNameCollection contains the specified element; otherwise, false. 
            */
            public Contains ($stylePropertyName: UnityEngine.UIElements.StylePropertyName) : boolean
        }
        /** 
        Defines the name of a style property.
        */
        class StylePropertyName extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.StylePropertyName>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if the StylePropertyName is null or empty.
            * @param $propertyName StylePropertyName you want to check.
            * @returns True if propertyName is invalid. False otherwise. 
            */
            public static IsNullOrEmpty ($propertyName: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StylePropertyName, $rhs: UnityEngine.UIElements.StylePropertyName) : boolean
            public static op_Implicit ($name: string) : UnityEngine.UIElements.StylePropertyName
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEngine.UIElements.StylePropertyName) : boolean
            public constructor ($name: string)
        }
        class TransitionEventBase$1<T> extends UnityEngine.UIElements.EventBase$1<T> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
        }
        /** 
        Event sent when a transition is created (i.e. added to the set of running transitions).
        */
        class TransitionRunEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionRunEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition's delay phase ends.
        */
        class TransitionStartEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionStartEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent at the completion of the transition. In the case where a transition is removed before completion then the event will not fire.
        */
        class TransitionEndEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionEndEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Event sent when a transition is canceled.
        */
        class TransitionCancelEvent extends UnityEngine.UIElements.TransitionEventBase$1<UnityEngine.UIElements.TransitionCancelEvent> implements UnityEngine.UIElements.ITransitionEvent, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The names of the properties associated with the transition.
            */
            public get stylePropertyNames(): UnityEngine.UIElements.StylePropertyNameCollection;
            /** 
            The number of seconds the transition has been running, excluding delay phase time.
            */
            public get elapsedTime(): number;
            public constructor ()
        }
        /** 
        Class used to send a IMGUI event that has no equivalent UIElements event.
        */
        class IMGUIEvent extends UnityEngine.UIElements.EventBase$1<UnityEngine.UIElements.IMGUIEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            Gets an event from the event pool and initializes it with the given values. Use this function instead of creating new events. Events obtained using this method need to be released back to the pool. You can use Dispose() to release them.
            * @param $systemEvent The IMGUI event used to initialize the event.
            * @returns An initialized event. 
            */
            public static GetPooled ($systemEvent: UnityEngine.Event) : UnityEngine.UIElements.IMGUIEvent
            public constructor ()
        }
        /** 
        Provides the base class for field mouse draggers.
        */
        class BaseFieldMouseDragger extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement) : void
            /** 
            Sets the drag zone for the driven field.
            * @param $dragElement The target of the drag operation.
            * @param $hotZone The rectangle that contains the drag zone.
            */
            public SetDragZone ($dragElement: UnityEngine.UIElements.VisualElement, $hotZone: UnityEngine.Rect) : void
        }
        /** 
        Class in charge of managing the focus inside a Panel.
        */
        class FocusController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The currently focused VisualElement.
            */
            public get focusedElement(): UnityEngine.UIElements.Focusable;
            /** 
            Instructs the FocusController to ignore the given event.
            This will prevent the event from changing the current focused VisualElement or triggering focus events.
            * @param $evt The event to be ignored.
            */
            public IgnoreEvent ($evt: UnityEngine.UIElements.EventBase) : void
            public constructor ($focusRing: UnityEngine.UIElements.IFocusRing)
        }
        interface IFocusRing
        {
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right.
            */
            GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
        }
        /** 
        Contains the settings used by the dynamic atlas system.
        */
        class DynamicAtlasSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the minimum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than 0 and less than or equal to maxAtlasSize.
            */
            public get minAtlasSize(): number;
            public set minAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of the atlas texture, in pixels. This value must be a power of two,
            and must be greater than or equal to minAtlasSize.
            */
            public get maxAtlasSize(): number;
            public set maxAtlasSize(value: number);
            /** 
            Specifies the maximum size (width/height) of a texture that can be added to the atlas. When activeFilters
            contains DynamicAtlasFilters.Size, textures larger than this size are excluded from the atlas. Otherwise, this
            value is not used.
            */
            public get maxSubTextureSize(): number;
            public set maxSubTextureSize(value: number);
            /** 
            Defines the filters that the dynamic atlas system uses to exclude textures from the texture atlas.
            */
            public get activeFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            public set activeFilters(value: UnityEngine.UIElements.DynamicAtlasFilters);
            /** 
            Default filters for a dynamic atlas.
            */
            public static get defaultFilters(): UnityEngine.UIElements.DynamicAtlasFilters;
            /** 
            When a delegate is assigned, the dynamic atlas system calls it to determine whether or not a texture can be added to the atlas.
            */
            public get customFilter(): UnityEngine.UIElements.DynamicAtlasCustomFilter;
            public set customFilter(value: UnityEngine.UIElements.DynamicAtlasCustomFilter);
            /** 
            Specifies default values used to initialize the structure.
            */
            public static get defaults(): UnityEngine.UIElements.DynamicAtlasSettings;
            public constructor ()
        }
        /** 
        Options that specify how elements in the panel scale when the screen size changes. See PanelSettings.scaleMode.
        */
        enum PanelScaleMode
        { ConstantPixelSize = 0, ConstantPhysicalSize = 1, ScaleWithScreenSize = 2 }
        /** 
        Options that specify how to scale the panel area when the aspect ratio of the current screen resolution
        does not match the reference resolution. See PanelSettings.screenMatchMode.
        */
        enum PanelScreenMatchMode
        { MatchWidthOrHeight = 0, Shrink = 1, Expand = 2 }
        /** 
        Defines a Panel Settings asset that instantiates a panel at runtime. The panel makes it possible for Unity to display
        UXML-file based UI in the Game view.
        */
        class PanelSettings extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies a PanelTextSettings that will be used by every UI Document attached to the panel.
            */
            public textSettings : UnityEngine.UIElements.PanelTextSettings
            /** 
            Specifies a style sheet that Unity applies to every UI Document attached to the panel.
            */
            public get themeStyleSheet(): UnityEngine.UIElements.ThemeStyleSheet;
            public set themeStyleSheet(value: UnityEngine.UIElements.ThemeStyleSheet);
            /** 
            Specifies a Render Texture to render the panel's UI on.
            */
            public get targetTexture(): UnityEngine.RenderTexture;
            public set targetTexture(value: UnityEngine.RenderTexture);
            /** 
            Determines how elements in the panel scale when the screen size changes.
            */
            public get scaleMode(): UnityEngine.UIElements.PanelScaleMode;
            public set scaleMode(value: UnityEngine.UIElements.PanelScaleMode);
            /** 
            Sprites have a Pixels Per Unit value that controls the pixel density of the sprite.
            For sprites that have the same Pixels Per Unit value as the Reference Pixels Per Unit value in the
            PanelSettings asset, the pixel density will be one to one.
            */
            public get referenceSpritePixelsPerUnit(): number;
            public set referenceSpritePixelsPerUnit(value: number);
            /** 
            A uniform scaling factor that Unity applies to elements in the panel before
            the panel transform.
            */
            public get scale(): number;
            public set scale(value: number);
            /** 
            The DPI that the UI is designed for.
            */
            public get referenceDpi(): number;
            public set referenceDpi(value: number);
            /** 
            The DPI value that Unity uses when it cannot determine the screen DPI.
            */
            public get fallbackDpi(): number;
            public set fallbackDpi(value: number);
            /** 
            The resolution the UI is designed for.
            */
            public get referenceResolution(): UnityEngine.Vector2Int;
            public set referenceResolution(value: UnityEngine.Vector2Int);
            /** 
            Specifies how to scale the panel area when the aspect ratio of the current resolution
            does not match the reference resolution.
            */
            public get screenMatchMode(): UnityEngine.UIElements.PanelScreenMatchMode;
            public set screenMatchMode(value: UnityEngine.UIElements.PanelScreenMatchMode);
            /** 
            Determines whether Unity uses width, height, or a mix of the two as a reference when it scales the panel area.
            */
            public get match(): number;
            public set match(value: number);
            /** 
            When the Scene uses more than one panel, this value determines where this panel appears in the sorting
            order relative to other panels.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
            /** 
            Set the display intended for the panel.
            */
            public get targetDisplay(): number;
            public set targetDisplay(value: number);
            /** 
            Sets the log level for bindings in panels using this PanelSettings asset.
            */
            public get bindingLogLevel(): UnityEngine.UIElements.BindingLogLevel;
            public set bindingLogLevel(value: UnityEngine.UIElements.BindingLogLevel);
            /** 
            Determines whether the depth/stencil buffer is cleared before the panel is rendered.
            */
            public get clearDepthStencil(): boolean;
            public set clearDepthStencil(value: boolean);
            /** 
            The depth used to clear the depth/stencil buffer.
            */
            public get depthClearValue(): number;
            /** 
            Determines whether the color buffer is cleared before the panel is rendered.
            */
            public get clearColor(): boolean;
            public set clearColor(value: boolean);
            /** 
            The color used to clear the color buffer.
            */
            public get colorClearValue(): UnityEngine.Color;
            public set colorClearValue(value: UnityEngine.Color);
            /** 
            The expected number of vertices that will be used by this panel.
            */
            public get vertexBudget(): number;
            public set vertexBudget(value: number);
            /** 
            Settings of the dynamic atlas.
            */
            public get dynamicAtlasSettings(): UnityEngine.UIElements.DynamicAtlasSettings;
            public set dynamicAtlasSettings(value: UnityEngine.UIElements.DynamicAtlasSettings);
            /** 
            Sets a custom IPanelChangeReceiver in the panelChangeReceiver setter to receive every change event.
            This method is available only in development builds and the editor, as it is a debug feature to go along the profiling of an application.
            */
            public SetPanelChangeReceiver ($value: UnityEngine.UIElements.IDebugPanelChangeReceiver) : void
            public SetScreenToPanelSpaceFunction ($screentoPanelSpaceFunction: System.Func$2<UnityEngine.Vector2, UnityEngine.Vector2>) : void
        }
        /** 
        Represents text rendering settings for a specific UI panel.
        PanelSettings.textSettings
        */
        class PanelTextSettings extends UnityEngine.TextCore.Text.TextSettings
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Style sheets are applied to visual elements in order to control the layout and visual appearance of the user interface.
        */
        class StyleSheet extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** 
            Whether there were errors encountered while importing the StyleSheet
            */
            public get importedWithErrors(): boolean;
            /** 
            Whether there were warnings encountered while importing the StyleSheet
            */
            public get importedWithWarnings(): boolean;
            /** 
            A hash value computed from the stylesheet content.
            */
            public get contentHash(): number;
            public set contentHash(value: number);
            public constructor ()
        }
        /** 
        Represents a style sheet that's assembled from other style sheets.
        */
        class ThemeStyleSheet extends UnityEngine.UIElements.StyleSheet
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        interface IDebugPanelChangeReceiver
        {
            /** 
            Receives notifications for every change that occurs on the panel's visual elements.
            This method is exclusively available in development builds and the Editor, as it serves as a debug feature that complements the profiling of an application.
            * @param $element  The element that changed.
            * @param $changeType A string that contains the comma-separated value of what has changed.
            */
            OnVisualElementChange ($element: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        /** 
        A collection of static methods that provide simple World, Screen, and Panel coordinate transformations.
        */
        class RuntimePanelUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Transforms a screen absolute position to its equivalent local coordinate on given panel.
            * @param $panel The local coordinates reference panel.
            * @param $screenPosition The screen position to transform.
            * @returns A position in panel coordinates that corresponds to the provided screen position. 
            */
            public static ScreenToPanel ($panel: UnityEngine.UIElements.IPanel, $screenPosition: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a world absolute position to its equivalent local coordinate on given panel,
            using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A position in panel coordinates that corresponds to the provided world position. 
            */
            public static CameraTransformWorldToPanel ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $camera: UnityEngine.Camera) : UnityEngine.Vector2
            /** 
            Transforms a world position and size (in world units) to their equivalent local position and size
            on given panel, using provided camera for internal WorldToScreen transformation.
            * @param $panel The local coordinates reference panel.
            * @param $worldPosition The world position to transform.
            * @param $worldSize The world size to transform. The object in the panel will appear to have
            that size when compared to other 3D objects at neighboring positions.
            * @param $camera The Camera used for internal WorldToScreen transformation.
            * @returns A (position, size) Rect in panel coordinates that corresponds to the provided world position
            and size. 
            */
            public static CameraTransformWorldToPanelRect ($panel: UnityEngine.UIElements.IPanel, $worldPosition: UnityEngine.Vector3, $worldSize: UnityEngine.Vector2, $camera: UnityEngine.Camera) : UnityEngine.Rect
            /** 
            Resets the dynamic atlas of the panel. Textured elements will be repainted.
            */
            public static ResetDynamicAtlas ($panel: UnityEngine.UIElements.IPanel) : void
            /** 
            Notifies the dynamic atlas of the panel that the content of the provided texture has changed. If the dynamic
            atlas contains the texture, it will update it.
            * @param $panel The current panel
            * @param $texture The texture whose content has changed.
            */
            public static SetTextureDirty ($panel: UnityEngine.UIElements.IPanel, $texture: UnityEngine.Texture2D) : void
        }
        /** 
        Defines a Component that connects VisualElements to GameObjects. This makes it
        possible to render UI defined in UXML documents in the Game view.
        */
        class UIDocument extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            /** 
            Specifies the PanelSettings instance to connect this UIDocument component to.
            */
            public get panelSettings(): UnityEngine.UIElements.PanelSettings;
            public set panelSettings(value: UnityEngine.UIElements.PanelSettings);
            /** 
            If the GameObject that this UIDocument component is attached to has a parent GameObject, and
            that parent GameObject also has a UIDocument component attached to it, this value is set to
            the parent GameObject's UIDocument component automatically.
            */
            public get parentUI(): UnityEngine.UIElements.UIDocument;
            /** 
            The VisualTreeAsset loaded into the root visual element automatically.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public set visualTreeAsset(value: UnityEngine.UIElements.VisualTreeAsset);
            /** 
            The root visual element where the UI hierarchy starts.
            */
            public get rootVisualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The order in which this UIDocument will show up on the hierarchy in relation to other UIDocuments either
            attached to the same PanelSettings, or with the same UIDocument parent.
            */
            public get sortingOrder(): number;
            public set sortingOrder(value: number);
        }
        /** 
        Element that draws IMGUI content. For more information, refer to.
        */
        class IMGUIContainer extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, System.IDisposable, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            The function that's called to render and handle IMGUI events.
            */
            public get onGUIHandler(): System.Action;
            public set onGUIHandler(value: System.Action);
            /** 
            When this property is set to true, onGUIHandler is not called when the Element is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
            /** 
            ContextType of this IMGUIContainer. Currently only supports ContextType.Editor.
            */
            public get contextType(): UnityEngine.UIElements.ContextType;
            public set contextType(value: UnityEngine.UIElements.ContextType);
            public get canGrabFocus(): boolean;
            /** 
            Marks layout as dirty to trigger a redraw.
            */
            public MarkDirtyLayout () : void
            /** 
            Releases the native memory that this IMGUIContainer instance uses.
            */
            public Dispose () : void
            public constructor ()
            public constructor ($onGUIHandler: System.Action)
        }
        /** 
        Describes in which context a VisualElement hierarchy is being ran.
        */
        enum ContextType
        { Player = 0, Editor = 1 }
        /** 
        VisualElement that can implement custom immediate mode rendering.
        */
        class ImmediateModeElement extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            When this property is set to true, the Element does not repaint itself when it is outside the viewport.
            */
            public get cullingEnabled(): boolean;
            public set cullingEnabled(value: boolean);
        }
        /** 
        Represents an operation that the user is trying to accomplish through a specific input mechanism.
        */
        enum KeyboardNavigationOperation
        { None = 0, SelectAll = 1, Cancel = 2, Submit = 3, Previous = 4, Next = 5, MoveRight = 6, MoveLeft = 7, PageUp = 8, PageDown = 9, Begin = 10, End = 11 }
        /** 
        Provides a default implementation for translating input device specific events to higher level navigation operations as commonly possible with a keyboard.
        */
        class KeyboardNavigationManipulator extends UnityEngine.UIElements.Manipulator implements UnityEngine.UIElements.IManipulator
        {
            protected [__keep_incompatibility]: never;
            public constructor ($action: System.Action$2<UnityEngine.UIElements.KeyboardNavigationOperation, UnityEngine.UIElements.EventBase>)
        }
        /** 
        Used by manipulators to match events against their requirements.
        */
        class ManipulatorActivationFilter extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.ManipulatorActivationFilter>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The button that activates the manipulation.
            */
            public get button(): UnityEngine.UIElements.MouseButton;
            public set button(value: UnityEngine.UIElements.MouseButton);
            /** 
            Any modifier keys (ie. ctrl, alt, ...) that are needed to activate the manipulation.
            */
            public get modifiers(): UnityEngine.EventModifiers;
            public set modifiers(value: UnityEngine.EventModifiers);
            /** 
            Number of mouse clicks required to activate the manipulator.
            */
            public get clickCount(): number;
            public set clickCount(value: number);
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IMouseEvent) : boolean
            /** 
            Checks whether the current mouse event satisfies the activation requirements.
            * @param $e The mouse event.
            * @returns True if the event matches the requirements. False otherwise. 
            */
            public Matches ($e: UnityEngine.UIElements.IPointerEvent) : boolean
            public static op_Equality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
            public static op_Inequality ($filter1: UnityEngine.UIElements.ManipulatorActivationFilter, $filter2: UnityEngine.UIElements.ManipulatorActivationFilter) : boolean
        }
        /** 
        Describes a MouseButton.
        */
        enum MouseButton
        { LeftMouse = 0, RightMouse = 1, MiddleMouse = 2 }
        /** 
        Class that manages capturing mouse events.
        */
        class MouseCaptureController extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Checks if there is a handler capturing the mouse.
            * @returns True if a handler is capturing the mouse, false otherwise. 
            */
            public static IsMouseCaptured () : boolean
            /** 
            Checks if the event handler is capturing the mouse.
            * @param $handler Event handler to check.
            * @returns True if the handler captures the mouse. 
            */
            public static HasMouseCapture ($handler: UnityEngine.UIElements.IEventHandler) : boolean
            /** 
            Assigns an event handler to capture mouse events.
            * @param $handler The event handler that captures mouse events.
            */
            public static CaptureMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            * @param $handler The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.
            */
            public static ReleaseMouse ($handler: UnityEngine.UIElements.IEventHandler) : void
            /** 
            Stops an event handler from capturing the mouse.
            */
            public static ReleaseMouse () : void
        }
        /** 
        The fill rule to use when filling shapes with Painter2D.Fill.
        */
        enum FillRule
        { NonZero = 0, OddEven = 1 }
        /** 
        Join types connecting two sub-paths (see Painter2D.lineJoin).
        */
        enum LineJoin
        { Miter = 0, Bevel = 1, Round = 2 }
        /** 
        Cap types for the beginning and end of paths (see Painter2D.lineCap).
        */
        enum LineCap
        { Butt = 0, Round = 1 }
        /** 
        Direction to use when defining an arc (see Painter2D.Arc).
        */
        enum ArcDirection
        { Clockwise = 0, CounterClockwise = 1 }
        /** 
        A renderer Component that should be added next to a UIDocument Component to allow
        world-space rendering. This Component is added automatically by the UIDocument when
        the PanelSettings asset is configured in world-space.
        */
        class UIRenderer extends UnityEngine.Renderer
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Value used to signify some changes in the VisualElement
        */
        enum VersionChangeType
        { Bindings = 1, ViewData = 2, Hierarchy = 4, Layout = 8, StyleSheet = 16, Styles = 32, Overflow = 64, BorderRadius = 128, BorderWidth = 256, Transform = 512, Size = 1024, Repaint = 2048, Opacity = 4096, Color = 8192, RenderHints = 16384, TransitionProperty = 32768, EventCallbackCategories = 65536, DisableRendering = 131072, BindingRegistration = 262144, DataSource = 524288 }
        /** 
        Offers a set of options that describe the intended usage patterns of a VisualElement.
        These options serve as guidance for optimizations. You can set multiple
        usage hints on an element. For example, if both position and color change, you can set both
        DynamicTransform and DynamicColor.
        Note: Set the usage hints at edit time or before you add the VisualElement to a panel.
        In the case of transition, when it starts, the system might automatically add missing relevant
        usage hints to avoid regenerating geometry in every frame. However, this causes a one-frame performance penalty
        because the rendering data for the VisualElement and its descendants is regenerated.
        */
        enum UsageHints
        { None = 0, DynamicTransform = 1, GroupTransform = 2, MaskContainer = 4, DynamicColor = 8 }
        /** 
        Describes a PenButton. Based on W3 conventions: https:www.w3.orgTRpointerevents2/#the-buttons-property.
        */
        enum PenButton
        { PenContact = 0, PenBarrel = 1, PenEraser = 5 }
        /** 
        A static class to capture and release pointers.
        */
        class PointerCaptureHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Tests whether the element has captured the pointer.
            * @param $handler The VisualElement being tested.
            * @param $pointerId The captured pointer.
            * @returns True if element captured the pointer. 
            */
            public static HasPointerCapture ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : boolean
            /** 
            Captures the pointer.
            * @param $handler The VisualElement that captures the pointer.
            * @param $pointerId The pointer to capture.
            */
            public static CapturePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Tests whether an element captured a pointer and, if so, tells the element to release the pointer.
            * @param $handler The element which potentially captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($handler: UnityEngine.UIElements.IEventHandler, $pointerId: number) : void
            /** 
            Returns the element that is capturing the pointer.
            * @param $panel The panel that holds the element.
            * @param $pointerId The captured pointer.
            * @returns The element that is capturing the pointer. 
            */
            public static GetCapturingElement ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : UnityEngine.UIElements.IEventHandler
            /** 
            Releases the pointer.
            * @param $panel The panel that holds the element that captured the pointer.
            * @param $pointerId The captured pointer.
            */
            public static ReleasePointer ($panel: UnityEngine.UIElements.IPanel, $pointerId: number) : void
        }
        /** 
        Represents a vertex of geometry for drawing content of VisualElement.
        */
        class Vertex extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            A special value representing the near clipping plane. Always use this value as the vertex position's z component when building 2D (flat) UI geometry.
            */
            public static nearZ : number
            /** 
            Describes the vertex's position.
            */
            public position : UnityEngine.Vector3
            /** 
            A color value for the vertex.
            */
            public tint : UnityEngine.Color32
            /** 
            The UV coordinate of the vertex.
            */
            public uv : UnityEngine.Vector2
        }
        /** 
        Represents the vertex and index data allocated for drawing the content of a VisualElement.
        */
        class MeshWriteData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The number of vertices successfully allocated for VisualElement content drawing.
            */
            public get vertexCount(): number;
            /** 
            The number of indices successfully allocated for VisualElement content drawing.
            */
            public get indexCount(): number;
            /** 
            Assigns the value of the next vertex of the allocated vertices list.
            * @param $vertex The value of the next vertex.
            */
            public SetNextVertex ($vertex: UnityEngine.UIElements.Vertex) : void
            public SetNextIndex ($index: number) : void
            /** 
            Fills the values of the allocated vertices with values copied directly from an array.
            When this method is called, it is not possible to use SetNextVertex to fill the allocated vertices array.
            * @param $vertices The array of vertices to copy from. The length of the array must match the allocated vertex count.
            */
            public SetAllVertices ($vertices: System.Array$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllVertices ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>) : void
            public SetAllIndices ($indices: System.Array$1<number>) : void
            public SetAllIndices ($indices: Unity.Collections.NativeSlice$1<number>) : void
        }
        /** 
        Provides methods for generating a VisualElement's visual content during the generateVisualContent callback.
        */
        class MeshGenerationContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The element for which VisualElement.generateVisualContent was invoked.
            */
            public get visualElement(): UnityEngine.UIElements.VisualElement;
            /** 
            The vector painter object used to issue drawing commands.
            */
            public get painter2D(): UnityEngine.UIElements.Painter2D;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
            /** 
            Allocates and draws the specified number of vertices and indices required to express geometry for drawing the content of a VisualElement.
            * @param $vertexCount The number of vertices to allocate. The maximum is 65535 (or UInt16.MaxValue).
            * @param $indexCount The number of triangle list indices to allocate. Each 3 indices represent one triangle, so this value should be multiples of 3.
            * @param $texture An optional texture to be applied on the triangles allocated. Pass null to rely on vertex colors only.
            * @returns An object that gives access to the newely allocated data. If the returned vertex count is 0, then allocation failed (the system ran out of memory). 
            */
            public Allocate ($vertexCount: number, $indexCount: number, $texture?: UnityEngine.Texture) : UnityEngine.UIElements.MeshWriteData
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
            /** 
            Draws a VectorImage asset.
            * @param $vectorImage The vector image to draw.
            * @param $offset The position offset where to draw the vector image.
            * @param $rotationAngle The rotation of the vector image.
            * @param $scale The scale of the vector image
            */
            public DrawVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage, $offset: UnityEngine.Vector2, $rotationAngle: UnityEngine.UIElements.Angle, $scale: UnityEngine.Vector2) : void
            /** 
            Draw a string of text.
            * @param $text The text to display.
            * @param $pos The start position where the text will be displayed.
            * @param $fontSize The font size to use.
            * @param $color The text color.
            * @param $font The font asset to use. If the value is null, the font asset of the VisualElement style is used instead. For more information, refer to <see cref="IStyle.unityFontDefinition" />.
            */
            public DrawText ($text: string, $pos: UnityEngine.Vector2, $fontSize: number, $color: UnityEngine.Color, $font?: UnityEngine.TextCore.Text.FontAsset) : void
            /** 
            Returns an allocator that can be used to safely allocate temporary meshes from the job system. The meshes
            have the same scope as those allocated by AllocateTempMesh.
            * @param $allocator The allocator.
            */
            public GetTempMeshAllocator ($allocator: $Ref<UnityEngine.UIElements.TempMeshAllocator>) : void
            /** 
            Inserts a node into the rendering tree that can be populated from the job system.
            * @param $node The inserted mesh generation node.
            */
            public InsertMeshGenerationNode ($node: $Ref<UnityEngine.UIElements.MeshGenerationNode>) : void
            /** 
            Instructs the renderer to wait for the completion of the provided JobHandle before beginning processing the meshes.
            * @param $jobHandle JobHandle to wait for.
            */
            public AddMeshGenerationJob ($jobHandle: Unity.Jobs.JobHandle) : void
        }
        /** 
        Object to draw 2D vector graphics.
        */
        class Painter2D extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The line width of draw paths when using Stroke.
            */
            public get lineWidth(): number;
            public set lineWidth(value: number);
            /** 
            The color of draw paths when using Stroke.
            */
            public get strokeColor(): UnityEngine.Color;
            public set strokeColor(value: UnityEngine.Color);
            /** 
            The stroke gradient to use when using Stroke.
            */
            public get strokeGradient(): UnityEngine.Gradient;
            public set strokeGradient(value: UnityEngine.Gradient);
            /** 
            The color used for fill paths when using Fill.
            */
            public get fillColor(): UnityEngine.Color;
            public set fillColor(value: UnityEngine.Color);
            /** 
            The join to use when drawing paths using Stroke.
            */
            public get lineJoin(): UnityEngine.UIElements.LineJoin;
            public set lineJoin(value: UnityEngine.UIElements.LineJoin);
            /** 
            The cap to use when drawing paths using Stroke.
            */
            public get lineCap(): UnityEngine.UIElements.LineCap;
            public set lineCap(value: UnityEngine.UIElements.LineCap);
            /** 
            When using LineJoin.Miter joins, this defines the limit on the ratio of the miter length to the
            stroke width before converting the miter to a bevel.
            */
            public get miterLimit(): number;
            public set miterLimit(value: number);
            /** 
            When created as a detached painter, clears the current content. Does nothing otherwise.
            */
            public Clear () : void
            /** 
            Dispose the Painter2D object and free its internal unmanaged resources.
            */
            public Dispose () : void
            /** 
            Begins a new path and empties the list of recorded sub-paths and resets the pen position to (0,0).
            */
            public BeginPath () : void
            /** 
            Closes the current sub-path with a straight line. If the sub-path is already closed, this does nothing.
            */
            public ClosePath () : void
            /** 
            Begins a new sub-path at the provied coordinate.
            * @param $pos The position of the new sub-path.
            */
            public MoveTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds a straight line to the current sub-path to the provided position.
            * @param $pos The end position of the line.
            */
            public LineTo ($pos: UnityEngine.Vector2) : void
            /** 
            Adds an arc to the current sub-path to the provided position using a control point.
            * @param $p1 The first control point of the arc.
            * @param $p2 The final point of the arc.
            * @param $radius The radius of the arc.
            */
            public ArcTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $radius: number) : void
            /** 
            Adds an arc to the current sub-path to the provided position, radius and angles.
            * @param $center The center position of the arc.
            * @param $radius The radius of the arc.
            * @param $startAngle The starting angle the arc.
            * @param $endAngle The ending angle of the arc.
            * @param $antiClockwise Whether the arc should draw in the anti-clockwise direction (default=false).
            */
            public Arc ($center: UnityEngine.Vector2, $radius: number, $startAngle: UnityEngine.UIElements.Angle, $endAngle: UnityEngine.UIElements.Angle, $direction?: UnityEngine.UIElements.ArcDirection) : void
            /** 
            Adds a cubic bezier curve to the current sub-path to the provided position using two control points.
            * @param $p1 The first control point of the cubic bezier.
            * @param $p2 The second control point of the cubic bezier.
            * @param $p3 The final position of the cubic bezier.
            */
            public BezierCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2, $p3: UnityEngine.Vector2) : void
            /** 
            Adds a quadratic bezier curve to the current sub-path to the provided position using a control point.
            * @param $p1 The control point of the quadratic bezier.
            * @param $p2 The final position of the quadratic bezier.
            */
            public QuadraticCurveTo ($p1: UnityEngine.Vector2, $p2: UnityEngine.Vector2) : void
            /** 
            Strokes the currently defined path.
            */
            public Stroke () : void
            /** 
            Fills the currently defined path.
            * @param $fillRule The fill rule (non-zero or odd-even) to use. Default is non-zero.
            */
            public Fill ($fillRule?: UnityEngine.UIElements.FillRule) : void
            /** 
            Saves the content of this Painter2D to a VectorImage object.
            * @param $vectorImage The VectorImage object that will be initialized with this painter. This object should not be null.
            * @returns True if the VectorImage initialization succeeded. False otherwise. 
            */
            public SaveToVectorImage ($vectorImage: UnityEngine.UIElements.VectorImage) : boolean
            public constructor ()
        }
        /** 
        Represents an angle value.
        */
        class Angle extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Angle>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.AngleUnit;
            public set unit(value: UnityEngine.UIElements.AngleUnit);
            /** 
            Creates an Angle from degrees.
            * @returns The created angle. 
            */
            public static Degrees ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from gradians
            * @returns The created angle. 
            */
            public static Gradians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from radians
            * @returns The created angle. 
            */
            public static Radians ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Creates an Angle from turns
            * @returns The created angle. 
            */
            public static Turns ($value: number) : UnityEngine.UIElements.Angle
            /** 
            Returns the value of the angle, expressed in degrees.
            */
            public ToDegrees () : number
            /** 
            Returns the value of the angle, expressed in gradians.
            */
            public ToGradians () : number
            /** 
            Returns the value of the angle, expressed in radians.
            */
            public ToRadians () : number
            /** 
            Returns the value of the angle, expressed in turns.
            */
            public ToTurns () : number
            public static op_Implicit ($value: number) : UnityEngine.UIElements.Angle
            public static op_Equality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Angle, $rhs: UnityEngine.UIElements.Angle) : boolean
            public Equals ($other: UnityEngine.UIElements.Angle) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.AngleUnit)
        }
        /** 
        Used in jobs to allocate UI Toolkit temporary meshes.
        */
        class TempMeshAllocator extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public AllocateTempMesh ($vertexCount: number, $indexCount: number, $vertices: $Ref<Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>>, $indices: $Ref<Unity.Collections.NativeSlice$1<number>>) : void
        }
        /** 
        Contains a part of the draw sequence of a VisualElement. You can use it in a job to add nested draw calls.
        */
        class MeshGenerationNode extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public DrawMesh ($vertices: Unity.Collections.NativeSlice$1<UnityEngine.UIElements.Vertex>, $indices: Unity.Collections.NativeSlice$1<number>, $texture?: UnityEngine.Texture) : void
        }
        /** 
        Contains timing information of scheduler events.
        */
        class TimerState extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimerState>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Start time in milliseconds, or last callback time for repeatable IScheduledItem.
            */
            public get start(): bigint;
            public set start(value: bigint);
            /** 
            Current time in milliseconds.
            */
            public get now(): bigint;
            public set now(value: bigint);
            /** 
            Time difference in milliseconds between now and the previous callback.
            */
            public get deltaTime(): bigint;
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $obj The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($obj: any) : boolean
            /** 
            Compare this object with another object and return true if they are equal.
            * @param $other The object to compare with.
            * @returns True if the objects are equal. 
            */
            public Equals ($other: UnityEngine.UIElements.TimerState) : boolean
            public static op_Equality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
            public static op_Inequality ($state1: UnityEngine.UIElements.TimerState, $state2: UnityEngine.UIElements.TimerState) : boolean
        }
        /** 
        Unit of measurement used to express the value of an Angle.
        */
        enum AngleUnit
        { Degree = 0, Gradian = 1, Radian = 2, Turn = 3 }
        class CustomStyleProperty$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CustomStyleProperty$1<T>>
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Represents a mathematical function that describes the rate at which a numerical value changes.
        */
        enum EasingMode
        { Ease = 0, EaseIn = 1, EaseOut = 2, EaseInOut = 3, Linear = 4, EaseInSine = 5, EaseOutSine = 6, EaseInOutSine = 7, EaseInCubic = 8, EaseOutCubic = 9, EaseInOutCubic = 10, EaseInCirc = 11, EaseOutCirc = 12, EaseInOutCirc = 13, EaseInElastic = 14, EaseOutElastic = 15, EaseInOutElastic = 16, EaseInBack = 17, EaseOutBack = 18, EaseInOutBack = 19, EaseInBounce = 20, EaseOutBounce = 21, EaseInOutBounce = 22 }
        /** 
        Determines how intermediate values are calculated for a transition.
        */
        class EasingFunction extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.EasingFunction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The value of the EasingMode.
            */
            public get mode(): UnityEngine.UIElements.EasingMode;
            public set mode(value: UnityEngine.UIElements.EasingMode);
            public static op_Implicit ($easingMode: UnityEngine.UIElements.EasingMode) : UnityEngine.UIElements.EasingFunction
            public static op_Equality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.EasingFunction, $rhs: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($other: UnityEngine.UIElements.EasingFunction) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($mode: UnityEngine.UIElements.EasingMode)
        }
        /** 
        Describes a VisualElement font.
        */
        class FontDefinition extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.FontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Font to use to display text. You cannot set this and FontDefinition.fontAsset at the same time.
            */
            public get font(): UnityEngine.Font;
            public set font(value: UnityEngine.Font);
            /** 
            SDF font to use to display text. You cannot set this and FontDefinition.font at the same time.
            */
            public get fontAsset(): UnityEngine.TextCore.Text.FontAsset;
            public set fontAsset(value: UnityEngine.TextCore.Text.FontAsset);
            /** 
            Create a FontDefinition from Font.
            * @param $f The font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromFont ($f: UnityEngine.Font) : UnityEngine.UIElements.FontDefinition
            /** 
            Create a FontDefinition from FontAsset.
            * @param $f The SDF font to use to display text.
            * @returns A new FontDefinition object. 
            */
            public static FromSDFFont ($f: UnityEngine.TextCore.Text.FontAsset) : UnityEngine.UIElements.FontDefinition
            public Equals ($other: UnityEngine.UIElements.FontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.FontDefinition, $right: UnityEngine.UIElements.FontDefinition) : boolean
        }
        /** 
        Defines the alignment behavior along an axis.
        */
        enum Align
        { Auto = 0, FlexStart = 1, Center = 2, FlexEnd = 3, Stretch = 4 }
        /** 
        Defines how an element is displayed in the layout.
        */
        enum DisplayStyle
        { Flex = 0, None = 1 }
        /** 
        Style value that can be either a float or a StyleKeyword.
        */
        class StyleFloat extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<number>, System.IEquatable$1<UnityEngine.UIElements.StyleFloat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The float value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFloat, $rhs: UnityEngine.UIElements.StyleFloat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFloat
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleFloat
            public Equals ($other: UnityEngine.UIElements.StyleFloat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        interface IStyleValue$1<T>
        {
        }
        /** 
        Defines the main-axis of the flex layout.
        */
        enum FlexDirection
        { Column = 0, ColumnReverse = 1, Row = 2, RowReverse = 3 }
        /** 
        By default, items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
        */
        enum Wrap
        { NoWrap = 0, Wrap = 1, WrapReverse = 2 }
        /** 
        Defines the alignment along the main axis, how is extra space distributed.
        */
        enum Justify
        { FlexStart = 0, Center = 1, FlexEnd = 2, SpaceBetween = 3, SpaceAround = 4, SpaceEvenly = 5 }
        /** 
        Defines how the position values are interpreted by the layout engine.
        */
        enum Position
        { Relative = 0, Absolute = 1 }
        /** 
        Provides rotation information for visual elements that rotates around the TransformOrigin. Positive values represent clockwise rotation.
        */
        class Rotate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Rotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The angle applied by the rotation. Positive values represent clockwise rotation and negative values represent counterclockwise rotation.
            */
            public get angle(): UnityEngine.UIElements.Angle;
            public set angle(value: UnityEngine.UIElements.Angle);
            /** 
            Return a value of Rotate that applies no rotation
            */
            public static None () : UnityEngine.UIElements.Rotate
            public static op_Equality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Rotate, $rhs: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($other: UnityEngine.UIElements.Rotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($angle: UnityEngine.UIElements.Angle)
        }
        /** 
        Represents the scale applied as element transformations. The center point that doesn't move when the scaling is applied is the TransformOrigin.
        */
        class Scale extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Scale>
        {
            protected [__keep_incompatibility]: never;
            public get value(): UnityEngine.Vector3;
            public set value(value: UnityEngine.Vector3);
            /** 
            Returns a value of Scale without any scaling applied.
            */
            public static None () : UnityEngine.UIElements.Scale
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.Scale
            public static op_Equality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Scale, $rhs: UnityEngine.UIElements.Scale) : boolean
            public Equals ($other: UnityEngine.UIElements.Scale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($scale: UnityEngine.Vector2)
            public constructor ($scale: UnityEngine.Vector3)
        }
        /** 
        Specifies how the text Element treats hidden overflow content.
        */
        enum TextOverflow
        { Clip = 0, Ellipsis = 1 }
        /** 
        Represents a time value.
        */
        class TimeValue extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TimeValue>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The time value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The unit of the value property.
            */
            public get unit(): UnityEngine.UIElements.TimeUnit;
            public set unit(value: UnityEngine.UIElements.TimeUnit);
            public static op_Implicit ($value: number) : UnityEngine.UIElements.TimeValue
            public static op_Equality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TimeValue, $rhs: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($other: UnityEngine.UIElements.TimeValue) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($value: number)
            public constructor ($value: number, $unit: UnityEngine.UIElements.TimeUnit)
        }
        /** 
        Specifies which part of the text the Element replaces with an ellipsis when textOverflow is set to TextOverflow.Ellipsis.
        */
        enum TextOverflowPosition
        { End = 0, Start = 1, Middle = 2 }
        /** 
        Style value that specifies whether or not a VisualElement is visible.
        */
        enum Visibility
        { Visible = 0, Hidden = 1 }
        /** 
        Word wrapping over multiple lines if not enough space is available to draw the text of an element.
        */
        enum WhiteSpace
        { Normal = 0, NoWrap = 1 }
        class StyleEnum$1<T> extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<T>, System.IEquatable$1<UnityEngine.UIElements.StyleEnum$1<T>>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IStyle
        {
            /** 
            Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.
            */
            alignContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Alignment of children on the cross axis of this container.
            */
            alignItems : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Similar to align-items, but only for this specific element.
            */
            alignSelf : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Align>
            /** 
            Background color to paint in the element's box.
            */
            backgroundColor : UnityEngine.UIElements.StyleColor
            /** 
            Background image to paint in the element's box.
            */
            backgroundImage : UnityEngine.UIElements.StyleBackground
            /** 
            Background image x position value.
            */
            backgroundPositionX : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image y position value.
            */
            backgroundPositionY : UnityEngine.UIElements.StyleBackgroundPosition
            /** 
            Background image repeat value.
            */
            backgroundRepeat : UnityEngine.UIElements.StyleBackgroundRepeat
            /** 
            Background image size value.
            */
            backgroundSize : UnityEngine.UIElements.StyleBackgroundSize
            /** 
            Color of the element's bottom border.
            */
            borderBottomColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderBottomRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the border during the layout phase.
            */
            borderBottomWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's left border.
            */
            borderLeftColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the left edge of the border during the layout phase.
            */
            borderLeftWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's right border.
            */
            borderRightColor : UnityEngine.UIElements.StyleColor
            /** 
            Space reserved for the right edge of the border during the layout phase.
            */
            borderRightWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Color of the element's top border.
            */
            borderTopColor : UnityEngine.UIElements.StyleColor
            /** 
            The radius of the top-left corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopLeftRadius : UnityEngine.UIElements.StyleLength
            /** 
            The radius of the top-right corner when a rounded rectangle is drawn in the element's box.
            */
            borderTopRightRadius : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the border during the layout phase.
            */
            borderTopWidth : UnityEngine.UIElements.StyleFloat
            /** 
            Bottom distance from the element's box during layout.
            */
            bottom : UnityEngine.UIElements.StyleLength
            /** 
            Color to use when drawing the text of an element.
            */
            color : UnityEngine.UIElements.StyleColor
            /** 
            Mouse cursor to display when the mouse pointer is over an element.
            */
            cursor : UnityEngine.UIElements.StyleCursor
            /** 
            Defines how an element is displayed in the layout.
            */
            display : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.DisplayStyle>
            /** 
            Initial main size of a flex item, on the main flex axis. The final layout might be smaller or larger, according to the flex shrinking and growing determined by the other flex properties.
            */
            flexBasis : UnityEngine.UIElements.StyleLength
            /** 
            Direction of the main axis to layout children in a container.
            */
            flexDirection : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.FlexDirection>
            /** 
            Specifies how the item will grow relative to the rest of the flexible items inside the same container.
            */
            flexGrow : UnityEngine.UIElements.StyleFloat
            /** 
            Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
            */
            flexShrink : UnityEngine.UIElements.StyleFloat
            /** 
            Placement of children over multiple lines if not enough space is available in this container.
            */
            flexWrap : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Wrap>
            /** 
            Font size to draw the element's text.
            */
            fontSize : UnityEngine.UIElements.StyleLength
            /** 
            Fixed height of an element for the layout.
            */
            height : UnityEngine.UIElements.StyleLength
            /** 
            Justification of children on the main axis of this container.
            */
            justifyContent : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Justify>
            /** 
            Left distance from the element's box during layout.
            */
            left : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between characters.
            */
            letterSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the bottom edge of the margin during the layout phase.
            */
            marginBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the margin during the layout phase.
            */
            marginLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the margin during the layout phase.
            */
            marginRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the margin during the layout phase.
            */
            marginTop : UnityEngine.UIElements.StyleLength
            /** 
            Maximum height for an element, when it is flexible or measures its own size.
            */
            maxHeight : UnityEngine.UIElements.StyleLength
            /** 
            Maximum width for an element, when it is flexible or measures its own size.
            */
            maxWidth : UnityEngine.UIElements.StyleLength
            /** 
            Minimum height for an element, when it is flexible or measures its own size.
            */
            minHeight : UnityEngine.UIElements.StyleLength
            /** 
            Minimum width for an element, when it is flexible or measures its own size.
            */
            minWidth : UnityEngine.UIElements.StyleLength
            /** 
            Specifies the transparency of an element and of its children.
            */
            opacity : UnityEngine.UIElements.StyleFloat
            /** 
            How a container behaves if its content overflows its own box.
            */
            overflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Overflow>
            /** 
            Space reserved for the bottom edge of the padding during the layout phase.
            */
            paddingBottom : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the left edge of the padding during the layout phase.
            */
            paddingLeft : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the right edge of the padding during the layout phase.
            */
            paddingRight : UnityEngine.UIElements.StyleLength
            /** 
            Space reserved for the top edge of the padding during the layout phase.
            */
            paddingTop : UnityEngine.UIElements.StyleLength
            /** 
            Element's positioning in its parent container.
            */
            position : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Position>
            /** 
            Right distance from the element's box during layout.
            */
            right : UnityEngine.UIElements.StyleLength
            /** 
            A rotation transformation.
            */
            rotate : UnityEngine.UIElements.StyleRotate
            /** 
            A scaling transformation.
            */
            scale : UnityEngine.UIElements.StyleScale
            /** 
            The element's text overflow mode.
            */
            textOverflow : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflow>
            /** 
            Drop shadow of the text.
            */
            textShadow : UnityEngine.UIElements.StyleTextShadow
            /** 
            Top distance from the element's box during layout.
            */
            top : UnityEngine.UIElements.StyleLength
            /** 
            The transformation origin is the point around which a transformation is applied.
            */
            transformOrigin : UnityEngine.UIElements.StyleTransformOrigin
            /** 
            Duration to wait before starting a property's transition effect when its value changes.
            */
            transitionDelay : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Time a transition animation should take to complete.
            */
            transitionDuration : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.TimeValue>
            /** 
            Properties to which a transition effect should be applied.
            */
            transitionProperty : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.StylePropertyName>
            /** 
            Determines how intermediate values are calculated for properties modified by a transition effect.
            */
            transitionTimingFunction : UnityEngine.UIElements.StyleList$1<UnityEngine.UIElements.EasingFunction>
            /** 
            A translate transformation.
            */
            translate : UnityEngine.UIElements.StyleTranslate
            /** 
            Tinting color for the element's backgroundImage.
            */
            unityBackgroundImageTintColor : UnityEngine.UIElements.StyleColor
            /** 
            Font to draw the element's text, defined as a Font object.
            */
            unityFont : UnityEngine.UIElements.StyleFont
            /** 
            Font to draw the element's text, defined as a FontDefinition structure. It takes precedence over -unity-font.
            */
            unityFontDefinition : UnityEngine.UIElements.StyleFontDefinition
            /** 
            Font style and weight (normal, bold, italic) to draw the element's text.
            */
            unityFontStyleAndWeight : UnityEngine.UIElements.StyleEnum$1<UnityEngine.FontStyle>
            /** 
            Specifies which box the element content is clipped against.
            */
            unityOverflowClipBox : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.OverflowClipBox>
            /** 
            Increases or decreases the space between paragraphs.
            */
            unityParagraphSpacing : UnityEngine.UIElements.StyleLength
            /** 
            Size of the 9-slice's bottom edge when painting an element's background image.
            */
            unitySliceBottom : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's left edge when painting an element's background image.
            */
            unitySliceLeft : UnityEngine.UIElements.StyleInt
            /** 
            Size of the 9-slice's right edge when painting an element's background image.
            */
            unitySliceRight : UnityEngine.UIElements.StyleInt
            /** 
            Scale applied to an element's slices.
            */
            unitySliceScale : UnityEngine.UIElements.StyleFloat
            /** 
            Size of the 9-slice's top edge when painting an element's background image.
            */
            unitySliceTop : UnityEngine.UIElements.StyleInt
            /** 
            Horizontal and vertical text alignment in the element's box.
            */
            unityTextAlign : UnityEngine.UIElements.StyleEnum$1<UnityEngine.TextAnchor>
            /** 
            Outline color of the text.
            */
            unityTextOutlineColor : UnityEngine.UIElements.StyleColor
            /** 
            Outline width of the text.
            */
            unityTextOutlineWidth : UnityEngine.UIElements.StyleFloat
            /** 
            The element's text overflow position.
            */
            unityTextOverflowPosition : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.TextOverflowPosition>
            /** 
            Specifies whether or not an element is visible.
            */
            visibility : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.Visibility>
            /** 
            Word wrap over multiple lines if not enough space is available to draw the text of an element.
            */
            whiteSpace : UnityEngine.UIElements.StyleEnum$1<UnityEngine.UIElements.WhiteSpace>
            /** 
            Fixed width of an element for the layout.
            */
            width : UnityEngine.UIElements.StyleLength
            /** 
            Increases or decreases the space between words.
            */
            wordSpacing : UnityEngine.UIElements.StyleLength
        }
        /** 
        Style value that can be either a Color or a StyleKeyword.
        */
        class StyleColor extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.Color>, System.IEquatable$1<UnityEngine.UIElements.StyleColor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Color value.
            */
            public get value(): UnityEngine.Color;
            public set value(value: UnityEngine.Color);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.UIElements.StyleColor) : boolean
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleColor, $rhs: UnityEngine.Color) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleColor
            public static op_Implicit ($v: UnityEngine.Color) : UnityEngine.UIElements.StyleColor
            public Equals ($other: UnityEngine.UIElements.StyleColor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Color)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Background or a StyleKeyword.
        */
        class StyleBackground extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Background>, System.IEquatable$1<UnityEngine.UIElements.StyleBackground>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Background value.
            */
            public get value(): UnityEngine.UIElements.Background;
            public set value(value: UnityEngine.UIElements.Background);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackground, $rhs: UnityEngine.UIElements.StyleBackground) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.UIElements.Background) : UnityEngine.UIElements.StyleBackground
            public static op_Implicit ($v: UnityEngine.Texture2D) : UnityEngine.UIElements.StyleBackground
            public Equals ($other: UnityEngine.UIElements.StyleBackground) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Background)
            public constructor ($v: UnityEngine.Texture2D)
            public constructor ($v: UnityEngine.Sprite)
            public constructor ($v: UnityEngine.UIElements.VectorImage)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundPosition or a StyleKeyword.
        */
        class StyleBackgroundPosition extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundPosition>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundPosition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundPosition value.
            */
            public get value(): UnityEngine.UIElements.BackgroundPosition;
            public set value(value: UnityEngine.UIElements.BackgroundPosition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundPosition, $rhs: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundPosition
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundPosition) : UnityEngine.UIElements.StyleBackgroundPosition
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundPosition) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundPosition)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundRepeat or a StyleKeyword.
        */
        class StyleBackgroundRepeat extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundRepeat>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundRepeat>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundRepeat value.
            */
            public get value(): UnityEngine.UIElements.BackgroundRepeat;
            public set value(value: UnityEngine.UIElements.BackgroundRepeat);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundRepeat, $rhs: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundRepeat
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundRepeat) : UnityEngine.UIElements.StyleBackgroundRepeat
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundRepeat) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundRepeat)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a style value that can be either a BackgroundSize or a StyleKeyword.
        */
        class StyleBackgroundSize extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.BackgroundSize>, System.IEquatable$1<UnityEngine.UIElements.StyleBackgroundSize>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The BackgroundSize value.
            */
            public get value(): UnityEngine.UIElements.BackgroundSize;
            public set value(value: UnityEngine.UIElements.BackgroundSize);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleBackgroundSize, $rhs: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleBackgroundSize
            public static op_Implicit ($v: UnityEngine.UIElements.BackgroundSize) : UnityEngine.UIElements.StyleBackgroundSize
            public Equals ($other: UnityEngine.UIElements.StyleBackgroundSize) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.BackgroundSize)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Length or a StyleKeyword.
        */
        class StyleLength extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Length>, System.IEquatable$1<UnityEngine.UIElements.StyleLength>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Length value.
            */
            public get value(): UnityEngine.UIElements.Length;
            public set value(value: UnityEngine.UIElements.Length);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleLength, $rhs: UnityEngine.UIElements.StyleLength) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleLength
            public static op_Implicit ($v: UnityEngine.UIElements.Length) : UnityEngine.UIElements.StyleLength
            public Equals ($other: UnityEngine.UIElements.StyleLength) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($v: UnityEngine.UIElements.Length)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Cursor or a StyleKeyword.
        */
        class StyleCursor extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Cursor>, System.IEquatable$1<UnityEngine.UIElements.StyleCursor>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Cursor value.
            */
            public get value(): UnityEngine.UIElements.Cursor;
            public set value(value: UnityEngine.UIElements.Cursor);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleCursor, $rhs: UnityEngine.UIElements.StyleCursor) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleCursor
            public static op_Implicit ($v: UnityEngine.UIElements.Cursor) : UnityEngine.UIElements.StyleCursor
            public Equals ($other: UnityEngine.UIElements.StyleCursor) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Cursor)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Defines what should happened if content overflows an element bounds.
        */
        enum Overflow
        { Visible = 0, Hidden = 1 }
        /** 
        Represents a style value that can be either a Rotate or a StyleKeyword.
        */
        class StyleRotate extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Rotate>, System.IEquatable$1<UnityEngine.UIElements.StyleRotate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Rotate value.
            */
            public get value(): UnityEngine.UIElements.Rotate;
            public set value(value: UnityEngine.UIElements.Rotate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleRotate, $rhs: UnityEngine.UIElements.StyleRotate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleRotate
            public static op_Implicit ($v: UnityEngine.UIElements.Rotate) : UnityEngine.UIElements.StyleRotate
            public Equals ($other: UnityEngine.UIElements.StyleRotate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Rotate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a Scale or a StyleKeyword.
        */
        class StyleScale extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Scale>, System.IEquatable$1<UnityEngine.UIElements.StyleScale>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Scale value.
            */
            public get value(): UnityEngine.UIElements.Scale;
            public set value(value: UnityEngine.UIElements.Scale);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($scale: UnityEngine.Vector2) : UnityEngine.UIElements.StyleScale
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleScale, $rhs: UnityEngine.UIElements.StyleScale) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleScale
            public static op_Implicit ($v: UnityEngine.UIElements.Scale) : UnityEngine.UIElements.StyleScale
            public Equals ($other: UnityEngine.UIElements.StyleScale) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Scale)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
            public constructor ($scale: UnityEngine.Vector2)
        }
        /** 
        Style value that can be either a TextShadow or a StyleKeyword.
        */
        class StyleTextShadow extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TextShadow>, System.IEquatable$1<UnityEngine.UIElements.StyleTextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TextShadow value.
            */
            public get value(): UnityEngine.UIElements.TextShadow;
            public set value(value: UnityEngine.UIElements.TextShadow);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTextShadow, $rhs: UnityEngine.UIElements.StyleTextShadow) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTextShadow
            public static op_Implicit ($v: UnityEngine.UIElements.TextShadow) : UnityEngine.UIElements.StyleTextShadow
            public Equals ($other: UnityEngine.UIElements.StyleTextShadow) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TextShadow)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Script interface for VisualElement text-shadow style property IStyle.textShadow.
        */
        class TextShadow extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TextShadow>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The offset of the shadow.
            */
            public offset : UnityEngine.Vector2
            /** 
            The blur radius of the shadow.
            */
            public blurRadius : number
            /** 
            The color of the shadow.
            */
            public color : UnityEngine.Color
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Equality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
            public static op_Inequality ($style1: UnityEngine.UIElements.TextShadow, $style2: UnityEngine.UIElements.TextShadow) : boolean
        }
        /** 
        Represents a style value that can be either a TransformOrigin or a StyleKeyword.
        */
        class StyleTransformOrigin extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.TransformOrigin>, System.IEquatable$1<UnityEngine.UIElements.StyleTransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The TransformOrigin value.
            */
            public get value(): UnityEngine.UIElements.TransformOrigin;
            public set value(value: UnityEngine.UIElements.TransformOrigin);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTransformOrigin, $rhs: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTransformOrigin
            public static op_Implicit ($v: UnityEngine.UIElements.TransformOrigin) : UnityEngine.UIElements.StyleTransformOrigin
            public Equals ($other: UnityEngine.UIElements.StyleTransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.TransformOrigin)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents the point of origin where the (Scale, Translate, Rotate) transformations are applied.
        */
        class TransformOrigin extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.TransformOrigin>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the initial value for the TransformOrigin property.
            */
            public static Initial () : UnityEngine.UIElements.TransformOrigin
            public static op_Equality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.TransformOrigin, $rhs: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($other: UnityEngine.UIElements.TransformOrigin) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        class StyleList$1<T> extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<System.Collections.Generic.List$1<T>>, System.IEquatable$1<UnityEngine.UIElements.StyleList$1<T>>
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Style value that can be either a Translate or a StyleKeyword.
        */
        class StyleTranslate extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.Translate>, System.IEquatable$1<UnityEngine.UIElements.StyleTranslate>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Translate value.
            */
            public get value(): UnityEngine.UIElements.Translate;
            public set value(value: UnityEngine.UIElements.Translate);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleTranslate, $rhs: UnityEngine.UIElements.StyleTranslate) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleTranslate
            public static op_Implicit ($v: UnityEngine.UIElements.Translate) : UnityEngine.UIElements.StyleTranslate
            public Equals ($other: UnityEngine.UIElements.StyleTranslate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.UIElements.Translate)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Represents a translation of the object. Percentage values in X and Y are relative to the width and height of the visual element where the style value is applied.
        */
        class Translate extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.Translate>
        {
            protected [__keep_incompatibility]: never;
            public get x(): UnityEngine.UIElements.Length;
            public set x(value: UnityEngine.UIElements.Length);
            public get y(): UnityEngine.UIElements.Length;
            public set y(value: UnityEngine.UIElements.Length);
            public get z(): number;
            public set z(value: number);
            /** 
            Returns the value of a Translate object with no translation applied.
            */
            public static None () : UnityEngine.UIElements.Translate
            public static op_Equality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.Translate, $rhs: UnityEngine.UIElements.Translate) : boolean
            public Equals ($other: UnityEngine.UIElements.Translate) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length, $z: number)
            public constructor ($x: UnityEngine.UIElements.Length, $y: UnityEngine.UIElements.Length)
        }
        /** 
        Style value that can be either a Font or a StyleKeyword.
        */
        class StyleFont extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.Font>, System.IEquatable$1<UnityEngine.UIElements.StyleFont>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The Font value.
            */
            public get value(): UnityEngine.Font;
            public set value(value: UnityEngine.Font);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleFont, $rhs: UnityEngine.UIElements.StyleFont) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFont
            public static op_Implicit ($v: UnityEngine.Font) : UnityEngine.UIElements.StyleFont
            public Equals ($other: UnityEngine.UIElements.StyleFont) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Style value that can be either a FontDefinition or a StyleKeyword.
        */
        class StyleFontDefinition extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<UnityEngine.UIElements.FontDefinition>, System.IEquatable$1<UnityEngine.UIElements.StyleFontDefinition>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The actual value of the definition.
            */
            public get value(): UnityEngine.UIElements.FontDefinition;
            public set value(value: UnityEngine.UIElements.FontDefinition);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleFontDefinition
            public static op_Implicit ($f: UnityEngine.UIElements.FontDefinition) : UnityEngine.UIElements.StyleFontDefinition
            public Equals ($other: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.StyleFontDefinition, $right: UnityEngine.UIElements.StyleFontDefinition) : boolean
            public constructor ($f: UnityEngine.UIElements.FontDefinition)
            public constructor ($f: UnityEngine.TextCore.Text.FontAsset)
            public constructor ($f: UnityEngine.Font)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Boxes against which the VisualElement content is clipped.
        */
        enum OverflowClipBox
        { PaddingBox = 0, ContentBox = 1 }
        /** 
        Style value that can be either an integer or a StyleKeyword.
        */
        class StyleInt extends System.ValueType implements UnityEngine.UIElements.IStyleValue$1<number>, System.IEquatable$1<UnityEngine.UIElements.StyleInt>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The integer value.
            */
            public get value(): number;
            public set value(value: number);
            /** 
            The style keyword.
            */
            public get keyword(): UnityEngine.UIElements.StyleKeyword;
            public set keyword(value: UnityEngine.UIElements.StyleKeyword);
            public static op_Equality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Inequality ($lhs: UnityEngine.UIElements.StyleInt, $rhs: UnityEngine.UIElements.StyleInt) : boolean
            public static op_Implicit ($keyword: UnityEngine.UIElements.StyleKeyword) : UnityEngine.UIElements.StyleInt
            public static op_Implicit ($v: number) : UnityEngine.UIElements.StyleInt
            public Equals ($other: UnityEngine.UIElements.StyleInt) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($v: number)
            public constructor ($keyword: UnityEngine.UIElements.StyleKeyword)
        }
        /** 
        Describes the picking behavior.
        */
        enum PickingMode
        { Position = 0, Ignore = 1 }
        /** 
        Indicates the directionality of the element's text.
        */
        enum LanguageDirection
        { Inherit = 0, LTR = 1, RTL = 2 }
        /** 
        This structure manipulates the set of StyleSheet objects attached to the owner VisualElement.
        */
        class VisualElementStyleSheetSet extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.VisualElementStyleSheetSet>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Number of style sheets attached to the owner element.
            */
            public get count(): number;
            /** 
            Adds a style sheet for the owner element.
            */
            public Add ($styleSheet: UnityEngine.UIElements.StyleSheet) : void
            /** 
            Removes all style sheets for the owner element.
            */
            public Clear () : void
            /** 
            Removes a style sheet for the owner element.
            */
            public Remove ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            /** 
            Looks for the specified StyleSheet
            * @returns Returns true if the style sheet is attached to the owner element, false otherwise. 
            */
            public Contains ($styleSheet: UnityEngine.UIElements.StyleSheet) : boolean
            public get_Item ($index: number) : UnityEngine.UIElements.StyleSheet
            /** 
            Compares instances of the VisualElementStyleSheetSet struct for equality.
            * @param $other The structure to compare with.
            * @returns Returns true if the two instances refer to the same element, false otherwise. 
            */
            public Equals ($other: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
            public static op_Inequality ($left: UnityEngine.UIElements.VisualElementStyleSheetSet, $right: UnityEngine.UIElements.VisualElementStyleSheetSet) : boolean
        }
        /** 
        Describes how to interpret a Length value.
        */
        enum LengthUnit
        { Pixel = 0, Percent = 1 }
        /** 
        Keyword that can be used on any style value types.
        */
        enum StyleKeyword
        { Undefined = 0, Null = 1, Auto = 2, None = 3, Initial = 4 }
        /** 
        Describes how to interpret a TimeValue.
        */
        enum TimeUnit
        { Second = 0, Millisecond = 1 }
        /** 
        Specifies the alignment keywords for TransformOrigin.
        */
        enum TransformOriginOffset
        { Left = 1, Right = 2, Top = 3, Bottom = 4, Center = 5 }
        /** 
        Represents the root VisualElement of UXML file.
        */
        class TemplateContainer extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            The local ID of the template in the parent UXML file (Read Only).
            */
            public get templateId(): string;
            /** 
            Stores the template asset reference, if the generated element is cloned from a VisualTreeAsset as a
            Template declaration inside another VisualTreeAsset.
            */
            public get templateSource(): UnityEngine.UIElements.VisualTreeAsset;
            public get contentContainer(): UnityEngine.UIElements.VisualElement;
            public constructor ()
            public constructor ($templateId: string)
        }
        /** 
        Global configuration options for UI Toolkit input.
        */
        class UIToolkitInputConfiguration extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Use this method to activate one of the two input backends available for UIToolkit events at runtime.
            The new Input System compatible backend allows the Input System package to send its input to UI Toolkit
            directly, removing the need for an UnityEngine.EventSystems.EventSystem in the user scene,
            and will automatically fall back to Input Manager input if the Input System package input isn't enabled in
            the Player Settings active input handling.
            Alternatively, use the legacy backend to always rely on Input Manager input only. In that case,
            if the Input Manager is not enabled as an active input handler, UI Toolkit runtime events will not work.
            * @param $backend 
            The input backend to be used as the source of input for UI Toolkit events at runtime.
            */
            public static SetRuntimeInputBackend ($backend: UnityEngine.UIElements.UIToolkitInputBackendOption) : void
        }
        /** 
        Input backend options for UI Toolkit events at runtime.
        */
        enum UIToolkitInputBackendOption
        { Default = 0, InputSystemCompatibleBackend = 0, LegacyBackend = 1 }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        See UQuery for further information.
        */
        class UQuery extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.
        */
        class UQueryExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.VisualElement
            /** 
            Convenience overload, shorthand for UQueryExtensions.Query|Query().UQueryBuilder_1.Build|Build().UQueryBuilder_1.First|First()
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns The first element matching all the criteria, or null if none was found. 
            */
            public static Q ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.VisualElement
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $classes If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, ...classes: string[]) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @param $name If specified, will select elements with this name.
            * @param $className If provided, it selects elements with the specified class (case sensitive, to be distinguished from Type).
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement, $name?: string, $className?: string) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
            /** 
            Initializes a QueryBuilder with the specified selection rules.
            * @param $e Root VisualElement on which the selector will be applied.
            * @returns QueryBuilder configured with the associated selection rules. 
            */
            public static Query ($e: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.UQueryBuilder$1<UnityEngine.UIElements.VisualElement>
        }
        class UQueryBuilder$1<T> extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.UQueryBuilder$1<T>>
        {
            protected [__keep_incompatibility]: never;
        }
        interface IUxmlAttributes
        {
            /** 
            Get the value of an attribute as a string.
            * @param $attributeName Attribute name.
            * @param $value The attribute value or null if not found.
            * @returns True if the attribute was found, false otherwise. 
            */
            TryGetAttributeValue ($attributeName: string, $value: $Ref<string>) : boolean
        }
        /** 
        Base class that describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class BaseUxmlTraits extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
        }
        /** 
        Describes a VisualElement derived class for the parsing of UXML files and the generation of UXML schema definition.
        */
        class UxmlTraits extends UnityEngine.UIElements.BaseUxmlTraits
        {
            protected [__keep_incompatibility]: never;
            /** 
            Initialize a VisualElement instance with values from the UXML element attributes.
            * @param $ve The VisualElement to initialize.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            */
            public Init ($ve: UnityEngine.UIElements.VisualElement, $bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : void
        }
        /** 
        Defines UxmlTraits for the UXML root element.
        */
        class UxmlRootElementTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an enumerable containing UxmlChildElementDescription(typeof(VisualElement)), since the root element can contain VisualElements.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        class BaseUxmlFactory$2<TCreatedType, TTraits> extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class UxmlFactory$2<TCreatedType, TTraits> extends UnityEngine.UIElements.BaseUxmlFactory$2<TCreatedType, TTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the UXML element read by the factory.
            */
            public get uxmlName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            public get uxmlQualifiedName(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            /** 
            The type of element for which this element type can substitute for.
            */
            public get substituteForTypeName(): string;
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            public get substituteForTypeQualifiedName(): string;
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        interface IBaseUxmlFactory
        {
            /** 
            The name of the UXML element read by the factory.
            */
            uxmlName : string
            /** 
            The namespace of the UXML element read by the factory.
            */
            uxmlNamespace : string
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            uxmlQualifiedName : string
            /** 
            The type of the UXML element read by the factory.
            */
            uxmlType : System.Type
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            canHaveAnyAttribute : boolean
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            uxmlAttributesDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            uxmlChildElementsDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>
            /** 
            The type of element for which this element type can substitute for.
            */
            substituteForTypeName : string
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            substituteForTypeNamespace : string
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            substituteForTypeQualifiedName : string
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        interface IUxmlFactory extends UnityEngine.UIElements.IBaseUxmlFactory
        {
            /** 
            The name of the UXML element read by the factory.
            */
            uxmlName : string
            /** 
            The namespace of the UXML element read by the factory.
            */
            uxmlNamespace : string
            /** 
            The fully qualified name of the UXML element read by the factory.
            */
            uxmlQualifiedName : string
            /** 
            The type of the UXML element read by the factory.
            */
            uxmlType : System.Type
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            canHaveAnyAttribute : boolean
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            uxmlAttributesDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            uxmlChildElementsDescription : System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>
            /** 
            The type of element for which this element type can substitute for.
            */
            substituteForTypeName : string
            /** 
            The UXML namespace for the type returned by substituteForTypeName.
            */
            substituteForTypeNamespace : string
            /** 
            The fully qualified XML name for the type returned by substituteForTypeName.
            */
            substituteForTypeQualifiedName : string
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
        }
        /** 
        Factory for the root UXML element.
        */
        class UxmlRootElementFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlRootElementTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns "UXML".
            */
            public get uxmlName(): string;
            /** 
            Returns the qualified name for this element.
            */
            public get uxmlQualifiedName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeName(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeNamespace(): string;
            /** 
            Returns the empty string, as the root element can not appear anywhere else bit at the root of the document.
            */
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        This structure holds information used during UXML template instantiation.
        */
        class CreationContext extends System.ValueType implements System.IEquatable$1<UnityEngine.UIElements.CreationContext>
        {
            protected [__keep_incompatibility]: never;
            public static Default : UnityEngine.UIElements.CreationContext
            /** 
            The element into which the visualTreeAsset is being cloned or instantiated.
            VisualTreeAsset.CloneTreeVisualTreeAsset.Instantiate
            */
            public get target(): UnityEngine.UIElements.VisualElement;
            /** 
            The target UXML file to clone or instantiate.
            */
            public get visualTreeAsset(): UnityEngine.UIElements.VisualTreeAsset;
            public get slotInsertionPoints(): System.Collections.Generic.Dictionary$2<string, UnityEngine.UIElements.VisualElement>;
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Equality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
            public static op_Inequality ($context1: UnityEngine.UIElements.CreationContext, $context2: UnityEngine.UIElements.CreationContext) : boolean
        }
        /** 
        Describe an allowed child element for an element.
        */
        class UxmlChildElementDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the allowed child element.
            */
            public get elementName(): string;
            /** 
            The namespace name of the allowed child element.
            */
            public get elementNamespace(): string;
            public constructor ($t: System.Type)
        }
        /** 
        Defines UxmlTraits for the Style tag.
        */
        class UxmlStyleTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Style element.
        */
        class UxmlStyleFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlStyleTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Defines UxmlTraits for the Template tag.
        */
        class UxmlTemplateTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root Template element.
        */
        class UxmlTemplateFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlTemplateTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Defines UxmlTraits for the AttributeOverrides tag.
        */
        class UxmlAttributeOverridesTraits extends UnityEngine.UIElements.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
        }
        /** 
        Factory for the root AttributeOverrides element.
        */
        class UxmlAttributeOverridesFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.UxmlAttributeOverridesTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public get uxmlName(): string;
            public get uxmlQualifiedName(): string;
            public get substituteForTypeName(): string;
            public get substituteForTypeNamespace(): string;
            public get substituteForTypeQualifiedName(): string;
            /** 
            The namespace of the UXML element read by the factory.
            */
            public get uxmlNamespace(): string;
            /** 
            The type of the UXML element read by the factory.
            */
            public get uxmlType(): System.Type;
            /** 
            Must return true if the UXML element attributes are not restricted to the values enumerated by uxmlAttributesDescription.
            */
            public get canHaveAnyAttribute(): boolean;
            /** 
            Describes the UXML attributes expected by the element. The attributes enumerated here will appear in the UXML schema.
            */
            public get uxmlAttributesDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlAttributeDescription>;
            /** 
            Describes the types of element that can appear as children of this element in a UXML file.
            */
            public get uxmlChildElementsDescription(): System.Collections.Generic.IEnumerable$1<UnityEngine.UIElements.UxmlChildElementDescription>;
            public constructor ()
            /** 
            Returns true if the factory accepts the content of the attribute bag.
            * @param $bag The attribute bag.
            * @param $cc The creation context.
            * @returns True if the factory accepts the content of the attribute bag. False otherwise. 
            */
            public AcceptsAttributeBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : boolean
            /** 
            Instantiate and initialize an object of type T0.
            * @param $bag A bag of name-value pairs, one for each attribute of the UXML element. This can be used to initialize the properties of the created object.
            * @param $cc When the element is created as part of a template instance inserted in another document, this contains information about the insertion point.
            * @returns The created object. 
            */
            public Create ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext) : UnityEngine.UIElements.VisualElement
        }
        /** 
        Base class for describing an XML attribute.
        */
        class UxmlAttributeDescription extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            The attribute name.
            */
            public get name(): string;
            public set name(value: string);
            /** 
            A list of obsolete names for this attribute.
            */
            public get obsoleteNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set obsoleteNames(value: System.Collections.Generic.IEnumerable$1<string>);
            /** 
            Attribute type.
            */
            public get type(): string;
            /** 
            Attribute namespace.
            */
            public get typeNamespace(): string;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Whether the attribute is optional, required or prohibited.
            */
            public get use(): UnityEngine.UIElements.UxmlAttributeDescription.Use;
            public set use(value: UnityEngine.UIElements.UxmlAttributeDescription.Use);
            /** 
            Restrictions on the possible values of the attribute.
            */
            public get restriction(): UnityEngine.UIElements.UxmlTypeRestriction;
            public set restriction(value: UnityEngine.UIElements.UxmlTypeRestriction);
        }
        /** 
        Base class to restricts the value of an attribute.
        */
        class UxmlTypeRestriction extends System.Object implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            Indicates whether the current UxmlTypeRestriction object is equal to another object of the same type.
            * @param $other The object to compare with.
            * @returns True if the otheer object is equal to this one. 
            */
            public Equals ($other: UnityEngine.UIElements.UxmlTypeRestriction) : boolean
        }
        class TypedUxmlAttributeDescription$1<T> extends UnityEngine.UIElements.UxmlAttributeDescription
        {
            protected [__keep_incompatibility]: never;
        }
        /** 
        Describes a UXML string attribute.
        */
        class UxmlStringAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<string>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<string>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML float attribute.
        */
        class UxmlFloatAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML double attribute.
        */
        class UxmlDoubleAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML int attribute.
        */
        class UxmlIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML uint attribute.
        */
        class UxmlUnsignedIntAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<number>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<number>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML ulong attribute.
        */
        class UxmlUnsignedLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML long attribute.
        */
        class UxmlLongAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<bigint>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<bigint>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML bool attribute.
        */
        class UxmlBoolAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<boolean>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<boolean>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML attribute representing a Color as a string.
        */
        class UxmlColorAttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Color>) : boolean
            public constructor ()
        }
        /** 
        Describes a UXML Hash128 attribute.
        */
        class UxmlHash128AttributeDescription extends UnityEngine.UIElements.TypedUxmlAttributeDescription$1<UnityEngine.Hash128>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The default value for the attribute, as a string.
            */
            public get defaultValueAsString(): string;
            /** 
            Attempts to retrieve the value of this attribute from the attribute bag and returns true if found, otherwise false.
            * @param $bag The bag of attributes.
            * @param $cc The context in which the values are retrieved.
            * @param $value The value of the attribute.
            * @returns True if the value is found, false otherwise. 
            */
            public TryGetValueFromBag ($bag: UnityEngine.UIElements.IUxmlAttributes, $cc: UnityEngine.UIElements.CreationContext, $value: $Ref<UnityEngine.Hash128>) : boolean
            public constructor ()
        }
        /** 
        Declares a custom control.
        */
        class UxmlElementAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom name for an element.
            */
            public name : string
            public constructor ()
            public constructor ($uxmlName: string)
        }
        /** 
        Declares that a field or property is associated with a UXML attribute.
        */
        class UxmlAttributeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            Provides a custom UXML name to the attribute.
            */
            public name : string
            /** 
            Provides support for obsolete UXML attribute names.
            */
            public obsoleteNames : System.Array$1<string>
            public constructor ()
            public constructor ($name: string)
            public constructor ($name: string, ...obsoleteNames: string[])
        }
        /** 
        Provides information about the expected type when applied to a Type field or property that has the UxmlAttributeAttribute attribute.
        */
        class UxmlTypeReferenceAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The base type that the value inherits from.
            */
            public baseType : System.Type
            public constructor ()
            public constructor ($baseType: System.Type)
        }
        /** 
        Declares that a class can be instantiated from UXML and contain UXML attributes.
        */
        class UxmlObjectAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** 
        Declares that a field or property is associated with nested UXML objects.
        */
        class UxmlObjectReferenceAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** 
            The name of the nested UXML element that the UXML Objects are serialized to. Note: A null or empty value will result in the objects being serialized into the root.
            */
            public name : string
            /** 
            In UI Builder, when adding a UXML Object to a field that has multiple derived types,
            a dropdown list appears with a selection of available types that can be added to the field. By default,
            this list comprises all types that inherit from the UXML object type. You can use a parameter
            to specify a list of accepted types to be displayed, rather than showing all available types
            */
            public types : System.Array$1<System.Type>
            public constructor ()
            public constructor ($uxmlName: string)
            public constructor ($uxmlName: string, ...acceptedTypes: System.Type[])
        }
        /** 
        Generates an instance of the declaring element when the UxmlElementAttribute is used in a custom control. 
        */
        class UxmlSerializedData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Returns an instance of the declaring element.
            * @returns The new instance of the declaring element. 
            */
            public CreateInstance () : any
            /** 
            Applies serialized field values to a compatible visual element.
            * @param $obj The element to have the serialized data applied to.
            */
            public Deserialize ($obj: any) : void
        }
        /** 
        This is used by the code generator when a custom control is using the UxmlElementAttribute.
        */
        class UxmlSerializedDataUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            This is used by the code generator when a custom control is using the UxmlElementAttribute.
            */
            public static CopySerialized ($value: any) : any
        }
        /** 
        Restricts the value of an attribute to match a regular expression.
        */
        class UxmlValueMatches extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The regular expression that should be matched by the value.
            */
            public get regex(): string;
            public set regex(value: string);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be within the specified bounds.
        */
        class UxmlValueBounds extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The minimum value for the attribute.
            */
            public get min(): string;
            public set min(value: string);
            /** 
            The maximum value for the attribute.
            */
            public get max(): string;
            public set max(value: string);
            /** 
            True if the bounds exclude min.
            */
            public get excludeMin(): boolean;
            public set excludeMin(value: boolean);
            /** 
            True if the bounds exclude max.
            */
            public get excludeMax(): boolean;
            public set excludeMax(value: boolean);
            public constructor ()
        }
        /** 
        Restricts the value of an attribute to be taken from a list of values.
        */
        class UxmlEnumeration extends UnityEngine.UIElements.UxmlTypeRestriction implements System.IEquatable$1<UnityEngine.UIElements.UxmlTypeRestriction>
        {
            protected [__keep_incompatibility]: never;
            /** 
            The list of values the attribute can take.
            */
            public get values(): System.Collections.Generic.IEnumerable$1<string>;
            public set values(value: System.Collections.Generic.IEnumerable$1<string>);
            public constructor ()
        }
        /** 
        VisualElementExtensions is a set of extension methods useful for VisualElement.
        */
        class VisualElementExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Aligns a VisualElement's left, top, right and bottom edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentSize ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Aligns a VisualElement's left and right edges with the corresponding edges of its parent.
            * @param $elem The element to be aligned with its parent
            */
            public static StretchToParentWidth ($elem: UnityEngine.UIElements.VisualElement) : void
            /** 
            Add a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be added to the VisualElement.
            */
            public static AddManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Remove a manipulator associated to a VisualElement.
            * @param $ele VisualElement associated to the manipulator.
            * @param $manipulator Manipulator to be removed from the VisualElement.
            */
            public static RemoveManipulator ($ele: UnityEngine.UIElements.VisualElement, $manipulator: UnityEngine.UIElements.IManipulator) : void
            /** 
            Transforms a point from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in world space.
            * @returns A point in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a point from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $p The point to transform, in local space.
            * @returns A point in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $p: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the world space to the local space of the element.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in world space.
            * @returns A rectangle in the local space of the element. 
            */
            public static WorldToLocal ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a rectangle from the local space of the element to the world space.
            * @param $ele The element to use as a reference for the local space.
            * @param $r The rectangle to transform, in local space.
            * @returns A rectangle in the world space. 
            */
            public static LocalToWorld ($ele: UnityEngine.UIElements.VisualElement, $r: UnityEngine.Rect) : UnityEngine.Rect
            /** 
            Transforms a point from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $point The point to transform, in the local space of the source element.
            * @returns A point in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $point: UnityEngine.Vector2) : UnityEngine.Vector2
            /** 
            Transforms a rectangle from the local space of an element to the local space of another element.
            * @param $src The element to use as a reference as the source local space.
            * @param $dest The element to use as a reference as the destination local space.
            * @param $rect The rectangle to transform, in the local space of the source element.
            * @returns A rectangle in the local space of destination element. 
            */
            public static ChangeCoordinatesTo ($src: UnityEngine.UIElements.VisualElement, $dest: UnityEngine.UIElements.VisualElement, $rect: UnityEngine.Rect) : UnityEngine.Rect
        }
        class VisualElementDebugExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static DebugIncrementVersionChange ($ve: UnityEngine.UIElements.VisualElement, $changeType: UnityEngine.UIElements.VersionChangeType) : void
        }
        /** 
        Options used as arguments for EventInterestAttribute when the affected method treats events in a general,
        non type-specific manner.
        */
        enum EventInterestOptions
        { Inherit = 0, AllEventTypes = -1 }
        /** 
        Optional attribute on overrides of CallbackEventHandler.HandleEventBubbleUp.
        */
        class EventInterestAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...eventTypes: System.Type[])
            public constructor ($interests: UnityEngine.UIElements.EventInterestOptions)
        }
        /** 
        Define focus change directions for the VisualElementFocusRing.
        */
        class VisualElementFocusChangeDirection extends UnityEngine.UIElements.FocusChangeDirection implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus is moving to the left.
            */
            public static get left(): UnityEngine.UIElements.FocusChangeDirection;
            /** 
            The focus is moving to the right.
            */
            public static get right(): UnityEngine.UIElements.FocusChangeDirection;
        }
        /** 
        Implementation of a linear focus ring. Elements are sorted according to their focusIndex.
        */
        class VisualElementFocusRing extends System.Object implements UnityEngine.UIElements.IFocusRing
        {
            protected [__keep_incompatibility]: never;
            /** 
            The focus order for elements having 0 has a focusIndex.
            */
            public get defaultFocusOrder(): UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder;
            public set defaultFocusOrder(value: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder);
            /** 
            Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right in the focus ring.
            */
            public GetFocusChangeDirection ($currentFocusable: UnityEngine.UIElements.Focusable, $e: UnityEngine.UIElements.EventBase) : UnityEngine.UIElements.FocusChangeDirection
            /** 
            Get the next element in the given direction.
            */
            public GetNextFocusable ($currentFocusable: UnityEngine.UIElements.Focusable, $direction: UnityEngine.UIElements.FocusChangeDirection) : UnityEngine.UIElements.Focusable
            public constructor ($root: UnityEngine.UIElements.VisualElement, $dfo?: UnityEngine.UIElements.VisualElementFocusRing.DefaultFocusOrder)
        }
        interface IVisualElementScheduledItem
        {
            /** 
            Returns the VisualElement this object is associated with.
            */
            element : UnityEngine.UIElements.VisualElement
            /** 
            Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.
            */
            isActive : boolean
            /** 
            If not already active, will schedule this item on its VisualElement's scheduler.
            */
            Resume () : void
            /** 
            Removes this item from its VisualElement's scheduler.
            */
            Pause () : void
            /** 
            Cancels any previously scheduled execution of this item and re-schedules the item.
            * @param $delayMs Minimum time in milliseconds before this item will be executed.
            */
            ExecuteLater ($delayMs: bigint) : void
            /** 
            Adds a delay to the first invokation.
            * @param $delayMs The minimum number of milliseconds after activation where this item's action will be executed.
            * @returns This ScheduledItem. 
            */
            StartingIn ($delayMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            Repeats this action after a specified time.
            * @param $intervalMs Minimum amount of time in milliseconds between each action execution.
            * @returns This ScheduledItem. 
            */
            Every ($intervalMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
            Until ($stopCondition: System.Func$1<boolean>) : UnityEngine.UIElements.IVisualElementScheduledItem
            /** 
            After specified duration, the item will be automatically unscheduled.
            * @param $durationMs The total duration in milliseconds where this item will be active.
            * @returns This ScheduledItem. 
            */
            ForDuration ($durationMs: bigint) : UnityEngine.UIElements.IVisualElementScheduledItem
        }
        class InputWrapper extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public get compositionString(): string;
            public get imeCompositionMode(): UnityEngine.IMECompositionMode;
            public set imeCompositionMode(value: UnityEngine.IMECompositionMode);
            public get compositionCursorPos(): UnityEngine.Vector2;
            public set compositionCursorPos(value: UnityEngine.Vector2);
            public get mousePresent(): boolean;
            public get mousePosition(): UnityEngine.Vector2;
            public get mouseScrollDelta(): UnityEngine.Vector2;
            public get touchSupported(): boolean;
            public get touchCount(): number;
            public GetMouseButtonDown ($button: number) : boolean
            public GetMouseButtonUp ($button: number) : boolean
            public GetMouseButton ($button: number) : boolean
            public GetTouch ($index: number) : UnityEngine.Touch
            public GetAxisRaw ($axisName: string) : number
            public GetButtonDown ($buttonName: string) : boolean
            public constructor ()
        }
    }
    namespace UnityEngine.UIElements.Experimental {
        interface ITransitionAnimations
        {
        }
    }
    namespace Unity.Properties {
        /** 
        A PropertyPath is used to store a reference to a single property within a tree.
        */
        class PropertyPath extends System.ValueType implements System.IEquatable$1<Unity.Properties.PropertyPath>
        {
            protected [__keep_incompatibility]: never;
        }
        interface TypeConverter$2<TSource, TDestination>
        { 
        (value: $Ref<TSource>) : TDestination; 
        Invoke?: (value: $Ref<TSource>) => TDestination;
        }
        /** 
        Internal return code used during path visitation.
        */
        enum VisitReturnCode
        { Ok = 0, NullContainer = 1, InvalidContainerType = 2, MissingPropertyBag = 3, InvalidPath = 4, InvalidCast = 5, AccessViolation = 6 }
    }
    namespace UnityEngine.UIElements.Columns {
        enum StretchMode
        { Grow = 0, GrowAndFill = 1 }
    }
    namespace UnityEngine.UIElements.ScrollView {
        enum TouchScrollBehavior
        { Unrestricted = 0, Elastic = 1, Clamped = 2 }
        enum NestedInteractionKind
        { Default = 0, StopScrolling = 1, ForwardScrolling = 2 }
    }
    namespace UnityEngine.UIElements.DropdownMenuAction {
        enum Status
        { None = 0, Normal = 1, Disabled = 2, Checked = 4, Hidden = 8 }
    }
    namespace UnityEngine.UIElements.NavigationMoveEvent {
        enum Direction
        { None = 0, Left = 1, Up = 2, Right = 3, Down = 4, Next = 5, Previous = 6 }
    }
    namespace UnityEngine.UIElements.StylePropertyNameCollection {
        class Enumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<UnityEngine.UIElements.StylePropertyName>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.TextCore.Text {
        class TextSettings extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
        class TextAsset extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
        }
        class FontAsset extends UnityEngine.TextCore.Text.TextAsset
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEngine.UIElements.VisualElement {
        class Hierarchy extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum MeasureMode
        { Undefined = 0, Exactly = 1, AtMost = 2 }
    }
    namespace UnityEngine.UIElements.UxmlAttributeDescription {
        enum Use
        { None = 0, Optional = 1, Prohibited = 2, Required = 3 }
    }
    namespace UnityEngine.UIElements.VisualElementFocusRing {
        enum DefaultFocusOrder
        { ChildOrder = 0, PositionXY = 1, PositionYX = 2 }
    }
    namespace Unity.Mathematics {
        class bool2 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool2>
        {
            protected [__keep_incompatibility]: never;
            public x : boolean
            public y : boolean
            public get xxxx(): Unity.Mathematics.bool4;
            public get xxxy(): Unity.Mathematics.bool4;
            public get xxyx(): Unity.Mathematics.bool4;
            public get xxyy(): Unity.Mathematics.bool4;
            public get xyxx(): Unity.Mathematics.bool4;
            public get xyxy(): Unity.Mathematics.bool4;
            public get xyyx(): Unity.Mathematics.bool4;
            public get xyyy(): Unity.Mathematics.bool4;
            public get yxxx(): Unity.Mathematics.bool4;
            public get yxxy(): Unity.Mathematics.bool4;
            public get yxyx(): Unity.Mathematics.bool4;
            public get yxyy(): Unity.Mathematics.bool4;
            public get yyxx(): Unity.Mathematics.bool4;
            public get yyxy(): Unity.Mathematics.bool4;
            public get yyyx(): Unity.Mathematics.bool4;
            public get yyyy(): Unity.Mathematics.bool4;
            public get xxx(): Unity.Mathematics.bool3;
            public get xxy(): Unity.Mathematics.bool3;
            public get xyx(): Unity.Mathematics.bool3;
            public get xyy(): Unity.Mathematics.bool3;
            public get yxx(): Unity.Mathematics.bool3;
            public get yxy(): Unity.Mathematics.bool3;
            public get yyx(): Unity.Mathematics.bool3;
            public get yyy(): Unity.Mathematics.bool3;
            public get xx(): Unity.Mathematics.bool2;
            public get xy(): Unity.Mathematics.bool2;
            public set xy(value: Unity.Mathematics.bool2);
            public get yx(): Unity.Mathematics.bool2;
            public set yx(value: Unity.Mathematics.bool2);
            public get yy(): Unity.Mathematics.bool2;
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.bool2, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.bool2, $rhs: boolean) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.bool2, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.bool2, $rhs: boolean) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_LogicalNot ($val: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2, $rhs: boolean) : Unity.Mathematics.bool2
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2, $rhs: boolean) : Unity.Mathematics.bool2
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2, $rhs: boolean) : Unity.Mathematics.bool2
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            public Equals ($rhs: Unity.Mathematics.bool2) : boolean
            public Equals ($o: any) : boolean
            public constructor ($x: boolean, $y: boolean)
            public constructor ($xy: Unity.Mathematics.bool2)
            public constructor ($v: boolean)
        }
        class bool4 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool4>
        {
            protected [__keep_incompatibility]: never;
            public x : boolean
            public y : boolean
            public z : boolean
            public w : boolean
            public get xxxx(): Unity.Mathematics.bool4;
            public get xxxy(): Unity.Mathematics.bool4;
            public get xxxz(): Unity.Mathematics.bool4;
            public get xxxw(): Unity.Mathematics.bool4;
            public get xxyx(): Unity.Mathematics.bool4;
            public get xxyy(): Unity.Mathematics.bool4;
            public get xxyz(): Unity.Mathematics.bool4;
            public get xxyw(): Unity.Mathematics.bool4;
            public get xxzx(): Unity.Mathematics.bool4;
            public get xxzy(): Unity.Mathematics.bool4;
            public get xxzz(): Unity.Mathematics.bool4;
            public get xxzw(): Unity.Mathematics.bool4;
            public get xxwx(): Unity.Mathematics.bool4;
            public get xxwy(): Unity.Mathematics.bool4;
            public get xxwz(): Unity.Mathematics.bool4;
            public get xxww(): Unity.Mathematics.bool4;
            public get xyxx(): Unity.Mathematics.bool4;
            public get xyxy(): Unity.Mathematics.bool4;
            public get xyxz(): Unity.Mathematics.bool4;
            public get xyxw(): Unity.Mathematics.bool4;
            public get xyyx(): Unity.Mathematics.bool4;
            public get xyyy(): Unity.Mathematics.bool4;
            public get xyyz(): Unity.Mathematics.bool4;
            public get xyyw(): Unity.Mathematics.bool4;
            public get xyzx(): Unity.Mathematics.bool4;
            public get xyzy(): Unity.Mathematics.bool4;
            public get xyzz(): Unity.Mathematics.bool4;
            public get xyzw(): Unity.Mathematics.bool4;
            public set xyzw(value: Unity.Mathematics.bool4);
            public get xywx(): Unity.Mathematics.bool4;
            public get xywy(): Unity.Mathematics.bool4;
            public get xywz(): Unity.Mathematics.bool4;
            public set xywz(value: Unity.Mathematics.bool4);
            public get xyww(): Unity.Mathematics.bool4;
            public get xzxx(): Unity.Mathematics.bool4;
            public get xzxy(): Unity.Mathematics.bool4;
            public get xzxz(): Unity.Mathematics.bool4;
            public get xzxw(): Unity.Mathematics.bool4;
            public get xzyx(): Unity.Mathematics.bool4;
            public get xzyy(): Unity.Mathematics.bool4;
            public get xzyz(): Unity.Mathematics.bool4;
            public get xzyw(): Unity.Mathematics.bool4;
            public set xzyw(value: Unity.Mathematics.bool4);
            public get xzzx(): Unity.Mathematics.bool4;
            public get xzzy(): Unity.Mathematics.bool4;
            public get xzzz(): Unity.Mathematics.bool4;
            public get xzzw(): Unity.Mathematics.bool4;
            public get xzwx(): Unity.Mathematics.bool4;
            public get xzwy(): Unity.Mathematics.bool4;
            public set xzwy(value: Unity.Mathematics.bool4);
            public get xzwz(): Unity.Mathematics.bool4;
            public get xzww(): Unity.Mathematics.bool4;
            public get xwxx(): Unity.Mathematics.bool4;
            public get xwxy(): Unity.Mathematics.bool4;
            public get xwxz(): Unity.Mathematics.bool4;
            public get xwxw(): Unity.Mathematics.bool4;
            public get xwyx(): Unity.Mathematics.bool4;
            public get xwyy(): Unity.Mathematics.bool4;
            public get xwyz(): Unity.Mathematics.bool4;
            public set xwyz(value: Unity.Mathematics.bool4);
            public get xwyw(): Unity.Mathematics.bool4;
            public get xwzx(): Unity.Mathematics.bool4;
            public get xwzy(): Unity.Mathematics.bool4;
            public set xwzy(value: Unity.Mathematics.bool4);
            public get xwzz(): Unity.Mathematics.bool4;
            public get xwzw(): Unity.Mathematics.bool4;
            public get xwwx(): Unity.Mathematics.bool4;
            public get xwwy(): Unity.Mathematics.bool4;
            public get xwwz(): Unity.Mathematics.bool4;
            public get xwww(): Unity.Mathematics.bool4;
            public get yxxx(): Unity.Mathematics.bool4;
            public get yxxy(): Unity.Mathematics.bool4;
            public get yxxz(): Unity.Mathematics.bool4;
            public get yxxw(): Unity.Mathematics.bool4;
            public get yxyx(): Unity.Mathematics.bool4;
            public get yxyy(): Unity.Mathematics.bool4;
            public get yxyz(): Unity.Mathematics.bool4;
            public get yxyw(): Unity.Mathematics.bool4;
            public get yxzx(): Unity.Mathematics.bool4;
            public get yxzy(): Unity.Mathematics.bool4;
            public get yxzz(): Unity.Mathematics.bool4;
            public get yxzw(): Unity.Mathematics.bool4;
            public set yxzw(value: Unity.Mathematics.bool4);
            public get yxwx(): Unity.Mathematics.bool4;
            public get yxwy(): Unity.Mathematics.bool4;
            public get yxwz(): Unity.Mathematics.bool4;
            public set yxwz(value: Unity.Mathematics.bool4);
            public get yxww(): Unity.Mathematics.bool4;
            public get yyxx(): Unity.Mathematics.bool4;
            public get yyxy(): Unity.Mathematics.bool4;
            public get yyxz(): Unity.Mathematics.bool4;
            public get yyxw(): Unity.Mathematics.bool4;
            public get yyyx(): Unity.Mathematics.bool4;
            public get yyyy(): Unity.Mathematics.bool4;
            public get yyyz(): Unity.Mathematics.bool4;
            public get yyyw(): Unity.Mathematics.bool4;
            public get yyzx(): Unity.Mathematics.bool4;
            public get yyzy(): Unity.Mathematics.bool4;
            public get yyzz(): Unity.Mathematics.bool4;
            public get yyzw(): Unity.Mathematics.bool4;
            public get yywx(): Unity.Mathematics.bool4;
            public get yywy(): Unity.Mathematics.bool4;
            public get yywz(): Unity.Mathematics.bool4;
            public get yyww(): Unity.Mathematics.bool4;
            public get yzxx(): Unity.Mathematics.bool4;
            public get yzxy(): Unity.Mathematics.bool4;
            public get yzxz(): Unity.Mathematics.bool4;
            public get yzxw(): Unity.Mathematics.bool4;
            public set yzxw(value: Unity.Mathematics.bool4);
            public get yzyx(): Unity.Mathematics.bool4;
            public get yzyy(): Unity.Mathematics.bool4;
            public get yzyz(): Unity.Mathematics.bool4;
            public get yzyw(): Unity.Mathematics.bool4;
            public get yzzx(): Unity.Mathematics.bool4;
            public get yzzy(): Unity.Mathematics.bool4;
            public get yzzz(): Unity.Mathematics.bool4;
            public get yzzw(): Unity.Mathematics.bool4;
            public get yzwx(): Unity.Mathematics.bool4;
            public set yzwx(value: Unity.Mathematics.bool4);
            public get yzwy(): Unity.Mathematics.bool4;
            public get yzwz(): Unity.Mathematics.bool4;
            public get yzww(): Unity.Mathematics.bool4;
            public get ywxx(): Unity.Mathematics.bool4;
            public get ywxy(): Unity.Mathematics.bool4;
            public get ywxz(): Unity.Mathematics.bool4;
            public set ywxz(value: Unity.Mathematics.bool4);
            public get ywxw(): Unity.Mathematics.bool4;
            public get ywyx(): Unity.Mathematics.bool4;
            public get ywyy(): Unity.Mathematics.bool4;
            public get ywyz(): Unity.Mathematics.bool4;
            public get ywyw(): Unity.Mathematics.bool4;
            public get ywzx(): Unity.Mathematics.bool4;
            public set ywzx(value: Unity.Mathematics.bool4);
            public get ywzy(): Unity.Mathematics.bool4;
            public get ywzz(): Unity.Mathematics.bool4;
            public get ywzw(): Unity.Mathematics.bool4;
            public get ywwx(): Unity.Mathematics.bool4;
            public get ywwy(): Unity.Mathematics.bool4;
            public get ywwz(): Unity.Mathematics.bool4;
            public get ywww(): Unity.Mathematics.bool4;
            public get zxxx(): Unity.Mathematics.bool4;
            public get zxxy(): Unity.Mathematics.bool4;
            public get zxxz(): Unity.Mathematics.bool4;
            public get zxxw(): Unity.Mathematics.bool4;
            public get zxyx(): Unity.Mathematics.bool4;
            public get zxyy(): Unity.Mathematics.bool4;
            public get zxyz(): Unity.Mathematics.bool4;
            public get zxyw(): Unity.Mathematics.bool4;
            public set zxyw(value: Unity.Mathematics.bool4);
            public get zxzx(): Unity.Mathematics.bool4;
            public get zxzy(): Unity.Mathematics.bool4;
            public get zxzz(): Unity.Mathematics.bool4;
            public get zxzw(): Unity.Mathematics.bool4;
            public get zxwx(): Unity.Mathematics.bool4;
            public get zxwy(): Unity.Mathematics.bool4;
            public set zxwy(value: Unity.Mathematics.bool4);
            public get zxwz(): Unity.Mathematics.bool4;
            public get zxww(): Unity.Mathematics.bool4;
            public get zyxx(): Unity.Mathematics.bool4;
            public get zyxy(): Unity.Mathematics.bool4;
            public get zyxz(): Unity.Mathematics.bool4;
            public get zyxw(): Unity.Mathematics.bool4;
            public set zyxw(value: Unity.Mathematics.bool4);
            public get zyyx(): Unity.Mathematics.bool4;
            public get zyyy(): Unity.Mathematics.bool4;
            public get zyyz(): Unity.Mathematics.bool4;
            public get zyyw(): Unity.Mathematics.bool4;
            public get zyzx(): Unity.Mathematics.bool4;
            public get zyzy(): Unity.Mathematics.bool4;
            public get zyzz(): Unity.Mathematics.bool4;
            public get zyzw(): Unity.Mathematics.bool4;
            public get zywx(): Unity.Mathematics.bool4;
            public set zywx(value: Unity.Mathematics.bool4);
            public get zywy(): Unity.Mathematics.bool4;
            public get zywz(): Unity.Mathematics.bool4;
            public get zyww(): Unity.Mathematics.bool4;
            public get zzxx(): Unity.Mathematics.bool4;
            public get zzxy(): Unity.Mathematics.bool4;
            public get zzxz(): Unity.Mathematics.bool4;
            public get zzxw(): Unity.Mathematics.bool4;
            public get zzyx(): Unity.Mathematics.bool4;
            public get zzyy(): Unity.Mathematics.bool4;
            public get zzyz(): Unity.Mathematics.bool4;
            public get zzyw(): Unity.Mathematics.bool4;
            public get zzzx(): Unity.Mathematics.bool4;
            public get zzzy(): Unity.Mathematics.bool4;
            public get zzzz(): Unity.Mathematics.bool4;
            public get zzzw(): Unity.Mathematics.bool4;
            public get zzwx(): Unity.Mathematics.bool4;
            public get zzwy(): Unity.Mathematics.bool4;
            public get zzwz(): Unity.Mathematics.bool4;
            public get zzww(): Unity.Mathematics.bool4;
            public get zwxx(): Unity.Mathematics.bool4;
            public get zwxy(): Unity.Mathematics.bool4;
            public set zwxy(value: Unity.Mathematics.bool4);
            public get zwxz(): Unity.Mathematics.bool4;
            public get zwxw(): Unity.Mathematics.bool4;
            public get zwyx(): Unity.Mathematics.bool4;
            public set zwyx(value: Unity.Mathematics.bool4);
            public get zwyy(): Unity.Mathematics.bool4;
            public get zwyz(): Unity.Mathematics.bool4;
            public get zwyw(): Unity.Mathematics.bool4;
            public get zwzx(): Unity.Mathematics.bool4;
            public get zwzy(): Unity.Mathematics.bool4;
            public get zwzz(): Unity.Mathematics.bool4;
            public get zwzw(): Unity.Mathematics.bool4;
            public get zwwx(): Unity.Mathematics.bool4;
            public get zwwy(): Unity.Mathematics.bool4;
            public get zwwz(): Unity.Mathematics.bool4;
            public get zwww(): Unity.Mathematics.bool4;
            public get wxxx(): Unity.Mathematics.bool4;
            public get wxxy(): Unity.Mathematics.bool4;
            public get wxxz(): Unity.Mathematics.bool4;
            public get wxxw(): Unity.Mathematics.bool4;
            public get wxyx(): Unity.Mathematics.bool4;
            public get wxyy(): Unity.Mathematics.bool4;
            public get wxyz(): Unity.Mathematics.bool4;
            public set wxyz(value: Unity.Mathematics.bool4);
            public get wxyw(): Unity.Mathematics.bool4;
            public get wxzx(): Unity.Mathematics.bool4;
            public get wxzy(): Unity.Mathematics.bool4;
            public set wxzy(value: Unity.Mathematics.bool4);
            public get wxzz(): Unity.Mathematics.bool4;
            public get wxzw(): Unity.Mathematics.bool4;
            public get wxwx(): Unity.Mathematics.bool4;
            public get wxwy(): Unity.Mathematics.bool4;
            public get wxwz(): Unity.Mathematics.bool4;
            public get wxww(): Unity.Mathematics.bool4;
            public get wyxx(): Unity.Mathematics.bool4;
            public get wyxy(): Unity.Mathematics.bool4;
            public get wyxz(): Unity.Mathematics.bool4;
            public set wyxz(value: Unity.Mathematics.bool4);
            public get wyxw(): Unity.Mathematics.bool4;
            public get wyyx(): Unity.Mathematics.bool4;
            public get wyyy(): Unity.Mathematics.bool4;
            public get wyyz(): Unity.Mathematics.bool4;
            public get wyyw(): Unity.Mathematics.bool4;
            public get wyzx(): Unity.Mathematics.bool4;
            public set wyzx(value: Unity.Mathematics.bool4);
            public get wyzy(): Unity.Mathematics.bool4;
            public get wyzz(): Unity.Mathematics.bool4;
            public get wyzw(): Unity.Mathematics.bool4;
            public get wywx(): Unity.Mathematics.bool4;
            public get wywy(): Unity.Mathematics.bool4;
            public get wywz(): Unity.Mathematics.bool4;
            public get wyww(): Unity.Mathematics.bool4;
            public get wzxx(): Unity.Mathematics.bool4;
            public get wzxy(): Unity.Mathematics.bool4;
            public set wzxy(value: Unity.Mathematics.bool4);
            public get wzxz(): Unity.Mathematics.bool4;
            public get wzxw(): Unity.Mathematics.bool4;
            public get wzyx(): Unity.Mathematics.bool4;
            public set wzyx(value: Unity.Mathematics.bool4);
            public get wzyy(): Unity.Mathematics.bool4;
            public get wzyz(): Unity.Mathematics.bool4;
            public get wzyw(): Unity.Mathematics.bool4;
            public get wzzx(): Unity.Mathematics.bool4;
            public get wzzy(): Unity.Mathematics.bool4;
            public get wzzz(): Unity.Mathematics.bool4;
            public get wzzw(): Unity.Mathematics.bool4;
            public get wzwx(): Unity.Mathematics.bool4;
            public get wzwy(): Unity.Mathematics.bool4;
            public get wzwz(): Unity.Mathematics.bool4;
            public get wzww(): Unity.Mathematics.bool4;
            public get wwxx(): Unity.Mathematics.bool4;
            public get wwxy(): Unity.Mathematics.bool4;
            public get wwxz(): Unity.Mathematics.bool4;
            public get wwxw(): Unity.Mathematics.bool4;
            public get wwyx(): Unity.Mathematics.bool4;
            public get wwyy(): Unity.Mathematics.bool4;
            public get wwyz(): Unity.Mathematics.bool4;
            public get wwyw(): Unity.Mathematics.bool4;
            public get wwzx(): Unity.Mathematics.bool4;
            public get wwzy(): Unity.Mathematics.bool4;
            public get wwzz(): Unity.Mathematics.bool4;
            public get wwzw(): Unity.Mathematics.bool4;
            public get wwwx(): Unity.Mathematics.bool4;
            public get wwwy(): Unity.Mathematics.bool4;
            public get wwwz(): Unity.Mathematics.bool4;
            public get wwww(): Unity.Mathematics.bool4;
            public get xxx(): Unity.Mathematics.bool3;
            public get xxy(): Unity.Mathematics.bool3;
            public get xxz(): Unity.Mathematics.bool3;
            public get xxw(): Unity.Mathematics.bool3;
            public get xyx(): Unity.Mathematics.bool3;
            public get xyy(): Unity.Mathematics.bool3;
            public get xyz(): Unity.Mathematics.bool3;
            public set xyz(value: Unity.Mathematics.bool3);
            public get xyw(): Unity.Mathematics.bool3;
            public set xyw(value: Unity.Mathematics.bool3);
            public get xzx(): Unity.Mathematics.bool3;
            public get xzy(): Unity.Mathematics.bool3;
            public set xzy(value: Unity.Mathematics.bool3);
            public get xzz(): Unity.Mathematics.bool3;
            public get xzw(): Unity.Mathematics.bool3;
            public set xzw(value: Unity.Mathematics.bool3);
            public get xwx(): Unity.Mathematics.bool3;
            public get xwy(): Unity.Mathematics.bool3;
            public set xwy(value: Unity.Mathematics.bool3);
            public get xwz(): Unity.Mathematics.bool3;
            public set xwz(value: Unity.Mathematics.bool3);
            public get xww(): Unity.Mathematics.bool3;
            public get yxx(): Unity.Mathematics.bool3;
            public get yxy(): Unity.Mathematics.bool3;
            public get yxz(): Unity.Mathematics.bool3;
            public set yxz(value: Unity.Mathematics.bool3);
            public get yxw(): Unity.Mathematics.bool3;
            public set yxw(value: Unity.Mathematics.bool3);
            public get yyx(): Unity.Mathematics.bool3;
            public get yyy(): Unity.Mathematics.bool3;
            public get yyz(): Unity.Mathematics.bool3;
            public get yyw(): Unity.Mathematics.bool3;
            public get yzx(): Unity.Mathematics.bool3;
            public set yzx(value: Unity.Mathematics.bool3);
            public get yzy(): Unity.Mathematics.bool3;
            public get yzz(): Unity.Mathematics.bool3;
            public get yzw(): Unity.Mathematics.bool3;
            public set yzw(value: Unity.Mathematics.bool3);
            public get ywx(): Unity.Mathematics.bool3;
            public set ywx(value: Unity.Mathematics.bool3);
            public get ywy(): Unity.Mathematics.bool3;
            public get ywz(): Unity.Mathematics.bool3;
            public set ywz(value: Unity.Mathematics.bool3);
            public get yww(): Unity.Mathematics.bool3;
            public get zxx(): Unity.Mathematics.bool3;
            public get zxy(): Unity.Mathematics.bool3;
            public set zxy(value: Unity.Mathematics.bool3);
            public get zxz(): Unity.Mathematics.bool3;
            public get zxw(): Unity.Mathematics.bool3;
            public set zxw(value: Unity.Mathematics.bool3);
            public get zyx(): Unity.Mathematics.bool3;
            public set zyx(value: Unity.Mathematics.bool3);
            public get zyy(): Unity.Mathematics.bool3;
            public get zyz(): Unity.Mathematics.bool3;
            public get zyw(): Unity.Mathematics.bool3;
            public set zyw(value: Unity.Mathematics.bool3);
            public get zzx(): Unity.Mathematics.bool3;
            public get zzy(): Unity.Mathematics.bool3;
            public get zzz(): Unity.Mathematics.bool3;
            public get zzw(): Unity.Mathematics.bool3;
            public get zwx(): Unity.Mathematics.bool3;
            public set zwx(value: Unity.Mathematics.bool3);
            public get zwy(): Unity.Mathematics.bool3;
            public set zwy(value: Unity.Mathematics.bool3);
            public get zwz(): Unity.Mathematics.bool3;
            public get zww(): Unity.Mathematics.bool3;
            public get wxx(): Unity.Mathematics.bool3;
            public get wxy(): Unity.Mathematics.bool3;
            public set wxy(value: Unity.Mathematics.bool3);
            public get wxz(): Unity.Mathematics.bool3;
            public set wxz(value: Unity.Mathematics.bool3);
            public get wxw(): Unity.Mathematics.bool3;
            public get wyx(): Unity.Mathematics.bool3;
            public set wyx(value: Unity.Mathematics.bool3);
            public get wyy(): Unity.Mathematics.bool3;
            public get wyz(): Unity.Mathematics.bool3;
            public set wyz(value: Unity.Mathematics.bool3);
            public get wyw(): Unity.Mathematics.bool3;
            public get wzx(): Unity.Mathematics.bool3;
            public set wzx(value: Unity.Mathematics.bool3);
            public get wzy(): Unity.Mathematics.bool3;
            public set wzy(value: Unity.Mathematics.bool3);
            public get wzz(): Unity.Mathematics.bool3;
            public get wzw(): Unity.Mathematics.bool3;
            public get wwx(): Unity.Mathematics.bool3;
            public get wwy(): Unity.Mathematics.bool3;
            public get wwz(): Unity.Mathematics.bool3;
            public get www(): Unity.Mathematics.bool3;
            public get xx(): Unity.Mathematics.bool2;
            public get xy(): Unity.Mathematics.bool2;
            public set xy(value: Unity.Mathematics.bool2);
            public get xz(): Unity.Mathematics.bool2;
            public set xz(value: Unity.Mathematics.bool2);
            public get xw(): Unity.Mathematics.bool2;
            public set xw(value: Unity.Mathematics.bool2);
            public get yx(): Unity.Mathematics.bool2;
            public set yx(value: Unity.Mathematics.bool2);
            public get yy(): Unity.Mathematics.bool2;
            public get yz(): Unity.Mathematics.bool2;
            public set yz(value: Unity.Mathematics.bool2);
            public get yw(): Unity.Mathematics.bool2;
            public set yw(value: Unity.Mathematics.bool2);
            public get zx(): Unity.Mathematics.bool2;
            public set zx(value: Unity.Mathematics.bool2);
            public get zy(): Unity.Mathematics.bool2;
            public set zy(value: Unity.Mathematics.bool2);
            public get zz(): Unity.Mathematics.bool2;
            public get zw(): Unity.Mathematics.bool2;
            public set zw(value: Unity.Mathematics.bool2);
            public get wx(): Unity.Mathematics.bool2;
            public set wx(value: Unity.Mathematics.bool2);
            public get wy(): Unity.Mathematics.bool2;
            public set wy(value: Unity.Mathematics.bool2);
            public get wz(): Unity.Mathematics.bool2;
            public set wz(value: Unity.Mathematics.bool2);
            public get ww(): Unity.Mathematics.bool2;
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.bool4, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.bool4, $rhs: boolean) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.bool4, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.bool4, $rhs: boolean) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_LogicalNot ($val: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4, $rhs: boolean) : Unity.Mathematics.bool4
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4, $rhs: boolean) : Unity.Mathematics.bool4
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4, $rhs: boolean) : Unity.Mathematics.bool4
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            public Equals ($rhs: Unity.Mathematics.bool4) : boolean
            public Equals ($o: any) : boolean
            public constructor ($x: boolean, $y: boolean, $z: boolean, $w: boolean)
            public constructor ($x: boolean, $y: boolean, $zw: Unity.Mathematics.bool2)
            public constructor ($x: boolean, $yz: Unity.Mathematics.bool2, $w: boolean)
            public constructor ($x: boolean, $yzw: Unity.Mathematics.bool3)
            public constructor ($xy: Unity.Mathematics.bool2, $z: boolean, $w: boolean)
            public constructor ($xy: Unity.Mathematics.bool2, $zw: Unity.Mathematics.bool2)
            public constructor ($xyz: Unity.Mathematics.bool3, $w: boolean)
            public constructor ($xyzw: Unity.Mathematics.bool4)
            public constructor ($v: boolean)
        }
        class bool3 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool3>
        {
            protected [__keep_incompatibility]: never;
            public x : boolean
            public y : boolean
            public z : boolean
            public get xxxx(): Unity.Mathematics.bool4;
            public get xxxy(): Unity.Mathematics.bool4;
            public get xxxz(): Unity.Mathematics.bool4;
            public get xxyx(): Unity.Mathematics.bool4;
            public get xxyy(): Unity.Mathematics.bool4;
            public get xxyz(): Unity.Mathematics.bool4;
            public get xxzx(): Unity.Mathematics.bool4;
            public get xxzy(): Unity.Mathematics.bool4;
            public get xxzz(): Unity.Mathematics.bool4;
            public get xyxx(): Unity.Mathematics.bool4;
            public get xyxy(): Unity.Mathematics.bool4;
            public get xyxz(): Unity.Mathematics.bool4;
            public get xyyx(): Unity.Mathematics.bool4;
            public get xyyy(): Unity.Mathematics.bool4;
            public get xyyz(): Unity.Mathematics.bool4;
            public get xyzx(): Unity.Mathematics.bool4;
            public get xyzy(): Unity.Mathematics.bool4;
            public get xyzz(): Unity.Mathematics.bool4;
            public get xzxx(): Unity.Mathematics.bool4;
            public get xzxy(): Unity.Mathematics.bool4;
            public get xzxz(): Unity.Mathematics.bool4;
            public get xzyx(): Unity.Mathematics.bool4;
            public get xzyy(): Unity.Mathematics.bool4;
            public get xzyz(): Unity.Mathematics.bool4;
            public get xzzx(): Unity.Mathematics.bool4;
            public get xzzy(): Unity.Mathematics.bool4;
            public get xzzz(): Unity.Mathematics.bool4;
            public get yxxx(): Unity.Mathematics.bool4;
            public get yxxy(): Unity.Mathematics.bool4;
            public get yxxz(): Unity.Mathematics.bool4;
            public get yxyx(): Unity.Mathematics.bool4;
            public get yxyy(): Unity.Mathematics.bool4;
            public get yxyz(): Unity.Mathematics.bool4;
            public get yxzx(): Unity.Mathematics.bool4;
            public get yxzy(): Unity.Mathematics.bool4;
            public get yxzz(): Unity.Mathematics.bool4;
            public get yyxx(): Unity.Mathematics.bool4;
            public get yyxy(): Unity.Mathematics.bool4;
            public get yyxz(): Unity.Mathematics.bool4;
            public get yyyx(): Unity.Mathematics.bool4;
            public get yyyy(): Unity.Mathematics.bool4;
            public get yyyz(): Unity.Mathematics.bool4;
            public get yyzx(): Unity.Mathematics.bool4;
            public get yyzy(): Unity.Mathematics.bool4;
            public get yyzz(): Unity.Mathematics.bool4;
            public get yzxx(): Unity.Mathematics.bool4;
            public get yzxy(): Unity.Mathematics.bool4;
            public get yzxz(): Unity.Mathematics.bool4;
            public get yzyx(): Unity.Mathematics.bool4;
            public get yzyy(): Unity.Mathematics.bool4;
            public get yzyz(): Unity.Mathematics.bool4;
            public get yzzx(): Unity.Mathematics.bool4;
            public get yzzy(): Unity.Mathematics.bool4;
            public get yzzz(): Unity.Mathematics.bool4;
            public get zxxx(): Unity.Mathematics.bool4;
            public get zxxy(): Unity.Mathematics.bool4;
            public get zxxz(): Unity.Mathematics.bool4;
            public get zxyx(): Unity.Mathematics.bool4;
            public get zxyy(): Unity.Mathematics.bool4;
            public get zxyz(): Unity.Mathematics.bool4;
            public get zxzx(): Unity.Mathematics.bool4;
            public get zxzy(): Unity.Mathematics.bool4;
            public get zxzz(): Unity.Mathematics.bool4;
            public get zyxx(): Unity.Mathematics.bool4;
            public get zyxy(): Unity.Mathematics.bool4;
            public get zyxz(): Unity.Mathematics.bool4;
            public get zyyx(): Unity.Mathematics.bool4;
            public get zyyy(): Unity.Mathematics.bool4;
            public get zyyz(): Unity.Mathematics.bool4;
            public get zyzx(): Unity.Mathematics.bool4;
            public get zyzy(): Unity.Mathematics.bool4;
            public get zyzz(): Unity.Mathematics.bool4;
            public get zzxx(): Unity.Mathematics.bool4;
            public get zzxy(): Unity.Mathematics.bool4;
            public get zzxz(): Unity.Mathematics.bool4;
            public get zzyx(): Unity.Mathematics.bool4;
            public get zzyy(): Unity.Mathematics.bool4;
            public get zzyz(): Unity.Mathematics.bool4;
            public get zzzx(): Unity.Mathematics.bool4;
            public get zzzy(): Unity.Mathematics.bool4;
            public get zzzz(): Unity.Mathematics.bool4;
            public get xxx(): Unity.Mathematics.bool3;
            public get xxy(): Unity.Mathematics.bool3;
            public get xxz(): Unity.Mathematics.bool3;
            public get xyx(): Unity.Mathematics.bool3;
            public get xyy(): Unity.Mathematics.bool3;
            public get xyz(): Unity.Mathematics.bool3;
            public set xyz(value: Unity.Mathematics.bool3);
            public get xzx(): Unity.Mathematics.bool3;
            public get xzy(): Unity.Mathematics.bool3;
            public set xzy(value: Unity.Mathematics.bool3);
            public get xzz(): Unity.Mathematics.bool3;
            public get yxx(): Unity.Mathematics.bool3;
            public get yxy(): Unity.Mathematics.bool3;
            public get yxz(): Unity.Mathematics.bool3;
            public set yxz(value: Unity.Mathematics.bool3);
            public get yyx(): Unity.Mathematics.bool3;
            public get yyy(): Unity.Mathematics.bool3;
            public get yyz(): Unity.Mathematics.bool3;
            public get yzx(): Unity.Mathematics.bool3;
            public set yzx(value: Unity.Mathematics.bool3);
            public get yzy(): Unity.Mathematics.bool3;
            public get yzz(): Unity.Mathematics.bool3;
            public get zxx(): Unity.Mathematics.bool3;
            public get zxy(): Unity.Mathematics.bool3;
            public set zxy(value: Unity.Mathematics.bool3);
            public get zxz(): Unity.Mathematics.bool3;
            public get zyx(): Unity.Mathematics.bool3;
            public set zyx(value: Unity.Mathematics.bool3);
            public get zyy(): Unity.Mathematics.bool3;
            public get zyz(): Unity.Mathematics.bool3;
            public get zzx(): Unity.Mathematics.bool3;
            public get zzy(): Unity.Mathematics.bool3;
            public get zzz(): Unity.Mathematics.bool3;
            public get xx(): Unity.Mathematics.bool2;
            public get xy(): Unity.Mathematics.bool2;
            public set xy(value: Unity.Mathematics.bool2);
            public get xz(): Unity.Mathematics.bool2;
            public set xz(value: Unity.Mathematics.bool2);
            public get yx(): Unity.Mathematics.bool2;
            public set yx(value: Unity.Mathematics.bool2);
            public get yy(): Unity.Mathematics.bool2;
            public get yz(): Unity.Mathematics.bool2;
            public set yz(value: Unity.Mathematics.bool2);
            public get zx(): Unity.Mathematics.bool2;
            public set zx(value: Unity.Mathematics.bool2);
            public get zy(): Unity.Mathematics.bool2;
            public set zy(value: Unity.Mathematics.bool2);
            public get zz(): Unity.Mathematics.bool2;
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.bool3, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.bool3, $rhs: boolean) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.bool3, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.bool3, $rhs: boolean) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_LogicalNot ($val: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3, $rhs: boolean) : Unity.Mathematics.bool3
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3, $rhs: boolean) : Unity.Mathematics.bool3
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3, $rhs: boolean) : Unity.Mathematics.bool3
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public get_Item ($index: number) : boolean
            public set_Item ($index: number, $value: boolean) : void
            public Equals ($rhs: Unity.Mathematics.bool3) : boolean
            public Equals ($o: any) : boolean
            public constructor ($x: boolean, $y: boolean, $z: boolean)
            public constructor ($x: boolean, $yz: Unity.Mathematics.bool2)
            public constructor ($xy: Unity.Mathematics.bool2, $z: boolean)
            public constructor ($xyz: Unity.Mathematics.bool3)
            public constructor ($v: boolean)
        }
        class math extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static E_DBL : number
            public static LOG2E_DBL : number
            public static LOG10E_DBL : number
            public static LN2_DBL : number
            public static LN10_DBL : number
            public static PI_DBL : number
            public static SQRT2_DBL : number
            public static EPSILON_DBL : number
            public static INFINITY_DBL : number
            public static NAN_DBL : number
            public static FLT_MIN_NORMAL : number
            public static DBL_MIN_NORMAL : number
            public static E : number
            public static LOG2E : number
            public static LOG10E : number
            public static LN2 : number
            public static LN10 : number
            public static PI : number
            public static SQRT2 : number
            public static EPSILON : number
            public static INFINITY : number
            public static NAN : number
            public static bool2 ($x: boolean, $y: boolean) : Unity.Mathematics.bool2
            public static bool2 ($xy: Unity.Mathematics.bool2) : Unity.Mathematics.bool2
            public static bool2 ($v: boolean) : Unity.Mathematics.bool2
            public static hash ($v: Unity.Mathematics.bool2) : number
            public static hashwide ($v: Unity.Mathematics.bool2) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.bool2, $right: Unity.Mathematics.bool2, $x: Unity.Mathematics.math.ShuffleComponent) : boolean
            public static shuffle ($left: Unity.Mathematics.bool2, $right: Unity.Mathematics.bool2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool2
            public static shuffle ($left: Unity.Mathematics.bool2, $right: Unity.Mathematics.bool2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool3
            public static shuffle ($left: Unity.Mathematics.bool2, $right: Unity.Mathematics.bool2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool4
            public static bool2x2 ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2) : Unity.Mathematics.bool2x2
            public static bool2x2 ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean) : Unity.Mathematics.bool2x2
            public static bool2x2 ($v: boolean) : Unity.Mathematics.bool2x2
            public static transpose ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static hash ($v: Unity.Mathematics.bool2x2) : number
            public static hashwide ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.uint2
            public static bool2x3 ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2, $c2: Unity.Mathematics.bool2) : Unity.Mathematics.bool2x3
            public static bool2x3 ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean) : Unity.Mathematics.bool2x3
            public static bool2x3 ($v: boolean) : Unity.Mathematics.bool2x3
            public static transpose ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool3x2
            public static hash ($v: Unity.Mathematics.bool2x3) : number
            public static hashwide ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.uint2
            public static bool2x4 ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2, $c2: Unity.Mathematics.bool2, $c3: Unity.Mathematics.bool2) : Unity.Mathematics.bool2x4
            public static bool2x4 ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean) : Unity.Mathematics.bool2x4
            public static bool2x4 ($v: boolean) : Unity.Mathematics.bool2x4
            public static transpose ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool4x2
            public static hash ($v: Unity.Mathematics.bool2x4) : number
            public static hashwide ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.uint2
            public static bool3 ($x: boolean, $y: boolean, $z: boolean) : Unity.Mathematics.bool3
            public static bool3 ($x: boolean, $yz: Unity.Mathematics.bool2) : Unity.Mathematics.bool3
            public static bool3 ($xy: Unity.Mathematics.bool2, $z: boolean) : Unity.Mathematics.bool3
            public static bool3 ($xyz: Unity.Mathematics.bool3) : Unity.Mathematics.bool3
            public static bool3 ($v: boolean) : Unity.Mathematics.bool3
            public static hash ($v: Unity.Mathematics.bool3) : number
            public static hashwide ($v: Unity.Mathematics.bool3) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.bool3, $right: Unity.Mathematics.bool3, $x: Unity.Mathematics.math.ShuffleComponent) : boolean
            public static shuffle ($left: Unity.Mathematics.bool3, $right: Unity.Mathematics.bool3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool2
            public static shuffle ($left: Unity.Mathematics.bool3, $right: Unity.Mathematics.bool3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool3
            public static shuffle ($left: Unity.Mathematics.bool3, $right: Unity.Mathematics.bool3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool4
            public static bool3x2 ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3) : Unity.Mathematics.bool3x2
            public static bool3x2 ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean, $m20: boolean, $m21: boolean) : Unity.Mathematics.bool3x2
            public static bool3x2 ($v: boolean) : Unity.Mathematics.bool3x2
            public static transpose ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool2x3
            public static hash ($v: Unity.Mathematics.bool3x2) : number
            public static hashwide ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.uint3
            public static bool3x3 ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3, $c2: Unity.Mathematics.bool3) : Unity.Mathematics.bool3x3
            public static bool3x3 ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m20: boolean, $m21: boolean, $m22: boolean) : Unity.Mathematics.bool3x3
            public static bool3x3 ($v: boolean) : Unity.Mathematics.bool3x3
            public static transpose ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static hash ($v: Unity.Mathematics.bool3x3) : number
            public static hashwide ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.uint3
            public static bool3x4 ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3, $c2: Unity.Mathematics.bool3, $c3: Unity.Mathematics.bool3) : Unity.Mathematics.bool3x4
            public static bool3x4 ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m23: boolean) : Unity.Mathematics.bool3x4
            public static bool3x4 ($v: boolean) : Unity.Mathematics.bool3x4
            public static transpose ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool4x3
            public static hash ($v: Unity.Mathematics.bool3x4) : number
            public static hashwide ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.uint3
            public static bool4 ($x: boolean, $y: boolean, $z: boolean, $w: boolean) : Unity.Mathematics.bool4
            public static bool4 ($x: boolean, $y: boolean, $zw: Unity.Mathematics.bool2) : Unity.Mathematics.bool4
            public static bool4 ($x: boolean, $yz: Unity.Mathematics.bool2, $w: boolean) : Unity.Mathematics.bool4
            public static bool4 ($x: boolean, $yzw: Unity.Mathematics.bool3) : Unity.Mathematics.bool4
            public static bool4 ($xy: Unity.Mathematics.bool2, $z: boolean, $w: boolean) : Unity.Mathematics.bool4
            public static bool4 ($xy: Unity.Mathematics.bool2, $zw: Unity.Mathematics.bool2) : Unity.Mathematics.bool4
            public static bool4 ($xyz: Unity.Mathematics.bool3, $w: boolean) : Unity.Mathematics.bool4
            public static bool4 ($xyzw: Unity.Mathematics.bool4) : Unity.Mathematics.bool4
            public static bool4 ($v: boolean) : Unity.Mathematics.bool4
            public static hash ($v: Unity.Mathematics.bool4) : number
            public static hashwide ($v: Unity.Mathematics.bool4) : Unity.Mathematics.uint4
            public static shuffle ($left: Unity.Mathematics.bool4, $right: Unity.Mathematics.bool4, $x: Unity.Mathematics.math.ShuffleComponent) : boolean
            public static shuffle ($left: Unity.Mathematics.bool4, $right: Unity.Mathematics.bool4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool2
            public static shuffle ($left: Unity.Mathematics.bool4, $right: Unity.Mathematics.bool4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool3
            public static shuffle ($left: Unity.Mathematics.bool4, $right: Unity.Mathematics.bool4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.bool4
            public static bool4x2 ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4) : Unity.Mathematics.bool4x2
            public static bool4x2 ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean, $m20: boolean, $m21: boolean, $m30: boolean, $m31: boolean) : Unity.Mathematics.bool4x2
            public static bool4x2 ($v: boolean) : Unity.Mathematics.bool4x2
            public static transpose ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool2x4
            public static hash ($v: Unity.Mathematics.bool4x2) : number
            public static hashwide ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.uint4
            public static bool4x3 ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4, $c2: Unity.Mathematics.bool4) : Unity.Mathematics.bool4x3
            public static bool4x3 ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m30: boolean, $m31: boolean, $m32: boolean) : Unity.Mathematics.bool4x3
            public static bool4x3 ($v: boolean) : Unity.Mathematics.bool4x3
            public static transpose ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool3x4
            public static hash ($v: Unity.Mathematics.bool4x3) : number
            public static hashwide ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.uint4
            public static bool4x4 ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4, $c2: Unity.Mathematics.bool4, $c3: Unity.Mathematics.bool4) : Unity.Mathematics.bool4x4
            public static bool4x4 ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m23: boolean, $m30: boolean, $m31: boolean, $m32: boolean, $m33: boolean) : Unity.Mathematics.bool4x4
            public static bool4x4 ($v: boolean) : Unity.Mathematics.bool4x4
            public static transpose ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static hash ($v: Unity.Mathematics.bool4x4) : number
            public static hashwide ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.uint4
            public static double2 ($x: number, $y: number) : Unity.Mathematics.double2
            public static double2 ($xy: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static double2 ($v: number) : Unity.Mathematics.double2
            public static double2 ($v: boolean) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.bool2) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.int2) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.uint2) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.half) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.half2) : Unity.Mathematics.double2
            public static double2 ($v: Unity.Mathematics.float2) : Unity.Mathematics.double2
            public static hash ($v: Unity.Mathematics.double2) : number
            public static hashwide ($v: Unity.Mathematics.double2) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.double2, $right: Unity.Mathematics.double2, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.double2, $right: Unity.Mathematics.double2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double2
            public static shuffle ($left: Unity.Mathematics.double2, $right: Unity.Mathematics.double2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double3
            public static shuffle ($left: Unity.Mathematics.double2, $right: Unity.Mathematics.double2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double4
            public static double2x2 ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2) : Unity.Mathematics.double2x2
            public static double2x2 ($m00: number, $m01: number, $m10: number, $m11: number) : Unity.Mathematics.double2x2
            public static double2x2 ($v: number) : Unity.Mathematics.double2x2
            public static double2x2 ($v: boolean) : Unity.Mathematics.double2x2
            public static double2x2 ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.double2x2
            public static double2x2 ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.double2x2
            public static double2x2 ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.double2x2
            public static double2x2 ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.double2x2
            public static transpose ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static inverse ($m: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static determinant ($m: Unity.Mathematics.double2x2) : number
            public static hash ($v: Unity.Mathematics.double2x2) : number
            public static hashwide ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.uint2
            public static double2x3 ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2, $c2: Unity.Mathematics.double2) : Unity.Mathematics.double2x3
            public static double2x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number) : Unity.Mathematics.double2x3
            public static double2x3 ($v: number) : Unity.Mathematics.double2x3
            public static double2x3 ($v: boolean) : Unity.Mathematics.double2x3
            public static double2x3 ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.double2x3
            public static double2x3 ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.double2x3
            public static double2x3 ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.double2x3
            public static double2x3 ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.double2x3
            public static transpose ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.double3x2
            public static hash ($v: Unity.Mathematics.double2x3) : number
            public static hashwide ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.uint2
            public static double2x4 ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2, $c2: Unity.Mathematics.double2, $c3: Unity.Mathematics.double2) : Unity.Mathematics.double2x4
            public static double2x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number) : Unity.Mathematics.double2x4
            public static double2x4 ($v: number) : Unity.Mathematics.double2x4
            public static double2x4 ($v: boolean) : Unity.Mathematics.double2x4
            public static double2x4 ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.double2x4
            public static double2x4 ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.double2x4
            public static double2x4 ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.double2x4
            public static double2x4 ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.double2x4
            public static transpose ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.double4x2
            public static hash ($v: Unity.Mathematics.double2x4) : number
            public static hashwide ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.uint2
            public static double3 ($x: number, $y: number, $z: number) : Unity.Mathematics.double3
            public static double3 ($x: number, $yz: Unity.Mathematics.double2) : Unity.Mathematics.double3
            public static double3 ($xy: Unity.Mathematics.double2, $z: number) : Unity.Mathematics.double3
            public static double3 ($xyz: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static double3 ($v: number) : Unity.Mathematics.double3
            public static double3 ($v: boolean) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.bool3) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.int3) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.uint3) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.half) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.half3) : Unity.Mathematics.double3
            public static double3 ($v: Unity.Mathematics.float3) : Unity.Mathematics.double3
            public static hash ($v: Unity.Mathematics.double3) : number
            public static hashwide ($v: Unity.Mathematics.double3) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.double3, $right: Unity.Mathematics.double3, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.double3, $right: Unity.Mathematics.double3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double2
            public static shuffle ($left: Unity.Mathematics.double3, $right: Unity.Mathematics.double3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double3
            public static shuffle ($left: Unity.Mathematics.double3, $right: Unity.Mathematics.double3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double4
            public static double3x2 ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3) : Unity.Mathematics.double3x2
            public static double3x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number) : Unity.Mathematics.double3x2
            public static double3x2 ($v: number) : Unity.Mathematics.double3x2
            public static double3x2 ($v: boolean) : Unity.Mathematics.double3x2
            public static double3x2 ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.double3x2
            public static double3x2 ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.double3x2
            public static double3x2 ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.double3x2
            public static double3x2 ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.double3x2
            public static transpose ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.double2x3
            public static hash ($v: Unity.Mathematics.double3x2) : number
            public static hashwide ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.uint3
            public static double3x3 ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3, $c2: Unity.Mathematics.double3) : Unity.Mathematics.double3x3
            public static double3x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number) : Unity.Mathematics.double3x3
            public static double3x3 ($v: number) : Unity.Mathematics.double3x3
            public static double3x3 ($v: boolean) : Unity.Mathematics.double3x3
            public static double3x3 ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.double3x3
            public static double3x3 ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.double3x3
            public static double3x3 ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.double3x3
            public static double3x3 ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.double3x3
            public static transpose ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static inverse ($m: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static determinant ($m: Unity.Mathematics.double3x3) : number
            public static hash ($v: Unity.Mathematics.double3x3) : number
            public static hashwide ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.uint3
            public static double3x4 ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3, $c2: Unity.Mathematics.double3, $c3: Unity.Mathematics.double3) : Unity.Mathematics.double3x4
            public static double3x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number) : Unity.Mathematics.double3x4
            public static double3x4 ($v: number) : Unity.Mathematics.double3x4
            public static double3x4 ($v: boolean) : Unity.Mathematics.double3x4
            public static double3x4 ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.double3x4
            public static double3x4 ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.double3x4
            public static double3x4 ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.double3x4
            public static double3x4 ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.double3x4
            public static transpose ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.double4x3
            public static fastinverse ($m: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static hash ($v: Unity.Mathematics.double3x4) : number
            public static hashwide ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.uint3
            public static double4 ($x: number, $y: number, $z: number, $w: number) : Unity.Mathematics.double4
            public static double4 ($x: number, $y: number, $zw: Unity.Mathematics.double2) : Unity.Mathematics.double4
            public static double4 ($x: number, $yz: Unity.Mathematics.double2, $w: number) : Unity.Mathematics.double4
            public static double4 ($x: number, $yzw: Unity.Mathematics.double3) : Unity.Mathematics.double4
            public static double4 ($xy: Unity.Mathematics.double2, $z: number, $w: number) : Unity.Mathematics.double4
            public static double4 ($xy: Unity.Mathematics.double2, $zw: Unity.Mathematics.double2) : Unity.Mathematics.double4
            public static double4 ($xyz: Unity.Mathematics.double3, $w: number) : Unity.Mathematics.double4
            public static double4 ($xyzw: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static double4 ($v: number) : Unity.Mathematics.double4
            public static double4 ($v: boolean) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.bool4) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.int4) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.uint4) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.half) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.half4) : Unity.Mathematics.double4
            public static double4 ($v: Unity.Mathematics.float4) : Unity.Mathematics.double4
            public static hash ($v: Unity.Mathematics.double4) : number
            public static hashwide ($v: Unity.Mathematics.double4) : Unity.Mathematics.uint4
            public static shuffle ($left: Unity.Mathematics.double4, $right: Unity.Mathematics.double4, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.double4, $right: Unity.Mathematics.double4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double2
            public static shuffle ($left: Unity.Mathematics.double4, $right: Unity.Mathematics.double4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double3
            public static shuffle ($left: Unity.Mathematics.double4, $right: Unity.Mathematics.double4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.double4
            public static double4x2 ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4) : Unity.Mathematics.double4x2
            public static double4x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number) : Unity.Mathematics.double4x2
            public static double4x2 ($v: number) : Unity.Mathematics.double4x2
            public static double4x2 ($v: boolean) : Unity.Mathematics.double4x2
            public static double4x2 ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.double4x2
            public static double4x2 ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.double4x2
            public static double4x2 ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.double4x2
            public static double4x2 ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.double4x2
            public static transpose ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.double2x4
            public static hash ($v: Unity.Mathematics.double4x2) : number
            public static hashwide ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.uint4
            public static double4x3 ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4, $c2: Unity.Mathematics.double4) : Unity.Mathematics.double4x3
            public static double4x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number) : Unity.Mathematics.double4x3
            public static double4x3 ($v: number) : Unity.Mathematics.double4x3
            public static double4x3 ($v: boolean) : Unity.Mathematics.double4x3
            public static double4x3 ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.double4x3
            public static double4x3 ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.double4x3
            public static double4x3 ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.double4x3
            public static double4x3 ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.double4x3
            public static transpose ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.double3x4
            public static hash ($v: Unity.Mathematics.double4x3) : number
            public static hashwide ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.uint4
            public static double4x4 ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4, $c2: Unity.Mathematics.double4, $c3: Unity.Mathematics.double4) : Unity.Mathematics.double4x4
            public static double4x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number) : Unity.Mathematics.double4x4
            public static double4x4 ($v: number) : Unity.Mathematics.double4x4
            public static double4x4 ($v: boolean) : Unity.Mathematics.double4x4
            public static double4x4 ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.double4x4
            public static double4x4 ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.double4x4
            public static double4x4 ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.double4x4
            public static double4x4 ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.double4x4
            public static rotate ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static transform ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static transpose ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static inverse ($m: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static fastinverse ($m: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static determinant ($m: Unity.Mathematics.double4x4) : number
            public static hash ($v: Unity.Mathematics.double4x4) : number
            public static hashwide ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.uint4
            public static float2 ($x: number, $y: number) : Unity.Mathematics.float2
            public static float2 ($xy: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static float2 ($v: number) : Unity.Mathematics.float2
            public static float2 ($v: boolean) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.bool2) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.int2) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.uint2) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.half) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.half2) : Unity.Mathematics.float2
            public static float2 ($v: Unity.Mathematics.double2) : Unity.Mathematics.float2
            public static hash ($v: Unity.Mathematics.float2) : number
            public static hashwide ($v: Unity.Mathematics.float2) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.float2, $right: Unity.Mathematics.float2, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.float2, $right: Unity.Mathematics.float2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float2
            public static shuffle ($left: Unity.Mathematics.float2, $right: Unity.Mathematics.float2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float3
            public static shuffle ($left: Unity.Mathematics.float2, $right: Unity.Mathematics.float2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float4
            public static float2x2 ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2) : Unity.Mathematics.float2x2
            public static float2x2 ($m00: number, $m01: number, $m10: number, $m11: number) : Unity.Mathematics.float2x2
            public static float2x2 ($v: number) : Unity.Mathematics.float2x2
            public static float2x2 ($v: boolean) : Unity.Mathematics.float2x2
            public static float2x2 ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.float2x2
            public static float2x2 ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.float2x2
            public static float2x2 ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.float2x2
            public static float2x2 ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.float2x2
            public static transpose ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static inverse ($m: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static determinant ($m: Unity.Mathematics.float2x2) : number
            public static hash ($v: Unity.Mathematics.float2x2) : number
            public static hashwide ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.uint2
            public static float2x3 ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2, $c2: Unity.Mathematics.float2) : Unity.Mathematics.float2x3
            public static float2x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number) : Unity.Mathematics.float2x3
            public static float2x3 ($v: number) : Unity.Mathematics.float2x3
            public static float2x3 ($v: boolean) : Unity.Mathematics.float2x3
            public static float2x3 ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.float2x3
            public static float2x3 ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.float2x3
            public static float2x3 ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.float2x3
            public static float2x3 ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.float2x3
            public static transpose ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.float3x2
            public static hash ($v: Unity.Mathematics.float2x3) : number
            public static hashwide ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.uint2
            public static float2x4 ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2, $c2: Unity.Mathematics.float2, $c3: Unity.Mathematics.float2) : Unity.Mathematics.float2x4
            public static float2x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number) : Unity.Mathematics.float2x4
            public static float2x4 ($v: number) : Unity.Mathematics.float2x4
            public static float2x4 ($v: boolean) : Unity.Mathematics.float2x4
            public static float2x4 ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.float2x4
            public static float2x4 ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.float2x4
            public static float2x4 ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.float2x4
            public static float2x4 ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.float2x4
            public static transpose ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.float4x2
            public static hash ($v: Unity.Mathematics.float2x4) : number
            public static hashwide ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.uint2
            public static float3 ($x: number, $y: number, $z: number) : Unity.Mathematics.float3
            public static float3 ($x: number, $yz: Unity.Mathematics.float2) : Unity.Mathematics.float3
            public static float3 ($xy: Unity.Mathematics.float2, $z: number) : Unity.Mathematics.float3
            public static float3 ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static float3 ($v: number) : Unity.Mathematics.float3
            public static float3 ($v: boolean) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.bool3) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.int3) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.uint3) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.half) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.half3) : Unity.Mathematics.float3
            public static float3 ($v: Unity.Mathematics.double3) : Unity.Mathematics.float3
            public static hash ($v: Unity.Mathematics.float3) : number
            public static hashwide ($v: Unity.Mathematics.float3) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.float3, $right: Unity.Mathematics.float3, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.float3, $right: Unity.Mathematics.float3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float2
            public static shuffle ($left: Unity.Mathematics.float3, $right: Unity.Mathematics.float3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float3
            public static shuffle ($left: Unity.Mathematics.float3, $right: Unity.Mathematics.float3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float4
            public static float3x2 ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3) : Unity.Mathematics.float3x2
            public static float3x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number) : Unity.Mathematics.float3x2
            public static float3x2 ($v: number) : Unity.Mathematics.float3x2
            public static float3x2 ($v: boolean) : Unity.Mathematics.float3x2
            public static float3x2 ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.float3x2
            public static float3x2 ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.float3x2
            public static float3x2 ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.float3x2
            public static float3x2 ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.float3x2
            public static transpose ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.float2x3
            public static hash ($v: Unity.Mathematics.float3x2) : number
            public static hashwide ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.uint3
            public static float3x3 ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3, $c2: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static float3x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number) : Unity.Mathematics.float3x3
            public static float3x3 ($v: number) : Unity.Mathematics.float3x3
            public static float3x3 ($v: boolean) : Unity.Mathematics.float3x3
            public static float3x3 ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.float3x3
            public static float3x3 ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.float3x3
            public static float3x3 ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.float3x3
            public static float3x3 ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.float3x3
            public static transpose ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static inverse ($m: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static determinant ($m: Unity.Mathematics.float3x3) : number
            public static hash ($v: Unity.Mathematics.float3x3) : number
            public static hashwide ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.uint3
            public static float3x4 ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3, $c2: Unity.Mathematics.float3, $c3: Unity.Mathematics.float3) : Unity.Mathematics.float3x4
            public static float3x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number) : Unity.Mathematics.float3x4
            public static float3x4 ($v: number) : Unity.Mathematics.float3x4
            public static float3x4 ($v: boolean) : Unity.Mathematics.float3x4
            public static float3x4 ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.float3x4
            public static float3x4 ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.float3x4
            public static float3x4 ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.float3x4
            public static float3x4 ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.float3x4
            public static transpose ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.float4x3
            public static fastinverse ($m: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static hash ($v: Unity.Mathematics.float3x4) : number
            public static hashwide ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.uint3
            public static float4 ($x: number, $y: number, $z: number, $w: number) : Unity.Mathematics.float4
            public static float4 ($x: number, $y: number, $zw: Unity.Mathematics.float2) : Unity.Mathematics.float4
            public static float4 ($x: number, $yz: Unity.Mathematics.float2, $w: number) : Unity.Mathematics.float4
            public static float4 ($x: number, $yzw: Unity.Mathematics.float3) : Unity.Mathematics.float4
            public static float4 ($xy: Unity.Mathematics.float2, $z: number, $w: number) : Unity.Mathematics.float4
            public static float4 ($xy: Unity.Mathematics.float2, $zw: Unity.Mathematics.float2) : Unity.Mathematics.float4
            public static float4 ($xyz: Unity.Mathematics.float3, $w: number) : Unity.Mathematics.float4
            public static float4 ($xyzw: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static float4 ($v: number) : Unity.Mathematics.float4
            public static float4 ($v: boolean) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.bool4) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.int4) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.uint4) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.half) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.half4) : Unity.Mathematics.float4
            public static float4 ($v: Unity.Mathematics.double4) : Unity.Mathematics.float4
            public static hash ($v: Unity.Mathematics.float4) : number
            public static hashwide ($v: Unity.Mathematics.float4) : Unity.Mathematics.uint4
            public static shuffle ($left: Unity.Mathematics.float4, $right: Unity.Mathematics.float4, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.float4, $right: Unity.Mathematics.float4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float2
            public static shuffle ($left: Unity.Mathematics.float4, $right: Unity.Mathematics.float4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float3
            public static shuffle ($left: Unity.Mathematics.float4, $right: Unity.Mathematics.float4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.float4
            public static float4x2 ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4) : Unity.Mathematics.float4x2
            public static float4x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number) : Unity.Mathematics.float4x2
            public static float4x2 ($v: number) : Unity.Mathematics.float4x2
            public static float4x2 ($v: boolean) : Unity.Mathematics.float4x2
            public static float4x2 ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.float4x2
            public static float4x2 ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.float4x2
            public static float4x2 ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.float4x2
            public static float4x2 ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.float4x2
            public static transpose ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.float2x4
            public static hash ($v: Unity.Mathematics.float4x2) : number
            public static hashwide ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.uint4
            public static float4x3 ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4, $c2: Unity.Mathematics.float4) : Unity.Mathematics.float4x3
            public static float4x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number) : Unity.Mathematics.float4x3
            public static float4x3 ($v: number) : Unity.Mathematics.float4x3
            public static float4x3 ($v: boolean) : Unity.Mathematics.float4x3
            public static float4x3 ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.float4x3
            public static float4x3 ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.float4x3
            public static float4x3 ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.float4x3
            public static float4x3 ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.float4x3
            public static transpose ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.float3x4
            public static hash ($v: Unity.Mathematics.float4x3) : number
            public static hashwide ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.uint4
            public static float4x4 ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4, $c2: Unity.Mathematics.float4, $c3: Unity.Mathematics.float4) : Unity.Mathematics.float4x4
            public static float4x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number) : Unity.Mathematics.float4x4
            public static float4x4 ($v: number) : Unity.Mathematics.float4x4
            public static float4x4 ($v: boolean) : Unity.Mathematics.float4x4
            public static float4x4 ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.float4x4
            public static float4x4 ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.float4x4
            public static float4x4 ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.float4x4
            public static float4x4 ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.float4x4
            public static rotate ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static transform ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static transpose ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static inverse ($m: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static fastinverse ($m: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static determinant ($m: Unity.Mathematics.float4x4) : number
            public static hash ($v: Unity.Mathematics.float4x4) : number
            public static hashwide ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.uint4
            public static half ($x: Unity.Mathematics.half) : Unity.Mathematics.half
            public static half ($v: number) : Unity.Mathematics.half
            public static hash ($v: Unity.Mathematics.half) : number
            public static half2 ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half) : Unity.Mathematics.half2
            public static half2 ($xy: Unity.Mathematics.half2) : Unity.Mathematics.half2
            public static half2 ($v: Unity.Mathematics.half) : Unity.Mathematics.half2
            public static half2 ($v: number) : Unity.Mathematics.half2
            public static half2 ($v: Unity.Mathematics.float2) : Unity.Mathematics.half2
            public static half2 ($v: Unity.Mathematics.double2) : Unity.Mathematics.half2
            public static hash ($v: Unity.Mathematics.half2) : number
            public static hashwide ($v: Unity.Mathematics.half2) : Unity.Mathematics.uint2
            public static half3 ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $z: Unity.Mathematics.half) : Unity.Mathematics.half3
            public static half3 ($x: Unity.Mathematics.half, $yz: Unity.Mathematics.half2) : Unity.Mathematics.half3
            public static half3 ($xy: Unity.Mathematics.half2, $z: Unity.Mathematics.half) : Unity.Mathematics.half3
            public static half3 ($xyz: Unity.Mathematics.half3) : Unity.Mathematics.half3
            public static half3 ($v: Unity.Mathematics.half) : Unity.Mathematics.half3
            public static half3 ($v: number) : Unity.Mathematics.half3
            public static half3 ($v: Unity.Mathematics.float3) : Unity.Mathematics.half3
            public static half3 ($v: Unity.Mathematics.double3) : Unity.Mathematics.half3
            public static hash ($v: Unity.Mathematics.half3) : number
            public static hashwide ($v: Unity.Mathematics.half3) : Unity.Mathematics.uint3
            public static half4 ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $z: Unity.Mathematics.half, $w: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static half4 ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $zw: Unity.Mathematics.half2) : Unity.Mathematics.half4
            public static half4 ($x: Unity.Mathematics.half, $yz: Unity.Mathematics.half2, $w: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static half4 ($x: Unity.Mathematics.half, $yzw: Unity.Mathematics.half3) : Unity.Mathematics.half4
            public static half4 ($xy: Unity.Mathematics.half2, $z: Unity.Mathematics.half, $w: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static half4 ($xy: Unity.Mathematics.half2, $zw: Unity.Mathematics.half2) : Unity.Mathematics.half4
            public static half4 ($xyz: Unity.Mathematics.half3, $w: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static half4 ($xyzw: Unity.Mathematics.half4) : Unity.Mathematics.half4
            public static half4 ($v: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static half4 ($v: number) : Unity.Mathematics.half4
            public static half4 ($v: Unity.Mathematics.float4) : Unity.Mathematics.half4
            public static half4 ($v: Unity.Mathematics.double4) : Unity.Mathematics.half4
            public static hash ($v: Unity.Mathematics.half4) : number
            public static hashwide ($v: Unity.Mathematics.half4) : Unity.Mathematics.uint4
            public static int2 ($x: number, $y: number) : Unity.Mathematics.int2
            public static int2 ($xy: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static int2 ($v: number) : Unity.Mathematics.int2
            public static int2 ($v: boolean) : Unity.Mathematics.int2
            public static int2 ($v: Unity.Mathematics.bool2) : Unity.Mathematics.int2
            public static int2 ($v: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static int2 ($v: Unity.Mathematics.float2) : Unity.Mathematics.int2
            public static int2 ($v: Unity.Mathematics.double2) : Unity.Mathematics.int2
            public static hash ($v: Unity.Mathematics.int2) : number
            public static hashwide ($v: Unity.Mathematics.int2) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.int2, $right: Unity.Mathematics.int2, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.int2, $right: Unity.Mathematics.int2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int2
            public static shuffle ($left: Unity.Mathematics.int2, $right: Unity.Mathematics.int2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int3
            public static shuffle ($left: Unity.Mathematics.int2, $right: Unity.Mathematics.int2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int4
            public static int2x2 ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2) : Unity.Mathematics.int2x2
            public static int2x2 ($m00: number, $m01: number, $m10: number, $m11: number) : Unity.Mathematics.int2x2
            public static int2x2 ($v: number) : Unity.Mathematics.int2x2
            public static int2x2 ($v: boolean) : Unity.Mathematics.int2x2
            public static int2x2 ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.int2x2
            public static int2x2 ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.int2x2
            public static int2x2 ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.int2x2
            public static int2x2 ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.int2x2
            public static transpose ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static determinant ($m: Unity.Mathematics.int2x2) : number
            public static hash ($v: Unity.Mathematics.int2x2) : number
            public static hashwide ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.uint2
            public static int2x3 ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2, $c2: Unity.Mathematics.int2) : Unity.Mathematics.int2x3
            public static int2x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number) : Unity.Mathematics.int2x3
            public static int2x3 ($v: number) : Unity.Mathematics.int2x3
            public static int2x3 ($v: boolean) : Unity.Mathematics.int2x3
            public static int2x3 ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.int2x3
            public static int2x3 ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.int2x3
            public static int2x3 ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.int2x3
            public static int2x3 ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.int2x3
            public static transpose ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.int3x2
            public static hash ($v: Unity.Mathematics.int2x3) : number
            public static hashwide ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.uint2
            public static int2x4 ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2, $c2: Unity.Mathematics.int2, $c3: Unity.Mathematics.int2) : Unity.Mathematics.int2x4
            public static int2x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number) : Unity.Mathematics.int2x4
            public static int2x4 ($v: number) : Unity.Mathematics.int2x4
            public static int2x4 ($v: boolean) : Unity.Mathematics.int2x4
            public static int2x4 ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.int2x4
            public static int2x4 ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.int2x4
            public static int2x4 ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.int2x4
            public static int2x4 ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.int2x4
            public static transpose ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.int4x2
            public static hash ($v: Unity.Mathematics.int2x4) : number
            public static hashwide ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.uint2
            public static int3 ($x: number, $y: number, $z: number) : Unity.Mathematics.int3
            public static int3 ($x: number, $yz: Unity.Mathematics.int2) : Unity.Mathematics.int3
            public static int3 ($xy: Unity.Mathematics.int2, $z: number) : Unity.Mathematics.int3
            public static int3 ($xyz: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static int3 ($v: number) : Unity.Mathematics.int3
            public static int3 ($v: boolean) : Unity.Mathematics.int3
            public static int3 ($v: Unity.Mathematics.bool3) : Unity.Mathematics.int3
            public static int3 ($v: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static int3 ($v: Unity.Mathematics.float3) : Unity.Mathematics.int3
            public static int3 ($v: Unity.Mathematics.double3) : Unity.Mathematics.int3
            public static hash ($v: Unity.Mathematics.int3) : number
            public static hashwide ($v: Unity.Mathematics.int3) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.int3, $right: Unity.Mathematics.int3, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.int3, $right: Unity.Mathematics.int3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int2
            public static shuffle ($left: Unity.Mathematics.int3, $right: Unity.Mathematics.int3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int3
            public static shuffle ($left: Unity.Mathematics.int3, $right: Unity.Mathematics.int3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int4
            public static int3x2 ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3) : Unity.Mathematics.int3x2
            public static int3x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number) : Unity.Mathematics.int3x2
            public static int3x2 ($v: number) : Unity.Mathematics.int3x2
            public static int3x2 ($v: boolean) : Unity.Mathematics.int3x2
            public static int3x2 ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.int3x2
            public static int3x2 ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.int3x2
            public static int3x2 ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.int3x2
            public static int3x2 ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.int3x2
            public static transpose ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.int2x3
            public static hash ($v: Unity.Mathematics.int3x2) : number
            public static hashwide ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.uint3
            public static int3x3 ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3, $c2: Unity.Mathematics.int3) : Unity.Mathematics.int3x3
            public static int3x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number) : Unity.Mathematics.int3x3
            public static int3x3 ($v: number) : Unity.Mathematics.int3x3
            public static int3x3 ($v: boolean) : Unity.Mathematics.int3x3
            public static int3x3 ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.int3x3
            public static int3x3 ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.int3x3
            public static int3x3 ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.int3x3
            public static int3x3 ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.int3x3
            public static transpose ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static determinant ($m: Unity.Mathematics.int3x3) : number
            public static hash ($v: Unity.Mathematics.int3x3) : number
            public static hashwide ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.uint3
            public static int3x4 ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3, $c2: Unity.Mathematics.int3, $c3: Unity.Mathematics.int3) : Unity.Mathematics.int3x4
            public static int3x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number) : Unity.Mathematics.int3x4
            public static int3x4 ($v: number) : Unity.Mathematics.int3x4
            public static int3x4 ($v: boolean) : Unity.Mathematics.int3x4
            public static int3x4 ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.int3x4
            public static int3x4 ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.int3x4
            public static int3x4 ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.int3x4
            public static int3x4 ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.int3x4
            public static transpose ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.int4x3
            public static hash ($v: Unity.Mathematics.int3x4) : number
            public static hashwide ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.uint3
            public static int4 ($x: number, $y: number, $z: number, $w: number) : Unity.Mathematics.int4
            public static int4 ($x: number, $y: number, $zw: Unity.Mathematics.int2) : Unity.Mathematics.int4
            public static int4 ($x: number, $yz: Unity.Mathematics.int2, $w: number) : Unity.Mathematics.int4
            public static int4 ($x: number, $yzw: Unity.Mathematics.int3) : Unity.Mathematics.int4
            public static int4 ($xy: Unity.Mathematics.int2, $z: number, $w: number) : Unity.Mathematics.int4
            public static int4 ($xy: Unity.Mathematics.int2, $zw: Unity.Mathematics.int2) : Unity.Mathematics.int4
            public static int4 ($xyz: Unity.Mathematics.int3, $w: number) : Unity.Mathematics.int4
            public static int4 ($xyzw: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static int4 ($v: number) : Unity.Mathematics.int4
            public static int4 ($v: boolean) : Unity.Mathematics.int4
            public static int4 ($v: Unity.Mathematics.bool4) : Unity.Mathematics.int4
            public static int4 ($v: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static int4 ($v: Unity.Mathematics.float4) : Unity.Mathematics.int4
            public static int4 ($v: Unity.Mathematics.double4) : Unity.Mathematics.int4
            public static hash ($v: Unity.Mathematics.int4) : number
            public static hashwide ($v: Unity.Mathematics.int4) : Unity.Mathematics.uint4
            public static shuffle ($left: Unity.Mathematics.int4, $right: Unity.Mathematics.int4, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.int4, $right: Unity.Mathematics.int4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int2
            public static shuffle ($left: Unity.Mathematics.int4, $right: Unity.Mathematics.int4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int3
            public static shuffle ($left: Unity.Mathematics.int4, $right: Unity.Mathematics.int4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.int4
            public static int4x2 ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4) : Unity.Mathematics.int4x2
            public static int4x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number) : Unity.Mathematics.int4x2
            public static int4x2 ($v: number) : Unity.Mathematics.int4x2
            public static int4x2 ($v: boolean) : Unity.Mathematics.int4x2
            public static int4x2 ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.int4x2
            public static int4x2 ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.int4x2
            public static int4x2 ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.int4x2
            public static int4x2 ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.int4x2
            public static transpose ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.int2x4
            public static hash ($v: Unity.Mathematics.int4x2) : number
            public static hashwide ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.uint4
            public static int4x3 ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4, $c2: Unity.Mathematics.int4) : Unity.Mathematics.int4x3
            public static int4x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number) : Unity.Mathematics.int4x3
            public static int4x3 ($v: number) : Unity.Mathematics.int4x3
            public static int4x3 ($v: boolean) : Unity.Mathematics.int4x3
            public static int4x3 ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.int4x3
            public static int4x3 ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.int4x3
            public static int4x3 ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.int4x3
            public static int4x3 ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.int4x3
            public static transpose ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.int3x4
            public static hash ($v: Unity.Mathematics.int4x3) : number
            public static hashwide ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.uint4
            public static int4x4 ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4, $c2: Unity.Mathematics.int4, $c3: Unity.Mathematics.int4) : Unity.Mathematics.int4x4
            public static int4x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number) : Unity.Mathematics.int4x4
            public static int4x4 ($v: number) : Unity.Mathematics.int4x4
            public static int4x4 ($v: boolean) : Unity.Mathematics.int4x4
            public static int4x4 ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.int4x4
            public static int4x4 ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.int4x4
            public static int4x4 ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.int4x4
            public static int4x4 ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.int4x4
            public static transpose ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static determinant ($m: Unity.Mathematics.int4x4) : number
            public static hash ($v: Unity.Mathematics.int4x4) : number
            public static hashwide ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.uint4
            public static asint ($x: number) : number
            public static asint ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static asint ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static asint ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static asint ($x: Unity.Mathematics.float2) : Unity.Mathematics.int2
            public static asint ($x: Unity.Mathematics.float3) : Unity.Mathematics.int3
            public static asint ($x: Unity.Mathematics.float4) : Unity.Mathematics.int4
            public static asuint ($x: number) : number
            public static asuint ($x: Unity.Mathematics.int2) : Unity.Mathematics.uint2
            public static asuint ($x: Unity.Mathematics.int3) : Unity.Mathematics.uint3
            public static asuint ($x: Unity.Mathematics.int4) : Unity.Mathematics.uint4
            public static asuint ($x: Unity.Mathematics.float2) : Unity.Mathematics.uint2
            public static asuint ($x: Unity.Mathematics.float3) : Unity.Mathematics.uint3
            public static asuint ($x: Unity.Mathematics.float4) : Unity.Mathematics.uint4
            public static aslong ($x: bigint) : bigint
            public static aslong ($x: number) : bigint
            public static asulong ($x: bigint) : bigint
            public static asulong ($x: number) : bigint
            public static asfloat ($x: number) : number
            public static asfloat ($x: Unity.Mathematics.int2) : Unity.Mathematics.float2
            public static asfloat ($x: Unity.Mathematics.int3) : Unity.Mathematics.float3
            public static asfloat ($x: Unity.Mathematics.int4) : Unity.Mathematics.float4
            public static asfloat ($x: Unity.Mathematics.uint2) : Unity.Mathematics.float2
            public static asfloat ($x: Unity.Mathematics.uint3) : Unity.Mathematics.float3
            public static asfloat ($x: Unity.Mathematics.uint4) : Unity.Mathematics.float4
            public static bitmask ($value: Unity.Mathematics.bool4) : number
            public static asdouble ($x: bigint) : number
            public static isfinite ($x: number) : boolean
            public static isfinite ($x: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static isfinite ($x: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static isfinite ($x: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static isfinite ($x: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static isfinite ($x: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static isfinite ($x: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static isinf ($x: number) : boolean
            public static isinf ($x: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static isinf ($x: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static isinf ($x: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static isinf ($x: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static isinf ($x: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static isinf ($x: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static isnan ($x: number) : boolean
            public static isnan ($x: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static isnan ($x: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static isnan ($x: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static isnan ($x: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static isnan ($x: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static isnan ($x: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static ispow2 ($x: number) : boolean
            public static ispow2 ($x: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static ispow2 ($x: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static ispow2 ($x: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static ispow2 ($x: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static ispow2 ($x: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static ispow2 ($x: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static min ($x: number, $y: number) : number
            public static min ($x: Unity.Mathematics.int2, $y: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static min ($x: Unity.Mathematics.int3, $y: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static min ($x: Unity.Mathematics.int4, $y: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static min ($x: Unity.Mathematics.uint2, $y: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static min ($x: Unity.Mathematics.uint3, $y: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static min ($x: Unity.Mathematics.uint4, $y: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static min ($x: bigint, $y: bigint) : bigint
            public static min ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static min ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static min ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static min ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static min ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static min ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static max ($x: number, $y: number) : number
            public static max ($x: Unity.Mathematics.int2, $y: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static max ($x: Unity.Mathematics.int3, $y: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static max ($x: Unity.Mathematics.int4, $y: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static max ($x: Unity.Mathematics.uint2, $y: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static max ($x: Unity.Mathematics.uint3, $y: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static max ($x: Unity.Mathematics.uint4, $y: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static max ($x: bigint, $y: bigint) : bigint
            public static max ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static max ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static max ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static max ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static max ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static max ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static lerp ($x: number, $y: number, $s: number) : number
            public static lerp ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2, $s: number) : Unity.Mathematics.float2
            public static lerp ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3, $s: number) : Unity.Mathematics.float3
            public static lerp ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4, $s: number) : Unity.Mathematics.float4
            public static lerp ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2, $s: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static lerp ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3, $s: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static lerp ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4, $s: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static lerp ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2, $s: number) : Unity.Mathematics.double2
            public static lerp ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3, $s: number) : Unity.Mathematics.double3
            public static lerp ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4, $s: number) : Unity.Mathematics.double4
            public static lerp ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2, $s: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static lerp ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3, $s: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static lerp ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4, $s: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static unlerp ($a: number, $b: number, $x: number) : number
            public static unlerp ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static unlerp ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static unlerp ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static unlerp ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static unlerp ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static unlerp ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static remap ($a: number, $b: number, $c: number, $d: number, $x: number) : number
            public static remap ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $c: Unity.Mathematics.float2, $d: Unity.Mathematics.float2, $x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static remap ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $c: Unity.Mathematics.float3, $d: Unity.Mathematics.float3, $x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static remap ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $c: Unity.Mathematics.float4, $d: Unity.Mathematics.float4, $x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static remap ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $c: Unity.Mathematics.double2, $d: Unity.Mathematics.double2, $x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static remap ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $c: Unity.Mathematics.double3, $d: Unity.Mathematics.double3, $x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static remap ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $c: Unity.Mathematics.double4, $d: Unity.Mathematics.double4, $x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static mad ($a: number, $b: number, $c: number) : number
            public static mad ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2, $c: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static mad ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3, $c: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static mad ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4, $c: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static mad ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2, $c: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static mad ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3, $c: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static mad ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4, $c: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static mad ($a: bigint, $b: bigint, $c: bigint) : bigint
            public static mad ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $c: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static mad ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $c: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static mad ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $c: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static mad ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $c: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static mad ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $c: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static mad ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $c: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static clamp ($x: number, $a: number, $b: number) : number
            public static clamp ($x: Unity.Mathematics.int2, $a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static clamp ($x: Unity.Mathematics.int3, $a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static clamp ($x: Unity.Mathematics.int4, $a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static clamp ($x: Unity.Mathematics.uint2, $a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static clamp ($x: Unity.Mathematics.uint3, $a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static clamp ($x: Unity.Mathematics.uint4, $a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static clamp ($x: bigint, $a: bigint, $b: bigint) : bigint
            public static clamp ($x: Unity.Mathematics.float2, $a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static clamp ($x: Unity.Mathematics.float3, $a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static clamp ($x: Unity.Mathematics.float4, $a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static clamp ($x: Unity.Mathematics.double2, $a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static clamp ($x: Unity.Mathematics.double3, $a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static clamp ($x: Unity.Mathematics.double4, $a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static saturate ($x: number) : number
            public static saturate ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static saturate ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static saturate ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static saturate ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static saturate ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static saturate ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static abs ($x: number) : number
            public static abs ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static abs ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static abs ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static abs ($x: bigint) : bigint
            public static abs ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static abs ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static abs ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static abs ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static abs ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static abs ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static dot ($x: number, $y: number) : number
            public static dot ($x: Unity.Mathematics.int2, $y: Unity.Mathematics.int2) : number
            public static dot ($x: Unity.Mathematics.int3, $y: Unity.Mathematics.int3) : number
            public static dot ($x: Unity.Mathematics.int4, $y: Unity.Mathematics.int4) : number
            public static dot ($x: Unity.Mathematics.uint2, $y: Unity.Mathematics.uint2) : number
            public static dot ($x: Unity.Mathematics.uint3, $y: Unity.Mathematics.uint3) : number
            public static dot ($x: Unity.Mathematics.uint4, $y: Unity.Mathematics.uint4) : number
            public static dot ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : number
            public static dot ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : number
            public static dot ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : number
            public static dot ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : number
            public static dot ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : number
            public static dot ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : number
            public static tan ($x: number) : number
            public static tan ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static tan ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static tan ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static tan ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static tan ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static tan ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static tanh ($x: number) : number
            public static tanh ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static tanh ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static tanh ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static tanh ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static tanh ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static tanh ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static atan ($x: number) : number
            public static atan ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static atan ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static atan ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static atan ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static atan ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static atan ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static atan2 ($y: number, $x: number) : number
            public static atan2 ($y: Unity.Mathematics.float2, $x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static atan2 ($y: Unity.Mathematics.float3, $x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static atan2 ($y: Unity.Mathematics.float4, $x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static atan2 ($y: Unity.Mathematics.double2, $x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static atan2 ($y: Unity.Mathematics.double3, $x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static atan2 ($y: Unity.Mathematics.double4, $x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static cos ($x: number) : number
            public static cos ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static cos ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static cos ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static cos ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static cos ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static cos ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static cosh ($x: number) : number
            public static cosh ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static cosh ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static cosh ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static cosh ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static cosh ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static cosh ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static acos ($x: number) : number
            public static acos ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static acos ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static acos ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static acos ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static acos ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static acos ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static sin ($x: number) : number
            public static sin ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static sin ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static sin ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static sin ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static sin ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static sin ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static sinh ($x: number) : number
            public static sinh ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static sinh ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static sinh ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static sinh ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static sinh ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static sinh ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static asin ($x: number) : number
            public static asin ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static asin ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static asin ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static asin ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static asin ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static asin ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static floor ($x: number) : number
            public static floor ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static floor ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static floor ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static floor ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static floor ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static floor ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static ceil ($x: number) : number
            public static ceil ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static ceil ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static ceil ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static ceil ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static ceil ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static ceil ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static round ($x: number) : number
            public static round ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static round ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static round ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static round ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static round ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static round ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static trunc ($x: number) : number
            public static trunc ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static trunc ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static trunc ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static trunc ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static trunc ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static trunc ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static frac ($x: number) : number
            public static frac ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static frac ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static frac ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static frac ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static frac ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static frac ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static rcp ($x: number) : number
            public static rcp ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static rcp ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static rcp ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static rcp ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static rcp ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static rcp ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static sign ($x: number) : number
            public static sign ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static sign ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static sign ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static sign ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static sign ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static sign ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static pow ($x: number, $y: number) : number
            public static pow ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static pow ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static pow ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static pow ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static pow ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static pow ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static exp ($x: number) : number
            public static exp ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static exp ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static exp ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static exp ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static exp ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static exp ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static exp2 ($x: number) : number
            public static exp2 ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static exp2 ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static exp2 ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static exp2 ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static exp2 ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static exp2 ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static exp10 ($x: number) : number
            public static exp10 ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static exp10 ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static exp10 ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static exp10 ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static exp10 ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static exp10 ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static log ($x: number) : number
            public static log ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static log ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static log ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static log ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static log ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static log ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static log2 ($x: number) : number
            public static log2 ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static log2 ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static log2 ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static log2 ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static log2 ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static log2 ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static log10 ($x: number) : number
            public static log10 ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static log10 ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static log10 ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static log10 ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static log10 ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static log10 ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static fmod ($x: number, $y: number) : number
            public static fmod ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static fmod ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static fmod ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static fmod ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static fmod ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static fmod ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static modf ($x: number, $i: $Ref<number>) : number
            public static modf ($x: Unity.Mathematics.float2, $i: $Ref<Unity.Mathematics.float2>) : Unity.Mathematics.float2
            public static modf ($x: Unity.Mathematics.float3, $i: $Ref<Unity.Mathematics.float3>) : Unity.Mathematics.float3
            public static modf ($x: Unity.Mathematics.float4, $i: $Ref<Unity.Mathematics.float4>) : Unity.Mathematics.float4
            public static modf ($x: Unity.Mathematics.double2, $i: $Ref<Unity.Mathematics.double2>) : Unity.Mathematics.double2
            public static modf ($x: Unity.Mathematics.double3, $i: $Ref<Unity.Mathematics.double3>) : Unity.Mathematics.double3
            public static modf ($x: Unity.Mathematics.double4, $i: $Ref<Unity.Mathematics.double4>) : Unity.Mathematics.double4
            public static sqrt ($x: number) : number
            public static sqrt ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static sqrt ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static sqrt ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static sqrt ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static sqrt ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static sqrt ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static rsqrt ($x: number) : number
            public static rsqrt ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static rsqrt ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static rsqrt ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static rsqrt ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static rsqrt ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static rsqrt ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static normalize ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static normalize ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static normalize ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static normalize ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static normalize ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static normalize ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static normalizesafe ($x: Unity.Mathematics.float2, $defaultvalue?: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static normalizesafe ($x: Unity.Mathematics.float3, $defaultvalue?: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static normalizesafe ($x: Unity.Mathematics.float4, $defaultvalue?: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static normalizesafe ($x: Unity.Mathematics.double2, $defaultvalue?: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static normalizesafe ($x: Unity.Mathematics.double3, $defaultvalue?: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static normalizesafe ($x: Unity.Mathematics.double4, $defaultvalue?: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static length ($x: number) : number
            public static length ($x: Unity.Mathematics.float2) : number
            public static length ($x: Unity.Mathematics.float3) : number
            public static length ($x: Unity.Mathematics.float4) : number
            public static length ($x: Unity.Mathematics.double2) : number
            public static length ($x: Unity.Mathematics.double3) : number
            public static length ($x: Unity.Mathematics.double4) : number
            public static lengthsq ($x: number) : number
            public static lengthsq ($x: Unity.Mathematics.float2) : number
            public static lengthsq ($x: Unity.Mathematics.float3) : number
            public static lengthsq ($x: Unity.Mathematics.float4) : number
            public static lengthsq ($x: Unity.Mathematics.double2) : number
            public static lengthsq ($x: Unity.Mathematics.double3) : number
            public static lengthsq ($x: Unity.Mathematics.double4) : number
            public static distance ($x: number, $y: number) : number
            public static distance ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : number
            public static distance ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : number
            public static distance ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : number
            public static distance ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : number
            public static distance ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : number
            public static distance ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : number
            public static distancesq ($x: number, $y: number) : number
            public static distancesq ($x: Unity.Mathematics.float2, $y: Unity.Mathematics.float2) : number
            public static distancesq ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : number
            public static distancesq ($x: Unity.Mathematics.float4, $y: Unity.Mathematics.float4) : number
            public static distancesq ($x: Unity.Mathematics.double2, $y: Unity.Mathematics.double2) : number
            public static distancesq ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : number
            public static distancesq ($x: Unity.Mathematics.double4, $y: Unity.Mathematics.double4) : number
            public static cross ($x: Unity.Mathematics.float3, $y: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static cross ($x: Unity.Mathematics.double3, $y: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static smoothstep ($a: number, $b: number, $x: number) : number
            public static smoothstep ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static smoothstep ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static smoothstep ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static smoothstep ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static smoothstep ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static smoothstep ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static any ($x: Unity.Mathematics.bool2) : boolean
            public static any ($x: Unity.Mathematics.bool3) : boolean
            public static any ($x: Unity.Mathematics.bool4) : boolean
            public static any ($x: Unity.Mathematics.int2) : boolean
            public static any ($x: Unity.Mathematics.int3) : boolean
            public static any ($x: Unity.Mathematics.int4) : boolean
            public static any ($x: Unity.Mathematics.uint2) : boolean
            public static any ($x: Unity.Mathematics.uint3) : boolean
            public static any ($x: Unity.Mathematics.uint4) : boolean
            public static any ($x: Unity.Mathematics.float2) : boolean
            public static any ($x: Unity.Mathematics.float3) : boolean
            public static any ($x: Unity.Mathematics.float4) : boolean
            public static any ($x: Unity.Mathematics.double2) : boolean
            public static any ($x: Unity.Mathematics.double3) : boolean
            public static any ($x: Unity.Mathematics.double4) : boolean
            public static all ($x: Unity.Mathematics.bool2) : boolean
            public static all ($x: Unity.Mathematics.bool3) : boolean
            public static all ($x: Unity.Mathematics.bool4) : boolean
            public static all ($x: Unity.Mathematics.int2) : boolean
            public static all ($x: Unity.Mathematics.int3) : boolean
            public static all ($x: Unity.Mathematics.int4) : boolean
            public static all ($x: Unity.Mathematics.uint2) : boolean
            public static all ($x: Unity.Mathematics.uint3) : boolean
            public static all ($x: Unity.Mathematics.uint4) : boolean
            public static all ($x: Unity.Mathematics.float2) : boolean
            public static all ($x: Unity.Mathematics.float3) : boolean
            public static all ($x: Unity.Mathematics.float4) : boolean
            public static all ($x: Unity.Mathematics.double2) : boolean
            public static all ($x: Unity.Mathematics.double3) : boolean
            public static all ($x: Unity.Mathematics.double4) : boolean
            public static select ($a: number, $b: number, $c: boolean) : number
            public static select ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2, $c: boolean) : Unity.Mathematics.int2
            public static select ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3, $c: boolean) : Unity.Mathematics.int3
            public static select ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4, $c: boolean) : Unity.Mathematics.int4
            public static select ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2, $c: Unity.Mathematics.bool2) : Unity.Mathematics.int2
            public static select ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3, $c: Unity.Mathematics.bool3) : Unity.Mathematics.int3
            public static select ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4, $c: Unity.Mathematics.bool4) : Unity.Mathematics.int4
            public static select ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2, $c: boolean) : Unity.Mathematics.uint2
            public static select ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3, $c: boolean) : Unity.Mathematics.uint3
            public static select ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4, $c: boolean) : Unity.Mathematics.uint4
            public static select ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2, $c: Unity.Mathematics.bool2) : Unity.Mathematics.uint2
            public static select ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3, $c: Unity.Mathematics.bool3) : Unity.Mathematics.uint3
            public static select ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4, $c: Unity.Mathematics.bool4) : Unity.Mathematics.uint4
            public static select ($a: bigint, $b: bigint, $c: boolean) : bigint
            public static select ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $c: boolean) : Unity.Mathematics.float2
            public static select ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $c: boolean) : Unity.Mathematics.float3
            public static select ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $c: boolean) : Unity.Mathematics.float4
            public static select ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $c: Unity.Mathematics.bool2) : Unity.Mathematics.float2
            public static select ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $c: Unity.Mathematics.bool3) : Unity.Mathematics.float3
            public static select ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $c: Unity.Mathematics.bool4) : Unity.Mathematics.float4
            public static select ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $c: boolean) : Unity.Mathematics.double2
            public static select ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $c: boolean) : Unity.Mathematics.double3
            public static select ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $c: boolean) : Unity.Mathematics.double4
            public static select ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $c: Unity.Mathematics.bool2) : Unity.Mathematics.double2
            public static select ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $c: Unity.Mathematics.bool3) : Unity.Mathematics.double3
            public static select ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $c: Unity.Mathematics.bool4) : Unity.Mathematics.double4
            public static step ($y: number, $x: number) : number
            public static step ($y: Unity.Mathematics.float2, $x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static step ($y: Unity.Mathematics.float3, $x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static step ($y: Unity.Mathematics.float4, $x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static step ($y: Unity.Mathematics.double2, $x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static step ($y: Unity.Mathematics.double3, $x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static step ($y: Unity.Mathematics.double4, $x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static reflect ($i: Unity.Mathematics.float2, $n: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static reflect ($i: Unity.Mathematics.float3, $n: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static reflect ($i: Unity.Mathematics.float4, $n: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static reflect ($i: Unity.Mathematics.double2, $n: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static reflect ($i: Unity.Mathematics.double3, $n: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static reflect ($i: Unity.Mathematics.double4, $n: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static refract ($i: Unity.Mathematics.float2, $n: Unity.Mathematics.float2, $eta: number) : Unity.Mathematics.float2
            public static refract ($i: Unity.Mathematics.float3, $n: Unity.Mathematics.float3, $eta: number) : Unity.Mathematics.float3
            public static refract ($i: Unity.Mathematics.float4, $n: Unity.Mathematics.float4, $eta: number) : Unity.Mathematics.float4
            public static refract ($i: Unity.Mathematics.double2, $n: Unity.Mathematics.double2, $eta: number) : Unity.Mathematics.double2
            public static refract ($i: Unity.Mathematics.double3, $n: Unity.Mathematics.double3, $eta: number) : Unity.Mathematics.double3
            public static refract ($i: Unity.Mathematics.double4, $n: Unity.Mathematics.double4, $eta: number) : Unity.Mathematics.double4
            public static project ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static project ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static project ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static projectsafe ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2, $defaultValue?: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static projectsafe ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3, $defaultValue?: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static projectsafe ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4, $defaultValue?: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static project ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static project ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static project ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static projectsafe ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2, $defaultValue?: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static projectsafe ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3, $defaultValue?: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static projectsafe ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4, $defaultValue?: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static faceforward ($n: Unity.Mathematics.float2, $i: Unity.Mathematics.float2, $ng: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static faceforward ($n: Unity.Mathematics.float3, $i: Unity.Mathematics.float3, $ng: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static faceforward ($n: Unity.Mathematics.float4, $i: Unity.Mathematics.float4, $ng: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static faceforward ($n: Unity.Mathematics.double2, $i: Unity.Mathematics.double2, $ng: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static faceforward ($n: Unity.Mathematics.double3, $i: Unity.Mathematics.double3, $ng: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static faceforward ($n: Unity.Mathematics.double4, $i: Unity.Mathematics.double4, $ng: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static sincos ($x: number, $s: $Ref<number>, $c: $Ref<number>) : void
            public static sincos ($x: Unity.Mathematics.float2, $s: $Ref<Unity.Mathematics.float2>, $c: $Ref<Unity.Mathematics.float2>) : void
            public static sincos ($x: Unity.Mathematics.float3, $s: $Ref<Unity.Mathematics.float3>, $c: $Ref<Unity.Mathematics.float3>) : void
            public static sincos ($x: Unity.Mathematics.float4, $s: $Ref<Unity.Mathematics.float4>, $c: $Ref<Unity.Mathematics.float4>) : void
            public static sincos ($x: Unity.Mathematics.double2, $s: $Ref<Unity.Mathematics.double2>, $c: $Ref<Unity.Mathematics.double2>) : void
            public static sincos ($x: Unity.Mathematics.double3, $s: $Ref<Unity.Mathematics.double3>, $c: $Ref<Unity.Mathematics.double3>) : void
            public static sincos ($x: Unity.Mathematics.double4, $s: $Ref<Unity.Mathematics.double4>, $c: $Ref<Unity.Mathematics.double4>) : void
            public static countbits ($x: number) : number
            public static countbits ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static countbits ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static countbits ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static countbits ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static countbits ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static countbits ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static countbits ($x: bigint) : number
            public static lzcnt ($x: number) : number
            public static lzcnt ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static lzcnt ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static lzcnt ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static lzcnt ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static lzcnt ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static lzcnt ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static lzcnt ($x: bigint) : number
            public static tzcnt ($x: number) : number
            public static tzcnt ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static tzcnt ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static tzcnt ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static tzcnt ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static tzcnt ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static tzcnt ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static tzcnt ($x: bigint) : number
            public static reversebits ($x: number) : number
            public static reversebits ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static reversebits ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static reversebits ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static reversebits ($x: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static reversebits ($x: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static reversebits ($x: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static reversebits ($x: bigint) : bigint
            public static rol ($x: number, $n: number) : number
            public static rol ($x: Unity.Mathematics.int2, $n: number) : Unity.Mathematics.int2
            public static rol ($x: Unity.Mathematics.int3, $n: number) : Unity.Mathematics.int3
            public static rol ($x: Unity.Mathematics.int4, $n: number) : Unity.Mathematics.int4
            public static rol ($x: Unity.Mathematics.uint2, $n: number) : Unity.Mathematics.uint2
            public static rol ($x: Unity.Mathematics.uint3, $n: number) : Unity.Mathematics.uint3
            public static rol ($x: Unity.Mathematics.uint4, $n: number) : Unity.Mathematics.uint4
            public static rol ($x: bigint, $n: number) : bigint
            public static ror ($x: number, $n: number) : number
            public static ror ($x: Unity.Mathematics.int2, $n: number) : Unity.Mathematics.int2
            public static ror ($x: Unity.Mathematics.int3, $n: number) : Unity.Mathematics.int3
            public static ror ($x: Unity.Mathematics.int4, $n: number) : Unity.Mathematics.int4
            public static ror ($x: Unity.Mathematics.uint2, $n: number) : Unity.Mathematics.uint2
            public static ror ($x: Unity.Mathematics.uint3, $n: number) : Unity.Mathematics.uint3
            public static ror ($x: Unity.Mathematics.uint4, $n: number) : Unity.Mathematics.uint4
            public static ror ($x: bigint, $n: number) : bigint
            public static ceilpow2 ($x: number) : number
            public static ceilpow2 ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static ceilpow2 ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static ceilpow2 ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static ceilpow2 ($x: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static ceilpow2 ($x: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static ceilpow2 ($x: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static ceilpow2 ($x: bigint) : bigint
            public static ceillog2 ($x: number) : number
            public static ceillog2 ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static ceillog2 ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static ceillog2 ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static ceillog2 ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static ceillog2 ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static ceillog2 ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static floorlog2 ($x: number) : number
            public static floorlog2 ($x: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static floorlog2 ($x: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static floorlog2 ($x: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static floorlog2 ($x: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static floorlog2 ($x: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static floorlog2 ($x: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static radians ($x: number) : number
            public static radians ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static radians ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static radians ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static radians ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static radians ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static radians ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static degrees ($x: number) : number
            public static degrees ($x: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static degrees ($x: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static degrees ($x: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static degrees ($x: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static degrees ($x: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static degrees ($x: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static cmin ($x: Unity.Mathematics.int2) : number
            public static cmin ($x: Unity.Mathematics.int3) : number
            public static cmin ($x: Unity.Mathematics.int4) : number
            public static cmin ($x: Unity.Mathematics.uint2) : number
            public static cmin ($x: Unity.Mathematics.uint3) : number
            public static cmin ($x: Unity.Mathematics.uint4) : number
            public static cmin ($x: Unity.Mathematics.float2) : number
            public static cmin ($x: Unity.Mathematics.float3) : number
            public static cmin ($x: Unity.Mathematics.float4) : number
            public static cmin ($x: Unity.Mathematics.double2) : number
            public static cmin ($x: Unity.Mathematics.double3) : number
            public static cmin ($x: Unity.Mathematics.double4) : number
            public static cmax ($x: Unity.Mathematics.int2) : number
            public static cmax ($x: Unity.Mathematics.int3) : number
            public static cmax ($x: Unity.Mathematics.int4) : number
            public static cmax ($x: Unity.Mathematics.uint2) : number
            public static cmax ($x: Unity.Mathematics.uint3) : number
            public static cmax ($x: Unity.Mathematics.uint4) : number
            public static cmax ($x: Unity.Mathematics.float2) : number
            public static cmax ($x: Unity.Mathematics.float3) : number
            public static cmax ($x: Unity.Mathematics.float4) : number
            public static cmax ($x: Unity.Mathematics.double2) : number
            public static cmax ($x: Unity.Mathematics.double3) : number
            public static cmax ($x: Unity.Mathematics.double4) : number
            public static csum ($x: Unity.Mathematics.int2) : number
            public static csum ($x: Unity.Mathematics.int3) : number
            public static csum ($x: Unity.Mathematics.int4) : number
            public static csum ($x: Unity.Mathematics.uint2) : number
            public static csum ($x: Unity.Mathematics.uint3) : number
            public static csum ($x: Unity.Mathematics.uint4) : number
            public static csum ($x: Unity.Mathematics.float2) : number
            public static csum ($x: Unity.Mathematics.float3) : number
            public static csum ($x: Unity.Mathematics.float4) : number
            public static csum ($x: Unity.Mathematics.double2) : number
            public static csum ($x: Unity.Mathematics.double3) : number
            public static csum ($x: Unity.Mathematics.double4) : number
            public static f16tof32 ($x: number) : number
            public static f16tof32 ($x: Unity.Mathematics.uint2) : Unity.Mathematics.float2
            public static f16tof32 ($x: Unity.Mathematics.uint3) : Unity.Mathematics.float3
            public static f16tof32 ($x: Unity.Mathematics.uint4) : Unity.Mathematics.float4
            public static f32tof16 ($x: number) : number
            public static f32tof16 ($x: Unity.Mathematics.float2) : Unity.Mathematics.uint2
            public static f32tof16 ($x: Unity.Mathematics.float3) : Unity.Mathematics.uint3
            public static f32tof16 ($x: Unity.Mathematics.float4) : Unity.Mathematics.uint4
            public static up () : Unity.Mathematics.float3
            public static down () : Unity.Mathematics.float3
            public static forward () : Unity.Mathematics.float3
            public static back () : Unity.Mathematics.float3
            public static left () : Unity.Mathematics.float3
            public static right () : Unity.Mathematics.float3
            public static float3x3 ($f4x4: Unity.Mathematics.float4x4) : Unity.Mathematics.float3x3
            public static float3x3 ($rotation: Unity.Mathematics.quaternion) : Unity.Mathematics.float3x3
            public static float4x4 ($rotation: Unity.Mathematics.float3x3, $translation: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static float4x4 ($rotation: Unity.Mathematics.quaternion, $translation: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static float4x4 ($transform: Unity.Mathematics.RigidTransform) : Unity.Mathematics.float4x4
            public static orthonormalize ($i: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static mul ($a: number, $b: number) : number
            public static mul ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2) : number
            public static mul ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2x2) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2x3) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float2, $b: Unity.Mathematics.float2x4) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3) : number
            public static mul ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3x2) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3x3) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float3, $b: Unity.Mathematics.float3x4) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4) : number
            public static mul ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4x2) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4x3) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float4, $b: Unity.Mathematics.float4x4) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float2x2, $b: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float2x2, $b: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static mul ($a: Unity.Mathematics.float2x2, $b: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static mul ($a: Unity.Mathematics.float2x2, $b: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static mul ($a: Unity.Mathematics.float2x3, $b: Unity.Mathematics.float3) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float2x3, $b: Unity.Mathematics.float3x2) : Unity.Mathematics.float2x2
            public static mul ($a: Unity.Mathematics.float2x3, $b: Unity.Mathematics.float3x3) : Unity.Mathematics.float2x3
            public static mul ($a: Unity.Mathematics.float2x3, $b: Unity.Mathematics.float3x4) : Unity.Mathematics.float2x4
            public static mul ($a: Unity.Mathematics.float2x4, $b: Unity.Mathematics.float4) : Unity.Mathematics.float2
            public static mul ($a: Unity.Mathematics.float2x4, $b: Unity.Mathematics.float4x2) : Unity.Mathematics.float2x2
            public static mul ($a: Unity.Mathematics.float2x4, $b: Unity.Mathematics.float4x3) : Unity.Mathematics.float2x3
            public static mul ($a: Unity.Mathematics.float2x4, $b: Unity.Mathematics.float4x4) : Unity.Mathematics.float2x4
            public static mul ($a: Unity.Mathematics.float3x2, $b: Unity.Mathematics.float2) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float3x2, $b: Unity.Mathematics.float2x2) : Unity.Mathematics.float3x2
            public static mul ($a: Unity.Mathematics.float3x2, $b: Unity.Mathematics.float2x3) : Unity.Mathematics.float3x3
            public static mul ($a: Unity.Mathematics.float3x2, $b: Unity.Mathematics.float2x4) : Unity.Mathematics.float3x4
            public static mul ($a: Unity.Mathematics.float3x3, $b: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float3x3, $b: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static mul ($a: Unity.Mathematics.float3x3, $b: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static mul ($a: Unity.Mathematics.float3x3, $b: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static mul ($a: Unity.Mathematics.float3x4, $b: Unity.Mathematics.float4) : Unity.Mathematics.float3
            public static mul ($a: Unity.Mathematics.float3x4, $b: Unity.Mathematics.float4x2) : Unity.Mathematics.float3x2
            public static mul ($a: Unity.Mathematics.float3x4, $b: Unity.Mathematics.float4x3) : Unity.Mathematics.float3x3
            public static mul ($a: Unity.Mathematics.float3x4, $b: Unity.Mathematics.float4x4) : Unity.Mathematics.float3x4
            public static mul ($a: Unity.Mathematics.float4x2, $b: Unity.Mathematics.float2) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float4x2, $b: Unity.Mathematics.float2x2) : Unity.Mathematics.float4x2
            public static mul ($a: Unity.Mathematics.float4x2, $b: Unity.Mathematics.float2x3) : Unity.Mathematics.float4x3
            public static mul ($a: Unity.Mathematics.float4x2, $b: Unity.Mathematics.float2x4) : Unity.Mathematics.float4x4
            public static mul ($a: Unity.Mathematics.float4x3, $b: Unity.Mathematics.float3) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float4x3, $b: Unity.Mathematics.float3x2) : Unity.Mathematics.float4x2
            public static mul ($a: Unity.Mathematics.float4x3, $b: Unity.Mathematics.float3x3) : Unity.Mathematics.float4x3
            public static mul ($a: Unity.Mathematics.float4x3, $b: Unity.Mathematics.float3x4) : Unity.Mathematics.float4x4
            public static mul ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static mul ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static mul ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static mul ($a: Unity.Mathematics.float4x4, $b: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static mul ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2) : number
            public static mul ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2x2) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2x3) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double2, $b: Unity.Mathematics.double2x4) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3) : number
            public static mul ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3x2) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3x3) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double3, $b: Unity.Mathematics.double3x4) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4) : number
            public static mul ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4x2) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4x3) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double4, $b: Unity.Mathematics.double4x4) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double2x2, $b: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double2x2, $b: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static mul ($a: Unity.Mathematics.double2x2, $b: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static mul ($a: Unity.Mathematics.double2x2, $b: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static mul ($a: Unity.Mathematics.double2x3, $b: Unity.Mathematics.double3) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double2x3, $b: Unity.Mathematics.double3x2) : Unity.Mathematics.double2x2
            public static mul ($a: Unity.Mathematics.double2x3, $b: Unity.Mathematics.double3x3) : Unity.Mathematics.double2x3
            public static mul ($a: Unity.Mathematics.double2x3, $b: Unity.Mathematics.double3x4) : Unity.Mathematics.double2x4
            public static mul ($a: Unity.Mathematics.double2x4, $b: Unity.Mathematics.double4) : Unity.Mathematics.double2
            public static mul ($a: Unity.Mathematics.double2x4, $b: Unity.Mathematics.double4x2) : Unity.Mathematics.double2x2
            public static mul ($a: Unity.Mathematics.double2x4, $b: Unity.Mathematics.double4x3) : Unity.Mathematics.double2x3
            public static mul ($a: Unity.Mathematics.double2x4, $b: Unity.Mathematics.double4x4) : Unity.Mathematics.double2x4
            public static mul ($a: Unity.Mathematics.double3x2, $b: Unity.Mathematics.double2) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double3x2, $b: Unity.Mathematics.double2x2) : Unity.Mathematics.double3x2
            public static mul ($a: Unity.Mathematics.double3x2, $b: Unity.Mathematics.double2x3) : Unity.Mathematics.double3x3
            public static mul ($a: Unity.Mathematics.double3x2, $b: Unity.Mathematics.double2x4) : Unity.Mathematics.double3x4
            public static mul ($a: Unity.Mathematics.double3x3, $b: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double3x3, $b: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static mul ($a: Unity.Mathematics.double3x3, $b: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static mul ($a: Unity.Mathematics.double3x3, $b: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static mul ($a: Unity.Mathematics.double3x4, $b: Unity.Mathematics.double4) : Unity.Mathematics.double3
            public static mul ($a: Unity.Mathematics.double3x4, $b: Unity.Mathematics.double4x2) : Unity.Mathematics.double3x2
            public static mul ($a: Unity.Mathematics.double3x4, $b: Unity.Mathematics.double4x3) : Unity.Mathematics.double3x3
            public static mul ($a: Unity.Mathematics.double3x4, $b: Unity.Mathematics.double4x4) : Unity.Mathematics.double3x4
            public static mul ($a: Unity.Mathematics.double4x2, $b: Unity.Mathematics.double2) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double4x2, $b: Unity.Mathematics.double2x2) : Unity.Mathematics.double4x2
            public static mul ($a: Unity.Mathematics.double4x2, $b: Unity.Mathematics.double2x3) : Unity.Mathematics.double4x3
            public static mul ($a: Unity.Mathematics.double4x2, $b: Unity.Mathematics.double2x4) : Unity.Mathematics.double4x4
            public static mul ($a: Unity.Mathematics.double4x3, $b: Unity.Mathematics.double3) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double4x3, $b: Unity.Mathematics.double3x2) : Unity.Mathematics.double4x2
            public static mul ($a: Unity.Mathematics.double4x3, $b: Unity.Mathematics.double3x3) : Unity.Mathematics.double4x3
            public static mul ($a: Unity.Mathematics.double4x3, $b: Unity.Mathematics.double3x4) : Unity.Mathematics.double4x4
            public static mul ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static mul ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static mul ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static mul ($a: Unity.Mathematics.double4x4, $b: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static mul ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2) : number
            public static mul ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2x2) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2x3) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int2, $b: Unity.Mathematics.int2x4) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3) : number
            public static mul ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3x2) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3x3) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int3, $b: Unity.Mathematics.int3x4) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4) : number
            public static mul ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4x2) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4x3) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int4, $b: Unity.Mathematics.int4x4) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int2x2, $b: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int2x2, $b: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static mul ($a: Unity.Mathematics.int2x2, $b: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static mul ($a: Unity.Mathematics.int2x2, $b: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static mul ($a: Unity.Mathematics.int2x3, $b: Unity.Mathematics.int3) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int2x3, $b: Unity.Mathematics.int3x2) : Unity.Mathematics.int2x2
            public static mul ($a: Unity.Mathematics.int2x3, $b: Unity.Mathematics.int3x3) : Unity.Mathematics.int2x3
            public static mul ($a: Unity.Mathematics.int2x3, $b: Unity.Mathematics.int3x4) : Unity.Mathematics.int2x4
            public static mul ($a: Unity.Mathematics.int2x4, $b: Unity.Mathematics.int4) : Unity.Mathematics.int2
            public static mul ($a: Unity.Mathematics.int2x4, $b: Unity.Mathematics.int4x2) : Unity.Mathematics.int2x2
            public static mul ($a: Unity.Mathematics.int2x4, $b: Unity.Mathematics.int4x3) : Unity.Mathematics.int2x3
            public static mul ($a: Unity.Mathematics.int2x4, $b: Unity.Mathematics.int4x4) : Unity.Mathematics.int2x4
            public static mul ($a: Unity.Mathematics.int3x2, $b: Unity.Mathematics.int2) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int3x2, $b: Unity.Mathematics.int2x2) : Unity.Mathematics.int3x2
            public static mul ($a: Unity.Mathematics.int3x2, $b: Unity.Mathematics.int2x3) : Unity.Mathematics.int3x3
            public static mul ($a: Unity.Mathematics.int3x2, $b: Unity.Mathematics.int2x4) : Unity.Mathematics.int3x4
            public static mul ($a: Unity.Mathematics.int3x3, $b: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int3x3, $b: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static mul ($a: Unity.Mathematics.int3x3, $b: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static mul ($a: Unity.Mathematics.int3x3, $b: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static mul ($a: Unity.Mathematics.int3x4, $b: Unity.Mathematics.int4) : Unity.Mathematics.int3
            public static mul ($a: Unity.Mathematics.int3x4, $b: Unity.Mathematics.int4x2) : Unity.Mathematics.int3x2
            public static mul ($a: Unity.Mathematics.int3x4, $b: Unity.Mathematics.int4x3) : Unity.Mathematics.int3x3
            public static mul ($a: Unity.Mathematics.int3x4, $b: Unity.Mathematics.int4x4) : Unity.Mathematics.int3x4
            public static mul ($a: Unity.Mathematics.int4x2, $b: Unity.Mathematics.int2) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int4x2, $b: Unity.Mathematics.int2x2) : Unity.Mathematics.int4x2
            public static mul ($a: Unity.Mathematics.int4x2, $b: Unity.Mathematics.int2x3) : Unity.Mathematics.int4x3
            public static mul ($a: Unity.Mathematics.int4x2, $b: Unity.Mathematics.int2x4) : Unity.Mathematics.int4x4
            public static mul ($a: Unity.Mathematics.int4x3, $b: Unity.Mathematics.int3) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int4x3, $b: Unity.Mathematics.int3x2) : Unity.Mathematics.int4x2
            public static mul ($a: Unity.Mathematics.int4x3, $b: Unity.Mathematics.int3x3) : Unity.Mathematics.int4x3
            public static mul ($a: Unity.Mathematics.int4x3, $b: Unity.Mathematics.int3x4) : Unity.Mathematics.int4x4
            public static mul ($a: Unity.Mathematics.int4x4, $b: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static mul ($a: Unity.Mathematics.int4x4, $b: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static mul ($a: Unity.Mathematics.int4x4, $b: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static mul ($a: Unity.Mathematics.int4x4, $b: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static mul ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2) : number
            public static mul ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint2, $b: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3) : number
            public static mul ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint3, $b: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4) : number
            public static mul ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint4, $b: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint2x2, $b: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint2x2, $b: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static mul ($a: Unity.Mathematics.uint2x2, $b: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static mul ($a: Unity.Mathematics.uint2x2, $b: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static mul ($a: Unity.Mathematics.uint2x3, $b: Unity.Mathematics.uint3) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint2x3, $b: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint2x2
            public static mul ($a: Unity.Mathematics.uint2x3, $b: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint2x3
            public static mul ($a: Unity.Mathematics.uint2x3, $b: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint2x4
            public static mul ($a: Unity.Mathematics.uint2x4, $b: Unity.Mathematics.uint4) : Unity.Mathematics.uint2
            public static mul ($a: Unity.Mathematics.uint2x4, $b: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint2x2
            public static mul ($a: Unity.Mathematics.uint2x4, $b: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint2x3
            public static mul ($a: Unity.Mathematics.uint2x4, $b: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint2x4
            public static mul ($a: Unity.Mathematics.uint3x2, $b: Unity.Mathematics.uint2) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint3x2, $b: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint3x2
            public static mul ($a: Unity.Mathematics.uint3x2, $b: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint3x3
            public static mul ($a: Unity.Mathematics.uint3x2, $b: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint3x4
            public static mul ($a: Unity.Mathematics.uint3x3, $b: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint3x3, $b: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static mul ($a: Unity.Mathematics.uint3x3, $b: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static mul ($a: Unity.Mathematics.uint3x3, $b: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static mul ($a: Unity.Mathematics.uint3x4, $b: Unity.Mathematics.uint4) : Unity.Mathematics.uint3
            public static mul ($a: Unity.Mathematics.uint3x4, $b: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint3x2
            public static mul ($a: Unity.Mathematics.uint3x4, $b: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint3x3
            public static mul ($a: Unity.Mathematics.uint3x4, $b: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint3x4
            public static mul ($a: Unity.Mathematics.uint4x2, $b: Unity.Mathematics.uint2) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint4x2, $b: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint4x2
            public static mul ($a: Unity.Mathematics.uint4x2, $b: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint4x3
            public static mul ($a: Unity.Mathematics.uint4x2, $b: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint4x4
            public static mul ($a: Unity.Mathematics.uint4x3, $b: Unity.Mathematics.uint3) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint4x3, $b: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint4x2
            public static mul ($a: Unity.Mathematics.uint4x3, $b: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint4x3
            public static mul ($a: Unity.Mathematics.uint4x3, $b: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint4x4
            public static mul ($a: Unity.Mathematics.uint4x4, $b: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static mul ($a: Unity.Mathematics.uint4x4, $b: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static mul ($a: Unity.Mathematics.uint4x4, $b: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static mul ($a: Unity.Mathematics.uint4x4, $b: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static quaternion ($x: number, $y: number, $z: number, $w: number) : Unity.Mathematics.quaternion
            public static quaternion ($value: Unity.Mathematics.float4) : Unity.Mathematics.quaternion
            public static quaternion ($m: Unity.Mathematics.float3x3) : Unity.Mathematics.quaternion
            public static quaternion ($m: Unity.Mathematics.float4x4) : Unity.Mathematics.quaternion
            public static conjugate ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static inverse ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static dot ($a: Unity.Mathematics.quaternion, $b: Unity.Mathematics.quaternion) : number
            public static length ($q: Unity.Mathematics.quaternion) : number
            public static lengthsq ($q: Unity.Mathematics.quaternion) : number
            public static normalize ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static normalizesafe ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static normalizesafe ($q: Unity.Mathematics.quaternion, $defaultvalue: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static unitexp ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static exp ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static unitlog ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static log ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static mul ($a: Unity.Mathematics.quaternion, $b: Unity.Mathematics.quaternion) : Unity.Mathematics.quaternion
            public static mul ($q: Unity.Mathematics.quaternion, $v: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static rotate ($q: Unity.Mathematics.quaternion, $v: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static nlerp ($q1: Unity.Mathematics.quaternion, $q2: Unity.Mathematics.quaternion, $t: number) : Unity.Mathematics.quaternion
            public static slerp ($q1: Unity.Mathematics.quaternion, $q2: Unity.Mathematics.quaternion, $t: number) : Unity.Mathematics.quaternion
            public static hash ($q: Unity.Mathematics.quaternion) : number
            public static hashwide ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.uint4
            public static forward ($q: Unity.Mathematics.quaternion) : Unity.Mathematics.float3
            public static RigidTransform ($rot: Unity.Mathematics.quaternion, $pos: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static RigidTransform ($rotation: Unity.Mathematics.float3x3, $translation: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static RigidTransform ($transform: Unity.Mathematics.float4x4) : Unity.Mathematics.RigidTransform
            public static inverse ($t: Unity.Mathematics.RigidTransform) : Unity.Mathematics.RigidTransform
            public static mul ($a: Unity.Mathematics.RigidTransform, $b: Unity.Mathematics.RigidTransform) : Unity.Mathematics.RigidTransform
            public static mul ($a: Unity.Mathematics.RigidTransform, $pos: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static rotate ($a: Unity.Mathematics.RigidTransform, $dir: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static transform ($a: Unity.Mathematics.RigidTransform, $pos: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static hash ($t: Unity.Mathematics.RigidTransform) : number
            public static hashwide ($t: Unity.Mathematics.RigidTransform) : Unity.Mathematics.uint4
            public static uint2 ($x: number, $y: number) : Unity.Mathematics.uint2
            public static uint2 ($xy: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static uint2 ($v: number) : Unity.Mathematics.uint2
            public static uint2 ($v: boolean) : Unity.Mathematics.uint2
            public static uint2 ($v: Unity.Mathematics.bool2) : Unity.Mathematics.uint2
            public static uint2 ($v: Unity.Mathematics.int2) : Unity.Mathematics.uint2
            public static uint2 ($v: Unity.Mathematics.float2) : Unity.Mathematics.uint2
            public static uint2 ($v: Unity.Mathematics.double2) : Unity.Mathematics.uint2
            public static hash ($v: Unity.Mathematics.uint2) : number
            public static hashwide ($v: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.uint2, $right: Unity.Mathematics.uint2, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.uint2, $right: Unity.Mathematics.uint2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.uint2, $right: Unity.Mathematics.uint2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.uint2, $right: Unity.Mathematics.uint2, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint4
            public static uint2x2 ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2) : Unity.Mathematics.uint2x2
            public static uint2x2 ($m00: number, $m01: number, $m10: number, $m11: number) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: number) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: boolean) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.uint2x2
            public static uint2x2 ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.uint2x2
            public static transpose ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static hash ($v: Unity.Mathematics.uint2x2) : number
            public static hashwide ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2
            public static uint2x3 ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2, $c2: Unity.Mathematics.uint2) : Unity.Mathematics.uint2x3
            public static uint2x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: number) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: boolean) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.uint2x3
            public static uint2x3 ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.uint2x3
            public static transpose ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint3x2
            public static hash ($v: Unity.Mathematics.uint2x3) : number
            public static hashwide ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2
            public static uint2x4 ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2, $c2: Unity.Mathematics.uint2, $c3: Unity.Mathematics.uint2) : Unity.Mathematics.uint2x4
            public static uint2x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: number) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: boolean) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.uint2x4
            public static uint2x4 ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.uint2x4
            public static transpose ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint4x2
            public static hash ($v: Unity.Mathematics.uint2x4) : number
            public static hashwide ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2
            public static uint3 ($x: number, $y: number, $z: number) : Unity.Mathematics.uint3
            public static uint3 ($x: number, $yz: Unity.Mathematics.uint2) : Unity.Mathematics.uint3
            public static uint3 ($xy: Unity.Mathematics.uint2, $z: number) : Unity.Mathematics.uint3
            public static uint3 ($xyz: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static uint3 ($v: number) : Unity.Mathematics.uint3
            public static uint3 ($v: boolean) : Unity.Mathematics.uint3
            public static uint3 ($v: Unity.Mathematics.bool3) : Unity.Mathematics.uint3
            public static uint3 ($v: Unity.Mathematics.int3) : Unity.Mathematics.uint3
            public static uint3 ($v: Unity.Mathematics.float3) : Unity.Mathematics.uint3
            public static uint3 ($v: Unity.Mathematics.double3) : Unity.Mathematics.uint3
            public static hash ($v: Unity.Mathematics.uint3) : number
            public static hashwide ($v: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.uint3, $right: Unity.Mathematics.uint3, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.uint3, $right: Unity.Mathematics.uint3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.uint3, $right: Unity.Mathematics.uint3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.uint3, $right: Unity.Mathematics.uint3, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint4
            public static uint3x2 ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3) : Unity.Mathematics.uint3x2
            public static uint3x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: number) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: boolean) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.uint3x2
            public static uint3x2 ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.uint3x2
            public static transpose ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint2x3
            public static hash ($v: Unity.Mathematics.uint3x2) : number
            public static hashwide ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3
            public static uint3x3 ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3, $c2: Unity.Mathematics.uint3) : Unity.Mathematics.uint3x3
            public static uint3x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: number) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: boolean) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.uint3x3
            public static uint3x3 ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.uint3x3
            public static transpose ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static hash ($v: Unity.Mathematics.uint3x3) : number
            public static hashwide ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3
            public static uint3x4 ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3, $c2: Unity.Mathematics.uint3, $c3: Unity.Mathematics.uint3) : Unity.Mathematics.uint3x4
            public static uint3x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: number) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: boolean) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.uint3x4
            public static uint3x4 ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.uint3x4
            public static transpose ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint4x3
            public static hash ($v: Unity.Mathematics.uint3x4) : number
            public static hashwide ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3
            public static uint4 ($x: number, $y: number, $z: number, $w: number) : Unity.Mathematics.uint4
            public static uint4 ($x: number, $y: number, $zw: Unity.Mathematics.uint2) : Unity.Mathematics.uint4
            public static uint4 ($x: number, $yz: Unity.Mathematics.uint2, $w: number) : Unity.Mathematics.uint4
            public static uint4 ($x: number, $yzw: Unity.Mathematics.uint3) : Unity.Mathematics.uint4
            public static uint4 ($xy: Unity.Mathematics.uint2, $z: number, $w: number) : Unity.Mathematics.uint4
            public static uint4 ($xy: Unity.Mathematics.uint2, $zw: Unity.Mathematics.uint2) : Unity.Mathematics.uint4
            public static uint4 ($xyz: Unity.Mathematics.uint3, $w: number) : Unity.Mathematics.uint4
            public static uint4 ($xyzw: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static uint4 ($v: number) : Unity.Mathematics.uint4
            public static uint4 ($v: boolean) : Unity.Mathematics.uint4
            public static uint4 ($v: Unity.Mathematics.bool4) : Unity.Mathematics.uint4
            public static uint4 ($v: Unity.Mathematics.int4) : Unity.Mathematics.uint4
            public static uint4 ($v: Unity.Mathematics.float4) : Unity.Mathematics.uint4
            public static uint4 ($v: Unity.Mathematics.double4) : Unity.Mathematics.uint4
            public static hash ($v: Unity.Mathematics.uint4) : number
            public static hashwide ($v: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static shuffle ($left: Unity.Mathematics.uint4, $right: Unity.Mathematics.uint4, $x: Unity.Mathematics.math.ShuffleComponent) : number
            public static shuffle ($left: Unity.Mathematics.uint4, $right: Unity.Mathematics.uint4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint2
            public static shuffle ($left: Unity.Mathematics.uint4, $right: Unity.Mathematics.uint4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint3
            public static shuffle ($left: Unity.Mathematics.uint4, $right: Unity.Mathematics.uint4, $x: Unity.Mathematics.math.ShuffleComponent, $y: Unity.Mathematics.math.ShuffleComponent, $z: Unity.Mathematics.math.ShuffleComponent, $w: Unity.Mathematics.math.ShuffleComponent) : Unity.Mathematics.uint4
            public static uint4x2 ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4) : Unity.Mathematics.uint4x2
            public static uint4x2 ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: number) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: boolean) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.uint4x2
            public static uint4x2 ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.uint4x2
            public static transpose ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint2x4
            public static hash ($v: Unity.Mathematics.uint4x2) : number
            public static hashwide ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4
            public static uint4x3 ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4, $c2: Unity.Mathematics.uint4) : Unity.Mathematics.uint4x3
            public static uint4x3 ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: number) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: boolean) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.uint4x3
            public static uint4x3 ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.uint4x3
            public static transpose ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint3x4
            public static hash ($v: Unity.Mathematics.uint4x3) : number
            public static hashwide ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4
            public static uint4x4 ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4, $c2: Unity.Mathematics.uint4, $c3: Unity.Mathematics.uint4) : Unity.Mathematics.uint4x4
            public static uint4x4 ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: number) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: boolean) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.uint4x4
            public static uint4x4 ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.uint4x4
            public static transpose ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static hash ($v: Unity.Mathematics.uint4x4) : number
            public static hashwide ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4
        }
        class uint2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint2>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public static zero : Unity.Mathematics.uint2
            public get xxxx(): Unity.Mathematics.uint4;
            public get xxxy(): Unity.Mathematics.uint4;
            public get xxyx(): Unity.Mathematics.uint4;
            public get xxyy(): Unity.Mathematics.uint4;
            public get xyxx(): Unity.Mathematics.uint4;
            public get xyxy(): Unity.Mathematics.uint4;
            public get xyyx(): Unity.Mathematics.uint4;
            public get xyyy(): Unity.Mathematics.uint4;
            public get yxxx(): Unity.Mathematics.uint4;
            public get yxxy(): Unity.Mathematics.uint4;
            public get yxyx(): Unity.Mathematics.uint4;
            public get yxyy(): Unity.Mathematics.uint4;
            public get yyxx(): Unity.Mathematics.uint4;
            public get yyxy(): Unity.Mathematics.uint4;
            public get yyyx(): Unity.Mathematics.uint4;
            public get yyyy(): Unity.Mathematics.uint4;
            public get xxx(): Unity.Mathematics.uint3;
            public get xxy(): Unity.Mathematics.uint3;
            public get xyx(): Unity.Mathematics.uint3;
            public get xyy(): Unity.Mathematics.uint3;
            public get yxx(): Unity.Mathematics.uint3;
            public get yxy(): Unity.Mathematics.uint3;
            public get yyx(): Unity.Mathematics.uint3;
            public get yyy(): Unity.Mathematics.uint3;
            public get xx(): Unity.Mathematics.uint2;
            public get xy(): Unity.Mathematics.uint2;
            public set xy(value: Unity.Mathematics.uint2);
            public get yx(): Unity.Mathematics.uint2;
            public set yx(value: Unity.Mathematics.uint2);
            public get yy(): Unity.Mathematics.uint2;
            public static op_Implicit ($v: number) : Unity.Mathematics.uint2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint2
            public static op_Explicit ($v: Unity.Mathematics.bool2) : Unity.Mathematics.uint2
            public static op_Explicit ($v: number) : Unity.Mathematics.uint2
            public static op_Explicit ($v: Unity.Mathematics.int2) : Unity.Mathematics.uint2
            public static op_Explicit ($v: Unity.Mathematics.float2) : Unity.Mathematics.uint2
            public static op_Explicit ($v: Unity.Mathematics.double2) : Unity.Mathematics.uint2
            public static op_Multiply ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Multiply ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Addition ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Addition ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Division ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Division ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Modulus ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Modulus ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Increment ($val: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_Decrement ($val: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_LessThan ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_UnaryNegation ($val: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_UnaryPlus ($val: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_LeftShift ($x: Unity.Mathematics.uint2, $n: number) : Unity.Mathematics.uint2
            public static op_RightShift ($x: Unity.Mathematics.uint2, $n: number) : Unity.Mathematics.uint2
            public static op_Equality ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.bool2
            public static op_OnesComplement ($val: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2, $rhs: number) : Unity.Mathematics.uint2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.uint2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number)
            public constructor ($xy: Unity.Mathematics.uint2)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2)
            public constructor ($v: Unity.Mathematics.int2)
            public constructor ($v: Unity.Mathematics.float2)
            public constructor ($v: Unity.Mathematics.double2)
        }
        class bool2x2 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool2x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool2
            public c1 : Unity.Mathematics.bool2
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.bool2x2, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.bool2x2, $rhs: boolean) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x2, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x2, $rhs: boolean) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_LogicalNot ($val: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x2, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x2, $rhs: boolean) : Unity.Mathematics.bool2x2
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x2, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x2, $rhs: boolean) : Unity.Mathematics.bool2x2
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x2, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x2, $rhs: boolean) : Unity.Mathematics.bool2x2
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x2) : Unity.Mathematics.bool2x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool2>
            public Equals ($rhs: Unity.Mathematics.bool2x2) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2)
            public constructor ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean)
            public constructor ($v: boolean)
        }
        class bool2x3 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool2x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool2
            public c1 : Unity.Mathematics.bool2
            public c2 : Unity.Mathematics.bool2
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.bool2x3, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.bool2x3, $rhs: boolean) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x3, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x3, $rhs: boolean) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_LogicalNot ($val: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x3, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x3, $rhs: boolean) : Unity.Mathematics.bool2x3
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x3, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x3, $rhs: boolean) : Unity.Mathematics.bool2x3
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x3, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x3, $rhs: boolean) : Unity.Mathematics.bool2x3
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x3) : Unity.Mathematics.bool2x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool2>
            public Equals ($rhs: Unity.Mathematics.bool2x3) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2, $c2: Unity.Mathematics.bool2)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean)
            public constructor ($v: boolean)
        }
        class bool3x2 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool3x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool3
            public c1 : Unity.Mathematics.bool3
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.bool3x2, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.bool3x2, $rhs: boolean) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x2, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x2, $rhs: boolean) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_LogicalNot ($val: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x2, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x2, $rhs: boolean) : Unity.Mathematics.bool3x2
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x2, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x2, $rhs: boolean) : Unity.Mathematics.bool3x2
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x2, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x2, $rhs: boolean) : Unity.Mathematics.bool3x2
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x2) : Unity.Mathematics.bool3x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool3>
            public Equals ($rhs: Unity.Mathematics.bool3x2) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3)
            public constructor ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean, $m20: boolean, $m21: boolean)
            public constructor ($v: boolean)
        }
        class bool2x4 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool2x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool2
            public c1 : Unity.Mathematics.bool2
            public c2 : Unity.Mathematics.bool2
            public c3 : Unity.Mathematics.bool2
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.bool2x4, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.bool2x4, $rhs: boolean) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x4, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool2x4, $rhs: boolean) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_LogicalNot ($val: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x4, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool2x4, $rhs: boolean) : Unity.Mathematics.bool2x4
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x4, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool2x4, $rhs: boolean) : Unity.Mathematics.bool2x4
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x4, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool2x4, $rhs: boolean) : Unity.Mathematics.bool2x4
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool2x4) : Unity.Mathematics.bool2x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool2>
            public Equals ($rhs: Unity.Mathematics.bool2x4) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool2, $c1: Unity.Mathematics.bool2, $c2: Unity.Mathematics.bool2, $c3: Unity.Mathematics.bool2)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean)
            public constructor ($v: boolean)
        }
        class bool4x2 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool4x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool4
            public c1 : Unity.Mathematics.bool4
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.bool4x2, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.bool4x2, $rhs: boolean) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x2, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x2, $rhs: boolean) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_LogicalNot ($val: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x2, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x2, $rhs: boolean) : Unity.Mathematics.bool4x2
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x2, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x2, $rhs: boolean) : Unity.Mathematics.bool4x2
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x2, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x2, $rhs: boolean) : Unity.Mathematics.bool4x2
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x2) : Unity.Mathematics.bool4x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool4>
            public Equals ($rhs: Unity.Mathematics.bool4x2) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4)
            public constructor ($m00: boolean, $m01: boolean, $m10: boolean, $m11: boolean, $m20: boolean, $m21: boolean, $m30: boolean, $m31: boolean)
            public constructor ($v: boolean)
        }
        class uint3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint3>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public static zero : Unity.Mathematics.uint3
            public get xxxx(): Unity.Mathematics.uint4;
            public get xxxy(): Unity.Mathematics.uint4;
            public get xxxz(): Unity.Mathematics.uint4;
            public get xxyx(): Unity.Mathematics.uint4;
            public get xxyy(): Unity.Mathematics.uint4;
            public get xxyz(): Unity.Mathematics.uint4;
            public get xxzx(): Unity.Mathematics.uint4;
            public get xxzy(): Unity.Mathematics.uint4;
            public get xxzz(): Unity.Mathematics.uint4;
            public get xyxx(): Unity.Mathematics.uint4;
            public get xyxy(): Unity.Mathematics.uint4;
            public get xyxz(): Unity.Mathematics.uint4;
            public get xyyx(): Unity.Mathematics.uint4;
            public get xyyy(): Unity.Mathematics.uint4;
            public get xyyz(): Unity.Mathematics.uint4;
            public get xyzx(): Unity.Mathematics.uint4;
            public get xyzy(): Unity.Mathematics.uint4;
            public get xyzz(): Unity.Mathematics.uint4;
            public get xzxx(): Unity.Mathematics.uint4;
            public get xzxy(): Unity.Mathematics.uint4;
            public get xzxz(): Unity.Mathematics.uint4;
            public get xzyx(): Unity.Mathematics.uint4;
            public get xzyy(): Unity.Mathematics.uint4;
            public get xzyz(): Unity.Mathematics.uint4;
            public get xzzx(): Unity.Mathematics.uint4;
            public get xzzy(): Unity.Mathematics.uint4;
            public get xzzz(): Unity.Mathematics.uint4;
            public get yxxx(): Unity.Mathematics.uint4;
            public get yxxy(): Unity.Mathematics.uint4;
            public get yxxz(): Unity.Mathematics.uint4;
            public get yxyx(): Unity.Mathematics.uint4;
            public get yxyy(): Unity.Mathematics.uint4;
            public get yxyz(): Unity.Mathematics.uint4;
            public get yxzx(): Unity.Mathematics.uint4;
            public get yxzy(): Unity.Mathematics.uint4;
            public get yxzz(): Unity.Mathematics.uint4;
            public get yyxx(): Unity.Mathematics.uint4;
            public get yyxy(): Unity.Mathematics.uint4;
            public get yyxz(): Unity.Mathematics.uint4;
            public get yyyx(): Unity.Mathematics.uint4;
            public get yyyy(): Unity.Mathematics.uint4;
            public get yyyz(): Unity.Mathematics.uint4;
            public get yyzx(): Unity.Mathematics.uint4;
            public get yyzy(): Unity.Mathematics.uint4;
            public get yyzz(): Unity.Mathematics.uint4;
            public get yzxx(): Unity.Mathematics.uint4;
            public get yzxy(): Unity.Mathematics.uint4;
            public get yzxz(): Unity.Mathematics.uint4;
            public get yzyx(): Unity.Mathematics.uint4;
            public get yzyy(): Unity.Mathematics.uint4;
            public get yzyz(): Unity.Mathematics.uint4;
            public get yzzx(): Unity.Mathematics.uint4;
            public get yzzy(): Unity.Mathematics.uint4;
            public get yzzz(): Unity.Mathematics.uint4;
            public get zxxx(): Unity.Mathematics.uint4;
            public get zxxy(): Unity.Mathematics.uint4;
            public get zxxz(): Unity.Mathematics.uint4;
            public get zxyx(): Unity.Mathematics.uint4;
            public get zxyy(): Unity.Mathematics.uint4;
            public get zxyz(): Unity.Mathematics.uint4;
            public get zxzx(): Unity.Mathematics.uint4;
            public get zxzy(): Unity.Mathematics.uint4;
            public get zxzz(): Unity.Mathematics.uint4;
            public get zyxx(): Unity.Mathematics.uint4;
            public get zyxy(): Unity.Mathematics.uint4;
            public get zyxz(): Unity.Mathematics.uint4;
            public get zyyx(): Unity.Mathematics.uint4;
            public get zyyy(): Unity.Mathematics.uint4;
            public get zyyz(): Unity.Mathematics.uint4;
            public get zyzx(): Unity.Mathematics.uint4;
            public get zyzy(): Unity.Mathematics.uint4;
            public get zyzz(): Unity.Mathematics.uint4;
            public get zzxx(): Unity.Mathematics.uint4;
            public get zzxy(): Unity.Mathematics.uint4;
            public get zzxz(): Unity.Mathematics.uint4;
            public get zzyx(): Unity.Mathematics.uint4;
            public get zzyy(): Unity.Mathematics.uint4;
            public get zzyz(): Unity.Mathematics.uint4;
            public get zzzx(): Unity.Mathematics.uint4;
            public get zzzy(): Unity.Mathematics.uint4;
            public get zzzz(): Unity.Mathematics.uint4;
            public get xxx(): Unity.Mathematics.uint3;
            public get xxy(): Unity.Mathematics.uint3;
            public get xxz(): Unity.Mathematics.uint3;
            public get xyx(): Unity.Mathematics.uint3;
            public get xyy(): Unity.Mathematics.uint3;
            public get xyz(): Unity.Mathematics.uint3;
            public set xyz(value: Unity.Mathematics.uint3);
            public get xzx(): Unity.Mathematics.uint3;
            public get xzy(): Unity.Mathematics.uint3;
            public set xzy(value: Unity.Mathematics.uint3);
            public get xzz(): Unity.Mathematics.uint3;
            public get yxx(): Unity.Mathematics.uint3;
            public get yxy(): Unity.Mathematics.uint3;
            public get yxz(): Unity.Mathematics.uint3;
            public set yxz(value: Unity.Mathematics.uint3);
            public get yyx(): Unity.Mathematics.uint3;
            public get yyy(): Unity.Mathematics.uint3;
            public get yyz(): Unity.Mathematics.uint3;
            public get yzx(): Unity.Mathematics.uint3;
            public set yzx(value: Unity.Mathematics.uint3);
            public get yzy(): Unity.Mathematics.uint3;
            public get yzz(): Unity.Mathematics.uint3;
            public get zxx(): Unity.Mathematics.uint3;
            public get zxy(): Unity.Mathematics.uint3;
            public set zxy(value: Unity.Mathematics.uint3);
            public get zxz(): Unity.Mathematics.uint3;
            public get zyx(): Unity.Mathematics.uint3;
            public set zyx(value: Unity.Mathematics.uint3);
            public get zyy(): Unity.Mathematics.uint3;
            public get zyz(): Unity.Mathematics.uint3;
            public get zzx(): Unity.Mathematics.uint3;
            public get zzy(): Unity.Mathematics.uint3;
            public get zzz(): Unity.Mathematics.uint3;
            public get xx(): Unity.Mathematics.uint2;
            public get xy(): Unity.Mathematics.uint2;
            public set xy(value: Unity.Mathematics.uint2);
            public get xz(): Unity.Mathematics.uint2;
            public set xz(value: Unity.Mathematics.uint2);
            public get yx(): Unity.Mathematics.uint2;
            public set yx(value: Unity.Mathematics.uint2);
            public get yy(): Unity.Mathematics.uint2;
            public get yz(): Unity.Mathematics.uint2;
            public set yz(value: Unity.Mathematics.uint2);
            public get zx(): Unity.Mathematics.uint2;
            public set zx(value: Unity.Mathematics.uint2);
            public get zy(): Unity.Mathematics.uint2;
            public set zy(value: Unity.Mathematics.uint2);
            public get zz(): Unity.Mathematics.uint2;
            public static op_Implicit ($v: number) : Unity.Mathematics.uint3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint3
            public static op_Explicit ($v: Unity.Mathematics.bool3) : Unity.Mathematics.uint3
            public static op_Explicit ($v: number) : Unity.Mathematics.uint3
            public static op_Explicit ($v: Unity.Mathematics.int3) : Unity.Mathematics.uint3
            public static op_Explicit ($v: Unity.Mathematics.float3) : Unity.Mathematics.uint3
            public static op_Explicit ($v: Unity.Mathematics.double3) : Unity.Mathematics.uint3
            public static op_Multiply ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Multiply ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Addition ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Addition ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Division ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Division ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Modulus ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Modulus ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Increment ($val: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_Decrement ($val: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_LessThan ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_UnaryNegation ($val: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_UnaryPlus ($val: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_LeftShift ($x: Unity.Mathematics.uint3, $n: number) : Unity.Mathematics.uint3
            public static op_RightShift ($x: Unity.Mathematics.uint3, $n: number) : Unity.Mathematics.uint3
            public static op_Equality ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.bool3
            public static op_OnesComplement ($val: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3, $rhs: number) : Unity.Mathematics.uint3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.uint3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $yz: Unity.Mathematics.uint2)
            public constructor ($xy: Unity.Mathematics.uint2, $z: number)
            public constructor ($xyz: Unity.Mathematics.uint3)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3)
            public constructor ($v: Unity.Mathematics.int3)
            public constructor ($v: Unity.Mathematics.float3)
            public constructor ($v: Unity.Mathematics.double3)
        }
        class bool3x3 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool3x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool3
            public c1 : Unity.Mathematics.bool3
            public c2 : Unity.Mathematics.bool3
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.bool3x3, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.bool3x3, $rhs: boolean) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x3, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x3, $rhs: boolean) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_LogicalNot ($val: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x3, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x3, $rhs: boolean) : Unity.Mathematics.bool3x3
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x3, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x3, $rhs: boolean) : Unity.Mathematics.bool3x3
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x3, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x3, $rhs: boolean) : Unity.Mathematics.bool3x3
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x3) : Unity.Mathematics.bool3x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool3>
            public Equals ($rhs: Unity.Mathematics.bool3x3) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3, $c2: Unity.Mathematics.bool3)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m20: boolean, $m21: boolean, $m22: boolean)
            public constructor ($v: boolean)
        }
        class bool3x4 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool3x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool3
            public c1 : Unity.Mathematics.bool3
            public c2 : Unity.Mathematics.bool3
            public c3 : Unity.Mathematics.bool3
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.bool3x4, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.bool3x4, $rhs: boolean) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x4, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool3x4, $rhs: boolean) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_LogicalNot ($val: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x4, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool3x4, $rhs: boolean) : Unity.Mathematics.bool3x4
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x4, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool3x4, $rhs: boolean) : Unity.Mathematics.bool3x4
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x4, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool3x4, $rhs: boolean) : Unity.Mathematics.bool3x4
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool3x4) : Unity.Mathematics.bool3x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool3>
            public Equals ($rhs: Unity.Mathematics.bool3x4) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool3, $c1: Unity.Mathematics.bool3, $c2: Unity.Mathematics.bool3, $c3: Unity.Mathematics.bool3)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m23: boolean)
            public constructor ($v: boolean)
        }
        class bool4x3 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool4x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool4
            public c1 : Unity.Mathematics.bool4
            public c2 : Unity.Mathematics.bool4
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.bool4x3, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.bool4x3, $rhs: boolean) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x3, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x3, $rhs: boolean) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_LogicalNot ($val: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x3, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x3, $rhs: boolean) : Unity.Mathematics.bool4x3
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x3, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x3, $rhs: boolean) : Unity.Mathematics.bool4x3
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x3, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x3, $rhs: boolean) : Unity.Mathematics.bool4x3
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x3) : Unity.Mathematics.bool4x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool4>
            public Equals ($rhs: Unity.Mathematics.bool4x3) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4, $c2: Unity.Mathematics.bool4)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m30: boolean, $m31: boolean, $m32: boolean)
            public constructor ($v: boolean)
        }
        class uint4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint4>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public w : number
            public static zero : Unity.Mathematics.uint4
            public get xxxx(): Unity.Mathematics.uint4;
            public get xxxy(): Unity.Mathematics.uint4;
            public get xxxz(): Unity.Mathematics.uint4;
            public get xxxw(): Unity.Mathematics.uint4;
            public get xxyx(): Unity.Mathematics.uint4;
            public get xxyy(): Unity.Mathematics.uint4;
            public get xxyz(): Unity.Mathematics.uint4;
            public get xxyw(): Unity.Mathematics.uint4;
            public get xxzx(): Unity.Mathematics.uint4;
            public get xxzy(): Unity.Mathematics.uint4;
            public get xxzz(): Unity.Mathematics.uint4;
            public get xxzw(): Unity.Mathematics.uint4;
            public get xxwx(): Unity.Mathematics.uint4;
            public get xxwy(): Unity.Mathematics.uint4;
            public get xxwz(): Unity.Mathematics.uint4;
            public get xxww(): Unity.Mathematics.uint4;
            public get xyxx(): Unity.Mathematics.uint4;
            public get xyxy(): Unity.Mathematics.uint4;
            public get xyxz(): Unity.Mathematics.uint4;
            public get xyxw(): Unity.Mathematics.uint4;
            public get xyyx(): Unity.Mathematics.uint4;
            public get xyyy(): Unity.Mathematics.uint4;
            public get xyyz(): Unity.Mathematics.uint4;
            public get xyyw(): Unity.Mathematics.uint4;
            public get xyzx(): Unity.Mathematics.uint4;
            public get xyzy(): Unity.Mathematics.uint4;
            public get xyzz(): Unity.Mathematics.uint4;
            public get xyzw(): Unity.Mathematics.uint4;
            public set xyzw(value: Unity.Mathematics.uint4);
            public get xywx(): Unity.Mathematics.uint4;
            public get xywy(): Unity.Mathematics.uint4;
            public get xywz(): Unity.Mathematics.uint4;
            public set xywz(value: Unity.Mathematics.uint4);
            public get xyww(): Unity.Mathematics.uint4;
            public get xzxx(): Unity.Mathematics.uint4;
            public get xzxy(): Unity.Mathematics.uint4;
            public get xzxz(): Unity.Mathematics.uint4;
            public get xzxw(): Unity.Mathematics.uint4;
            public get xzyx(): Unity.Mathematics.uint4;
            public get xzyy(): Unity.Mathematics.uint4;
            public get xzyz(): Unity.Mathematics.uint4;
            public get xzyw(): Unity.Mathematics.uint4;
            public set xzyw(value: Unity.Mathematics.uint4);
            public get xzzx(): Unity.Mathematics.uint4;
            public get xzzy(): Unity.Mathematics.uint4;
            public get xzzz(): Unity.Mathematics.uint4;
            public get xzzw(): Unity.Mathematics.uint4;
            public get xzwx(): Unity.Mathematics.uint4;
            public get xzwy(): Unity.Mathematics.uint4;
            public set xzwy(value: Unity.Mathematics.uint4);
            public get xzwz(): Unity.Mathematics.uint4;
            public get xzww(): Unity.Mathematics.uint4;
            public get xwxx(): Unity.Mathematics.uint4;
            public get xwxy(): Unity.Mathematics.uint4;
            public get xwxz(): Unity.Mathematics.uint4;
            public get xwxw(): Unity.Mathematics.uint4;
            public get xwyx(): Unity.Mathematics.uint4;
            public get xwyy(): Unity.Mathematics.uint4;
            public get xwyz(): Unity.Mathematics.uint4;
            public set xwyz(value: Unity.Mathematics.uint4);
            public get xwyw(): Unity.Mathematics.uint4;
            public get xwzx(): Unity.Mathematics.uint4;
            public get xwzy(): Unity.Mathematics.uint4;
            public set xwzy(value: Unity.Mathematics.uint4);
            public get xwzz(): Unity.Mathematics.uint4;
            public get xwzw(): Unity.Mathematics.uint4;
            public get xwwx(): Unity.Mathematics.uint4;
            public get xwwy(): Unity.Mathematics.uint4;
            public get xwwz(): Unity.Mathematics.uint4;
            public get xwww(): Unity.Mathematics.uint4;
            public get yxxx(): Unity.Mathematics.uint4;
            public get yxxy(): Unity.Mathematics.uint4;
            public get yxxz(): Unity.Mathematics.uint4;
            public get yxxw(): Unity.Mathematics.uint4;
            public get yxyx(): Unity.Mathematics.uint4;
            public get yxyy(): Unity.Mathematics.uint4;
            public get yxyz(): Unity.Mathematics.uint4;
            public get yxyw(): Unity.Mathematics.uint4;
            public get yxzx(): Unity.Mathematics.uint4;
            public get yxzy(): Unity.Mathematics.uint4;
            public get yxzz(): Unity.Mathematics.uint4;
            public get yxzw(): Unity.Mathematics.uint4;
            public set yxzw(value: Unity.Mathematics.uint4);
            public get yxwx(): Unity.Mathematics.uint4;
            public get yxwy(): Unity.Mathematics.uint4;
            public get yxwz(): Unity.Mathematics.uint4;
            public set yxwz(value: Unity.Mathematics.uint4);
            public get yxww(): Unity.Mathematics.uint4;
            public get yyxx(): Unity.Mathematics.uint4;
            public get yyxy(): Unity.Mathematics.uint4;
            public get yyxz(): Unity.Mathematics.uint4;
            public get yyxw(): Unity.Mathematics.uint4;
            public get yyyx(): Unity.Mathematics.uint4;
            public get yyyy(): Unity.Mathematics.uint4;
            public get yyyz(): Unity.Mathematics.uint4;
            public get yyyw(): Unity.Mathematics.uint4;
            public get yyzx(): Unity.Mathematics.uint4;
            public get yyzy(): Unity.Mathematics.uint4;
            public get yyzz(): Unity.Mathematics.uint4;
            public get yyzw(): Unity.Mathematics.uint4;
            public get yywx(): Unity.Mathematics.uint4;
            public get yywy(): Unity.Mathematics.uint4;
            public get yywz(): Unity.Mathematics.uint4;
            public get yyww(): Unity.Mathematics.uint4;
            public get yzxx(): Unity.Mathematics.uint4;
            public get yzxy(): Unity.Mathematics.uint4;
            public get yzxz(): Unity.Mathematics.uint4;
            public get yzxw(): Unity.Mathematics.uint4;
            public set yzxw(value: Unity.Mathematics.uint4);
            public get yzyx(): Unity.Mathematics.uint4;
            public get yzyy(): Unity.Mathematics.uint4;
            public get yzyz(): Unity.Mathematics.uint4;
            public get yzyw(): Unity.Mathematics.uint4;
            public get yzzx(): Unity.Mathematics.uint4;
            public get yzzy(): Unity.Mathematics.uint4;
            public get yzzz(): Unity.Mathematics.uint4;
            public get yzzw(): Unity.Mathematics.uint4;
            public get yzwx(): Unity.Mathematics.uint4;
            public set yzwx(value: Unity.Mathematics.uint4);
            public get yzwy(): Unity.Mathematics.uint4;
            public get yzwz(): Unity.Mathematics.uint4;
            public get yzww(): Unity.Mathematics.uint4;
            public get ywxx(): Unity.Mathematics.uint4;
            public get ywxy(): Unity.Mathematics.uint4;
            public get ywxz(): Unity.Mathematics.uint4;
            public set ywxz(value: Unity.Mathematics.uint4);
            public get ywxw(): Unity.Mathematics.uint4;
            public get ywyx(): Unity.Mathematics.uint4;
            public get ywyy(): Unity.Mathematics.uint4;
            public get ywyz(): Unity.Mathematics.uint4;
            public get ywyw(): Unity.Mathematics.uint4;
            public get ywzx(): Unity.Mathematics.uint4;
            public set ywzx(value: Unity.Mathematics.uint4);
            public get ywzy(): Unity.Mathematics.uint4;
            public get ywzz(): Unity.Mathematics.uint4;
            public get ywzw(): Unity.Mathematics.uint4;
            public get ywwx(): Unity.Mathematics.uint4;
            public get ywwy(): Unity.Mathematics.uint4;
            public get ywwz(): Unity.Mathematics.uint4;
            public get ywww(): Unity.Mathematics.uint4;
            public get zxxx(): Unity.Mathematics.uint4;
            public get zxxy(): Unity.Mathematics.uint4;
            public get zxxz(): Unity.Mathematics.uint4;
            public get zxxw(): Unity.Mathematics.uint4;
            public get zxyx(): Unity.Mathematics.uint4;
            public get zxyy(): Unity.Mathematics.uint4;
            public get zxyz(): Unity.Mathematics.uint4;
            public get zxyw(): Unity.Mathematics.uint4;
            public set zxyw(value: Unity.Mathematics.uint4);
            public get zxzx(): Unity.Mathematics.uint4;
            public get zxzy(): Unity.Mathematics.uint4;
            public get zxzz(): Unity.Mathematics.uint4;
            public get zxzw(): Unity.Mathematics.uint4;
            public get zxwx(): Unity.Mathematics.uint4;
            public get zxwy(): Unity.Mathematics.uint4;
            public set zxwy(value: Unity.Mathematics.uint4);
            public get zxwz(): Unity.Mathematics.uint4;
            public get zxww(): Unity.Mathematics.uint4;
            public get zyxx(): Unity.Mathematics.uint4;
            public get zyxy(): Unity.Mathematics.uint4;
            public get zyxz(): Unity.Mathematics.uint4;
            public get zyxw(): Unity.Mathematics.uint4;
            public set zyxw(value: Unity.Mathematics.uint4);
            public get zyyx(): Unity.Mathematics.uint4;
            public get zyyy(): Unity.Mathematics.uint4;
            public get zyyz(): Unity.Mathematics.uint4;
            public get zyyw(): Unity.Mathematics.uint4;
            public get zyzx(): Unity.Mathematics.uint4;
            public get zyzy(): Unity.Mathematics.uint4;
            public get zyzz(): Unity.Mathematics.uint4;
            public get zyzw(): Unity.Mathematics.uint4;
            public get zywx(): Unity.Mathematics.uint4;
            public set zywx(value: Unity.Mathematics.uint4);
            public get zywy(): Unity.Mathematics.uint4;
            public get zywz(): Unity.Mathematics.uint4;
            public get zyww(): Unity.Mathematics.uint4;
            public get zzxx(): Unity.Mathematics.uint4;
            public get zzxy(): Unity.Mathematics.uint4;
            public get zzxz(): Unity.Mathematics.uint4;
            public get zzxw(): Unity.Mathematics.uint4;
            public get zzyx(): Unity.Mathematics.uint4;
            public get zzyy(): Unity.Mathematics.uint4;
            public get zzyz(): Unity.Mathematics.uint4;
            public get zzyw(): Unity.Mathematics.uint4;
            public get zzzx(): Unity.Mathematics.uint4;
            public get zzzy(): Unity.Mathematics.uint4;
            public get zzzz(): Unity.Mathematics.uint4;
            public get zzzw(): Unity.Mathematics.uint4;
            public get zzwx(): Unity.Mathematics.uint4;
            public get zzwy(): Unity.Mathematics.uint4;
            public get zzwz(): Unity.Mathematics.uint4;
            public get zzww(): Unity.Mathematics.uint4;
            public get zwxx(): Unity.Mathematics.uint4;
            public get zwxy(): Unity.Mathematics.uint4;
            public set zwxy(value: Unity.Mathematics.uint4);
            public get zwxz(): Unity.Mathematics.uint4;
            public get zwxw(): Unity.Mathematics.uint4;
            public get zwyx(): Unity.Mathematics.uint4;
            public set zwyx(value: Unity.Mathematics.uint4);
            public get zwyy(): Unity.Mathematics.uint4;
            public get zwyz(): Unity.Mathematics.uint4;
            public get zwyw(): Unity.Mathematics.uint4;
            public get zwzx(): Unity.Mathematics.uint4;
            public get zwzy(): Unity.Mathematics.uint4;
            public get zwzz(): Unity.Mathematics.uint4;
            public get zwzw(): Unity.Mathematics.uint4;
            public get zwwx(): Unity.Mathematics.uint4;
            public get zwwy(): Unity.Mathematics.uint4;
            public get zwwz(): Unity.Mathematics.uint4;
            public get zwww(): Unity.Mathematics.uint4;
            public get wxxx(): Unity.Mathematics.uint4;
            public get wxxy(): Unity.Mathematics.uint4;
            public get wxxz(): Unity.Mathematics.uint4;
            public get wxxw(): Unity.Mathematics.uint4;
            public get wxyx(): Unity.Mathematics.uint4;
            public get wxyy(): Unity.Mathematics.uint4;
            public get wxyz(): Unity.Mathematics.uint4;
            public set wxyz(value: Unity.Mathematics.uint4);
            public get wxyw(): Unity.Mathematics.uint4;
            public get wxzx(): Unity.Mathematics.uint4;
            public get wxzy(): Unity.Mathematics.uint4;
            public set wxzy(value: Unity.Mathematics.uint4);
            public get wxzz(): Unity.Mathematics.uint4;
            public get wxzw(): Unity.Mathematics.uint4;
            public get wxwx(): Unity.Mathematics.uint4;
            public get wxwy(): Unity.Mathematics.uint4;
            public get wxwz(): Unity.Mathematics.uint4;
            public get wxww(): Unity.Mathematics.uint4;
            public get wyxx(): Unity.Mathematics.uint4;
            public get wyxy(): Unity.Mathematics.uint4;
            public get wyxz(): Unity.Mathematics.uint4;
            public set wyxz(value: Unity.Mathematics.uint4);
            public get wyxw(): Unity.Mathematics.uint4;
            public get wyyx(): Unity.Mathematics.uint4;
            public get wyyy(): Unity.Mathematics.uint4;
            public get wyyz(): Unity.Mathematics.uint4;
            public get wyyw(): Unity.Mathematics.uint4;
            public get wyzx(): Unity.Mathematics.uint4;
            public set wyzx(value: Unity.Mathematics.uint4);
            public get wyzy(): Unity.Mathematics.uint4;
            public get wyzz(): Unity.Mathematics.uint4;
            public get wyzw(): Unity.Mathematics.uint4;
            public get wywx(): Unity.Mathematics.uint4;
            public get wywy(): Unity.Mathematics.uint4;
            public get wywz(): Unity.Mathematics.uint4;
            public get wyww(): Unity.Mathematics.uint4;
            public get wzxx(): Unity.Mathematics.uint4;
            public get wzxy(): Unity.Mathematics.uint4;
            public set wzxy(value: Unity.Mathematics.uint4);
            public get wzxz(): Unity.Mathematics.uint4;
            public get wzxw(): Unity.Mathematics.uint4;
            public get wzyx(): Unity.Mathematics.uint4;
            public set wzyx(value: Unity.Mathematics.uint4);
            public get wzyy(): Unity.Mathematics.uint4;
            public get wzyz(): Unity.Mathematics.uint4;
            public get wzyw(): Unity.Mathematics.uint4;
            public get wzzx(): Unity.Mathematics.uint4;
            public get wzzy(): Unity.Mathematics.uint4;
            public get wzzz(): Unity.Mathematics.uint4;
            public get wzzw(): Unity.Mathematics.uint4;
            public get wzwx(): Unity.Mathematics.uint4;
            public get wzwy(): Unity.Mathematics.uint4;
            public get wzwz(): Unity.Mathematics.uint4;
            public get wzww(): Unity.Mathematics.uint4;
            public get wwxx(): Unity.Mathematics.uint4;
            public get wwxy(): Unity.Mathematics.uint4;
            public get wwxz(): Unity.Mathematics.uint4;
            public get wwxw(): Unity.Mathematics.uint4;
            public get wwyx(): Unity.Mathematics.uint4;
            public get wwyy(): Unity.Mathematics.uint4;
            public get wwyz(): Unity.Mathematics.uint4;
            public get wwyw(): Unity.Mathematics.uint4;
            public get wwzx(): Unity.Mathematics.uint4;
            public get wwzy(): Unity.Mathematics.uint4;
            public get wwzz(): Unity.Mathematics.uint4;
            public get wwzw(): Unity.Mathematics.uint4;
            public get wwwx(): Unity.Mathematics.uint4;
            public get wwwy(): Unity.Mathematics.uint4;
            public get wwwz(): Unity.Mathematics.uint4;
            public get wwww(): Unity.Mathematics.uint4;
            public get xxx(): Unity.Mathematics.uint3;
            public get xxy(): Unity.Mathematics.uint3;
            public get xxz(): Unity.Mathematics.uint3;
            public get xxw(): Unity.Mathematics.uint3;
            public get xyx(): Unity.Mathematics.uint3;
            public get xyy(): Unity.Mathematics.uint3;
            public get xyz(): Unity.Mathematics.uint3;
            public set xyz(value: Unity.Mathematics.uint3);
            public get xyw(): Unity.Mathematics.uint3;
            public set xyw(value: Unity.Mathematics.uint3);
            public get xzx(): Unity.Mathematics.uint3;
            public get xzy(): Unity.Mathematics.uint3;
            public set xzy(value: Unity.Mathematics.uint3);
            public get xzz(): Unity.Mathematics.uint3;
            public get xzw(): Unity.Mathematics.uint3;
            public set xzw(value: Unity.Mathematics.uint3);
            public get xwx(): Unity.Mathematics.uint3;
            public get xwy(): Unity.Mathematics.uint3;
            public set xwy(value: Unity.Mathematics.uint3);
            public get xwz(): Unity.Mathematics.uint3;
            public set xwz(value: Unity.Mathematics.uint3);
            public get xww(): Unity.Mathematics.uint3;
            public get yxx(): Unity.Mathematics.uint3;
            public get yxy(): Unity.Mathematics.uint3;
            public get yxz(): Unity.Mathematics.uint3;
            public set yxz(value: Unity.Mathematics.uint3);
            public get yxw(): Unity.Mathematics.uint3;
            public set yxw(value: Unity.Mathematics.uint3);
            public get yyx(): Unity.Mathematics.uint3;
            public get yyy(): Unity.Mathematics.uint3;
            public get yyz(): Unity.Mathematics.uint3;
            public get yyw(): Unity.Mathematics.uint3;
            public get yzx(): Unity.Mathematics.uint3;
            public set yzx(value: Unity.Mathematics.uint3);
            public get yzy(): Unity.Mathematics.uint3;
            public get yzz(): Unity.Mathematics.uint3;
            public get yzw(): Unity.Mathematics.uint3;
            public set yzw(value: Unity.Mathematics.uint3);
            public get ywx(): Unity.Mathematics.uint3;
            public set ywx(value: Unity.Mathematics.uint3);
            public get ywy(): Unity.Mathematics.uint3;
            public get ywz(): Unity.Mathematics.uint3;
            public set ywz(value: Unity.Mathematics.uint3);
            public get yww(): Unity.Mathematics.uint3;
            public get zxx(): Unity.Mathematics.uint3;
            public get zxy(): Unity.Mathematics.uint3;
            public set zxy(value: Unity.Mathematics.uint3);
            public get zxz(): Unity.Mathematics.uint3;
            public get zxw(): Unity.Mathematics.uint3;
            public set zxw(value: Unity.Mathematics.uint3);
            public get zyx(): Unity.Mathematics.uint3;
            public set zyx(value: Unity.Mathematics.uint3);
            public get zyy(): Unity.Mathematics.uint3;
            public get zyz(): Unity.Mathematics.uint3;
            public get zyw(): Unity.Mathematics.uint3;
            public set zyw(value: Unity.Mathematics.uint3);
            public get zzx(): Unity.Mathematics.uint3;
            public get zzy(): Unity.Mathematics.uint3;
            public get zzz(): Unity.Mathematics.uint3;
            public get zzw(): Unity.Mathematics.uint3;
            public get zwx(): Unity.Mathematics.uint3;
            public set zwx(value: Unity.Mathematics.uint3);
            public get zwy(): Unity.Mathematics.uint3;
            public set zwy(value: Unity.Mathematics.uint3);
            public get zwz(): Unity.Mathematics.uint3;
            public get zww(): Unity.Mathematics.uint3;
            public get wxx(): Unity.Mathematics.uint3;
            public get wxy(): Unity.Mathematics.uint3;
            public set wxy(value: Unity.Mathematics.uint3);
            public get wxz(): Unity.Mathematics.uint3;
            public set wxz(value: Unity.Mathematics.uint3);
            public get wxw(): Unity.Mathematics.uint3;
            public get wyx(): Unity.Mathematics.uint3;
            public set wyx(value: Unity.Mathematics.uint3);
            public get wyy(): Unity.Mathematics.uint3;
            public get wyz(): Unity.Mathematics.uint3;
            public set wyz(value: Unity.Mathematics.uint3);
            public get wyw(): Unity.Mathematics.uint3;
            public get wzx(): Unity.Mathematics.uint3;
            public set wzx(value: Unity.Mathematics.uint3);
            public get wzy(): Unity.Mathematics.uint3;
            public set wzy(value: Unity.Mathematics.uint3);
            public get wzz(): Unity.Mathematics.uint3;
            public get wzw(): Unity.Mathematics.uint3;
            public get wwx(): Unity.Mathematics.uint3;
            public get wwy(): Unity.Mathematics.uint3;
            public get wwz(): Unity.Mathematics.uint3;
            public get www(): Unity.Mathematics.uint3;
            public get xx(): Unity.Mathematics.uint2;
            public get xy(): Unity.Mathematics.uint2;
            public set xy(value: Unity.Mathematics.uint2);
            public get xz(): Unity.Mathematics.uint2;
            public set xz(value: Unity.Mathematics.uint2);
            public get xw(): Unity.Mathematics.uint2;
            public set xw(value: Unity.Mathematics.uint2);
            public get yx(): Unity.Mathematics.uint2;
            public set yx(value: Unity.Mathematics.uint2);
            public get yy(): Unity.Mathematics.uint2;
            public get yz(): Unity.Mathematics.uint2;
            public set yz(value: Unity.Mathematics.uint2);
            public get yw(): Unity.Mathematics.uint2;
            public set yw(value: Unity.Mathematics.uint2);
            public get zx(): Unity.Mathematics.uint2;
            public set zx(value: Unity.Mathematics.uint2);
            public get zy(): Unity.Mathematics.uint2;
            public set zy(value: Unity.Mathematics.uint2);
            public get zz(): Unity.Mathematics.uint2;
            public get zw(): Unity.Mathematics.uint2;
            public set zw(value: Unity.Mathematics.uint2);
            public get wx(): Unity.Mathematics.uint2;
            public set wx(value: Unity.Mathematics.uint2);
            public get wy(): Unity.Mathematics.uint2;
            public set wy(value: Unity.Mathematics.uint2);
            public get wz(): Unity.Mathematics.uint2;
            public set wz(value: Unity.Mathematics.uint2);
            public get ww(): Unity.Mathematics.uint2;
            public static op_Implicit ($v: number) : Unity.Mathematics.uint4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint4
            public static op_Explicit ($v: Unity.Mathematics.bool4) : Unity.Mathematics.uint4
            public static op_Explicit ($v: number) : Unity.Mathematics.uint4
            public static op_Explicit ($v: Unity.Mathematics.int4) : Unity.Mathematics.uint4
            public static op_Explicit ($v: Unity.Mathematics.float4) : Unity.Mathematics.uint4
            public static op_Explicit ($v: Unity.Mathematics.double4) : Unity.Mathematics.uint4
            public static op_Multiply ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Multiply ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Addition ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Addition ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Division ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Division ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Modulus ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Modulus ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Increment ($val: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_Decrement ($val: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_LessThan ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_UnaryNegation ($val: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_UnaryPlus ($val: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_LeftShift ($x: Unity.Mathematics.uint4, $n: number) : Unity.Mathematics.uint4
            public static op_RightShift ($x: Unity.Mathematics.uint4, $n: number) : Unity.Mathematics.uint4
            public static op_Equality ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.bool4
            public static op_OnesComplement ($val: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4, $rhs: number) : Unity.Mathematics.uint4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.uint4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $zw: Unity.Mathematics.uint2)
            public constructor ($x: number, $yz: Unity.Mathematics.uint2, $w: number)
            public constructor ($x: number, $yzw: Unity.Mathematics.uint3)
            public constructor ($xy: Unity.Mathematics.uint2, $z: number, $w: number)
            public constructor ($xy: Unity.Mathematics.uint2, $zw: Unity.Mathematics.uint2)
            public constructor ($xyz: Unity.Mathematics.uint3, $w: number)
            public constructor ($xyzw: Unity.Mathematics.uint4)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4)
            public constructor ($v: Unity.Mathematics.int4)
            public constructor ($v: Unity.Mathematics.float4)
            public constructor ($v: Unity.Mathematics.double4)
        }
        class bool4x4 extends System.ValueType implements System.IEquatable$1<Unity.Mathematics.bool4x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.bool4
            public c1 : Unity.Mathematics.bool4
            public c2 : Unity.Mathematics.bool4
            public c3 : Unity.Mathematics.bool4
            public static op_Implicit ($v: boolean) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.bool4x4, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.bool4x4, $rhs: boolean) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x4, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.bool4x4, $rhs: boolean) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: boolean, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_LogicalNot ($val: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x4, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.bool4x4, $rhs: boolean) : Unity.Mathematics.bool4x4
            public static op_BitwiseAnd ($lhs: boolean, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x4, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.bool4x4, $rhs: boolean) : Unity.Mathematics.bool4x4
            public static op_BitwiseOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x4, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.bool4x4, $rhs: boolean) : Unity.Mathematics.bool4x4
            public static op_ExclusiveOr ($lhs: boolean, $rhs: Unity.Mathematics.bool4x4) : Unity.Mathematics.bool4x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.bool4>
            public Equals ($rhs: Unity.Mathematics.bool4x4) : boolean
            public Equals ($o: any) : boolean
            public constructor ($c0: Unity.Mathematics.bool4, $c1: Unity.Mathematics.bool4, $c2: Unity.Mathematics.bool4, $c3: Unity.Mathematics.bool4)
            public constructor ($m00: boolean, $m01: boolean, $m02: boolean, $m03: boolean, $m10: boolean, $m11: boolean, $m12: boolean, $m13: boolean, $m20: boolean, $m21: boolean, $m22: boolean, $m23: boolean, $m30: boolean, $m31: boolean, $m32: boolean, $m33: boolean)
            public constructor ($v: boolean)
        }
        class double2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double2>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public static zero : Unity.Mathematics.double2
            public get xxxx(): Unity.Mathematics.double4;
            public get xxxy(): Unity.Mathematics.double4;
            public get xxyx(): Unity.Mathematics.double4;
            public get xxyy(): Unity.Mathematics.double4;
            public get xyxx(): Unity.Mathematics.double4;
            public get xyxy(): Unity.Mathematics.double4;
            public get xyyx(): Unity.Mathematics.double4;
            public get xyyy(): Unity.Mathematics.double4;
            public get yxxx(): Unity.Mathematics.double4;
            public get yxxy(): Unity.Mathematics.double4;
            public get yxyx(): Unity.Mathematics.double4;
            public get yxyy(): Unity.Mathematics.double4;
            public get yyxx(): Unity.Mathematics.double4;
            public get yyxy(): Unity.Mathematics.double4;
            public get yyyx(): Unity.Mathematics.double4;
            public get yyyy(): Unity.Mathematics.double4;
            public get xxx(): Unity.Mathematics.double3;
            public get xxy(): Unity.Mathematics.double3;
            public get xyx(): Unity.Mathematics.double3;
            public get xyy(): Unity.Mathematics.double3;
            public get yxx(): Unity.Mathematics.double3;
            public get yxy(): Unity.Mathematics.double3;
            public get yyx(): Unity.Mathematics.double3;
            public get yyy(): Unity.Mathematics.double3;
            public get xx(): Unity.Mathematics.double2;
            public get xy(): Unity.Mathematics.double2;
            public set xy(value: Unity.Mathematics.double2);
            public get yx(): Unity.Mathematics.double2;
            public set yx(value: Unity.Mathematics.double2);
            public get yy(): Unity.Mathematics.double2;
            public static op_Implicit ($v: number) : Unity.Mathematics.double2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double2
            public static op_Explicit ($v: Unity.Mathematics.bool2) : Unity.Mathematics.double2
            public static op_Implicit ($v: Unity.Mathematics.int2) : Unity.Mathematics.double2
            public static op_Implicit ($v: Unity.Mathematics.uint2) : Unity.Mathematics.double2
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.double2
            public static op_Implicit ($v: Unity.Mathematics.half2) : Unity.Mathematics.double2
            public static op_Implicit ($v: Unity.Mathematics.float2) : Unity.Mathematics.double2
            public static op_Multiply ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Multiply ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.double2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Addition ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Addition ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.double2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Subtraction ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Subtraction ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.double2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Division ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Division ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.double2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Modulus ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Modulus ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.double2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Increment ($val: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Decrement ($val: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_LessThan ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_UnaryNegation ($val: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_UnaryPlus ($val: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public static op_Equality ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.double2, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.double2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double2) : Unity.Mathematics.bool2
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.double2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number)
            public constructor ($xy: Unity.Mathematics.double2)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2)
            public constructor ($v: Unity.Mathematics.int2)
            public constructor ($v: Unity.Mathematics.uint2)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half2)
            public constructor ($v: Unity.Mathematics.float2)
        }
        class int2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int2>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public static zero : Unity.Mathematics.int2
            public get xxxx(): Unity.Mathematics.int4;
            public get xxxy(): Unity.Mathematics.int4;
            public get xxyx(): Unity.Mathematics.int4;
            public get xxyy(): Unity.Mathematics.int4;
            public get xyxx(): Unity.Mathematics.int4;
            public get xyxy(): Unity.Mathematics.int4;
            public get xyyx(): Unity.Mathematics.int4;
            public get xyyy(): Unity.Mathematics.int4;
            public get yxxx(): Unity.Mathematics.int4;
            public get yxxy(): Unity.Mathematics.int4;
            public get yxyx(): Unity.Mathematics.int4;
            public get yxyy(): Unity.Mathematics.int4;
            public get yyxx(): Unity.Mathematics.int4;
            public get yyxy(): Unity.Mathematics.int4;
            public get yyyx(): Unity.Mathematics.int4;
            public get yyyy(): Unity.Mathematics.int4;
            public get xxx(): Unity.Mathematics.int3;
            public get xxy(): Unity.Mathematics.int3;
            public get xyx(): Unity.Mathematics.int3;
            public get xyy(): Unity.Mathematics.int3;
            public get yxx(): Unity.Mathematics.int3;
            public get yxy(): Unity.Mathematics.int3;
            public get yyx(): Unity.Mathematics.int3;
            public get yyy(): Unity.Mathematics.int3;
            public get xx(): Unity.Mathematics.int2;
            public get xy(): Unity.Mathematics.int2;
            public set xy(value: Unity.Mathematics.int2);
            public get yx(): Unity.Mathematics.int2;
            public set yx(value: Unity.Mathematics.int2);
            public get yy(): Unity.Mathematics.int2;
            public static op_Implicit ($v: number) : Unity.Mathematics.int2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int2
            public static op_Explicit ($v: Unity.Mathematics.bool2) : Unity.Mathematics.int2
            public static op_Explicit ($v: number) : Unity.Mathematics.int2
            public static op_Explicit ($v: Unity.Mathematics.uint2) : Unity.Mathematics.int2
            public static op_Explicit ($v: Unity.Mathematics.float2) : Unity.Mathematics.int2
            public static op_Explicit ($v: Unity.Mathematics.double2) : Unity.Mathematics.int2
            public static op_Multiply ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Multiply ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Addition ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Addition ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Subtraction ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Subtraction ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Division ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Division ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Modulus ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Modulus ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Increment ($val: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_Decrement ($val: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_LessThan ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_UnaryNegation ($val: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_UnaryPlus ($val: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_LeftShift ($x: Unity.Mathematics.int2, $n: number) : Unity.Mathematics.int2
            public static op_RightShift ($x: Unity.Mathematics.int2, $n: number) : Unity.Mathematics.int2
            public static op_Equality ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.bool2
            public static op_OnesComplement ($val: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2, $rhs: number) : Unity.Mathematics.int2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.int2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number)
            public constructor ($xy: Unity.Mathematics.int2)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2)
            public constructor ($v: Unity.Mathematics.uint2)
            public constructor ($v: Unity.Mathematics.float2)
            public constructor ($v: Unity.Mathematics.double2)
        }
        class half extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.half>
        {
            protected [__keep_incompatibility]: never;
            public value : number
            public static zero : Unity.Mathematics.half
            public static get MaxValue(): number;
            public static get MinValue(): number;
            public static get MaxValueAsHalf(): Unity.Mathematics.half;
            public static get MinValueAsHalf(): Unity.Mathematics.half;
            public static op_Explicit ($v: number) : Unity.Mathematics.half
            public static op_Implicit ($d: Unity.Mathematics.half) : number
            public static op_Equality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half) : boolean
            public static op_Inequality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half) : boolean
            public Equals ($rhs: Unity.Mathematics.half) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: Unity.Mathematics.half)
            public constructor ($v: number)
        }
        class half2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.half2>
        {
            protected [__keep_incompatibility]: never;
            public x : Unity.Mathematics.half
            public y : Unity.Mathematics.half
            public static zero : Unity.Mathematics.half2
            public get xxxx(): Unity.Mathematics.half4;
            public get xxxy(): Unity.Mathematics.half4;
            public get xxyx(): Unity.Mathematics.half4;
            public get xxyy(): Unity.Mathematics.half4;
            public get xyxx(): Unity.Mathematics.half4;
            public get xyxy(): Unity.Mathematics.half4;
            public get xyyx(): Unity.Mathematics.half4;
            public get xyyy(): Unity.Mathematics.half4;
            public get yxxx(): Unity.Mathematics.half4;
            public get yxxy(): Unity.Mathematics.half4;
            public get yxyx(): Unity.Mathematics.half4;
            public get yxyy(): Unity.Mathematics.half4;
            public get yyxx(): Unity.Mathematics.half4;
            public get yyxy(): Unity.Mathematics.half4;
            public get yyyx(): Unity.Mathematics.half4;
            public get yyyy(): Unity.Mathematics.half4;
            public get xxx(): Unity.Mathematics.half3;
            public get xxy(): Unity.Mathematics.half3;
            public get xyx(): Unity.Mathematics.half3;
            public get xyy(): Unity.Mathematics.half3;
            public get yxx(): Unity.Mathematics.half3;
            public get yxy(): Unity.Mathematics.half3;
            public get yyx(): Unity.Mathematics.half3;
            public get yyy(): Unity.Mathematics.half3;
            public get xx(): Unity.Mathematics.half2;
            public get xy(): Unity.Mathematics.half2;
            public set xy(value: Unity.Mathematics.half2);
            public get yx(): Unity.Mathematics.half2;
            public set yx(value: Unity.Mathematics.half2);
            public get yy(): Unity.Mathematics.half2;
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.half2
            public static op_Explicit ($v: number) : Unity.Mathematics.half2
            public static op_Explicit ($v: Unity.Mathematics.float2) : Unity.Mathematics.half2
            public static op_Explicit ($v: Unity.Mathematics.double2) : Unity.Mathematics.half2
            public static op_Equality ($lhs: Unity.Mathematics.half2, $rhs: Unity.Mathematics.half2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.half2, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.half2, $rhs: Unity.Mathematics.half2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.half2, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half2) : Unity.Mathematics.bool2
            public get_Item ($index: number) : Unity.Mathematics.half
            public set_Item ($index: number, $value: Unity.Mathematics.half) : void
            public Equals ($rhs: Unity.Mathematics.half2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half)
            public constructor ($xy: Unity.Mathematics.half2)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: number)
            public constructor ($v: Unity.Mathematics.float2)
            public constructor ($v: Unity.Mathematics.double2)
        }
        class float2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float2>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public static zero : Unity.Mathematics.float2
            public get xxxx(): Unity.Mathematics.float4;
            public get xxxy(): Unity.Mathematics.float4;
            public get xxyx(): Unity.Mathematics.float4;
            public get xxyy(): Unity.Mathematics.float4;
            public get xyxx(): Unity.Mathematics.float4;
            public get xyxy(): Unity.Mathematics.float4;
            public get xyyx(): Unity.Mathematics.float4;
            public get xyyy(): Unity.Mathematics.float4;
            public get yxxx(): Unity.Mathematics.float4;
            public get yxxy(): Unity.Mathematics.float4;
            public get yxyx(): Unity.Mathematics.float4;
            public get yxyy(): Unity.Mathematics.float4;
            public get yyxx(): Unity.Mathematics.float4;
            public get yyxy(): Unity.Mathematics.float4;
            public get yyyx(): Unity.Mathematics.float4;
            public get yyyy(): Unity.Mathematics.float4;
            public get xxx(): Unity.Mathematics.float3;
            public get xxy(): Unity.Mathematics.float3;
            public get xyx(): Unity.Mathematics.float3;
            public get xyy(): Unity.Mathematics.float3;
            public get yxx(): Unity.Mathematics.float3;
            public get yxy(): Unity.Mathematics.float3;
            public get yyx(): Unity.Mathematics.float3;
            public get yyy(): Unity.Mathematics.float3;
            public get xx(): Unity.Mathematics.float2;
            public get xy(): Unity.Mathematics.float2;
            public set xy(value: Unity.Mathematics.float2);
            public get yx(): Unity.Mathematics.float2;
            public set yx(value: Unity.Mathematics.float2);
            public get yy(): Unity.Mathematics.float2;
            public static op_Implicit ($v: number) : Unity.Mathematics.float2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float2
            public static op_Explicit ($v: Unity.Mathematics.bool2) : Unity.Mathematics.float2
            public static op_Implicit ($v: Unity.Mathematics.int2) : Unity.Mathematics.float2
            public static op_Implicit ($v: Unity.Mathematics.uint2) : Unity.Mathematics.float2
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.float2
            public static op_Implicit ($v: Unity.Mathematics.half2) : Unity.Mathematics.float2
            public static op_Explicit ($v: number) : Unity.Mathematics.float2
            public static op_Explicit ($v: Unity.Mathematics.double2) : Unity.Mathematics.float2
            public static op_Multiply ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Multiply ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.float2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Addition ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Addition ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.float2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Subtraction ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Subtraction ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.float2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Division ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Division ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.float2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Modulus ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Modulus ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.float2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Increment ($val: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Decrement ($val: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_LessThan ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_UnaryNegation ($val: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_UnaryPlus ($val: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static op_Equality ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.float2, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: Unity.Mathematics.float2, $rhs: number) : Unity.Mathematics.bool2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float2) : Unity.Mathematics.bool2
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.float2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Implicit ($v: Unity.Mathematics.float2) : UnityEngine.Vector2
            public static op_Implicit ($v: UnityEngine.Vector2) : Unity.Mathematics.float2
            public constructor ($x: number, $y: number)
            public constructor ($xy: Unity.Mathematics.float2)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2)
            public constructor ($v: Unity.Mathematics.int2)
            public constructor ($v: Unity.Mathematics.uint2)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half2)
            public constructor ($v: Unity.Mathematics.double2)
        }
        class double3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double3>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public static zero : Unity.Mathematics.double3
            public get xxxx(): Unity.Mathematics.double4;
            public get xxxy(): Unity.Mathematics.double4;
            public get xxxz(): Unity.Mathematics.double4;
            public get xxyx(): Unity.Mathematics.double4;
            public get xxyy(): Unity.Mathematics.double4;
            public get xxyz(): Unity.Mathematics.double4;
            public get xxzx(): Unity.Mathematics.double4;
            public get xxzy(): Unity.Mathematics.double4;
            public get xxzz(): Unity.Mathematics.double4;
            public get xyxx(): Unity.Mathematics.double4;
            public get xyxy(): Unity.Mathematics.double4;
            public get xyxz(): Unity.Mathematics.double4;
            public get xyyx(): Unity.Mathematics.double4;
            public get xyyy(): Unity.Mathematics.double4;
            public get xyyz(): Unity.Mathematics.double4;
            public get xyzx(): Unity.Mathematics.double4;
            public get xyzy(): Unity.Mathematics.double4;
            public get xyzz(): Unity.Mathematics.double4;
            public get xzxx(): Unity.Mathematics.double4;
            public get xzxy(): Unity.Mathematics.double4;
            public get xzxz(): Unity.Mathematics.double4;
            public get xzyx(): Unity.Mathematics.double4;
            public get xzyy(): Unity.Mathematics.double4;
            public get xzyz(): Unity.Mathematics.double4;
            public get xzzx(): Unity.Mathematics.double4;
            public get xzzy(): Unity.Mathematics.double4;
            public get xzzz(): Unity.Mathematics.double4;
            public get yxxx(): Unity.Mathematics.double4;
            public get yxxy(): Unity.Mathematics.double4;
            public get yxxz(): Unity.Mathematics.double4;
            public get yxyx(): Unity.Mathematics.double4;
            public get yxyy(): Unity.Mathematics.double4;
            public get yxyz(): Unity.Mathematics.double4;
            public get yxzx(): Unity.Mathematics.double4;
            public get yxzy(): Unity.Mathematics.double4;
            public get yxzz(): Unity.Mathematics.double4;
            public get yyxx(): Unity.Mathematics.double4;
            public get yyxy(): Unity.Mathematics.double4;
            public get yyxz(): Unity.Mathematics.double4;
            public get yyyx(): Unity.Mathematics.double4;
            public get yyyy(): Unity.Mathematics.double4;
            public get yyyz(): Unity.Mathematics.double4;
            public get yyzx(): Unity.Mathematics.double4;
            public get yyzy(): Unity.Mathematics.double4;
            public get yyzz(): Unity.Mathematics.double4;
            public get yzxx(): Unity.Mathematics.double4;
            public get yzxy(): Unity.Mathematics.double4;
            public get yzxz(): Unity.Mathematics.double4;
            public get yzyx(): Unity.Mathematics.double4;
            public get yzyy(): Unity.Mathematics.double4;
            public get yzyz(): Unity.Mathematics.double4;
            public get yzzx(): Unity.Mathematics.double4;
            public get yzzy(): Unity.Mathematics.double4;
            public get yzzz(): Unity.Mathematics.double4;
            public get zxxx(): Unity.Mathematics.double4;
            public get zxxy(): Unity.Mathematics.double4;
            public get zxxz(): Unity.Mathematics.double4;
            public get zxyx(): Unity.Mathematics.double4;
            public get zxyy(): Unity.Mathematics.double4;
            public get zxyz(): Unity.Mathematics.double4;
            public get zxzx(): Unity.Mathematics.double4;
            public get zxzy(): Unity.Mathematics.double4;
            public get zxzz(): Unity.Mathematics.double4;
            public get zyxx(): Unity.Mathematics.double4;
            public get zyxy(): Unity.Mathematics.double4;
            public get zyxz(): Unity.Mathematics.double4;
            public get zyyx(): Unity.Mathematics.double4;
            public get zyyy(): Unity.Mathematics.double4;
            public get zyyz(): Unity.Mathematics.double4;
            public get zyzx(): Unity.Mathematics.double4;
            public get zyzy(): Unity.Mathematics.double4;
            public get zyzz(): Unity.Mathematics.double4;
            public get zzxx(): Unity.Mathematics.double4;
            public get zzxy(): Unity.Mathematics.double4;
            public get zzxz(): Unity.Mathematics.double4;
            public get zzyx(): Unity.Mathematics.double4;
            public get zzyy(): Unity.Mathematics.double4;
            public get zzyz(): Unity.Mathematics.double4;
            public get zzzx(): Unity.Mathematics.double4;
            public get zzzy(): Unity.Mathematics.double4;
            public get zzzz(): Unity.Mathematics.double4;
            public get xxx(): Unity.Mathematics.double3;
            public get xxy(): Unity.Mathematics.double3;
            public get xxz(): Unity.Mathematics.double3;
            public get xyx(): Unity.Mathematics.double3;
            public get xyy(): Unity.Mathematics.double3;
            public get xyz(): Unity.Mathematics.double3;
            public set xyz(value: Unity.Mathematics.double3);
            public get xzx(): Unity.Mathematics.double3;
            public get xzy(): Unity.Mathematics.double3;
            public set xzy(value: Unity.Mathematics.double3);
            public get xzz(): Unity.Mathematics.double3;
            public get yxx(): Unity.Mathematics.double3;
            public get yxy(): Unity.Mathematics.double3;
            public get yxz(): Unity.Mathematics.double3;
            public set yxz(value: Unity.Mathematics.double3);
            public get yyx(): Unity.Mathematics.double3;
            public get yyy(): Unity.Mathematics.double3;
            public get yyz(): Unity.Mathematics.double3;
            public get yzx(): Unity.Mathematics.double3;
            public set yzx(value: Unity.Mathematics.double3);
            public get yzy(): Unity.Mathematics.double3;
            public get yzz(): Unity.Mathematics.double3;
            public get zxx(): Unity.Mathematics.double3;
            public get zxy(): Unity.Mathematics.double3;
            public set zxy(value: Unity.Mathematics.double3);
            public get zxz(): Unity.Mathematics.double3;
            public get zyx(): Unity.Mathematics.double3;
            public set zyx(value: Unity.Mathematics.double3);
            public get zyy(): Unity.Mathematics.double3;
            public get zyz(): Unity.Mathematics.double3;
            public get zzx(): Unity.Mathematics.double3;
            public get zzy(): Unity.Mathematics.double3;
            public get zzz(): Unity.Mathematics.double3;
            public get xx(): Unity.Mathematics.double2;
            public get xy(): Unity.Mathematics.double2;
            public set xy(value: Unity.Mathematics.double2);
            public get xz(): Unity.Mathematics.double2;
            public set xz(value: Unity.Mathematics.double2);
            public get yx(): Unity.Mathematics.double2;
            public set yx(value: Unity.Mathematics.double2);
            public get yy(): Unity.Mathematics.double2;
            public get yz(): Unity.Mathematics.double2;
            public set yz(value: Unity.Mathematics.double2);
            public get zx(): Unity.Mathematics.double2;
            public set zx(value: Unity.Mathematics.double2);
            public get zy(): Unity.Mathematics.double2;
            public set zy(value: Unity.Mathematics.double2);
            public get zz(): Unity.Mathematics.double2;
            public static op_Implicit ($v: number) : Unity.Mathematics.double3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double3
            public static op_Explicit ($v: Unity.Mathematics.bool3) : Unity.Mathematics.double3
            public static op_Implicit ($v: Unity.Mathematics.int3) : Unity.Mathematics.double3
            public static op_Implicit ($v: Unity.Mathematics.uint3) : Unity.Mathematics.double3
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.double3
            public static op_Implicit ($v: Unity.Mathematics.half3) : Unity.Mathematics.double3
            public static op_Implicit ($v: Unity.Mathematics.float3) : Unity.Mathematics.double3
            public static op_Multiply ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Multiply ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.double3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Addition ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Addition ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.double3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Subtraction ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Subtraction ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.double3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Division ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Division ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.double3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Modulus ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Modulus ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.double3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Increment ($val: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Decrement ($val: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_LessThan ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_UnaryNegation ($val: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_UnaryPlus ($val: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public static op_Equality ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.double3, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.double3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double3) : Unity.Mathematics.bool3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.double3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $yz: Unity.Mathematics.double2)
            public constructor ($xy: Unity.Mathematics.double2, $z: number)
            public constructor ($xyz: Unity.Mathematics.double3)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3)
            public constructor ($v: Unity.Mathematics.int3)
            public constructor ($v: Unity.Mathematics.uint3)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half3)
            public constructor ($v: Unity.Mathematics.float3)
        }
        class double4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double4>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public w : number
            public static zero : Unity.Mathematics.double4
            public get xxxx(): Unity.Mathematics.double4;
            public get xxxy(): Unity.Mathematics.double4;
            public get xxxz(): Unity.Mathematics.double4;
            public get xxxw(): Unity.Mathematics.double4;
            public get xxyx(): Unity.Mathematics.double4;
            public get xxyy(): Unity.Mathematics.double4;
            public get xxyz(): Unity.Mathematics.double4;
            public get xxyw(): Unity.Mathematics.double4;
            public get xxzx(): Unity.Mathematics.double4;
            public get xxzy(): Unity.Mathematics.double4;
            public get xxzz(): Unity.Mathematics.double4;
            public get xxzw(): Unity.Mathematics.double4;
            public get xxwx(): Unity.Mathematics.double4;
            public get xxwy(): Unity.Mathematics.double4;
            public get xxwz(): Unity.Mathematics.double4;
            public get xxww(): Unity.Mathematics.double4;
            public get xyxx(): Unity.Mathematics.double4;
            public get xyxy(): Unity.Mathematics.double4;
            public get xyxz(): Unity.Mathematics.double4;
            public get xyxw(): Unity.Mathematics.double4;
            public get xyyx(): Unity.Mathematics.double4;
            public get xyyy(): Unity.Mathematics.double4;
            public get xyyz(): Unity.Mathematics.double4;
            public get xyyw(): Unity.Mathematics.double4;
            public get xyzx(): Unity.Mathematics.double4;
            public get xyzy(): Unity.Mathematics.double4;
            public get xyzz(): Unity.Mathematics.double4;
            public get xyzw(): Unity.Mathematics.double4;
            public set xyzw(value: Unity.Mathematics.double4);
            public get xywx(): Unity.Mathematics.double4;
            public get xywy(): Unity.Mathematics.double4;
            public get xywz(): Unity.Mathematics.double4;
            public set xywz(value: Unity.Mathematics.double4);
            public get xyww(): Unity.Mathematics.double4;
            public get xzxx(): Unity.Mathematics.double4;
            public get xzxy(): Unity.Mathematics.double4;
            public get xzxz(): Unity.Mathematics.double4;
            public get xzxw(): Unity.Mathematics.double4;
            public get xzyx(): Unity.Mathematics.double4;
            public get xzyy(): Unity.Mathematics.double4;
            public get xzyz(): Unity.Mathematics.double4;
            public get xzyw(): Unity.Mathematics.double4;
            public set xzyw(value: Unity.Mathematics.double4);
            public get xzzx(): Unity.Mathematics.double4;
            public get xzzy(): Unity.Mathematics.double4;
            public get xzzz(): Unity.Mathematics.double4;
            public get xzzw(): Unity.Mathematics.double4;
            public get xzwx(): Unity.Mathematics.double4;
            public get xzwy(): Unity.Mathematics.double4;
            public set xzwy(value: Unity.Mathematics.double4);
            public get xzwz(): Unity.Mathematics.double4;
            public get xzww(): Unity.Mathematics.double4;
            public get xwxx(): Unity.Mathematics.double4;
            public get xwxy(): Unity.Mathematics.double4;
            public get xwxz(): Unity.Mathematics.double4;
            public get xwxw(): Unity.Mathematics.double4;
            public get xwyx(): Unity.Mathematics.double4;
            public get xwyy(): Unity.Mathematics.double4;
            public get xwyz(): Unity.Mathematics.double4;
            public set xwyz(value: Unity.Mathematics.double4);
            public get xwyw(): Unity.Mathematics.double4;
            public get xwzx(): Unity.Mathematics.double4;
            public get xwzy(): Unity.Mathematics.double4;
            public set xwzy(value: Unity.Mathematics.double4);
            public get xwzz(): Unity.Mathematics.double4;
            public get xwzw(): Unity.Mathematics.double4;
            public get xwwx(): Unity.Mathematics.double4;
            public get xwwy(): Unity.Mathematics.double4;
            public get xwwz(): Unity.Mathematics.double4;
            public get xwww(): Unity.Mathematics.double4;
            public get yxxx(): Unity.Mathematics.double4;
            public get yxxy(): Unity.Mathematics.double4;
            public get yxxz(): Unity.Mathematics.double4;
            public get yxxw(): Unity.Mathematics.double4;
            public get yxyx(): Unity.Mathematics.double4;
            public get yxyy(): Unity.Mathematics.double4;
            public get yxyz(): Unity.Mathematics.double4;
            public get yxyw(): Unity.Mathematics.double4;
            public get yxzx(): Unity.Mathematics.double4;
            public get yxzy(): Unity.Mathematics.double4;
            public get yxzz(): Unity.Mathematics.double4;
            public get yxzw(): Unity.Mathematics.double4;
            public set yxzw(value: Unity.Mathematics.double4);
            public get yxwx(): Unity.Mathematics.double4;
            public get yxwy(): Unity.Mathematics.double4;
            public get yxwz(): Unity.Mathematics.double4;
            public set yxwz(value: Unity.Mathematics.double4);
            public get yxww(): Unity.Mathematics.double4;
            public get yyxx(): Unity.Mathematics.double4;
            public get yyxy(): Unity.Mathematics.double4;
            public get yyxz(): Unity.Mathematics.double4;
            public get yyxw(): Unity.Mathematics.double4;
            public get yyyx(): Unity.Mathematics.double4;
            public get yyyy(): Unity.Mathematics.double4;
            public get yyyz(): Unity.Mathematics.double4;
            public get yyyw(): Unity.Mathematics.double4;
            public get yyzx(): Unity.Mathematics.double4;
            public get yyzy(): Unity.Mathematics.double4;
            public get yyzz(): Unity.Mathematics.double4;
            public get yyzw(): Unity.Mathematics.double4;
            public get yywx(): Unity.Mathematics.double4;
            public get yywy(): Unity.Mathematics.double4;
            public get yywz(): Unity.Mathematics.double4;
            public get yyww(): Unity.Mathematics.double4;
            public get yzxx(): Unity.Mathematics.double4;
            public get yzxy(): Unity.Mathematics.double4;
            public get yzxz(): Unity.Mathematics.double4;
            public get yzxw(): Unity.Mathematics.double4;
            public set yzxw(value: Unity.Mathematics.double4);
            public get yzyx(): Unity.Mathematics.double4;
            public get yzyy(): Unity.Mathematics.double4;
            public get yzyz(): Unity.Mathematics.double4;
            public get yzyw(): Unity.Mathematics.double4;
            public get yzzx(): Unity.Mathematics.double4;
            public get yzzy(): Unity.Mathematics.double4;
            public get yzzz(): Unity.Mathematics.double4;
            public get yzzw(): Unity.Mathematics.double4;
            public get yzwx(): Unity.Mathematics.double4;
            public set yzwx(value: Unity.Mathematics.double4);
            public get yzwy(): Unity.Mathematics.double4;
            public get yzwz(): Unity.Mathematics.double4;
            public get yzww(): Unity.Mathematics.double4;
            public get ywxx(): Unity.Mathematics.double4;
            public get ywxy(): Unity.Mathematics.double4;
            public get ywxz(): Unity.Mathematics.double4;
            public set ywxz(value: Unity.Mathematics.double4);
            public get ywxw(): Unity.Mathematics.double4;
            public get ywyx(): Unity.Mathematics.double4;
            public get ywyy(): Unity.Mathematics.double4;
            public get ywyz(): Unity.Mathematics.double4;
            public get ywyw(): Unity.Mathematics.double4;
            public get ywzx(): Unity.Mathematics.double4;
            public set ywzx(value: Unity.Mathematics.double4);
            public get ywzy(): Unity.Mathematics.double4;
            public get ywzz(): Unity.Mathematics.double4;
            public get ywzw(): Unity.Mathematics.double4;
            public get ywwx(): Unity.Mathematics.double4;
            public get ywwy(): Unity.Mathematics.double4;
            public get ywwz(): Unity.Mathematics.double4;
            public get ywww(): Unity.Mathematics.double4;
            public get zxxx(): Unity.Mathematics.double4;
            public get zxxy(): Unity.Mathematics.double4;
            public get zxxz(): Unity.Mathematics.double4;
            public get zxxw(): Unity.Mathematics.double4;
            public get zxyx(): Unity.Mathematics.double4;
            public get zxyy(): Unity.Mathematics.double4;
            public get zxyz(): Unity.Mathematics.double4;
            public get zxyw(): Unity.Mathematics.double4;
            public set zxyw(value: Unity.Mathematics.double4);
            public get zxzx(): Unity.Mathematics.double4;
            public get zxzy(): Unity.Mathematics.double4;
            public get zxzz(): Unity.Mathematics.double4;
            public get zxzw(): Unity.Mathematics.double4;
            public get zxwx(): Unity.Mathematics.double4;
            public get zxwy(): Unity.Mathematics.double4;
            public set zxwy(value: Unity.Mathematics.double4);
            public get zxwz(): Unity.Mathematics.double4;
            public get zxww(): Unity.Mathematics.double4;
            public get zyxx(): Unity.Mathematics.double4;
            public get zyxy(): Unity.Mathematics.double4;
            public get zyxz(): Unity.Mathematics.double4;
            public get zyxw(): Unity.Mathematics.double4;
            public set zyxw(value: Unity.Mathematics.double4);
            public get zyyx(): Unity.Mathematics.double4;
            public get zyyy(): Unity.Mathematics.double4;
            public get zyyz(): Unity.Mathematics.double4;
            public get zyyw(): Unity.Mathematics.double4;
            public get zyzx(): Unity.Mathematics.double4;
            public get zyzy(): Unity.Mathematics.double4;
            public get zyzz(): Unity.Mathematics.double4;
            public get zyzw(): Unity.Mathematics.double4;
            public get zywx(): Unity.Mathematics.double4;
            public set zywx(value: Unity.Mathematics.double4);
            public get zywy(): Unity.Mathematics.double4;
            public get zywz(): Unity.Mathematics.double4;
            public get zyww(): Unity.Mathematics.double4;
            public get zzxx(): Unity.Mathematics.double4;
            public get zzxy(): Unity.Mathematics.double4;
            public get zzxz(): Unity.Mathematics.double4;
            public get zzxw(): Unity.Mathematics.double4;
            public get zzyx(): Unity.Mathematics.double4;
            public get zzyy(): Unity.Mathematics.double4;
            public get zzyz(): Unity.Mathematics.double4;
            public get zzyw(): Unity.Mathematics.double4;
            public get zzzx(): Unity.Mathematics.double4;
            public get zzzy(): Unity.Mathematics.double4;
            public get zzzz(): Unity.Mathematics.double4;
            public get zzzw(): Unity.Mathematics.double4;
            public get zzwx(): Unity.Mathematics.double4;
            public get zzwy(): Unity.Mathematics.double4;
            public get zzwz(): Unity.Mathematics.double4;
            public get zzww(): Unity.Mathematics.double4;
            public get zwxx(): Unity.Mathematics.double4;
            public get zwxy(): Unity.Mathematics.double4;
            public set zwxy(value: Unity.Mathematics.double4);
            public get zwxz(): Unity.Mathematics.double4;
            public get zwxw(): Unity.Mathematics.double4;
            public get zwyx(): Unity.Mathematics.double4;
            public set zwyx(value: Unity.Mathematics.double4);
            public get zwyy(): Unity.Mathematics.double4;
            public get zwyz(): Unity.Mathematics.double4;
            public get zwyw(): Unity.Mathematics.double4;
            public get zwzx(): Unity.Mathematics.double4;
            public get zwzy(): Unity.Mathematics.double4;
            public get zwzz(): Unity.Mathematics.double4;
            public get zwzw(): Unity.Mathematics.double4;
            public get zwwx(): Unity.Mathematics.double4;
            public get zwwy(): Unity.Mathematics.double4;
            public get zwwz(): Unity.Mathematics.double4;
            public get zwww(): Unity.Mathematics.double4;
            public get wxxx(): Unity.Mathematics.double4;
            public get wxxy(): Unity.Mathematics.double4;
            public get wxxz(): Unity.Mathematics.double4;
            public get wxxw(): Unity.Mathematics.double4;
            public get wxyx(): Unity.Mathematics.double4;
            public get wxyy(): Unity.Mathematics.double4;
            public get wxyz(): Unity.Mathematics.double4;
            public set wxyz(value: Unity.Mathematics.double4);
            public get wxyw(): Unity.Mathematics.double4;
            public get wxzx(): Unity.Mathematics.double4;
            public get wxzy(): Unity.Mathematics.double4;
            public set wxzy(value: Unity.Mathematics.double4);
            public get wxzz(): Unity.Mathematics.double4;
            public get wxzw(): Unity.Mathematics.double4;
            public get wxwx(): Unity.Mathematics.double4;
            public get wxwy(): Unity.Mathematics.double4;
            public get wxwz(): Unity.Mathematics.double4;
            public get wxww(): Unity.Mathematics.double4;
            public get wyxx(): Unity.Mathematics.double4;
            public get wyxy(): Unity.Mathematics.double4;
            public get wyxz(): Unity.Mathematics.double4;
            public set wyxz(value: Unity.Mathematics.double4);
            public get wyxw(): Unity.Mathematics.double4;
            public get wyyx(): Unity.Mathematics.double4;
            public get wyyy(): Unity.Mathematics.double4;
            public get wyyz(): Unity.Mathematics.double4;
            public get wyyw(): Unity.Mathematics.double4;
            public get wyzx(): Unity.Mathematics.double4;
            public set wyzx(value: Unity.Mathematics.double4);
            public get wyzy(): Unity.Mathematics.double4;
            public get wyzz(): Unity.Mathematics.double4;
            public get wyzw(): Unity.Mathematics.double4;
            public get wywx(): Unity.Mathematics.double4;
            public get wywy(): Unity.Mathematics.double4;
            public get wywz(): Unity.Mathematics.double4;
            public get wyww(): Unity.Mathematics.double4;
            public get wzxx(): Unity.Mathematics.double4;
            public get wzxy(): Unity.Mathematics.double4;
            public set wzxy(value: Unity.Mathematics.double4);
            public get wzxz(): Unity.Mathematics.double4;
            public get wzxw(): Unity.Mathematics.double4;
            public get wzyx(): Unity.Mathematics.double4;
            public set wzyx(value: Unity.Mathematics.double4);
            public get wzyy(): Unity.Mathematics.double4;
            public get wzyz(): Unity.Mathematics.double4;
            public get wzyw(): Unity.Mathematics.double4;
            public get wzzx(): Unity.Mathematics.double4;
            public get wzzy(): Unity.Mathematics.double4;
            public get wzzz(): Unity.Mathematics.double4;
            public get wzzw(): Unity.Mathematics.double4;
            public get wzwx(): Unity.Mathematics.double4;
            public get wzwy(): Unity.Mathematics.double4;
            public get wzwz(): Unity.Mathematics.double4;
            public get wzww(): Unity.Mathematics.double4;
            public get wwxx(): Unity.Mathematics.double4;
            public get wwxy(): Unity.Mathematics.double4;
            public get wwxz(): Unity.Mathematics.double4;
            public get wwxw(): Unity.Mathematics.double4;
            public get wwyx(): Unity.Mathematics.double4;
            public get wwyy(): Unity.Mathematics.double4;
            public get wwyz(): Unity.Mathematics.double4;
            public get wwyw(): Unity.Mathematics.double4;
            public get wwzx(): Unity.Mathematics.double4;
            public get wwzy(): Unity.Mathematics.double4;
            public get wwzz(): Unity.Mathematics.double4;
            public get wwzw(): Unity.Mathematics.double4;
            public get wwwx(): Unity.Mathematics.double4;
            public get wwwy(): Unity.Mathematics.double4;
            public get wwwz(): Unity.Mathematics.double4;
            public get wwww(): Unity.Mathematics.double4;
            public get xxx(): Unity.Mathematics.double3;
            public get xxy(): Unity.Mathematics.double3;
            public get xxz(): Unity.Mathematics.double3;
            public get xxw(): Unity.Mathematics.double3;
            public get xyx(): Unity.Mathematics.double3;
            public get xyy(): Unity.Mathematics.double3;
            public get xyz(): Unity.Mathematics.double3;
            public set xyz(value: Unity.Mathematics.double3);
            public get xyw(): Unity.Mathematics.double3;
            public set xyw(value: Unity.Mathematics.double3);
            public get xzx(): Unity.Mathematics.double3;
            public get xzy(): Unity.Mathematics.double3;
            public set xzy(value: Unity.Mathematics.double3);
            public get xzz(): Unity.Mathematics.double3;
            public get xzw(): Unity.Mathematics.double3;
            public set xzw(value: Unity.Mathematics.double3);
            public get xwx(): Unity.Mathematics.double3;
            public get xwy(): Unity.Mathematics.double3;
            public set xwy(value: Unity.Mathematics.double3);
            public get xwz(): Unity.Mathematics.double3;
            public set xwz(value: Unity.Mathematics.double3);
            public get xww(): Unity.Mathematics.double3;
            public get yxx(): Unity.Mathematics.double3;
            public get yxy(): Unity.Mathematics.double3;
            public get yxz(): Unity.Mathematics.double3;
            public set yxz(value: Unity.Mathematics.double3);
            public get yxw(): Unity.Mathematics.double3;
            public set yxw(value: Unity.Mathematics.double3);
            public get yyx(): Unity.Mathematics.double3;
            public get yyy(): Unity.Mathematics.double3;
            public get yyz(): Unity.Mathematics.double3;
            public get yyw(): Unity.Mathematics.double3;
            public get yzx(): Unity.Mathematics.double3;
            public set yzx(value: Unity.Mathematics.double3);
            public get yzy(): Unity.Mathematics.double3;
            public get yzz(): Unity.Mathematics.double3;
            public get yzw(): Unity.Mathematics.double3;
            public set yzw(value: Unity.Mathematics.double3);
            public get ywx(): Unity.Mathematics.double3;
            public set ywx(value: Unity.Mathematics.double3);
            public get ywy(): Unity.Mathematics.double3;
            public get ywz(): Unity.Mathematics.double3;
            public set ywz(value: Unity.Mathematics.double3);
            public get yww(): Unity.Mathematics.double3;
            public get zxx(): Unity.Mathematics.double3;
            public get zxy(): Unity.Mathematics.double3;
            public set zxy(value: Unity.Mathematics.double3);
            public get zxz(): Unity.Mathematics.double3;
            public get zxw(): Unity.Mathematics.double3;
            public set zxw(value: Unity.Mathematics.double3);
            public get zyx(): Unity.Mathematics.double3;
            public set zyx(value: Unity.Mathematics.double3);
            public get zyy(): Unity.Mathematics.double3;
            public get zyz(): Unity.Mathematics.double3;
            public get zyw(): Unity.Mathematics.double3;
            public set zyw(value: Unity.Mathematics.double3);
            public get zzx(): Unity.Mathematics.double3;
            public get zzy(): Unity.Mathematics.double3;
            public get zzz(): Unity.Mathematics.double3;
            public get zzw(): Unity.Mathematics.double3;
            public get zwx(): Unity.Mathematics.double3;
            public set zwx(value: Unity.Mathematics.double3);
            public get zwy(): Unity.Mathematics.double3;
            public set zwy(value: Unity.Mathematics.double3);
            public get zwz(): Unity.Mathematics.double3;
            public get zww(): Unity.Mathematics.double3;
            public get wxx(): Unity.Mathematics.double3;
            public get wxy(): Unity.Mathematics.double3;
            public set wxy(value: Unity.Mathematics.double3);
            public get wxz(): Unity.Mathematics.double3;
            public set wxz(value: Unity.Mathematics.double3);
            public get wxw(): Unity.Mathematics.double3;
            public get wyx(): Unity.Mathematics.double3;
            public set wyx(value: Unity.Mathematics.double3);
            public get wyy(): Unity.Mathematics.double3;
            public get wyz(): Unity.Mathematics.double3;
            public set wyz(value: Unity.Mathematics.double3);
            public get wyw(): Unity.Mathematics.double3;
            public get wzx(): Unity.Mathematics.double3;
            public set wzx(value: Unity.Mathematics.double3);
            public get wzy(): Unity.Mathematics.double3;
            public set wzy(value: Unity.Mathematics.double3);
            public get wzz(): Unity.Mathematics.double3;
            public get wzw(): Unity.Mathematics.double3;
            public get wwx(): Unity.Mathematics.double3;
            public get wwy(): Unity.Mathematics.double3;
            public get wwz(): Unity.Mathematics.double3;
            public get www(): Unity.Mathematics.double3;
            public get xx(): Unity.Mathematics.double2;
            public get xy(): Unity.Mathematics.double2;
            public set xy(value: Unity.Mathematics.double2);
            public get xz(): Unity.Mathematics.double2;
            public set xz(value: Unity.Mathematics.double2);
            public get xw(): Unity.Mathematics.double2;
            public set xw(value: Unity.Mathematics.double2);
            public get yx(): Unity.Mathematics.double2;
            public set yx(value: Unity.Mathematics.double2);
            public get yy(): Unity.Mathematics.double2;
            public get yz(): Unity.Mathematics.double2;
            public set yz(value: Unity.Mathematics.double2);
            public get yw(): Unity.Mathematics.double2;
            public set yw(value: Unity.Mathematics.double2);
            public get zx(): Unity.Mathematics.double2;
            public set zx(value: Unity.Mathematics.double2);
            public get zy(): Unity.Mathematics.double2;
            public set zy(value: Unity.Mathematics.double2);
            public get zz(): Unity.Mathematics.double2;
            public get zw(): Unity.Mathematics.double2;
            public set zw(value: Unity.Mathematics.double2);
            public get wx(): Unity.Mathematics.double2;
            public set wx(value: Unity.Mathematics.double2);
            public get wy(): Unity.Mathematics.double2;
            public set wy(value: Unity.Mathematics.double2);
            public get wz(): Unity.Mathematics.double2;
            public set wz(value: Unity.Mathematics.double2);
            public get ww(): Unity.Mathematics.double2;
            public static op_Implicit ($v: number) : Unity.Mathematics.double4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double4
            public static op_Explicit ($v: Unity.Mathematics.bool4) : Unity.Mathematics.double4
            public static op_Implicit ($v: Unity.Mathematics.int4) : Unity.Mathematics.double4
            public static op_Implicit ($v: Unity.Mathematics.uint4) : Unity.Mathematics.double4
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.double4
            public static op_Implicit ($v: Unity.Mathematics.half4) : Unity.Mathematics.double4
            public static op_Implicit ($v: Unity.Mathematics.float4) : Unity.Mathematics.double4
            public static op_Multiply ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Multiply ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.double4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Addition ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Addition ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.double4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Subtraction ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Subtraction ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.double4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Division ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Division ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.double4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Modulus ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Modulus ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.double4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Increment ($val: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Decrement ($val: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_LessThan ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_UnaryNegation ($val: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_UnaryPlus ($val: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public static op_Equality ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.double4, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.double4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double4) : Unity.Mathematics.bool4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.double4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $zw: Unity.Mathematics.double2)
            public constructor ($x: number, $yz: Unity.Mathematics.double2, $w: number)
            public constructor ($x: number, $yzw: Unity.Mathematics.double3)
            public constructor ($xy: Unity.Mathematics.double2, $z: number, $w: number)
            public constructor ($xy: Unity.Mathematics.double2, $zw: Unity.Mathematics.double2)
            public constructor ($xyz: Unity.Mathematics.double3, $w: number)
            public constructor ($xyzw: Unity.Mathematics.double4)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4)
            public constructor ($v: Unity.Mathematics.int4)
            public constructor ($v: Unity.Mathematics.uint4)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half4)
            public constructor ($v: Unity.Mathematics.float4)
        }
        class double2x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double2x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double2
            public c1 : Unity.Mathematics.double2
            public static identity : Unity.Mathematics.double2x2
            public static zero : Unity.Mathematics.double2x2
            public static op_Implicit ($v: number) : Unity.Mathematics.double2x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double2x2
            public static op_Explicit ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.double2x2
            public static op_Implicit ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.double2x2
            public static op_Implicit ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.double2x2
            public static op_Implicit ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.double2x2
            public static op_Multiply ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Multiply ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.double2x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Addition ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Addition ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.double2x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.double2x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Division ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Division ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.double2x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Modulus ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Modulus ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.double2x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Increment ($val: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Decrement ($val: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_LessThan ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_UnaryNegation ($val: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_UnaryPlus ($val: Unity.Mathematics.double2x2) : Unity.Mathematics.double2x2
            public static op_Equality ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.double2x2, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.double2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double2x2) : Unity.Mathematics.bool2x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double2>
            public Equals ($rhs: Unity.Mathematics.double2x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x2)
            public constructor ($v: Unity.Mathematics.int2x2)
            public constructor ($v: Unity.Mathematics.uint2x2)
            public constructor ($v: Unity.Mathematics.float2x2)
        }
        class int2x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int2x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int2
            public c1 : Unity.Mathematics.int2
            public static identity : Unity.Mathematics.int2x2
            public static zero : Unity.Mathematics.int2x2
            public static op_Implicit ($v: number) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: number) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.int2x2
            public static op_Explicit ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.int2x2
            public static op_Multiply ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Multiply ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Addition ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Addition ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Division ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Division ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Modulus ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Modulus ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Increment ($val: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_Decrement ($val: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_LessThan ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_UnaryNegation ($val: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_UnaryPlus ($val: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_LeftShift ($x: Unity.Mathematics.int2x2, $n: number) : Unity.Mathematics.int2x2
            public static op_RightShift ($x: Unity.Mathematics.int2x2, $n: number) : Unity.Mathematics.int2x2
            public static op_Equality ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.bool2x2
            public static op_OnesComplement ($val: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x2, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x2, $rhs: number) : Unity.Mathematics.int2x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int2x2) : Unity.Mathematics.int2x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int2>
            public Equals ($rhs: Unity.Mathematics.int2x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x2)
            public constructor ($v: Unity.Mathematics.uint2x2)
            public constructor ($v: Unity.Mathematics.float2x2)
            public constructor ($v: Unity.Mathematics.double2x2)
        }
        class uint2x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint2x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint2
            public c1 : Unity.Mathematics.uint2
            public static identity : Unity.Mathematics.uint2x2
            public static zero : Unity.Mathematics.uint2x2
            public static op_Implicit ($v: number) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: number) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: Unity.Mathematics.float2x2) : Unity.Mathematics.uint2x2
            public static op_Explicit ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.uint2x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Addition ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Addition ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Division ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Division ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Increment ($val: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_Decrement ($val: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_UnaryNegation ($val: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_UnaryPlus ($val: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_LeftShift ($x: Unity.Mathematics.uint2x2, $n: number) : Unity.Mathematics.uint2x2
            public static op_RightShift ($x: Unity.Mathematics.uint2x2, $n: number) : Unity.Mathematics.uint2x2
            public static op_Equality ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.bool2x2
            public static op_OnesComplement ($val: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x2, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x2, $rhs: number) : Unity.Mathematics.uint2x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint2x2) : Unity.Mathematics.uint2x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint2>
            public Equals ($rhs: Unity.Mathematics.uint2x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x2)
            public constructor ($v: Unity.Mathematics.int2x2)
            public constructor ($v: Unity.Mathematics.float2x2)
            public constructor ($v: Unity.Mathematics.double2x2)
        }
        class float2x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float2x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float2
            public c1 : Unity.Mathematics.float2
            public static identity : Unity.Mathematics.float2x2
            public static zero : Unity.Mathematics.float2x2
            public static op_Implicit ($v: number) : Unity.Mathematics.float2x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float2x2
            public static op_Explicit ($v: Unity.Mathematics.bool2x2) : Unity.Mathematics.float2x2
            public static op_Implicit ($v: Unity.Mathematics.int2x2) : Unity.Mathematics.float2x2
            public static op_Implicit ($v: Unity.Mathematics.uint2x2) : Unity.Mathematics.float2x2
            public static op_Explicit ($v: number) : Unity.Mathematics.float2x2
            public static op_Explicit ($v: Unity.Mathematics.double2x2) : Unity.Mathematics.float2x2
            public static op_Multiply ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Multiply ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.float2x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Addition ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Addition ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.float2x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.float2x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Division ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Division ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.float2x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Modulus ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Modulus ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.float2x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Increment ($val: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Decrement ($val: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_LessThan ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_UnaryNegation ($val: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_UnaryPlus ($val: Unity.Mathematics.float2x2) : Unity.Mathematics.float2x2
            public static op_Equality ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.float2x2, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: Unity.Mathematics.float2x2, $rhs: number) : Unity.Mathematics.bool2x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float2x2) : Unity.Mathematics.bool2x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float2>
            public Equals ($rhs: Unity.Mathematics.float2x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static Rotate ($angle: number) : Unity.Mathematics.float2x2
            public static Scale ($s: number) : Unity.Mathematics.float2x2
            public static Scale ($x: number, $y: number) : Unity.Mathematics.float2x2
            public static Scale ($v: Unity.Mathematics.float2) : Unity.Mathematics.float2x2
            public constructor ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x2)
            public constructor ($v: Unity.Mathematics.int2x2)
            public constructor ($v: Unity.Mathematics.uint2x2)
            public constructor ($v: Unity.Mathematics.double2x2)
        }
        class double2x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double2x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double2
            public c1 : Unity.Mathematics.double2
            public c2 : Unity.Mathematics.double2
            public static zero : Unity.Mathematics.double2x3
            public static op_Implicit ($v: number) : Unity.Mathematics.double2x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double2x3
            public static op_Explicit ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.double2x3
            public static op_Implicit ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.double2x3
            public static op_Implicit ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.double2x3
            public static op_Implicit ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.double2x3
            public static op_Multiply ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Multiply ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.double2x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Addition ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Addition ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.double2x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.double2x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Division ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Division ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.double2x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Modulus ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Modulus ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.double2x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Increment ($val: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Decrement ($val: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_LessThan ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_UnaryNegation ($val: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_UnaryPlus ($val: Unity.Mathematics.double2x3) : Unity.Mathematics.double2x3
            public static op_Equality ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.double2x3, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.double2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double2x3) : Unity.Mathematics.bool2x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double2>
            public Equals ($rhs: Unity.Mathematics.double2x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2, $c2: Unity.Mathematics.double2)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x3)
            public constructor ($v: Unity.Mathematics.int2x3)
            public constructor ($v: Unity.Mathematics.uint2x3)
            public constructor ($v: Unity.Mathematics.float2x3)
        }
        class int2x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int2x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int2
            public c1 : Unity.Mathematics.int2
            public c2 : Unity.Mathematics.int2
            public static zero : Unity.Mathematics.int2x3
            public static op_Implicit ($v: number) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: number) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.int2x3
            public static op_Explicit ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.int2x3
            public static op_Multiply ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Multiply ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Addition ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Addition ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Division ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Division ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Modulus ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Modulus ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Increment ($val: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_Decrement ($val: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_LessThan ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_UnaryNegation ($val: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_UnaryPlus ($val: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_LeftShift ($x: Unity.Mathematics.int2x3, $n: number) : Unity.Mathematics.int2x3
            public static op_RightShift ($x: Unity.Mathematics.int2x3, $n: number) : Unity.Mathematics.int2x3
            public static op_Equality ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.bool2x3
            public static op_OnesComplement ($val: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x3, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x3, $rhs: number) : Unity.Mathematics.int2x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int2x3) : Unity.Mathematics.int2x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int2>
            public Equals ($rhs: Unity.Mathematics.int2x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2, $c2: Unity.Mathematics.int2)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x3)
            public constructor ($v: Unity.Mathematics.uint2x3)
            public constructor ($v: Unity.Mathematics.float2x3)
            public constructor ($v: Unity.Mathematics.double2x3)
        }
        class uint2x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint2x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint2
            public c1 : Unity.Mathematics.uint2
            public c2 : Unity.Mathematics.uint2
            public static zero : Unity.Mathematics.uint2x3
            public static op_Implicit ($v: number) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: number) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: Unity.Mathematics.float2x3) : Unity.Mathematics.uint2x3
            public static op_Explicit ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.uint2x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Addition ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Addition ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Division ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Division ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Increment ($val: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_Decrement ($val: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_UnaryNegation ($val: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_UnaryPlus ($val: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_LeftShift ($x: Unity.Mathematics.uint2x3, $n: number) : Unity.Mathematics.uint2x3
            public static op_RightShift ($x: Unity.Mathematics.uint2x3, $n: number) : Unity.Mathematics.uint2x3
            public static op_Equality ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.bool2x3
            public static op_OnesComplement ($val: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x3, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x3, $rhs: number) : Unity.Mathematics.uint2x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint2x3) : Unity.Mathematics.uint2x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint2>
            public Equals ($rhs: Unity.Mathematics.uint2x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2, $c2: Unity.Mathematics.uint2)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x3)
            public constructor ($v: Unity.Mathematics.int2x3)
            public constructor ($v: Unity.Mathematics.float2x3)
            public constructor ($v: Unity.Mathematics.double2x3)
        }
        class float2x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float2x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float2
            public c1 : Unity.Mathematics.float2
            public c2 : Unity.Mathematics.float2
            public static zero : Unity.Mathematics.float2x3
            public static op_Implicit ($v: number) : Unity.Mathematics.float2x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float2x3
            public static op_Explicit ($v: Unity.Mathematics.bool2x3) : Unity.Mathematics.float2x3
            public static op_Implicit ($v: Unity.Mathematics.int2x3) : Unity.Mathematics.float2x3
            public static op_Implicit ($v: Unity.Mathematics.uint2x3) : Unity.Mathematics.float2x3
            public static op_Explicit ($v: number) : Unity.Mathematics.float2x3
            public static op_Explicit ($v: Unity.Mathematics.double2x3) : Unity.Mathematics.float2x3
            public static op_Multiply ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Multiply ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.float2x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Addition ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Addition ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.float2x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.float2x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Division ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Division ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.float2x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Modulus ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Modulus ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.float2x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Increment ($val: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Decrement ($val: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_LessThan ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_UnaryNegation ($val: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_UnaryPlus ($val: Unity.Mathematics.float2x3) : Unity.Mathematics.float2x3
            public static op_Equality ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.float2x3, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: Unity.Mathematics.float2x3, $rhs: number) : Unity.Mathematics.bool2x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float2x3) : Unity.Mathematics.bool2x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float2>
            public Equals ($rhs: Unity.Mathematics.float2x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2, $c2: Unity.Mathematics.float2)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x3)
            public constructor ($v: Unity.Mathematics.int2x3)
            public constructor ($v: Unity.Mathematics.uint2x3)
            public constructor ($v: Unity.Mathematics.double2x3)
        }
        class double3x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double3x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double3
            public c1 : Unity.Mathematics.double3
            public static zero : Unity.Mathematics.double3x2
            public static op_Implicit ($v: number) : Unity.Mathematics.double3x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double3x2
            public static op_Explicit ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.double3x2
            public static op_Implicit ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.double3x2
            public static op_Implicit ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.double3x2
            public static op_Implicit ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.double3x2
            public static op_Multiply ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Multiply ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.double3x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Addition ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Addition ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.double3x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.double3x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Division ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Division ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.double3x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Modulus ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Modulus ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.double3x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Increment ($val: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Decrement ($val: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_LessThan ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_UnaryNegation ($val: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_UnaryPlus ($val: Unity.Mathematics.double3x2) : Unity.Mathematics.double3x2
            public static op_Equality ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.double3x2, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.double3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double3x2) : Unity.Mathematics.bool3x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double3>
            public Equals ($rhs: Unity.Mathematics.double3x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x2)
            public constructor ($v: Unity.Mathematics.int3x2)
            public constructor ($v: Unity.Mathematics.uint3x2)
            public constructor ($v: Unity.Mathematics.float3x2)
        }
        class double2x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double2x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double2
            public c1 : Unity.Mathematics.double2
            public c2 : Unity.Mathematics.double2
            public c3 : Unity.Mathematics.double2
            public static zero : Unity.Mathematics.double2x4
            public static op_Implicit ($v: number) : Unity.Mathematics.double2x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double2x4
            public static op_Explicit ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.double2x4
            public static op_Implicit ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.double2x4
            public static op_Implicit ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.double2x4
            public static op_Implicit ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.double2x4
            public static op_Multiply ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Multiply ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.double2x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Addition ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Addition ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.double2x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.double2x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Division ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Division ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.double2x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Modulus ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Modulus ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.double2x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Increment ($val: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Decrement ($val: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_LessThan ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_UnaryNegation ($val: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_UnaryPlus ($val: Unity.Mathematics.double2x4) : Unity.Mathematics.double2x4
            public static op_Equality ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.double2x4, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.double2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double2x4) : Unity.Mathematics.bool2x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double2>
            public Equals ($rhs: Unity.Mathematics.double2x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double2, $c1: Unity.Mathematics.double2, $c2: Unity.Mathematics.double2, $c3: Unity.Mathematics.double2)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x4)
            public constructor ($v: Unity.Mathematics.int2x4)
            public constructor ($v: Unity.Mathematics.uint2x4)
            public constructor ($v: Unity.Mathematics.float2x4)
        }
        class int2x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int2x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int2
            public c1 : Unity.Mathematics.int2
            public c2 : Unity.Mathematics.int2
            public c3 : Unity.Mathematics.int2
            public static zero : Unity.Mathematics.int2x4
            public static op_Implicit ($v: number) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: number) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.int2x4
            public static op_Explicit ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.int2x4
            public static op_Multiply ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Multiply ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Addition ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Addition ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Division ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Division ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Modulus ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Modulus ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Increment ($val: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_Decrement ($val: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_LessThan ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_UnaryNegation ($val: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_UnaryPlus ($val: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_LeftShift ($x: Unity.Mathematics.int2x4, $n: number) : Unity.Mathematics.int2x4
            public static op_RightShift ($x: Unity.Mathematics.int2x4, $n: number) : Unity.Mathematics.int2x4
            public static op_Equality ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.bool2x4
            public static op_OnesComplement ($val: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x4, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int2x4, $rhs: number) : Unity.Mathematics.int2x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int2x4) : Unity.Mathematics.int2x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int2>
            public Equals ($rhs: Unity.Mathematics.int2x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int2, $c1: Unity.Mathematics.int2, $c2: Unity.Mathematics.int2, $c3: Unity.Mathematics.int2)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x4)
            public constructor ($v: Unity.Mathematics.uint2x4)
            public constructor ($v: Unity.Mathematics.float2x4)
            public constructor ($v: Unity.Mathematics.double2x4)
        }
        class uint2x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint2x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint2
            public c1 : Unity.Mathematics.uint2
            public c2 : Unity.Mathematics.uint2
            public c3 : Unity.Mathematics.uint2
            public static zero : Unity.Mathematics.uint2x4
            public static op_Implicit ($v: number) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: number) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: Unity.Mathematics.float2x4) : Unity.Mathematics.uint2x4
            public static op_Explicit ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.uint2x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Addition ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Addition ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Division ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Division ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Increment ($val: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_Decrement ($val: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_UnaryNegation ($val: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_UnaryPlus ($val: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_LeftShift ($x: Unity.Mathematics.uint2x4, $n: number) : Unity.Mathematics.uint2x4
            public static op_RightShift ($x: Unity.Mathematics.uint2x4, $n: number) : Unity.Mathematics.uint2x4
            public static op_Equality ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.bool2x4
            public static op_OnesComplement ($val: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x4, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint2x4, $rhs: number) : Unity.Mathematics.uint2x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint2x4) : Unity.Mathematics.uint2x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint2>
            public Equals ($rhs: Unity.Mathematics.uint2x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint2, $c1: Unity.Mathematics.uint2, $c2: Unity.Mathematics.uint2, $c3: Unity.Mathematics.uint2)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x4)
            public constructor ($v: Unity.Mathematics.int2x4)
            public constructor ($v: Unity.Mathematics.float2x4)
            public constructor ($v: Unity.Mathematics.double2x4)
        }
        class float2x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float2x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float2
            public c1 : Unity.Mathematics.float2
            public c2 : Unity.Mathematics.float2
            public c3 : Unity.Mathematics.float2
            public static zero : Unity.Mathematics.float2x4
            public static op_Implicit ($v: number) : Unity.Mathematics.float2x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float2x4
            public static op_Explicit ($v: Unity.Mathematics.bool2x4) : Unity.Mathematics.float2x4
            public static op_Implicit ($v: Unity.Mathematics.int2x4) : Unity.Mathematics.float2x4
            public static op_Implicit ($v: Unity.Mathematics.uint2x4) : Unity.Mathematics.float2x4
            public static op_Explicit ($v: number) : Unity.Mathematics.float2x4
            public static op_Explicit ($v: Unity.Mathematics.double2x4) : Unity.Mathematics.float2x4
            public static op_Multiply ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Multiply ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.float2x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Addition ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Addition ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.float2x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.float2x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Division ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Division ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.float2x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Modulus ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Modulus ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.float2x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Increment ($val: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Decrement ($val: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_LessThan ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_UnaryNegation ($val: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_UnaryPlus ($val: Unity.Mathematics.float2x4) : Unity.Mathematics.float2x4
            public static op_Equality ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.float2x4, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: Unity.Mathematics.float2x4, $rhs: number) : Unity.Mathematics.bool2x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float2x4) : Unity.Mathematics.bool2x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float2>
            public Equals ($rhs: Unity.Mathematics.float2x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float2, $c1: Unity.Mathematics.float2, $c2: Unity.Mathematics.float2, $c3: Unity.Mathematics.float2)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool2x4)
            public constructor ($v: Unity.Mathematics.int2x4)
            public constructor ($v: Unity.Mathematics.uint2x4)
            public constructor ($v: Unity.Mathematics.double2x4)
        }
        class double4x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double4x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double4
            public c1 : Unity.Mathematics.double4
            public static zero : Unity.Mathematics.double4x2
            public static op_Implicit ($v: number) : Unity.Mathematics.double4x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double4x2
            public static op_Explicit ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.double4x2
            public static op_Implicit ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.double4x2
            public static op_Implicit ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.double4x2
            public static op_Implicit ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.double4x2
            public static op_Multiply ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Multiply ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.double4x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Addition ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Addition ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.double4x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.double4x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Division ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Division ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.double4x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Modulus ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Modulus ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.double4x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Increment ($val: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Decrement ($val: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_LessThan ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_UnaryNegation ($val: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_UnaryPlus ($val: Unity.Mathematics.double4x2) : Unity.Mathematics.double4x2
            public static op_Equality ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.double4x2, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.double4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double4x2) : Unity.Mathematics.bool4x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double4>
            public Equals ($rhs: Unity.Mathematics.double4x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x2)
            public constructor ($v: Unity.Mathematics.int4x2)
            public constructor ($v: Unity.Mathematics.uint4x2)
            public constructor ($v: Unity.Mathematics.float4x2)
        }
        class int3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int3>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public static zero : Unity.Mathematics.int3
            public get xxxx(): Unity.Mathematics.int4;
            public get xxxy(): Unity.Mathematics.int4;
            public get xxxz(): Unity.Mathematics.int4;
            public get xxyx(): Unity.Mathematics.int4;
            public get xxyy(): Unity.Mathematics.int4;
            public get xxyz(): Unity.Mathematics.int4;
            public get xxzx(): Unity.Mathematics.int4;
            public get xxzy(): Unity.Mathematics.int4;
            public get xxzz(): Unity.Mathematics.int4;
            public get xyxx(): Unity.Mathematics.int4;
            public get xyxy(): Unity.Mathematics.int4;
            public get xyxz(): Unity.Mathematics.int4;
            public get xyyx(): Unity.Mathematics.int4;
            public get xyyy(): Unity.Mathematics.int4;
            public get xyyz(): Unity.Mathematics.int4;
            public get xyzx(): Unity.Mathematics.int4;
            public get xyzy(): Unity.Mathematics.int4;
            public get xyzz(): Unity.Mathematics.int4;
            public get xzxx(): Unity.Mathematics.int4;
            public get xzxy(): Unity.Mathematics.int4;
            public get xzxz(): Unity.Mathematics.int4;
            public get xzyx(): Unity.Mathematics.int4;
            public get xzyy(): Unity.Mathematics.int4;
            public get xzyz(): Unity.Mathematics.int4;
            public get xzzx(): Unity.Mathematics.int4;
            public get xzzy(): Unity.Mathematics.int4;
            public get xzzz(): Unity.Mathematics.int4;
            public get yxxx(): Unity.Mathematics.int4;
            public get yxxy(): Unity.Mathematics.int4;
            public get yxxz(): Unity.Mathematics.int4;
            public get yxyx(): Unity.Mathematics.int4;
            public get yxyy(): Unity.Mathematics.int4;
            public get yxyz(): Unity.Mathematics.int4;
            public get yxzx(): Unity.Mathematics.int4;
            public get yxzy(): Unity.Mathematics.int4;
            public get yxzz(): Unity.Mathematics.int4;
            public get yyxx(): Unity.Mathematics.int4;
            public get yyxy(): Unity.Mathematics.int4;
            public get yyxz(): Unity.Mathematics.int4;
            public get yyyx(): Unity.Mathematics.int4;
            public get yyyy(): Unity.Mathematics.int4;
            public get yyyz(): Unity.Mathematics.int4;
            public get yyzx(): Unity.Mathematics.int4;
            public get yyzy(): Unity.Mathematics.int4;
            public get yyzz(): Unity.Mathematics.int4;
            public get yzxx(): Unity.Mathematics.int4;
            public get yzxy(): Unity.Mathematics.int4;
            public get yzxz(): Unity.Mathematics.int4;
            public get yzyx(): Unity.Mathematics.int4;
            public get yzyy(): Unity.Mathematics.int4;
            public get yzyz(): Unity.Mathematics.int4;
            public get yzzx(): Unity.Mathematics.int4;
            public get yzzy(): Unity.Mathematics.int4;
            public get yzzz(): Unity.Mathematics.int4;
            public get zxxx(): Unity.Mathematics.int4;
            public get zxxy(): Unity.Mathematics.int4;
            public get zxxz(): Unity.Mathematics.int4;
            public get zxyx(): Unity.Mathematics.int4;
            public get zxyy(): Unity.Mathematics.int4;
            public get zxyz(): Unity.Mathematics.int4;
            public get zxzx(): Unity.Mathematics.int4;
            public get zxzy(): Unity.Mathematics.int4;
            public get zxzz(): Unity.Mathematics.int4;
            public get zyxx(): Unity.Mathematics.int4;
            public get zyxy(): Unity.Mathematics.int4;
            public get zyxz(): Unity.Mathematics.int4;
            public get zyyx(): Unity.Mathematics.int4;
            public get zyyy(): Unity.Mathematics.int4;
            public get zyyz(): Unity.Mathematics.int4;
            public get zyzx(): Unity.Mathematics.int4;
            public get zyzy(): Unity.Mathematics.int4;
            public get zyzz(): Unity.Mathematics.int4;
            public get zzxx(): Unity.Mathematics.int4;
            public get zzxy(): Unity.Mathematics.int4;
            public get zzxz(): Unity.Mathematics.int4;
            public get zzyx(): Unity.Mathematics.int4;
            public get zzyy(): Unity.Mathematics.int4;
            public get zzyz(): Unity.Mathematics.int4;
            public get zzzx(): Unity.Mathematics.int4;
            public get zzzy(): Unity.Mathematics.int4;
            public get zzzz(): Unity.Mathematics.int4;
            public get xxx(): Unity.Mathematics.int3;
            public get xxy(): Unity.Mathematics.int3;
            public get xxz(): Unity.Mathematics.int3;
            public get xyx(): Unity.Mathematics.int3;
            public get xyy(): Unity.Mathematics.int3;
            public get xyz(): Unity.Mathematics.int3;
            public set xyz(value: Unity.Mathematics.int3);
            public get xzx(): Unity.Mathematics.int3;
            public get xzy(): Unity.Mathematics.int3;
            public set xzy(value: Unity.Mathematics.int3);
            public get xzz(): Unity.Mathematics.int3;
            public get yxx(): Unity.Mathematics.int3;
            public get yxy(): Unity.Mathematics.int3;
            public get yxz(): Unity.Mathematics.int3;
            public set yxz(value: Unity.Mathematics.int3);
            public get yyx(): Unity.Mathematics.int3;
            public get yyy(): Unity.Mathematics.int3;
            public get yyz(): Unity.Mathematics.int3;
            public get yzx(): Unity.Mathematics.int3;
            public set yzx(value: Unity.Mathematics.int3);
            public get yzy(): Unity.Mathematics.int3;
            public get yzz(): Unity.Mathematics.int3;
            public get zxx(): Unity.Mathematics.int3;
            public get zxy(): Unity.Mathematics.int3;
            public set zxy(value: Unity.Mathematics.int3);
            public get zxz(): Unity.Mathematics.int3;
            public get zyx(): Unity.Mathematics.int3;
            public set zyx(value: Unity.Mathematics.int3);
            public get zyy(): Unity.Mathematics.int3;
            public get zyz(): Unity.Mathematics.int3;
            public get zzx(): Unity.Mathematics.int3;
            public get zzy(): Unity.Mathematics.int3;
            public get zzz(): Unity.Mathematics.int3;
            public get xx(): Unity.Mathematics.int2;
            public get xy(): Unity.Mathematics.int2;
            public set xy(value: Unity.Mathematics.int2);
            public get xz(): Unity.Mathematics.int2;
            public set xz(value: Unity.Mathematics.int2);
            public get yx(): Unity.Mathematics.int2;
            public set yx(value: Unity.Mathematics.int2);
            public get yy(): Unity.Mathematics.int2;
            public get yz(): Unity.Mathematics.int2;
            public set yz(value: Unity.Mathematics.int2);
            public get zx(): Unity.Mathematics.int2;
            public set zx(value: Unity.Mathematics.int2);
            public get zy(): Unity.Mathematics.int2;
            public set zy(value: Unity.Mathematics.int2);
            public get zz(): Unity.Mathematics.int2;
            public static op_Implicit ($v: number) : Unity.Mathematics.int3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int3
            public static op_Explicit ($v: Unity.Mathematics.bool3) : Unity.Mathematics.int3
            public static op_Explicit ($v: number) : Unity.Mathematics.int3
            public static op_Explicit ($v: Unity.Mathematics.uint3) : Unity.Mathematics.int3
            public static op_Explicit ($v: Unity.Mathematics.float3) : Unity.Mathematics.int3
            public static op_Explicit ($v: Unity.Mathematics.double3) : Unity.Mathematics.int3
            public static op_Multiply ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Multiply ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Addition ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Addition ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Subtraction ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Subtraction ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Division ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Division ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Modulus ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Modulus ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Increment ($val: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_Decrement ($val: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_LessThan ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_UnaryNegation ($val: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_UnaryPlus ($val: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_LeftShift ($x: Unity.Mathematics.int3, $n: number) : Unity.Mathematics.int3
            public static op_RightShift ($x: Unity.Mathematics.int3, $n: number) : Unity.Mathematics.int3
            public static op_Equality ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.bool3
            public static op_OnesComplement ($val: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3, $rhs: number) : Unity.Mathematics.int3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.int3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $yz: Unity.Mathematics.int2)
            public constructor ($xy: Unity.Mathematics.int2, $z: number)
            public constructor ($xyz: Unity.Mathematics.int3)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3)
            public constructor ($v: Unity.Mathematics.uint3)
            public constructor ($v: Unity.Mathematics.float3)
            public constructor ($v: Unity.Mathematics.double3)
        }
        class half3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.half3>
        {
            protected [__keep_incompatibility]: never;
            public x : Unity.Mathematics.half
            public y : Unity.Mathematics.half
            public z : Unity.Mathematics.half
            public static zero : Unity.Mathematics.half3
            public get xxxx(): Unity.Mathematics.half4;
            public get xxxy(): Unity.Mathematics.half4;
            public get xxxz(): Unity.Mathematics.half4;
            public get xxyx(): Unity.Mathematics.half4;
            public get xxyy(): Unity.Mathematics.half4;
            public get xxyz(): Unity.Mathematics.half4;
            public get xxzx(): Unity.Mathematics.half4;
            public get xxzy(): Unity.Mathematics.half4;
            public get xxzz(): Unity.Mathematics.half4;
            public get xyxx(): Unity.Mathematics.half4;
            public get xyxy(): Unity.Mathematics.half4;
            public get xyxz(): Unity.Mathematics.half4;
            public get xyyx(): Unity.Mathematics.half4;
            public get xyyy(): Unity.Mathematics.half4;
            public get xyyz(): Unity.Mathematics.half4;
            public get xyzx(): Unity.Mathematics.half4;
            public get xyzy(): Unity.Mathematics.half4;
            public get xyzz(): Unity.Mathematics.half4;
            public get xzxx(): Unity.Mathematics.half4;
            public get xzxy(): Unity.Mathematics.half4;
            public get xzxz(): Unity.Mathematics.half4;
            public get xzyx(): Unity.Mathematics.half4;
            public get xzyy(): Unity.Mathematics.half4;
            public get xzyz(): Unity.Mathematics.half4;
            public get xzzx(): Unity.Mathematics.half4;
            public get xzzy(): Unity.Mathematics.half4;
            public get xzzz(): Unity.Mathematics.half4;
            public get yxxx(): Unity.Mathematics.half4;
            public get yxxy(): Unity.Mathematics.half4;
            public get yxxz(): Unity.Mathematics.half4;
            public get yxyx(): Unity.Mathematics.half4;
            public get yxyy(): Unity.Mathematics.half4;
            public get yxyz(): Unity.Mathematics.half4;
            public get yxzx(): Unity.Mathematics.half4;
            public get yxzy(): Unity.Mathematics.half4;
            public get yxzz(): Unity.Mathematics.half4;
            public get yyxx(): Unity.Mathematics.half4;
            public get yyxy(): Unity.Mathematics.half4;
            public get yyxz(): Unity.Mathematics.half4;
            public get yyyx(): Unity.Mathematics.half4;
            public get yyyy(): Unity.Mathematics.half4;
            public get yyyz(): Unity.Mathematics.half4;
            public get yyzx(): Unity.Mathematics.half4;
            public get yyzy(): Unity.Mathematics.half4;
            public get yyzz(): Unity.Mathematics.half4;
            public get yzxx(): Unity.Mathematics.half4;
            public get yzxy(): Unity.Mathematics.half4;
            public get yzxz(): Unity.Mathematics.half4;
            public get yzyx(): Unity.Mathematics.half4;
            public get yzyy(): Unity.Mathematics.half4;
            public get yzyz(): Unity.Mathematics.half4;
            public get yzzx(): Unity.Mathematics.half4;
            public get yzzy(): Unity.Mathematics.half4;
            public get yzzz(): Unity.Mathematics.half4;
            public get zxxx(): Unity.Mathematics.half4;
            public get zxxy(): Unity.Mathematics.half4;
            public get zxxz(): Unity.Mathematics.half4;
            public get zxyx(): Unity.Mathematics.half4;
            public get zxyy(): Unity.Mathematics.half4;
            public get zxyz(): Unity.Mathematics.half4;
            public get zxzx(): Unity.Mathematics.half4;
            public get zxzy(): Unity.Mathematics.half4;
            public get zxzz(): Unity.Mathematics.half4;
            public get zyxx(): Unity.Mathematics.half4;
            public get zyxy(): Unity.Mathematics.half4;
            public get zyxz(): Unity.Mathematics.half4;
            public get zyyx(): Unity.Mathematics.half4;
            public get zyyy(): Unity.Mathematics.half4;
            public get zyyz(): Unity.Mathematics.half4;
            public get zyzx(): Unity.Mathematics.half4;
            public get zyzy(): Unity.Mathematics.half4;
            public get zyzz(): Unity.Mathematics.half4;
            public get zzxx(): Unity.Mathematics.half4;
            public get zzxy(): Unity.Mathematics.half4;
            public get zzxz(): Unity.Mathematics.half4;
            public get zzyx(): Unity.Mathematics.half4;
            public get zzyy(): Unity.Mathematics.half4;
            public get zzyz(): Unity.Mathematics.half4;
            public get zzzx(): Unity.Mathematics.half4;
            public get zzzy(): Unity.Mathematics.half4;
            public get zzzz(): Unity.Mathematics.half4;
            public get xxx(): Unity.Mathematics.half3;
            public get xxy(): Unity.Mathematics.half3;
            public get xxz(): Unity.Mathematics.half3;
            public get xyx(): Unity.Mathematics.half3;
            public get xyy(): Unity.Mathematics.half3;
            public get xyz(): Unity.Mathematics.half3;
            public set xyz(value: Unity.Mathematics.half3);
            public get xzx(): Unity.Mathematics.half3;
            public get xzy(): Unity.Mathematics.half3;
            public set xzy(value: Unity.Mathematics.half3);
            public get xzz(): Unity.Mathematics.half3;
            public get yxx(): Unity.Mathematics.half3;
            public get yxy(): Unity.Mathematics.half3;
            public get yxz(): Unity.Mathematics.half3;
            public set yxz(value: Unity.Mathematics.half3);
            public get yyx(): Unity.Mathematics.half3;
            public get yyy(): Unity.Mathematics.half3;
            public get yyz(): Unity.Mathematics.half3;
            public get yzx(): Unity.Mathematics.half3;
            public set yzx(value: Unity.Mathematics.half3);
            public get yzy(): Unity.Mathematics.half3;
            public get yzz(): Unity.Mathematics.half3;
            public get zxx(): Unity.Mathematics.half3;
            public get zxy(): Unity.Mathematics.half3;
            public set zxy(value: Unity.Mathematics.half3);
            public get zxz(): Unity.Mathematics.half3;
            public get zyx(): Unity.Mathematics.half3;
            public set zyx(value: Unity.Mathematics.half3);
            public get zyy(): Unity.Mathematics.half3;
            public get zyz(): Unity.Mathematics.half3;
            public get zzx(): Unity.Mathematics.half3;
            public get zzy(): Unity.Mathematics.half3;
            public get zzz(): Unity.Mathematics.half3;
            public get xx(): Unity.Mathematics.half2;
            public get xy(): Unity.Mathematics.half2;
            public set xy(value: Unity.Mathematics.half2);
            public get xz(): Unity.Mathematics.half2;
            public set xz(value: Unity.Mathematics.half2);
            public get yx(): Unity.Mathematics.half2;
            public set yx(value: Unity.Mathematics.half2);
            public get yy(): Unity.Mathematics.half2;
            public get yz(): Unity.Mathematics.half2;
            public set yz(value: Unity.Mathematics.half2);
            public get zx(): Unity.Mathematics.half2;
            public set zx(value: Unity.Mathematics.half2);
            public get zy(): Unity.Mathematics.half2;
            public set zy(value: Unity.Mathematics.half2);
            public get zz(): Unity.Mathematics.half2;
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.half3
            public static op_Explicit ($v: number) : Unity.Mathematics.half3
            public static op_Explicit ($v: Unity.Mathematics.float3) : Unity.Mathematics.half3
            public static op_Explicit ($v: Unity.Mathematics.double3) : Unity.Mathematics.half3
            public static op_Equality ($lhs: Unity.Mathematics.half3, $rhs: Unity.Mathematics.half3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.half3, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.half3, $rhs: Unity.Mathematics.half3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.half3, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half3) : Unity.Mathematics.bool3
            public get_Item ($index: number) : Unity.Mathematics.half
            public set_Item ($index: number, $value: Unity.Mathematics.half) : void
            public Equals ($rhs: Unity.Mathematics.half3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $z: Unity.Mathematics.half)
            public constructor ($x: Unity.Mathematics.half, $yz: Unity.Mathematics.half2)
            public constructor ($xy: Unity.Mathematics.half2, $z: Unity.Mathematics.half)
            public constructor ($xyz: Unity.Mathematics.half3)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: number)
            public constructor ($v: Unity.Mathematics.float3)
            public constructor ($v: Unity.Mathematics.double3)
        }
        class float3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float3>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public static zero : Unity.Mathematics.float3
            public get xxxx(): Unity.Mathematics.float4;
            public get xxxy(): Unity.Mathematics.float4;
            public get xxxz(): Unity.Mathematics.float4;
            public get xxyx(): Unity.Mathematics.float4;
            public get xxyy(): Unity.Mathematics.float4;
            public get xxyz(): Unity.Mathematics.float4;
            public get xxzx(): Unity.Mathematics.float4;
            public get xxzy(): Unity.Mathematics.float4;
            public get xxzz(): Unity.Mathematics.float4;
            public get xyxx(): Unity.Mathematics.float4;
            public get xyxy(): Unity.Mathematics.float4;
            public get xyxz(): Unity.Mathematics.float4;
            public get xyyx(): Unity.Mathematics.float4;
            public get xyyy(): Unity.Mathematics.float4;
            public get xyyz(): Unity.Mathematics.float4;
            public get xyzx(): Unity.Mathematics.float4;
            public get xyzy(): Unity.Mathematics.float4;
            public get xyzz(): Unity.Mathematics.float4;
            public get xzxx(): Unity.Mathematics.float4;
            public get xzxy(): Unity.Mathematics.float4;
            public get xzxz(): Unity.Mathematics.float4;
            public get xzyx(): Unity.Mathematics.float4;
            public get xzyy(): Unity.Mathematics.float4;
            public get xzyz(): Unity.Mathematics.float4;
            public get xzzx(): Unity.Mathematics.float4;
            public get xzzy(): Unity.Mathematics.float4;
            public get xzzz(): Unity.Mathematics.float4;
            public get yxxx(): Unity.Mathematics.float4;
            public get yxxy(): Unity.Mathematics.float4;
            public get yxxz(): Unity.Mathematics.float4;
            public get yxyx(): Unity.Mathematics.float4;
            public get yxyy(): Unity.Mathematics.float4;
            public get yxyz(): Unity.Mathematics.float4;
            public get yxzx(): Unity.Mathematics.float4;
            public get yxzy(): Unity.Mathematics.float4;
            public get yxzz(): Unity.Mathematics.float4;
            public get yyxx(): Unity.Mathematics.float4;
            public get yyxy(): Unity.Mathematics.float4;
            public get yyxz(): Unity.Mathematics.float4;
            public get yyyx(): Unity.Mathematics.float4;
            public get yyyy(): Unity.Mathematics.float4;
            public get yyyz(): Unity.Mathematics.float4;
            public get yyzx(): Unity.Mathematics.float4;
            public get yyzy(): Unity.Mathematics.float4;
            public get yyzz(): Unity.Mathematics.float4;
            public get yzxx(): Unity.Mathematics.float4;
            public get yzxy(): Unity.Mathematics.float4;
            public get yzxz(): Unity.Mathematics.float4;
            public get yzyx(): Unity.Mathematics.float4;
            public get yzyy(): Unity.Mathematics.float4;
            public get yzyz(): Unity.Mathematics.float4;
            public get yzzx(): Unity.Mathematics.float4;
            public get yzzy(): Unity.Mathematics.float4;
            public get yzzz(): Unity.Mathematics.float4;
            public get zxxx(): Unity.Mathematics.float4;
            public get zxxy(): Unity.Mathematics.float4;
            public get zxxz(): Unity.Mathematics.float4;
            public get zxyx(): Unity.Mathematics.float4;
            public get zxyy(): Unity.Mathematics.float4;
            public get zxyz(): Unity.Mathematics.float4;
            public get zxzx(): Unity.Mathematics.float4;
            public get zxzy(): Unity.Mathematics.float4;
            public get zxzz(): Unity.Mathematics.float4;
            public get zyxx(): Unity.Mathematics.float4;
            public get zyxy(): Unity.Mathematics.float4;
            public get zyxz(): Unity.Mathematics.float4;
            public get zyyx(): Unity.Mathematics.float4;
            public get zyyy(): Unity.Mathematics.float4;
            public get zyyz(): Unity.Mathematics.float4;
            public get zyzx(): Unity.Mathematics.float4;
            public get zyzy(): Unity.Mathematics.float4;
            public get zyzz(): Unity.Mathematics.float4;
            public get zzxx(): Unity.Mathematics.float4;
            public get zzxy(): Unity.Mathematics.float4;
            public get zzxz(): Unity.Mathematics.float4;
            public get zzyx(): Unity.Mathematics.float4;
            public get zzyy(): Unity.Mathematics.float4;
            public get zzyz(): Unity.Mathematics.float4;
            public get zzzx(): Unity.Mathematics.float4;
            public get zzzy(): Unity.Mathematics.float4;
            public get zzzz(): Unity.Mathematics.float4;
            public get xxx(): Unity.Mathematics.float3;
            public get xxy(): Unity.Mathematics.float3;
            public get xxz(): Unity.Mathematics.float3;
            public get xyx(): Unity.Mathematics.float3;
            public get xyy(): Unity.Mathematics.float3;
            public get xyz(): Unity.Mathematics.float3;
            public set xyz(value: Unity.Mathematics.float3);
            public get xzx(): Unity.Mathematics.float3;
            public get xzy(): Unity.Mathematics.float3;
            public set xzy(value: Unity.Mathematics.float3);
            public get xzz(): Unity.Mathematics.float3;
            public get yxx(): Unity.Mathematics.float3;
            public get yxy(): Unity.Mathematics.float3;
            public get yxz(): Unity.Mathematics.float3;
            public set yxz(value: Unity.Mathematics.float3);
            public get yyx(): Unity.Mathematics.float3;
            public get yyy(): Unity.Mathematics.float3;
            public get yyz(): Unity.Mathematics.float3;
            public get yzx(): Unity.Mathematics.float3;
            public set yzx(value: Unity.Mathematics.float3);
            public get yzy(): Unity.Mathematics.float3;
            public get yzz(): Unity.Mathematics.float3;
            public get zxx(): Unity.Mathematics.float3;
            public get zxy(): Unity.Mathematics.float3;
            public set zxy(value: Unity.Mathematics.float3);
            public get zxz(): Unity.Mathematics.float3;
            public get zyx(): Unity.Mathematics.float3;
            public set zyx(value: Unity.Mathematics.float3);
            public get zyy(): Unity.Mathematics.float3;
            public get zyz(): Unity.Mathematics.float3;
            public get zzx(): Unity.Mathematics.float3;
            public get zzy(): Unity.Mathematics.float3;
            public get zzz(): Unity.Mathematics.float3;
            public get xx(): Unity.Mathematics.float2;
            public get xy(): Unity.Mathematics.float2;
            public set xy(value: Unity.Mathematics.float2);
            public get xz(): Unity.Mathematics.float2;
            public set xz(value: Unity.Mathematics.float2);
            public get yx(): Unity.Mathematics.float2;
            public set yx(value: Unity.Mathematics.float2);
            public get yy(): Unity.Mathematics.float2;
            public get yz(): Unity.Mathematics.float2;
            public set yz(value: Unity.Mathematics.float2);
            public get zx(): Unity.Mathematics.float2;
            public set zx(value: Unity.Mathematics.float2);
            public get zy(): Unity.Mathematics.float2;
            public set zy(value: Unity.Mathematics.float2);
            public get zz(): Unity.Mathematics.float2;
            public static op_Implicit ($v: number) : Unity.Mathematics.float3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float3
            public static op_Explicit ($v: Unity.Mathematics.bool3) : Unity.Mathematics.float3
            public static op_Implicit ($v: Unity.Mathematics.int3) : Unity.Mathematics.float3
            public static op_Implicit ($v: Unity.Mathematics.uint3) : Unity.Mathematics.float3
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.float3
            public static op_Implicit ($v: Unity.Mathematics.half3) : Unity.Mathematics.float3
            public static op_Explicit ($v: number) : Unity.Mathematics.float3
            public static op_Explicit ($v: Unity.Mathematics.double3) : Unity.Mathematics.float3
            public static op_Multiply ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Multiply ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.float3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Addition ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Addition ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.float3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Subtraction ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Subtraction ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.float3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Division ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Division ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.float3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Modulus ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Modulus ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.float3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Increment ($val: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Decrement ($val: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_LessThan ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_UnaryNegation ($val: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_UnaryPlus ($val: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public static op_Equality ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.float3, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: Unity.Mathematics.float3, $rhs: number) : Unity.Mathematics.bool3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float3) : Unity.Mathematics.bool3
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.float3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Implicit ($v: Unity.Mathematics.float3) : UnityEngine.Vector3
            public static op_Implicit ($v: UnityEngine.Vector3) : Unity.Mathematics.float3
            public constructor ($x: number, $y: number, $z: number)
            public constructor ($x: number, $yz: Unity.Mathematics.float2)
            public constructor ($xy: Unity.Mathematics.float2, $z: number)
            public constructor ($xyz: Unity.Mathematics.float3)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3)
            public constructor ($v: Unity.Mathematics.int3)
            public constructor ($v: Unity.Mathematics.uint3)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half3)
            public constructor ($v: Unity.Mathematics.double3)
        }
        class int3x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int3x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int3
            public c1 : Unity.Mathematics.int3
            public static zero : Unity.Mathematics.int3x2
            public static op_Implicit ($v: number) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: number) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.int3x2
            public static op_Explicit ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.int3x2
            public static op_Multiply ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Multiply ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Addition ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Addition ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Division ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Division ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Modulus ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Modulus ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Increment ($val: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_Decrement ($val: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_LessThan ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_UnaryNegation ($val: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_UnaryPlus ($val: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_LeftShift ($x: Unity.Mathematics.int3x2, $n: number) : Unity.Mathematics.int3x2
            public static op_RightShift ($x: Unity.Mathematics.int3x2, $n: number) : Unity.Mathematics.int3x2
            public static op_Equality ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.bool3x2
            public static op_OnesComplement ($val: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x2, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x2, $rhs: number) : Unity.Mathematics.int3x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int3x2) : Unity.Mathematics.int3x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int3>
            public Equals ($rhs: Unity.Mathematics.int3x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x2)
            public constructor ($v: Unity.Mathematics.uint3x2)
            public constructor ($v: Unity.Mathematics.float3x2)
            public constructor ($v: Unity.Mathematics.double3x2)
        }
        class uint3x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint3x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint3
            public c1 : Unity.Mathematics.uint3
            public static zero : Unity.Mathematics.uint3x2
            public static op_Implicit ($v: number) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: number) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: Unity.Mathematics.float3x2) : Unity.Mathematics.uint3x2
            public static op_Explicit ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.uint3x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Addition ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Addition ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Division ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Division ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Increment ($val: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_Decrement ($val: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_UnaryNegation ($val: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_UnaryPlus ($val: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_LeftShift ($x: Unity.Mathematics.uint3x2, $n: number) : Unity.Mathematics.uint3x2
            public static op_RightShift ($x: Unity.Mathematics.uint3x2, $n: number) : Unity.Mathematics.uint3x2
            public static op_Equality ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.bool3x2
            public static op_OnesComplement ($val: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x2, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x2, $rhs: number) : Unity.Mathematics.uint3x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint3x2) : Unity.Mathematics.uint3x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint3>
            public Equals ($rhs: Unity.Mathematics.uint3x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x2)
            public constructor ($v: Unity.Mathematics.int3x2)
            public constructor ($v: Unity.Mathematics.float3x2)
            public constructor ($v: Unity.Mathematics.double3x2)
        }
        class float3x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float3x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float3
            public c1 : Unity.Mathematics.float3
            public static zero : Unity.Mathematics.float3x2
            public static op_Implicit ($v: number) : Unity.Mathematics.float3x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float3x2
            public static op_Explicit ($v: Unity.Mathematics.bool3x2) : Unity.Mathematics.float3x2
            public static op_Implicit ($v: Unity.Mathematics.int3x2) : Unity.Mathematics.float3x2
            public static op_Implicit ($v: Unity.Mathematics.uint3x2) : Unity.Mathematics.float3x2
            public static op_Explicit ($v: number) : Unity.Mathematics.float3x2
            public static op_Explicit ($v: Unity.Mathematics.double3x2) : Unity.Mathematics.float3x2
            public static op_Multiply ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Multiply ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.float3x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Addition ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Addition ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.float3x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.float3x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Division ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Division ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.float3x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Modulus ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Modulus ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.float3x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Increment ($val: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Decrement ($val: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_LessThan ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_UnaryNegation ($val: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_UnaryPlus ($val: Unity.Mathematics.float3x2) : Unity.Mathematics.float3x2
            public static op_Equality ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.float3x2, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: Unity.Mathematics.float3x2, $rhs: number) : Unity.Mathematics.bool3x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float3x2) : Unity.Mathematics.bool3x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float3>
            public Equals ($rhs: Unity.Mathematics.float3x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x2)
            public constructor ($v: Unity.Mathematics.int3x2)
            public constructor ($v: Unity.Mathematics.uint3x2)
            public constructor ($v: Unity.Mathematics.double3x2)
        }
        class double3x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double3x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double3
            public c1 : Unity.Mathematics.double3
            public c2 : Unity.Mathematics.double3
            public static identity : Unity.Mathematics.double3x3
            public static zero : Unity.Mathematics.double3x3
            public static op_Implicit ($v: number) : Unity.Mathematics.double3x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double3x3
            public static op_Explicit ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.double3x3
            public static op_Implicit ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.double3x3
            public static op_Implicit ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.double3x3
            public static op_Implicit ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.double3x3
            public static op_Multiply ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Multiply ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.double3x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Addition ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Addition ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.double3x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.double3x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Division ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Division ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.double3x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Modulus ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Modulus ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.double3x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Increment ($val: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Decrement ($val: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_LessThan ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_UnaryNegation ($val: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_UnaryPlus ($val: Unity.Mathematics.double3x3) : Unity.Mathematics.double3x3
            public static op_Equality ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.double3x3, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.double3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double3x3) : Unity.Mathematics.bool3x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double3>
            public Equals ($rhs: Unity.Mathematics.double3x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3, $c2: Unity.Mathematics.double3)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x3)
            public constructor ($v: Unity.Mathematics.int3x3)
            public constructor ($v: Unity.Mathematics.uint3x3)
            public constructor ($v: Unity.Mathematics.float3x3)
        }
        class int3x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int3x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int3
            public c1 : Unity.Mathematics.int3
            public c2 : Unity.Mathematics.int3
            public static identity : Unity.Mathematics.int3x3
            public static zero : Unity.Mathematics.int3x3
            public static op_Implicit ($v: number) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: number) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.int3x3
            public static op_Explicit ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.int3x3
            public static op_Multiply ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Multiply ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Addition ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Addition ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Division ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Division ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Modulus ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Modulus ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Increment ($val: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_Decrement ($val: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_LessThan ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_UnaryNegation ($val: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_UnaryPlus ($val: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_LeftShift ($x: Unity.Mathematics.int3x3, $n: number) : Unity.Mathematics.int3x3
            public static op_RightShift ($x: Unity.Mathematics.int3x3, $n: number) : Unity.Mathematics.int3x3
            public static op_Equality ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.bool3x3
            public static op_OnesComplement ($val: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x3, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x3, $rhs: number) : Unity.Mathematics.int3x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int3x3) : Unity.Mathematics.int3x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int3>
            public Equals ($rhs: Unity.Mathematics.int3x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3, $c2: Unity.Mathematics.int3)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x3)
            public constructor ($v: Unity.Mathematics.uint3x3)
            public constructor ($v: Unity.Mathematics.float3x3)
            public constructor ($v: Unity.Mathematics.double3x3)
        }
        class uint3x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint3x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint3
            public c1 : Unity.Mathematics.uint3
            public c2 : Unity.Mathematics.uint3
            public static identity : Unity.Mathematics.uint3x3
            public static zero : Unity.Mathematics.uint3x3
            public static op_Implicit ($v: number) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: number) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: Unity.Mathematics.float3x3) : Unity.Mathematics.uint3x3
            public static op_Explicit ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.uint3x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Addition ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Addition ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Division ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Division ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Increment ($val: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_Decrement ($val: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_UnaryNegation ($val: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_UnaryPlus ($val: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_LeftShift ($x: Unity.Mathematics.uint3x3, $n: number) : Unity.Mathematics.uint3x3
            public static op_RightShift ($x: Unity.Mathematics.uint3x3, $n: number) : Unity.Mathematics.uint3x3
            public static op_Equality ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.bool3x3
            public static op_OnesComplement ($val: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x3, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x3, $rhs: number) : Unity.Mathematics.uint3x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint3x3) : Unity.Mathematics.uint3x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint3>
            public Equals ($rhs: Unity.Mathematics.uint3x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3, $c2: Unity.Mathematics.uint3)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x3)
            public constructor ($v: Unity.Mathematics.int3x3)
            public constructor ($v: Unity.Mathematics.float3x3)
            public constructor ($v: Unity.Mathematics.double3x3)
        }
        class float3x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float3x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float3
            public c1 : Unity.Mathematics.float3
            public c2 : Unity.Mathematics.float3
            public static identity : Unity.Mathematics.float3x3
            public static zero : Unity.Mathematics.float3x3
            public static op_Implicit ($v: number) : Unity.Mathematics.float3x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float3x3
            public static op_Explicit ($v: Unity.Mathematics.bool3x3) : Unity.Mathematics.float3x3
            public static op_Implicit ($v: Unity.Mathematics.int3x3) : Unity.Mathematics.float3x3
            public static op_Implicit ($v: Unity.Mathematics.uint3x3) : Unity.Mathematics.float3x3
            public static op_Explicit ($v: number) : Unity.Mathematics.float3x3
            public static op_Explicit ($v: Unity.Mathematics.double3x3) : Unity.Mathematics.float3x3
            public static op_Multiply ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Multiply ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.float3x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Addition ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Addition ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.float3x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.float3x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Division ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Division ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.float3x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Modulus ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Modulus ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.float3x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Increment ($val: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Decrement ($val: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_LessThan ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_UnaryNegation ($val: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_UnaryPlus ($val: Unity.Mathematics.float3x3) : Unity.Mathematics.float3x3
            public static op_Equality ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.float3x3, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: Unity.Mathematics.float3x3, $rhs: number) : Unity.Mathematics.bool3x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float3x3) : Unity.Mathematics.bool3x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float3>
            public Equals ($rhs: Unity.Mathematics.float3x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static AxisAngle ($axis: Unity.Mathematics.float3, $angle: number) : Unity.Mathematics.float3x3
            public static EulerXYZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerXZY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerYXZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerYZX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerZXY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerZYX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static EulerXYZ ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static EulerXZY ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static EulerYXZ ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static EulerYZX ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static EulerZXY ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static EulerZYX ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static Euler ($xyz: Unity.Mathematics.float3, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.float3x3
            public static Euler ($x: number, $y: number, $z: number, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.float3x3
            public static RotateX ($angle: number) : Unity.Mathematics.float3x3
            public static RotateY ($angle: number) : Unity.Mathematics.float3x3
            public static RotateZ ($angle: number) : Unity.Mathematics.float3x3
            public static Scale ($s: number) : Unity.Mathematics.float3x3
            public static Scale ($x: number, $y: number, $z: number) : Unity.Mathematics.float3x3
            public static Scale ($v: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static LookRotation ($forward: Unity.Mathematics.float3, $up: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static LookRotationSafe ($forward: Unity.Mathematics.float3, $up: Unity.Mathematics.float3) : Unity.Mathematics.float3x3
            public static op_Explicit ($f4x4: Unity.Mathematics.float4x4) : Unity.Mathematics.float3x3
            public constructor ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3, $c2: Unity.Mathematics.float3)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x3)
            public constructor ($v: Unity.Mathematics.int3x3)
            public constructor ($v: Unity.Mathematics.uint3x3)
            public constructor ($v: Unity.Mathematics.double3x3)
            public constructor ($f4x4: Unity.Mathematics.float4x4)
            public constructor ($q: Unity.Mathematics.quaternion)
        }
        class double3x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double3x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double3
            public c1 : Unity.Mathematics.double3
            public c2 : Unity.Mathematics.double3
            public c3 : Unity.Mathematics.double3
            public static zero : Unity.Mathematics.double3x4
            public static op_Implicit ($v: number) : Unity.Mathematics.double3x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double3x4
            public static op_Explicit ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.double3x4
            public static op_Implicit ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.double3x4
            public static op_Implicit ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.double3x4
            public static op_Implicit ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.double3x4
            public static op_Multiply ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Multiply ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.double3x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Addition ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Addition ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.double3x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.double3x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Division ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Division ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.double3x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Modulus ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Modulus ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.double3x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Increment ($val: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Decrement ($val: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_LessThan ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_UnaryNegation ($val: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_UnaryPlus ($val: Unity.Mathematics.double3x4) : Unity.Mathematics.double3x4
            public static op_Equality ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.double3x4, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.double3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double3x4) : Unity.Mathematics.bool3x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double3>
            public Equals ($rhs: Unity.Mathematics.double3x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double3, $c1: Unity.Mathematics.double3, $c2: Unity.Mathematics.double3, $c3: Unity.Mathematics.double3)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x4)
            public constructor ($v: Unity.Mathematics.int3x4)
            public constructor ($v: Unity.Mathematics.uint3x4)
            public constructor ($v: Unity.Mathematics.float3x4)
        }
        class int3x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int3x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int3
            public c1 : Unity.Mathematics.int3
            public c2 : Unity.Mathematics.int3
            public c3 : Unity.Mathematics.int3
            public static zero : Unity.Mathematics.int3x4
            public static op_Implicit ($v: number) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: number) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.int3x4
            public static op_Explicit ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.int3x4
            public static op_Multiply ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Multiply ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Addition ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Addition ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Division ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Division ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Modulus ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Modulus ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Increment ($val: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_Decrement ($val: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_LessThan ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_UnaryNegation ($val: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_UnaryPlus ($val: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_LeftShift ($x: Unity.Mathematics.int3x4, $n: number) : Unity.Mathematics.int3x4
            public static op_RightShift ($x: Unity.Mathematics.int3x4, $n: number) : Unity.Mathematics.int3x4
            public static op_Equality ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.bool3x4
            public static op_OnesComplement ($val: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x4, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int3x4, $rhs: number) : Unity.Mathematics.int3x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int3x4) : Unity.Mathematics.int3x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int3>
            public Equals ($rhs: Unity.Mathematics.int3x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int3, $c1: Unity.Mathematics.int3, $c2: Unity.Mathematics.int3, $c3: Unity.Mathematics.int3)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x4)
            public constructor ($v: Unity.Mathematics.uint3x4)
            public constructor ($v: Unity.Mathematics.float3x4)
            public constructor ($v: Unity.Mathematics.double3x4)
        }
        class uint3x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint3x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint3
            public c1 : Unity.Mathematics.uint3
            public c2 : Unity.Mathematics.uint3
            public c3 : Unity.Mathematics.uint3
            public static zero : Unity.Mathematics.uint3x4
            public static op_Implicit ($v: number) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: number) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: Unity.Mathematics.float3x4) : Unity.Mathematics.uint3x4
            public static op_Explicit ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.uint3x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Addition ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Addition ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Division ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Division ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Increment ($val: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_Decrement ($val: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_UnaryNegation ($val: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_UnaryPlus ($val: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_LeftShift ($x: Unity.Mathematics.uint3x4, $n: number) : Unity.Mathematics.uint3x4
            public static op_RightShift ($x: Unity.Mathematics.uint3x4, $n: number) : Unity.Mathematics.uint3x4
            public static op_Equality ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.bool3x4
            public static op_OnesComplement ($val: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x4, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint3x4, $rhs: number) : Unity.Mathematics.uint3x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint3x4) : Unity.Mathematics.uint3x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint3>
            public Equals ($rhs: Unity.Mathematics.uint3x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint3, $c1: Unity.Mathematics.uint3, $c2: Unity.Mathematics.uint3, $c3: Unity.Mathematics.uint3)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x4)
            public constructor ($v: Unity.Mathematics.int3x4)
            public constructor ($v: Unity.Mathematics.float3x4)
            public constructor ($v: Unity.Mathematics.double3x4)
        }
        class float3x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float3x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float3
            public c1 : Unity.Mathematics.float3
            public c2 : Unity.Mathematics.float3
            public c3 : Unity.Mathematics.float3
            public static zero : Unity.Mathematics.float3x4
            public static op_Implicit ($v: number) : Unity.Mathematics.float3x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float3x4
            public static op_Explicit ($v: Unity.Mathematics.bool3x4) : Unity.Mathematics.float3x4
            public static op_Implicit ($v: Unity.Mathematics.int3x4) : Unity.Mathematics.float3x4
            public static op_Implicit ($v: Unity.Mathematics.uint3x4) : Unity.Mathematics.float3x4
            public static op_Explicit ($v: number) : Unity.Mathematics.float3x4
            public static op_Explicit ($v: Unity.Mathematics.double3x4) : Unity.Mathematics.float3x4
            public static op_Multiply ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Multiply ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.float3x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Addition ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Addition ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.float3x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.float3x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Division ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Division ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.float3x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Modulus ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Modulus ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.float3x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Increment ($val: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Decrement ($val: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_LessThan ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_UnaryNegation ($val: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_UnaryPlus ($val: Unity.Mathematics.float3x4) : Unity.Mathematics.float3x4
            public static op_Equality ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.float3x4, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: Unity.Mathematics.float3x4, $rhs: number) : Unity.Mathematics.bool3x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float3x4) : Unity.Mathematics.bool3x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float3>
            public Equals ($rhs: Unity.Mathematics.float3x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float3, $c1: Unity.Mathematics.float3, $c2: Unity.Mathematics.float3, $c3: Unity.Mathematics.float3)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool3x4)
            public constructor ($v: Unity.Mathematics.int3x4)
            public constructor ($v: Unity.Mathematics.uint3x4)
            public constructor ($v: Unity.Mathematics.double3x4)
        }
        class double4x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double4x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double4
            public c1 : Unity.Mathematics.double4
            public c2 : Unity.Mathematics.double4
            public static zero : Unity.Mathematics.double4x3
            public static op_Implicit ($v: number) : Unity.Mathematics.double4x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double4x3
            public static op_Explicit ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.double4x3
            public static op_Implicit ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.double4x3
            public static op_Implicit ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.double4x3
            public static op_Implicit ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.double4x3
            public static op_Multiply ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Multiply ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.double4x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Addition ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Addition ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.double4x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.double4x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Division ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Division ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.double4x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Modulus ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Modulus ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.double4x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Increment ($val: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Decrement ($val: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_LessThan ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_UnaryNegation ($val: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_UnaryPlus ($val: Unity.Mathematics.double4x3) : Unity.Mathematics.double4x3
            public static op_Equality ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.double4x3, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.double4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double4x3) : Unity.Mathematics.bool4x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double4>
            public Equals ($rhs: Unity.Mathematics.double4x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4, $c2: Unity.Mathematics.double4)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x3)
            public constructor ($v: Unity.Mathematics.int4x3)
            public constructor ($v: Unity.Mathematics.uint4x3)
            public constructor ($v: Unity.Mathematics.float4x3)
        }
        class int4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int4>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public w : number
            public static zero : Unity.Mathematics.int4
            public get xxxx(): Unity.Mathematics.int4;
            public get xxxy(): Unity.Mathematics.int4;
            public get xxxz(): Unity.Mathematics.int4;
            public get xxxw(): Unity.Mathematics.int4;
            public get xxyx(): Unity.Mathematics.int4;
            public get xxyy(): Unity.Mathematics.int4;
            public get xxyz(): Unity.Mathematics.int4;
            public get xxyw(): Unity.Mathematics.int4;
            public get xxzx(): Unity.Mathematics.int4;
            public get xxzy(): Unity.Mathematics.int4;
            public get xxzz(): Unity.Mathematics.int4;
            public get xxzw(): Unity.Mathematics.int4;
            public get xxwx(): Unity.Mathematics.int4;
            public get xxwy(): Unity.Mathematics.int4;
            public get xxwz(): Unity.Mathematics.int4;
            public get xxww(): Unity.Mathematics.int4;
            public get xyxx(): Unity.Mathematics.int4;
            public get xyxy(): Unity.Mathematics.int4;
            public get xyxz(): Unity.Mathematics.int4;
            public get xyxw(): Unity.Mathematics.int4;
            public get xyyx(): Unity.Mathematics.int4;
            public get xyyy(): Unity.Mathematics.int4;
            public get xyyz(): Unity.Mathematics.int4;
            public get xyyw(): Unity.Mathematics.int4;
            public get xyzx(): Unity.Mathematics.int4;
            public get xyzy(): Unity.Mathematics.int4;
            public get xyzz(): Unity.Mathematics.int4;
            public get xyzw(): Unity.Mathematics.int4;
            public set xyzw(value: Unity.Mathematics.int4);
            public get xywx(): Unity.Mathematics.int4;
            public get xywy(): Unity.Mathematics.int4;
            public get xywz(): Unity.Mathematics.int4;
            public set xywz(value: Unity.Mathematics.int4);
            public get xyww(): Unity.Mathematics.int4;
            public get xzxx(): Unity.Mathematics.int4;
            public get xzxy(): Unity.Mathematics.int4;
            public get xzxz(): Unity.Mathematics.int4;
            public get xzxw(): Unity.Mathematics.int4;
            public get xzyx(): Unity.Mathematics.int4;
            public get xzyy(): Unity.Mathematics.int4;
            public get xzyz(): Unity.Mathematics.int4;
            public get xzyw(): Unity.Mathematics.int4;
            public set xzyw(value: Unity.Mathematics.int4);
            public get xzzx(): Unity.Mathematics.int4;
            public get xzzy(): Unity.Mathematics.int4;
            public get xzzz(): Unity.Mathematics.int4;
            public get xzzw(): Unity.Mathematics.int4;
            public get xzwx(): Unity.Mathematics.int4;
            public get xzwy(): Unity.Mathematics.int4;
            public set xzwy(value: Unity.Mathematics.int4);
            public get xzwz(): Unity.Mathematics.int4;
            public get xzww(): Unity.Mathematics.int4;
            public get xwxx(): Unity.Mathematics.int4;
            public get xwxy(): Unity.Mathematics.int4;
            public get xwxz(): Unity.Mathematics.int4;
            public get xwxw(): Unity.Mathematics.int4;
            public get xwyx(): Unity.Mathematics.int4;
            public get xwyy(): Unity.Mathematics.int4;
            public get xwyz(): Unity.Mathematics.int4;
            public set xwyz(value: Unity.Mathematics.int4);
            public get xwyw(): Unity.Mathematics.int4;
            public get xwzx(): Unity.Mathematics.int4;
            public get xwzy(): Unity.Mathematics.int4;
            public set xwzy(value: Unity.Mathematics.int4);
            public get xwzz(): Unity.Mathematics.int4;
            public get xwzw(): Unity.Mathematics.int4;
            public get xwwx(): Unity.Mathematics.int4;
            public get xwwy(): Unity.Mathematics.int4;
            public get xwwz(): Unity.Mathematics.int4;
            public get xwww(): Unity.Mathematics.int4;
            public get yxxx(): Unity.Mathematics.int4;
            public get yxxy(): Unity.Mathematics.int4;
            public get yxxz(): Unity.Mathematics.int4;
            public get yxxw(): Unity.Mathematics.int4;
            public get yxyx(): Unity.Mathematics.int4;
            public get yxyy(): Unity.Mathematics.int4;
            public get yxyz(): Unity.Mathematics.int4;
            public get yxyw(): Unity.Mathematics.int4;
            public get yxzx(): Unity.Mathematics.int4;
            public get yxzy(): Unity.Mathematics.int4;
            public get yxzz(): Unity.Mathematics.int4;
            public get yxzw(): Unity.Mathematics.int4;
            public set yxzw(value: Unity.Mathematics.int4);
            public get yxwx(): Unity.Mathematics.int4;
            public get yxwy(): Unity.Mathematics.int4;
            public get yxwz(): Unity.Mathematics.int4;
            public set yxwz(value: Unity.Mathematics.int4);
            public get yxww(): Unity.Mathematics.int4;
            public get yyxx(): Unity.Mathematics.int4;
            public get yyxy(): Unity.Mathematics.int4;
            public get yyxz(): Unity.Mathematics.int4;
            public get yyxw(): Unity.Mathematics.int4;
            public get yyyx(): Unity.Mathematics.int4;
            public get yyyy(): Unity.Mathematics.int4;
            public get yyyz(): Unity.Mathematics.int4;
            public get yyyw(): Unity.Mathematics.int4;
            public get yyzx(): Unity.Mathematics.int4;
            public get yyzy(): Unity.Mathematics.int4;
            public get yyzz(): Unity.Mathematics.int4;
            public get yyzw(): Unity.Mathematics.int4;
            public get yywx(): Unity.Mathematics.int4;
            public get yywy(): Unity.Mathematics.int4;
            public get yywz(): Unity.Mathematics.int4;
            public get yyww(): Unity.Mathematics.int4;
            public get yzxx(): Unity.Mathematics.int4;
            public get yzxy(): Unity.Mathematics.int4;
            public get yzxz(): Unity.Mathematics.int4;
            public get yzxw(): Unity.Mathematics.int4;
            public set yzxw(value: Unity.Mathematics.int4);
            public get yzyx(): Unity.Mathematics.int4;
            public get yzyy(): Unity.Mathematics.int4;
            public get yzyz(): Unity.Mathematics.int4;
            public get yzyw(): Unity.Mathematics.int4;
            public get yzzx(): Unity.Mathematics.int4;
            public get yzzy(): Unity.Mathematics.int4;
            public get yzzz(): Unity.Mathematics.int4;
            public get yzzw(): Unity.Mathematics.int4;
            public get yzwx(): Unity.Mathematics.int4;
            public set yzwx(value: Unity.Mathematics.int4);
            public get yzwy(): Unity.Mathematics.int4;
            public get yzwz(): Unity.Mathematics.int4;
            public get yzww(): Unity.Mathematics.int4;
            public get ywxx(): Unity.Mathematics.int4;
            public get ywxy(): Unity.Mathematics.int4;
            public get ywxz(): Unity.Mathematics.int4;
            public set ywxz(value: Unity.Mathematics.int4);
            public get ywxw(): Unity.Mathematics.int4;
            public get ywyx(): Unity.Mathematics.int4;
            public get ywyy(): Unity.Mathematics.int4;
            public get ywyz(): Unity.Mathematics.int4;
            public get ywyw(): Unity.Mathematics.int4;
            public get ywzx(): Unity.Mathematics.int4;
            public set ywzx(value: Unity.Mathematics.int4);
            public get ywzy(): Unity.Mathematics.int4;
            public get ywzz(): Unity.Mathematics.int4;
            public get ywzw(): Unity.Mathematics.int4;
            public get ywwx(): Unity.Mathematics.int4;
            public get ywwy(): Unity.Mathematics.int4;
            public get ywwz(): Unity.Mathematics.int4;
            public get ywww(): Unity.Mathematics.int4;
            public get zxxx(): Unity.Mathematics.int4;
            public get zxxy(): Unity.Mathematics.int4;
            public get zxxz(): Unity.Mathematics.int4;
            public get zxxw(): Unity.Mathematics.int4;
            public get zxyx(): Unity.Mathematics.int4;
            public get zxyy(): Unity.Mathematics.int4;
            public get zxyz(): Unity.Mathematics.int4;
            public get zxyw(): Unity.Mathematics.int4;
            public set zxyw(value: Unity.Mathematics.int4);
            public get zxzx(): Unity.Mathematics.int4;
            public get zxzy(): Unity.Mathematics.int4;
            public get zxzz(): Unity.Mathematics.int4;
            public get zxzw(): Unity.Mathematics.int4;
            public get zxwx(): Unity.Mathematics.int4;
            public get zxwy(): Unity.Mathematics.int4;
            public set zxwy(value: Unity.Mathematics.int4);
            public get zxwz(): Unity.Mathematics.int4;
            public get zxww(): Unity.Mathematics.int4;
            public get zyxx(): Unity.Mathematics.int4;
            public get zyxy(): Unity.Mathematics.int4;
            public get zyxz(): Unity.Mathematics.int4;
            public get zyxw(): Unity.Mathematics.int4;
            public set zyxw(value: Unity.Mathematics.int4);
            public get zyyx(): Unity.Mathematics.int4;
            public get zyyy(): Unity.Mathematics.int4;
            public get zyyz(): Unity.Mathematics.int4;
            public get zyyw(): Unity.Mathematics.int4;
            public get zyzx(): Unity.Mathematics.int4;
            public get zyzy(): Unity.Mathematics.int4;
            public get zyzz(): Unity.Mathematics.int4;
            public get zyzw(): Unity.Mathematics.int4;
            public get zywx(): Unity.Mathematics.int4;
            public set zywx(value: Unity.Mathematics.int4);
            public get zywy(): Unity.Mathematics.int4;
            public get zywz(): Unity.Mathematics.int4;
            public get zyww(): Unity.Mathematics.int4;
            public get zzxx(): Unity.Mathematics.int4;
            public get zzxy(): Unity.Mathematics.int4;
            public get zzxz(): Unity.Mathematics.int4;
            public get zzxw(): Unity.Mathematics.int4;
            public get zzyx(): Unity.Mathematics.int4;
            public get zzyy(): Unity.Mathematics.int4;
            public get zzyz(): Unity.Mathematics.int4;
            public get zzyw(): Unity.Mathematics.int4;
            public get zzzx(): Unity.Mathematics.int4;
            public get zzzy(): Unity.Mathematics.int4;
            public get zzzz(): Unity.Mathematics.int4;
            public get zzzw(): Unity.Mathematics.int4;
            public get zzwx(): Unity.Mathematics.int4;
            public get zzwy(): Unity.Mathematics.int4;
            public get zzwz(): Unity.Mathematics.int4;
            public get zzww(): Unity.Mathematics.int4;
            public get zwxx(): Unity.Mathematics.int4;
            public get zwxy(): Unity.Mathematics.int4;
            public set zwxy(value: Unity.Mathematics.int4);
            public get zwxz(): Unity.Mathematics.int4;
            public get zwxw(): Unity.Mathematics.int4;
            public get zwyx(): Unity.Mathematics.int4;
            public set zwyx(value: Unity.Mathematics.int4);
            public get zwyy(): Unity.Mathematics.int4;
            public get zwyz(): Unity.Mathematics.int4;
            public get zwyw(): Unity.Mathematics.int4;
            public get zwzx(): Unity.Mathematics.int4;
            public get zwzy(): Unity.Mathematics.int4;
            public get zwzz(): Unity.Mathematics.int4;
            public get zwzw(): Unity.Mathematics.int4;
            public get zwwx(): Unity.Mathematics.int4;
            public get zwwy(): Unity.Mathematics.int4;
            public get zwwz(): Unity.Mathematics.int4;
            public get zwww(): Unity.Mathematics.int4;
            public get wxxx(): Unity.Mathematics.int4;
            public get wxxy(): Unity.Mathematics.int4;
            public get wxxz(): Unity.Mathematics.int4;
            public get wxxw(): Unity.Mathematics.int4;
            public get wxyx(): Unity.Mathematics.int4;
            public get wxyy(): Unity.Mathematics.int4;
            public get wxyz(): Unity.Mathematics.int4;
            public set wxyz(value: Unity.Mathematics.int4);
            public get wxyw(): Unity.Mathematics.int4;
            public get wxzx(): Unity.Mathematics.int4;
            public get wxzy(): Unity.Mathematics.int4;
            public set wxzy(value: Unity.Mathematics.int4);
            public get wxzz(): Unity.Mathematics.int4;
            public get wxzw(): Unity.Mathematics.int4;
            public get wxwx(): Unity.Mathematics.int4;
            public get wxwy(): Unity.Mathematics.int4;
            public get wxwz(): Unity.Mathematics.int4;
            public get wxww(): Unity.Mathematics.int4;
            public get wyxx(): Unity.Mathematics.int4;
            public get wyxy(): Unity.Mathematics.int4;
            public get wyxz(): Unity.Mathematics.int4;
            public set wyxz(value: Unity.Mathematics.int4);
            public get wyxw(): Unity.Mathematics.int4;
            public get wyyx(): Unity.Mathematics.int4;
            public get wyyy(): Unity.Mathematics.int4;
            public get wyyz(): Unity.Mathematics.int4;
            public get wyyw(): Unity.Mathematics.int4;
            public get wyzx(): Unity.Mathematics.int4;
            public set wyzx(value: Unity.Mathematics.int4);
            public get wyzy(): Unity.Mathematics.int4;
            public get wyzz(): Unity.Mathematics.int4;
            public get wyzw(): Unity.Mathematics.int4;
            public get wywx(): Unity.Mathematics.int4;
            public get wywy(): Unity.Mathematics.int4;
            public get wywz(): Unity.Mathematics.int4;
            public get wyww(): Unity.Mathematics.int4;
            public get wzxx(): Unity.Mathematics.int4;
            public get wzxy(): Unity.Mathematics.int4;
            public set wzxy(value: Unity.Mathematics.int4);
            public get wzxz(): Unity.Mathematics.int4;
            public get wzxw(): Unity.Mathematics.int4;
            public get wzyx(): Unity.Mathematics.int4;
            public set wzyx(value: Unity.Mathematics.int4);
            public get wzyy(): Unity.Mathematics.int4;
            public get wzyz(): Unity.Mathematics.int4;
            public get wzyw(): Unity.Mathematics.int4;
            public get wzzx(): Unity.Mathematics.int4;
            public get wzzy(): Unity.Mathematics.int4;
            public get wzzz(): Unity.Mathematics.int4;
            public get wzzw(): Unity.Mathematics.int4;
            public get wzwx(): Unity.Mathematics.int4;
            public get wzwy(): Unity.Mathematics.int4;
            public get wzwz(): Unity.Mathematics.int4;
            public get wzww(): Unity.Mathematics.int4;
            public get wwxx(): Unity.Mathematics.int4;
            public get wwxy(): Unity.Mathematics.int4;
            public get wwxz(): Unity.Mathematics.int4;
            public get wwxw(): Unity.Mathematics.int4;
            public get wwyx(): Unity.Mathematics.int4;
            public get wwyy(): Unity.Mathematics.int4;
            public get wwyz(): Unity.Mathematics.int4;
            public get wwyw(): Unity.Mathematics.int4;
            public get wwzx(): Unity.Mathematics.int4;
            public get wwzy(): Unity.Mathematics.int4;
            public get wwzz(): Unity.Mathematics.int4;
            public get wwzw(): Unity.Mathematics.int4;
            public get wwwx(): Unity.Mathematics.int4;
            public get wwwy(): Unity.Mathematics.int4;
            public get wwwz(): Unity.Mathematics.int4;
            public get wwww(): Unity.Mathematics.int4;
            public get xxx(): Unity.Mathematics.int3;
            public get xxy(): Unity.Mathematics.int3;
            public get xxz(): Unity.Mathematics.int3;
            public get xxw(): Unity.Mathematics.int3;
            public get xyx(): Unity.Mathematics.int3;
            public get xyy(): Unity.Mathematics.int3;
            public get xyz(): Unity.Mathematics.int3;
            public set xyz(value: Unity.Mathematics.int3);
            public get xyw(): Unity.Mathematics.int3;
            public set xyw(value: Unity.Mathematics.int3);
            public get xzx(): Unity.Mathematics.int3;
            public get xzy(): Unity.Mathematics.int3;
            public set xzy(value: Unity.Mathematics.int3);
            public get xzz(): Unity.Mathematics.int3;
            public get xzw(): Unity.Mathematics.int3;
            public set xzw(value: Unity.Mathematics.int3);
            public get xwx(): Unity.Mathematics.int3;
            public get xwy(): Unity.Mathematics.int3;
            public set xwy(value: Unity.Mathematics.int3);
            public get xwz(): Unity.Mathematics.int3;
            public set xwz(value: Unity.Mathematics.int3);
            public get xww(): Unity.Mathematics.int3;
            public get yxx(): Unity.Mathematics.int3;
            public get yxy(): Unity.Mathematics.int3;
            public get yxz(): Unity.Mathematics.int3;
            public set yxz(value: Unity.Mathematics.int3);
            public get yxw(): Unity.Mathematics.int3;
            public set yxw(value: Unity.Mathematics.int3);
            public get yyx(): Unity.Mathematics.int3;
            public get yyy(): Unity.Mathematics.int3;
            public get yyz(): Unity.Mathematics.int3;
            public get yyw(): Unity.Mathematics.int3;
            public get yzx(): Unity.Mathematics.int3;
            public set yzx(value: Unity.Mathematics.int3);
            public get yzy(): Unity.Mathematics.int3;
            public get yzz(): Unity.Mathematics.int3;
            public get yzw(): Unity.Mathematics.int3;
            public set yzw(value: Unity.Mathematics.int3);
            public get ywx(): Unity.Mathematics.int3;
            public set ywx(value: Unity.Mathematics.int3);
            public get ywy(): Unity.Mathematics.int3;
            public get ywz(): Unity.Mathematics.int3;
            public set ywz(value: Unity.Mathematics.int3);
            public get yww(): Unity.Mathematics.int3;
            public get zxx(): Unity.Mathematics.int3;
            public get zxy(): Unity.Mathematics.int3;
            public set zxy(value: Unity.Mathematics.int3);
            public get zxz(): Unity.Mathematics.int3;
            public get zxw(): Unity.Mathematics.int3;
            public set zxw(value: Unity.Mathematics.int3);
            public get zyx(): Unity.Mathematics.int3;
            public set zyx(value: Unity.Mathematics.int3);
            public get zyy(): Unity.Mathematics.int3;
            public get zyz(): Unity.Mathematics.int3;
            public get zyw(): Unity.Mathematics.int3;
            public set zyw(value: Unity.Mathematics.int3);
            public get zzx(): Unity.Mathematics.int3;
            public get zzy(): Unity.Mathematics.int3;
            public get zzz(): Unity.Mathematics.int3;
            public get zzw(): Unity.Mathematics.int3;
            public get zwx(): Unity.Mathematics.int3;
            public set zwx(value: Unity.Mathematics.int3);
            public get zwy(): Unity.Mathematics.int3;
            public set zwy(value: Unity.Mathematics.int3);
            public get zwz(): Unity.Mathematics.int3;
            public get zww(): Unity.Mathematics.int3;
            public get wxx(): Unity.Mathematics.int3;
            public get wxy(): Unity.Mathematics.int3;
            public set wxy(value: Unity.Mathematics.int3);
            public get wxz(): Unity.Mathematics.int3;
            public set wxz(value: Unity.Mathematics.int3);
            public get wxw(): Unity.Mathematics.int3;
            public get wyx(): Unity.Mathematics.int3;
            public set wyx(value: Unity.Mathematics.int3);
            public get wyy(): Unity.Mathematics.int3;
            public get wyz(): Unity.Mathematics.int3;
            public set wyz(value: Unity.Mathematics.int3);
            public get wyw(): Unity.Mathematics.int3;
            public get wzx(): Unity.Mathematics.int3;
            public set wzx(value: Unity.Mathematics.int3);
            public get wzy(): Unity.Mathematics.int3;
            public set wzy(value: Unity.Mathematics.int3);
            public get wzz(): Unity.Mathematics.int3;
            public get wzw(): Unity.Mathematics.int3;
            public get wwx(): Unity.Mathematics.int3;
            public get wwy(): Unity.Mathematics.int3;
            public get wwz(): Unity.Mathematics.int3;
            public get www(): Unity.Mathematics.int3;
            public get xx(): Unity.Mathematics.int2;
            public get xy(): Unity.Mathematics.int2;
            public set xy(value: Unity.Mathematics.int2);
            public get xz(): Unity.Mathematics.int2;
            public set xz(value: Unity.Mathematics.int2);
            public get xw(): Unity.Mathematics.int2;
            public set xw(value: Unity.Mathematics.int2);
            public get yx(): Unity.Mathematics.int2;
            public set yx(value: Unity.Mathematics.int2);
            public get yy(): Unity.Mathematics.int2;
            public get yz(): Unity.Mathematics.int2;
            public set yz(value: Unity.Mathematics.int2);
            public get yw(): Unity.Mathematics.int2;
            public set yw(value: Unity.Mathematics.int2);
            public get zx(): Unity.Mathematics.int2;
            public set zx(value: Unity.Mathematics.int2);
            public get zy(): Unity.Mathematics.int2;
            public set zy(value: Unity.Mathematics.int2);
            public get zz(): Unity.Mathematics.int2;
            public get zw(): Unity.Mathematics.int2;
            public set zw(value: Unity.Mathematics.int2);
            public get wx(): Unity.Mathematics.int2;
            public set wx(value: Unity.Mathematics.int2);
            public get wy(): Unity.Mathematics.int2;
            public set wy(value: Unity.Mathematics.int2);
            public get wz(): Unity.Mathematics.int2;
            public set wz(value: Unity.Mathematics.int2);
            public get ww(): Unity.Mathematics.int2;
            public static op_Implicit ($v: number) : Unity.Mathematics.int4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int4
            public static op_Explicit ($v: Unity.Mathematics.bool4) : Unity.Mathematics.int4
            public static op_Explicit ($v: number) : Unity.Mathematics.int4
            public static op_Explicit ($v: Unity.Mathematics.uint4) : Unity.Mathematics.int4
            public static op_Explicit ($v: Unity.Mathematics.float4) : Unity.Mathematics.int4
            public static op_Explicit ($v: Unity.Mathematics.double4) : Unity.Mathematics.int4
            public static op_Multiply ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Multiply ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Addition ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Addition ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Subtraction ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Subtraction ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Division ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Division ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Modulus ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Modulus ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Increment ($val: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_Decrement ($val: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_LessThan ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_UnaryNegation ($val: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_UnaryPlus ($val: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_LeftShift ($x: Unity.Mathematics.int4, $n: number) : Unity.Mathematics.int4
            public static op_RightShift ($x: Unity.Mathematics.int4, $n: number) : Unity.Mathematics.int4
            public static op_Equality ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.bool4
            public static op_OnesComplement ($val: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4, $rhs: number) : Unity.Mathematics.int4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.int4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $zw: Unity.Mathematics.int2)
            public constructor ($x: number, $yz: Unity.Mathematics.int2, $w: number)
            public constructor ($x: number, $yzw: Unity.Mathematics.int3)
            public constructor ($xy: Unity.Mathematics.int2, $z: number, $w: number)
            public constructor ($xy: Unity.Mathematics.int2, $zw: Unity.Mathematics.int2)
            public constructor ($xyz: Unity.Mathematics.int3, $w: number)
            public constructor ($xyzw: Unity.Mathematics.int4)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4)
            public constructor ($v: Unity.Mathematics.uint4)
            public constructor ($v: Unity.Mathematics.float4)
            public constructor ($v: Unity.Mathematics.double4)
        }
        class half4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.half4>
        {
            protected [__keep_incompatibility]: never;
            public x : Unity.Mathematics.half
            public y : Unity.Mathematics.half
            public z : Unity.Mathematics.half
            public w : Unity.Mathematics.half
            public static zero : Unity.Mathematics.half4
            public get xxxx(): Unity.Mathematics.half4;
            public get xxxy(): Unity.Mathematics.half4;
            public get xxxz(): Unity.Mathematics.half4;
            public get xxxw(): Unity.Mathematics.half4;
            public get xxyx(): Unity.Mathematics.half4;
            public get xxyy(): Unity.Mathematics.half4;
            public get xxyz(): Unity.Mathematics.half4;
            public get xxyw(): Unity.Mathematics.half4;
            public get xxzx(): Unity.Mathematics.half4;
            public get xxzy(): Unity.Mathematics.half4;
            public get xxzz(): Unity.Mathematics.half4;
            public get xxzw(): Unity.Mathematics.half4;
            public get xxwx(): Unity.Mathematics.half4;
            public get xxwy(): Unity.Mathematics.half4;
            public get xxwz(): Unity.Mathematics.half4;
            public get xxww(): Unity.Mathematics.half4;
            public get xyxx(): Unity.Mathematics.half4;
            public get xyxy(): Unity.Mathematics.half4;
            public get xyxz(): Unity.Mathematics.half4;
            public get xyxw(): Unity.Mathematics.half4;
            public get xyyx(): Unity.Mathematics.half4;
            public get xyyy(): Unity.Mathematics.half4;
            public get xyyz(): Unity.Mathematics.half4;
            public get xyyw(): Unity.Mathematics.half4;
            public get xyzx(): Unity.Mathematics.half4;
            public get xyzy(): Unity.Mathematics.half4;
            public get xyzz(): Unity.Mathematics.half4;
            public get xyzw(): Unity.Mathematics.half4;
            public set xyzw(value: Unity.Mathematics.half4);
            public get xywx(): Unity.Mathematics.half4;
            public get xywy(): Unity.Mathematics.half4;
            public get xywz(): Unity.Mathematics.half4;
            public set xywz(value: Unity.Mathematics.half4);
            public get xyww(): Unity.Mathematics.half4;
            public get xzxx(): Unity.Mathematics.half4;
            public get xzxy(): Unity.Mathematics.half4;
            public get xzxz(): Unity.Mathematics.half4;
            public get xzxw(): Unity.Mathematics.half4;
            public get xzyx(): Unity.Mathematics.half4;
            public get xzyy(): Unity.Mathematics.half4;
            public get xzyz(): Unity.Mathematics.half4;
            public get xzyw(): Unity.Mathematics.half4;
            public set xzyw(value: Unity.Mathematics.half4);
            public get xzzx(): Unity.Mathematics.half4;
            public get xzzy(): Unity.Mathematics.half4;
            public get xzzz(): Unity.Mathematics.half4;
            public get xzzw(): Unity.Mathematics.half4;
            public get xzwx(): Unity.Mathematics.half4;
            public get xzwy(): Unity.Mathematics.half4;
            public set xzwy(value: Unity.Mathematics.half4);
            public get xzwz(): Unity.Mathematics.half4;
            public get xzww(): Unity.Mathematics.half4;
            public get xwxx(): Unity.Mathematics.half4;
            public get xwxy(): Unity.Mathematics.half4;
            public get xwxz(): Unity.Mathematics.half4;
            public get xwxw(): Unity.Mathematics.half4;
            public get xwyx(): Unity.Mathematics.half4;
            public get xwyy(): Unity.Mathematics.half4;
            public get xwyz(): Unity.Mathematics.half4;
            public set xwyz(value: Unity.Mathematics.half4);
            public get xwyw(): Unity.Mathematics.half4;
            public get xwzx(): Unity.Mathematics.half4;
            public get xwzy(): Unity.Mathematics.half4;
            public set xwzy(value: Unity.Mathematics.half4);
            public get xwzz(): Unity.Mathematics.half4;
            public get xwzw(): Unity.Mathematics.half4;
            public get xwwx(): Unity.Mathematics.half4;
            public get xwwy(): Unity.Mathematics.half4;
            public get xwwz(): Unity.Mathematics.half4;
            public get xwww(): Unity.Mathematics.half4;
            public get yxxx(): Unity.Mathematics.half4;
            public get yxxy(): Unity.Mathematics.half4;
            public get yxxz(): Unity.Mathematics.half4;
            public get yxxw(): Unity.Mathematics.half4;
            public get yxyx(): Unity.Mathematics.half4;
            public get yxyy(): Unity.Mathematics.half4;
            public get yxyz(): Unity.Mathematics.half4;
            public get yxyw(): Unity.Mathematics.half4;
            public get yxzx(): Unity.Mathematics.half4;
            public get yxzy(): Unity.Mathematics.half4;
            public get yxzz(): Unity.Mathematics.half4;
            public get yxzw(): Unity.Mathematics.half4;
            public set yxzw(value: Unity.Mathematics.half4);
            public get yxwx(): Unity.Mathematics.half4;
            public get yxwy(): Unity.Mathematics.half4;
            public get yxwz(): Unity.Mathematics.half4;
            public set yxwz(value: Unity.Mathematics.half4);
            public get yxww(): Unity.Mathematics.half4;
            public get yyxx(): Unity.Mathematics.half4;
            public get yyxy(): Unity.Mathematics.half4;
            public get yyxz(): Unity.Mathematics.half4;
            public get yyxw(): Unity.Mathematics.half4;
            public get yyyx(): Unity.Mathematics.half4;
            public get yyyy(): Unity.Mathematics.half4;
            public get yyyz(): Unity.Mathematics.half4;
            public get yyyw(): Unity.Mathematics.half4;
            public get yyzx(): Unity.Mathematics.half4;
            public get yyzy(): Unity.Mathematics.half4;
            public get yyzz(): Unity.Mathematics.half4;
            public get yyzw(): Unity.Mathematics.half4;
            public get yywx(): Unity.Mathematics.half4;
            public get yywy(): Unity.Mathematics.half4;
            public get yywz(): Unity.Mathematics.half4;
            public get yyww(): Unity.Mathematics.half4;
            public get yzxx(): Unity.Mathematics.half4;
            public get yzxy(): Unity.Mathematics.half4;
            public get yzxz(): Unity.Mathematics.half4;
            public get yzxw(): Unity.Mathematics.half4;
            public set yzxw(value: Unity.Mathematics.half4);
            public get yzyx(): Unity.Mathematics.half4;
            public get yzyy(): Unity.Mathematics.half4;
            public get yzyz(): Unity.Mathematics.half4;
            public get yzyw(): Unity.Mathematics.half4;
            public get yzzx(): Unity.Mathematics.half4;
            public get yzzy(): Unity.Mathematics.half4;
            public get yzzz(): Unity.Mathematics.half4;
            public get yzzw(): Unity.Mathematics.half4;
            public get yzwx(): Unity.Mathematics.half4;
            public set yzwx(value: Unity.Mathematics.half4);
            public get yzwy(): Unity.Mathematics.half4;
            public get yzwz(): Unity.Mathematics.half4;
            public get yzww(): Unity.Mathematics.half4;
            public get ywxx(): Unity.Mathematics.half4;
            public get ywxy(): Unity.Mathematics.half4;
            public get ywxz(): Unity.Mathematics.half4;
            public set ywxz(value: Unity.Mathematics.half4);
            public get ywxw(): Unity.Mathematics.half4;
            public get ywyx(): Unity.Mathematics.half4;
            public get ywyy(): Unity.Mathematics.half4;
            public get ywyz(): Unity.Mathematics.half4;
            public get ywyw(): Unity.Mathematics.half4;
            public get ywzx(): Unity.Mathematics.half4;
            public set ywzx(value: Unity.Mathematics.half4);
            public get ywzy(): Unity.Mathematics.half4;
            public get ywzz(): Unity.Mathematics.half4;
            public get ywzw(): Unity.Mathematics.half4;
            public get ywwx(): Unity.Mathematics.half4;
            public get ywwy(): Unity.Mathematics.half4;
            public get ywwz(): Unity.Mathematics.half4;
            public get ywww(): Unity.Mathematics.half4;
            public get zxxx(): Unity.Mathematics.half4;
            public get zxxy(): Unity.Mathematics.half4;
            public get zxxz(): Unity.Mathematics.half4;
            public get zxxw(): Unity.Mathematics.half4;
            public get zxyx(): Unity.Mathematics.half4;
            public get zxyy(): Unity.Mathematics.half4;
            public get zxyz(): Unity.Mathematics.half4;
            public get zxyw(): Unity.Mathematics.half4;
            public set zxyw(value: Unity.Mathematics.half4);
            public get zxzx(): Unity.Mathematics.half4;
            public get zxzy(): Unity.Mathematics.half4;
            public get zxzz(): Unity.Mathematics.half4;
            public get zxzw(): Unity.Mathematics.half4;
            public get zxwx(): Unity.Mathematics.half4;
            public get zxwy(): Unity.Mathematics.half4;
            public set zxwy(value: Unity.Mathematics.half4);
            public get zxwz(): Unity.Mathematics.half4;
            public get zxww(): Unity.Mathematics.half4;
            public get zyxx(): Unity.Mathematics.half4;
            public get zyxy(): Unity.Mathematics.half4;
            public get zyxz(): Unity.Mathematics.half4;
            public get zyxw(): Unity.Mathematics.half4;
            public set zyxw(value: Unity.Mathematics.half4);
            public get zyyx(): Unity.Mathematics.half4;
            public get zyyy(): Unity.Mathematics.half4;
            public get zyyz(): Unity.Mathematics.half4;
            public get zyyw(): Unity.Mathematics.half4;
            public get zyzx(): Unity.Mathematics.half4;
            public get zyzy(): Unity.Mathematics.half4;
            public get zyzz(): Unity.Mathematics.half4;
            public get zyzw(): Unity.Mathematics.half4;
            public get zywx(): Unity.Mathematics.half4;
            public set zywx(value: Unity.Mathematics.half4);
            public get zywy(): Unity.Mathematics.half4;
            public get zywz(): Unity.Mathematics.half4;
            public get zyww(): Unity.Mathematics.half4;
            public get zzxx(): Unity.Mathematics.half4;
            public get zzxy(): Unity.Mathematics.half4;
            public get zzxz(): Unity.Mathematics.half4;
            public get zzxw(): Unity.Mathematics.half4;
            public get zzyx(): Unity.Mathematics.half4;
            public get zzyy(): Unity.Mathematics.half4;
            public get zzyz(): Unity.Mathematics.half4;
            public get zzyw(): Unity.Mathematics.half4;
            public get zzzx(): Unity.Mathematics.half4;
            public get zzzy(): Unity.Mathematics.half4;
            public get zzzz(): Unity.Mathematics.half4;
            public get zzzw(): Unity.Mathematics.half4;
            public get zzwx(): Unity.Mathematics.half4;
            public get zzwy(): Unity.Mathematics.half4;
            public get zzwz(): Unity.Mathematics.half4;
            public get zzww(): Unity.Mathematics.half4;
            public get zwxx(): Unity.Mathematics.half4;
            public get zwxy(): Unity.Mathematics.half4;
            public set zwxy(value: Unity.Mathematics.half4);
            public get zwxz(): Unity.Mathematics.half4;
            public get zwxw(): Unity.Mathematics.half4;
            public get zwyx(): Unity.Mathematics.half4;
            public set zwyx(value: Unity.Mathematics.half4);
            public get zwyy(): Unity.Mathematics.half4;
            public get zwyz(): Unity.Mathematics.half4;
            public get zwyw(): Unity.Mathematics.half4;
            public get zwzx(): Unity.Mathematics.half4;
            public get zwzy(): Unity.Mathematics.half4;
            public get zwzz(): Unity.Mathematics.half4;
            public get zwzw(): Unity.Mathematics.half4;
            public get zwwx(): Unity.Mathematics.half4;
            public get zwwy(): Unity.Mathematics.half4;
            public get zwwz(): Unity.Mathematics.half4;
            public get zwww(): Unity.Mathematics.half4;
            public get wxxx(): Unity.Mathematics.half4;
            public get wxxy(): Unity.Mathematics.half4;
            public get wxxz(): Unity.Mathematics.half4;
            public get wxxw(): Unity.Mathematics.half4;
            public get wxyx(): Unity.Mathematics.half4;
            public get wxyy(): Unity.Mathematics.half4;
            public get wxyz(): Unity.Mathematics.half4;
            public set wxyz(value: Unity.Mathematics.half4);
            public get wxyw(): Unity.Mathematics.half4;
            public get wxzx(): Unity.Mathematics.half4;
            public get wxzy(): Unity.Mathematics.half4;
            public set wxzy(value: Unity.Mathematics.half4);
            public get wxzz(): Unity.Mathematics.half4;
            public get wxzw(): Unity.Mathematics.half4;
            public get wxwx(): Unity.Mathematics.half4;
            public get wxwy(): Unity.Mathematics.half4;
            public get wxwz(): Unity.Mathematics.half4;
            public get wxww(): Unity.Mathematics.half4;
            public get wyxx(): Unity.Mathematics.half4;
            public get wyxy(): Unity.Mathematics.half4;
            public get wyxz(): Unity.Mathematics.half4;
            public set wyxz(value: Unity.Mathematics.half4);
            public get wyxw(): Unity.Mathematics.half4;
            public get wyyx(): Unity.Mathematics.half4;
            public get wyyy(): Unity.Mathematics.half4;
            public get wyyz(): Unity.Mathematics.half4;
            public get wyyw(): Unity.Mathematics.half4;
            public get wyzx(): Unity.Mathematics.half4;
            public set wyzx(value: Unity.Mathematics.half4);
            public get wyzy(): Unity.Mathematics.half4;
            public get wyzz(): Unity.Mathematics.half4;
            public get wyzw(): Unity.Mathematics.half4;
            public get wywx(): Unity.Mathematics.half4;
            public get wywy(): Unity.Mathematics.half4;
            public get wywz(): Unity.Mathematics.half4;
            public get wyww(): Unity.Mathematics.half4;
            public get wzxx(): Unity.Mathematics.half4;
            public get wzxy(): Unity.Mathematics.half4;
            public set wzxy(value: Unity.Mathematics.half4);
            public get wzxz(): Unity.Mathematics.half4;
            public get wzxw(): Unity.Mathematics.half4;
            public get wzyx(): Unity.Mathematics.half4;
            public set wzyx(value: Unity.Mathematics.half4);
            public get wzyy(): Unity.Mathematics.half4;
            public get wzyz(): Unity.Mathematics.half4;
            public get wzyw(): Unity.Mathematics.half4;
            public get wzzx(): Unity.Mathematics.half4;
            public get wzzy(): Unity.Mathematics.half4;
            public get wzzz(): Unity.Mathematics.half4;
            public get wzzw(): Unity.Mathematics.half4;
            public get wzwx(): Unity.Mathematics.half4;
            public get wzwy(): Unity.Mathematics.half4;
            public get wzwz(): Unity.Mathematics.half4;
            public get wzww(): Unity.Mathematics.half4;
            public get wwxx(): Unity.Mathematics.half4;
            public get wwxy(): Unity.Mathematics.half4;
            public get wwxz(): Unity.Mathematics.half4;
            public get wwxw(): Unity.Mathematics.half4;
            public get wwyx(): Unity.Mathematics.half4;
            public get wwyy(): Unity.Mathematics.half4;
            public get wwyz(): Unity.Mathematics.half4;
            public get wwyw(): Unity.Mathematics.half4;
            public get wwzx(): Unity.Mathematics.half4;
            public get wwzy(): Unity.Mathematics.half4;
            public get wwzz(): Unity.Mathematics.half4;
            public get wwzw(): Unity.Mathematics.half4;
            public get wwwx(): Unity.Mathematics.half4;
            public get wwwy(): Unity.Mathematics.half4;
            public get wwwz(): Unity.Mathematics.half4;
            public get wwww(): Unity.Mathematics.half4;
            public get xxx(): Unity.Mathematics.half3;
            public get xxy(): Unity.Mathematics.half3;
            public get xxz(): Unity.Mathematics.half3;
            public get xxw(): Unity.Mathematics.half3;
            public get xyx(): Unity.Mathematics.half3;
            public get xyy(): Unity.Mathematics.half3;
            public get xyz(): Unity.Mathematics.half3;
            public set xyz(value: Unity.Mathematics.half3);
            public get xyw(): Unity.Mathematics.half3;
            public set xyw(value: Unity.Mathematics.half3);
            public get xzx(): Unity.Mathematics.half3;
            public get xzy(): Unity.Mathematics.half3;
            public set xzy(value: Unity.Mathematics.half3);
            public get xzz(): Unity.Mathematics.half3;
            public get xzw(): Unity.Mathematics.half3;
            public set xzw(value: Unity.Mathematics.half3);
            public get xwx(): Unity.Mathematics.half3;
            public get xwy(): Unity.Mathematics.half3;
            public set xwy(value: Unity.Mathematics.half3);
            public get xwz(): Unity.Mathematics.half3;
            public set xwz(value: Unity.Mathematics.half3);
            public get xww(): Unity.Mathematics.half3;
            public get yxx(): Unity.Mathematics.half3;
            public get yxy(): Unity.Mathematics.half3;
            public get yxz(): Unity.Mathematics.half3;
            public set yxz(value: Unity.Mathematics.half3);
            public get yxw(): Unity.Mathematics.half3;
            public set yxw(value: Unity.Mathematics.half3);
            public get yyx(): Unity.Mathematics.half3;
            public get yyy(): Unity.Mathematics.half3;
            public get yyz(): Unity.Mathematics.half3;
            public get yyw(): Unity.Mathematics.half3;
            public get yzx(): Unity.Mathematics.half3;
            public set yzx(value: Unity.Mathematics.half3);
            public get yzy(): Unity.Mathematics.half3;
            public get yzz(): Unity.Mathematics.half3;
            public get yzw(): Unity.Mathematics.half3;
            public set yzw(value: Unity.Mathematics.half3);
            public get ywx(): Unity.Mathematics.half3;
            public set ywx(value: Unity.Mathematics.half3);
            public get ywy(): Unity.Mathematics.half3;
            public get ywz(): Unity.Mathematics.half3;
            public set ywz(value: Unity.Mathematics.half3);
            public get yww(): Unity.Mathematics.half3;
            public get zxx(): Unity.Mathematics.half3;
            public get zxy(): Unity.Mathematics.half3;
            public set zxy(value: Unity.Mathematics.half3);
            public get zxz(): Unity.Mathematics.half3;
            public get zxw(): Unity.Mathematics.half3;
            public set zxw(value: Unity.Mathematics.half3);
            public get zyx(): Unity.Mathematics.half3;
            public set zyx(value: Unity.Mathematics.half3);
            public get zyy(): Unity.Mathematics.half3;
            public get zyz(): Unity.Mathematics.half3;
            public get zyw(): Unity.Mathematics.half3;
            public set zyw(value: Unity.Mathematics.half3);
            public get zzx(): Unity.Mathematics.half3;
            public get zzy(): Unity.Mathematics.half3;
            public get zzz(): Unity.Mathematics.half3;
            public get zzw(): Unity.Mathematics.half3;
            public get zwx(): Unity.Mathematics.half3;
            public set zwx(value: Unity.Mathematics.half3);
            public get zwy(): Unity.Mathematics.half3;
            public set zwy(value: Unity.Mathematics.half3);
            public get zwz(): Unity.Mathematics.half3;
            public get zww(): Unity.Mathematics.half3;
            public get wxx(): Unity.Mathematics.half3;
            public get wxy(): Unity.Mathematics.half3;
            public set wxy(value: Unity.Mathematics.half3);
            public get wxz(): Unity.Mathematics.half3;
            public set wxz(value: Unity.Mathematics.half3);
            public get wxw(): Unity.Mathematics.half3;
            public get wyx(): Unity.Mathematics.half3;
            public set wyx(value: Unity.Mathematics.half3);
            public get wyy(): Unity.Mathematics.half3;
            public get wyz(): Unity.Mathematics.half3;
            public set wyz(value: Unity.Mathematics.half3);
            public get wyw(): Unity.Mathematics.half3;
            public get wzx(): Unity.Mathematics.half3;
            public set wzx(value: Unity.Mathematics.half3);
            public get wzy(): Unity.Mathematics.half3;
            public set wzy(value: Unity.Mathematics.half3);
            public get wzz(): Unity.Mathematics.half3;
            public get wzw(): Unity.Mathematics.half3;
            public get wwx(): Unity.Mathematics.half3;
            public get wwy(): Unity.Mathematics.half3;
            public get wwz(): Unity.Mathematics.half3;
            public get www(): Unity.Mathematics.half3;
            public get xx(): Unity.Mathematics.half2;
            public get xy(): Unity.Mathematics.half2;
            public set xy(value: Unity.Mathematics.half2);
            public get xz(): Unity.Mathematics.half2;
            public set xz(value: Unity.Mathematics.half2);
            public get xw(): Unity.Mathematics.half2;
            public set xw(value: Unity.Mathematics.half2);
            public get yx(): Unity.Mathematics.half2;
            public set yx(value: Unity.Mathematics.half2);
            public get yy(): Unity.Mathematics.half2;
            public get yz(): Unity.Mathematics.half2;
            public set yz(value: Unity.Mathematics.half2);
            public get yw(): Unity.Mathematics.half2;
            public set yw(value: Unity.Mathematics.half2);
            public get zx(): Unity.Mathematics.half2;
            public set zx(value: Unity.Mathematics.half2);
            public get zy(): Unity.Mathematics.half2;
            public set zy(value: Unity.Mathematics.half2);
            public get zz(): Unity.Mathematics.half2;
            public get zw(): Unity.Mathematics.half2;
            public set zw(value: Unity.Mathematics.half2);
            public get wx(): Unity.Mathematics.half2;
            public set wx(value: Unity.Mathematics.half2);
            public get wy(): Unity.Mathematics.half2;
            public set wy(value: Unity.Mathematics.half2);
            public get wz(): Unity.Mathematics.half2;
            public set wz(value: Unity.Mathematics.half2);
            public get ww(): Unity.Mathematics.half2;
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.half4
            public static op_Explicit ($v: number) : Unity.Mathematics.half4
            public static op_Explicit ($v: Unity.Mathematics.float4) : Unity.Mathematics.half4
            public static op_Explicit ($v: Unity.Mathematics.double4) : Unity.Mathematics.half4
            public static op_Equality ($lhs: Unity.Mathematics.half4, $rhs: Unity.Mathematics.half4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.half4, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.half4, $rhs: Unity.Mathematics.half4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.half4, $rhs: Unity.Mathematics.half) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.half, $rhs: Unity.Mathematics.half4) : Unity.Mathematics.bool4
            public get_Item ($index: number) : Unity.Mathematics.half
            public set_Item ($index: number, $value: Unity.Mathematics.half) : void
            public Equals ($rhs: Unity.Mathematics.half4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $z: Unity.Mathematics.half, $w: Unity.Mathematics.half)
            public constructor ($x: Unity.Mathematics.half, $y: Unity.Mathematics.half, $zw: Unity.Mathematics.half2)
            public constructor ($x: Unity.Mathematics.half, $yz: Unity.Mathematics.half2, $w: Unity.Mathematics.half)
            public constructor ($x: Unity.Mathematics.half, $yzw: Unity.Mathematics.half3)
            public constructor ($xy: Unity.Mathematics.half2, $z: Unity.Mathematics.half, $w: Unity.Mathematics.half)
            public constructor ($xy: Unity.Mathematics.half2, $zw: Unity.Mathematics.half2)
            public constructor ($xyz: Unity.Mathematics.half3, $w: Unity.Mathematics.half)
            public constructor ($xyzw: Unity.Mathematics.half4)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: number)
            public constructor ($v: Unity.Mathematics.float4)
            public constructor ($v: Unity.Mathematics.double4)
        }
        class float4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float4>
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public w : number
            public static zero : Unity.Mathematics.float4
            public get xxxx(): Unity.Mathematics.float4;
            public get xxxy(): Unity.Mathematics.float4;
            public get xxxz(): Unity.Mathematics.float4;
            public get xxxw(): Unity.Mathematics.float4;
            public get xxyx(): Unity.Mathematics.float4;
            public get xxyy(): Unity.Mathematics.float4;
            public get xxyz(): Unity.Mathematics.float4;
            public get xxyw(): Unity.Mathematics.float4;
            public get xxzx(): Unity.Mathematics.float4;
            public get xxzy(): Unity.Mathematics.float4;
            public get xxzz(): Unity.Mathematics.float4;
            public get xxzw(): Unity.Mathematics.float4;
            public get xxwx(): Unity.Mathematics.float4;
            public get xxwy(): Unity.Mathematics.float4;
            public get xxwz(): Unity.Mathematics.float4;
            public get xxww(): Unity.Mathematics.float4;
            public get xyxx(): Unity.Mathematics.float4;
            public get xyxy(): Unity.Mathematics.float4;
            public get xyxz(): Unity.Mathematics.float4;
            public get xyxw(): Unity.Mathematics.float4;
            public get xyyx(): Unity.Mathematics.float4;
            public get xyyy(): Unity.Mathematics.float4;
            public get xyyz(): Unity.Mathematics.float4;
            public get xyyw(): Unity.Mathematics.float4;
            public get xyzx(): Unity.Mathematics.float4;
            public get xyzy(): Unity.Mathematics.float4;
            public get xyzz(): Unity.Mathematics.float4;
            public get xyzw(): Unity.Mathematics.float4;
            public set xyzw(value: Unity.Mathematics.float4);
            public get xywx(): Unity.Mathematics.float4;
            public get xywy(): Unity.Mathematics.float4;
            public get xywz(): Unity.Mathematics.float4;
            public set xywz(value: Unity.Mathematics.float4);
            public get xyww(): Unity.Mathematics.float4;
            public get xzxx(): Unity.Mathematics.float4;
            public get xzxy(): Unity.Mathematics.float4;
            public get xzxz(): Unity.Mathematics.float4;
            public get xzxw(): Unity.Mathematics.float4;
            public get xzyx(): Unity.Mathematics.float4;
            public get xzyy(): Unity.Mathematics.float4;
            public get xzyz(): Unity.Mathematics.float4;
            public get xzyw(): Unity.Mathematics.float4;
            public set xzyw(value: Unity.Mathematics.float4);
            public get xzzx(): Unity.Mathematics.float4;
            public get xzzy(): Unity.Mathematics.float4;
            public get xzzz(): Unity.Mathematics.float4;
            public get xzzw(): Unity.Mathematics.float4;
            public get xzwx(): Unity.Mathematics.float4;
            public get xzwy(): Unity.Mathematics.float4;
            public set xzwy(value: Unity.Mathematics.float4);
            public get xzwz(): Unity.Mathematics.float4;
            public get xzww(): Unity.Mathematics.float4;
            public get xwxx(): Unity.Mathematics.float4;
            public get xwxy(): Unity.Mathematics.float4;
            public get xwxz(): Unity.Mathematics.float4;
            public get xwxw(): Unity.Mathematics.float4;
            public get xwyx(): Unity.Mathematics.float4;
            public get xwyy(): Unity.Mathematics.float4;
            public get xwyz(): Unity.Mathematics.float4;
            public set xwyz(value: Unity.Mathematics.float4);
            public get xwyw(): Unity.Mathematics.float4;
            public get xwzx(): Unity.Mathematics.float4;
            public get xwzy(): Unity.Mathematics.float4;
            public set xwzy(value: Unity.Mathematics.float4);
            public get xwzz(): Unity.Mathematics.float4;
            public get xwzw(): Unity.Mathematics.float4;
            public get xwwx(): Unity.Mathematics.float4;
            public get xwwy(): Unity.Mathematics.float4;
            public get xwwz(): Unity.Mathematics.float4;
            public get xwww(): Unity.Mathematics.float4;
            public get yxxx(): Unity.Mathematics.float4;
            public get yxxy(): Unity.Mathematics.float4;
            public get yxxz(): Unity.Mathematics.float4;
            public get yxxw(): Unity.Mathematics.float4;
            public get yxyx(): Unity.Mathematics.float4;
            public get yxyy(): Unity.Mathematics.float4;
            public get yxyz(): Unity.Mathematics.float4;
            public get yxyw(): Unity.Mathematics.float4;
            public get yxzx(): Unity.Mathematics.float4;
            public get yxzy(): Unity.Mathematics.float4;
            public get yxzz(): Unity.Mathematics.float4;
            public get yxzw(): Unity.Mathematics.float4;
            public set yxzw(value: Unity.Mathematics.float4);
            public get yxwx(): Unity.Mathematics.float4;
            public get yxwy(): Unity.Mathematics.float4;
            public get yxwz(): Unity.Mathematics.float4;
            public set yxwz(value: Unity.Mathematics.float4);
            public get yxww(): Unity.Mathematics.float4;
            public get yyxx(): Unity.Mathematics.float4;
            public get yyxy(): Unity.Mathematics.float4;
            public get yyxz(): Unity.Mathematics.float4;
            public get yyxw(): Unity.Mathematics.float4;
            public get yyyx(): Unity.Mathematics.float4;
            public get yyyy(): Unity.Mathematics.float4;
            public get yyyz(): Unity.Mathematics.float4;
            public get yyyw(): Unity.Mathematics.float4;
            public get yyzx(): Unity.Mathematics.float4;
            public get yyzy(): Unity.Mathematics.float4;
            public get yyzz(): Unity.Mathematics.float4;
            public get yyzw(): Unity.Mathematics.float4;
            public get yywx(): Unity.Mathematics.float4;
            public get yywy(): Unity.Mathematics.float4;
            public get yywz(): Unity.Mathematics.float4;
            public get yyww(): Unity.Mathematics.float4;
            public get yzxx(): Unity.Mathematics.float4;
            public get yzxy(): Unity.Mathematics.float4;
            public get yzxz(): Unity.Mathematics.float4;
            public get yzxw(): Unity.Mathematics.float4;
            public set yzxw(value: Unity.Mathematics.float4);
            public get yzyx(): Unity.Mathematics.float4;
            public get yzyy(): Unity.Mathematics.float4;
            public get yzyz(): Unity.Mathematics.float4;
            public get yzyw(): Unity.Mathematics.float4;
            public get yzzx(): Unity.Mathematics.float4;
            public get yzzy(): Unity.Mathematics.float4;
            public get yzzz(): Unity.Mathematics.float4;
            public get yzzw(): Unity.Mathematics.float4;
            public get yzwx(): Unity.Mathematics.float4;
            public set yzwx(value: Unity.Mathematics.float4);
            public get yzwy(): Unity.Mathematics.float4;
            public get yzwz(): Unity.Mathematics.float4;
            public get yzww(): Unity.Mathematics.float4;
            public get ywxx(): Unity.Mathematics.float4;
            public get ywxy(): Unity.Mathematics.float4;
            public get ywxz(): Unity.Mathematics.float4;
            public set ywxz(value: Unity.Mathematics.float4);
            public get ywxw(): Unity.Mathematics.float4;
            public get ywyx(): Unity.Mathematics.float4;
            public get ywyy(): Unity.Mathematics.float4;
            public get ywyz(): Unity.Mathematics.float4;
            public get ywyw(): Unity.Mathematics.float4;
            public get ywzx(): Unity.Mathematics.float4;
            public set ywzx(value: Unity.Mathematics.float4);
            public get ywzy(): Unity.Mathematics.float4;
            public get ywzz(): Unity.Mathematics.float4;
            public get ywzw(): Unity.Mathematics.float4;
            public get ywwx(): Unity.Mathematics.float4;
            public get ywwy(): Unity.Mathematics.float4;
            public get ywwz(): Unity.Mathematics.float4;
            public get ywww(): Unity.Mathematics.float4;
            public get zxxx(): Unity.Mathematics.float4;
            public get zxxy(): Unity.Mathematics.float4;
            public get zxxz(): Unity.Mathematics.float4;
            public get zxxw(): Unity.Mathematics.float4;
            public get zxyx(): Unity.Mathematics.float4;
            public get zxyy(): Unity.Mathematics.float4;
            public get zxyz(): Unity.Mathematics.float4;
            public get zxyw(): Unity.Mathematics.float4;
            public set zxyw(value: Unity.Mathematics.float4);
            public get zxzx(): Unity.Mathematics.float4;
            public get zxzy(): Unity.Mathematics.float4;
            public get zxzz(): Unity.Mathematics.float4;
            public get zxzw(): Unity.Mathematics.float4;
            public get zxwx(): Unity.Mathematics.float4;
            public get zxwy(): Unity.Mathematics.float4;
            public set zxwy(value: Unity.Mathematics.float4);
            public get zxwz(): Unity.Mathematics.float4;
            public get zxww(): Unity.Mathematics.float4;
            public get zyxx(): Unity.Mathematics.float4;
            public get zyxy(): Unity.Mathematics.float4;
            public get zyxz(): Unity.Mathematics.float4;
            public get zyxw(): Unity.Mathematics.float4;
            public set zyxw(value: Unity.Mathematics.float4);
            public get zyyx(): Unity.Mathematics.float4;
            public get zyyy(): Unity.Mathematics.float4;
            public get zyyz(): Unity.Mathematics.float4;
            public get zyyw(): Unity.Mathematics.float4;
            public get zyzx(): Unity.Mathematics.float4;
            public get zyzy(): Unity.Mathematics.float4;
            public get zyzz(): Unity.Mathematics.float4;
            public get zyzw(): Unity.Mathematics.float4;
            public get zywx(): Unity.Mathematics.float4;
            public set zywx(value: Unity.Mathematics.float4);
            public get zywy(): Unity.Mathematics.float4;
            public get zywz(): Unity.Mathematics.float4;
            public get zyww(): Unity.Mathematics.float4;
            public get zzxx(): Unity.Mathematics.float4;
            public get zzxy(): Unity.Mathematics.float4;
            public get zzxz(): Unity.Mathematics.float4;
            public get zzxw(): Unity.Mathematics.float4;
            public get zzyx(): Unity.Mathematics.float4;
            public get zzyy(): Unity.Mathematics.float4;
            public get zzyz(): Unity.Mathematics.float4;
            public get zzyw(): Unity.Mathematics.float4;
            public get zzzx(): Unity.Mathematics.float4;
            public get zzzy(): Unity.Mathematics.float4;
            public get zzzz(): Unity.Mathematics.float4;
            public get zzzw(): Unity.Mathematics.float4;
            public get zzwx(): Unity.Mathematics.float4;
            public get zzwy(): Unity.Mathematics.float4;
            public get zzwz(): Unity.Mathematics.float4;
            public get zzww(): Unity.Mathematics.float4;
            public get zwxx(): Unity.Mathematics.float4;
            public get zwxy(): Unity.Mathematics.float4;
            public set zwxy(value: Unity.Mathematics.float4);
            public get zwxz(): Unity.Mathematics.float4;
            public get zwxw(): Unity.Mathematics.float4;
            public get zwyx(): Unity.Mathematics.float4;
            public set zwyx(value: Unity.Mathematics.float4);
            public get zwyy(): Unity.Mathematics.float4;
            public get zwyz(): Unity.Mathematics.float4;
            public get zwyw(): Unity.Mathematics.float4;
            public get zwzx(): Unity.Mathematics.float4;
            public get zwzy(): Unity.Mathematics.float4;
            public get zwzz(): Unity.Mathematics.float4;
            public get zwzw(): Unity.Mathematics.float4;
            public get zwwx(): Unity.Mathematics.float4;
            public get zwwy(): Unity.Mathematics.float4;
            public get zwwz(): Unity.Mathematics.float4;
            public get zwww(): Unity.Mathematics.float4;
            public get wxxx(): Unity.Mathematics.float4;
            public get wxxy(): Unity.Mathematics.float4;
            public get wxxz(): Unity.Mathematics.float4;
            public get wxxw(): Unity.Mathematics.float4;
            public get wxyx(): Unity.Mathematics.float4;
            public get wxyy(): Unity.Mathematics.float4;
            public get wxyz(): Unity.Mathematics.float4;
            public set wxyz(value: Unity.Mathematics.float4);
            public get wxyw(): Unity.Mathematics.float4;
            public get wxzx(): Unity.Mathematics.float4;
            public get wxzy(): Unity.Mathematics.float4;
            public set wxzy(value: Unity.Mathematics.float4);
            public get wxzz(): Unity.Mathematics.float4;
            public get wxzw(): Unity.Mathematics.float4;
            public get wxwx(): Unity.Mathematics.float4;
            public get wxwy(): Unity.Mathematics.float4;
            public get wxwz(): Unity.Mathematics.float4;
            public get wxww(): Unity.Mathematics.float4;
            public get wyxx(): Unity.Mathematics.float4;
            public get wyxy(): Unity.Mathematics.float4;
            public get wyxz(): Unity.Mathematics.float4;
            public set wyxz(value: Unity.Mathematics.float4);
            public get wyxw(): Unity.Mathematics.float4;
            public get wyyx(): Unity.Mathematics.float4;
            public get wyyy(): Unity.Mathematics.float4;
            public get wyyz(): Unity.Mathematics.float4;
            public get wyyw(): Unity.Mathematics.float4;
            public get wyzx(): Unity.Mathematics.float4;
            public set wyzx(value: Unity.Mathematics.float4);
            public get wyzy(): Unity.Mathematics.float4;
            public get wyzz(): Unity.Mathematics.float4;
            public get wyzw(): Unity.Mathematics.float4;
            public get wywx(): Unity.Mathematics.float4;
            public get wywy(): Unity.Mathematics.float4;
            public get wywz(): Unity.Mathematics.float4;
            public get wyww(): Unity.Mathematics.float4;
            public get wzxx(): Unity.Mathematics.float4;
            public get wzxy(): Unity.Mathematics.float4;
            public set wzxy(value: Unity.Mathematics.float4);
            public get wzxz(): Unity.Mathematics.float4;
            public get wzxw(): Unity.Mathematics.float4;
            public get wzyx(): Unity.Mathematics.float4;
            public set wzyx(value: Unity.Mathematics.float4);
            public get wzyy(): Unity.Mathematics.float4;
            public get wzyz(): Unity.Mathematics.float4;
            public get wzyw(): Unity.Mathematics.float4;
            public get wzzx(): Unity.Mathematics.float4;
            public get wzzy(): Unity.Mathematics.float4;
            public get wzzz(): Unity.Mathematics.float4;
            public get wzzw(): Unity.Mathematics.float4;
            public get wzwx(): Unity.Mathematics.float4;
            public get wzwy(): Unity.Mathematics.float4;
            public get wzwz(): Unity.Mathematics.float4;
            public get wzww(): Unity.Mathematics.float4;
            public get wwxx(): Unity.Mathematics.float4;
            public get wwxy(): Unity.Mathematics.float4;
            public get wwxz(): Unity.Mathematics.float4;
            public get wwxw(): Unity.Mathematics.float4;
            public get wwyx(): Unity.Mathematics.float4;
            public get wwyy(): Unity.Mathematics.float4;
            public get wwyz(): Unity.Mathematics.float4;
            public get wwyw(): Unity.Mathematics.float4;
            public get wwzx(): Unity.Mathematics.float4;
            public get wwzy(): Unity.Mathematics.float4;
            public get wwzz(): Unity.Mathematics.float4;
            public get wwzw(): Unity.Mathematics.float4;
            public get wwwx(): Unity.Mathematics.float4;
            public get wwwy(): Unity.Mathematics.float4;
            public get wwwz(): Unity.Mathematics.float4;
            public get wwww(): Unity.Mathematics.float4;
            public get xxx(): Unity.Mathematics.float3;
            public get xxy(): Unity.Mathematics.float3;
            public get xxz(): Unity.Mathematics.float3;
            public get xxw(): Unity.Mathematics.float3;
            public get xyx(): Unity.Mathematics.float3;
            public get xyy(): Unity.Mathematics.float3;
            public get xyz(): Unity.Mathematics.float3;
            public set xyz(value: Unity.Mathematics.float3);
            public get xyw(): Unity.Mathematics.float3;
            public set xyw(value: Unity.Mathematics.float3);
            public get xzx(): Unity.Mathematics.float3;
            public get xzy(): Unity.Mathematics.float3;
            public set xzy(value: Unity.Mathematics.float3);
            public get xzz(): Unity.Mathematics.float3;
            public get xzw(): Unity.Mathematics.float3;
            public set xzw(value: Unity.Mathematics.float3);
            public get xwx(): Unity.Mathematics.float3;
            public get xwy(): Unity.Mathematics.float3;
            public set xwy(value: Unity.Mathematics.float3);
            public get xwz(): Unity.Mathematics.float3;
            public set xwz(value: Unity.Mathematics.float3);
            public get xww(): Unity.Mathematics.float3;
            public get yxx(): Unity.Mathematics.float3;
            public get yxy(): Unity.Mathematics.float3;
            public get yxz(): Unity.Mathematics.float3;
            public set yxz(value: Unity.Mathematics.float3);
            public get yxw(): Unity.Mathematics.float3;
            public set yxw(value: Unity.Mathematics.float3);
            public get yyx(): Unity.Mathematics.float3;
            public get yyy(): Unity.Mathematics.float3;
            public get yyz(): Unity.Mathematics.float3;
            public get yyw(): Unity.Mathematics.float3;
            public get yzx(): Unity.Mathematics.float3;
            public set yzx(value: Unity.Mathematics.float3);
            public get yzy(): Unity.Mathematics.float3;
            public get yzz(): Unity.Mathematics.float3;
            public get yzw(): Unity.Mathematics.float3;
            public set yzw(value: Unity.Mathematics.float3);
            public get ywx(): Unity.Mathematics.float3;
            public set ywx(value: Unity.Mathematics.float3);
            public get ywy(): Unity.Mathematics.float3;
            public get ywz(): Unity.Mathematics.float3;
            public set ywz(value: Unity.Mathematics.float3);
            public get yww(): Unity.Mathematics.float3;
            public get zxx(): Unity.Mathematics.float3;
            public get zxy(): Unity.Mathematics.float3;
            public set zxy(value: Unity.Mathematics.float3);
            public get zxz(): Unity.Mathematics.float3;
            public get zxw(): Unity.Mathematics.float3;
            public set zxw(value: Unity.Mathematics.float3);
            public get zyx(): Unity.Mathematics.float3;
            public set zyx(value: Unity.Mathematics.float3);
            public get zyy(): Unity.Mathematics.float3;
            public get zyz(): Unity.Mathematics.float3;
            public get zyw(): Unity.Mathematics.float3;
            public set zyw(value: Unity.Mathematics.float3);
            public get zzx(): Unity.Mathematics.float3;
            public get zzy(): Unity.Mathematics.float3;
            public get zzz(): Unity.Mathematics.float3;
            public get zzw(): Unity.Mathematics.float3;
            public get zwx(): Unity.Mathematics.float3;
            public set zwx(value: Unity.Mathematics.float3);
            public get zwy(): Unity.Mathematics.float3;
            public set zwy(value: Unity.Mathematics.float3);
            public get zwz(): Unity.Mathematics.float3;
            public get zww(): Unity.Mathematics.float3;
            public get wxx(): Unity.Mathematics.float3;
            public get wxy(): Unity.Mathematics.float3;
            public set wxy(value: Unity.Mathematics.float3);
            public get wxz(): Unity.Mathematics.float3;
            public set wxz(value: Unity.Mathematics.float3);
            public get wxw(): Unity.Mathematics.float3;
            public get wyx(): Unity.Mathematics.float3;
            public set wyx(value: Unity.Mathematics.float3);
            public get wyy(): Unity.Mathematics.float3;
            public get wyz(): Unity.Mathematics.float3;
            public set wyz(value: Unity.Mathematics.float3);
            public get wyw(): Unity.Mathematics.float3;
            public get wzx(): Unity.Mathematics.float3;
            public set wzx(value: Unity.Mathematics.float3);
            public get wzy(): Unity.Mathematics.float3;
            public set wzy(value: Unity.Mathematics.float3);
            public get wzz(): Unity.Mathematics.float3;
            public get wzw(): Unity.Mathematics.float3;
            public get wwx(): Unity.Mathematics.float3;
            public get wwy(): Unity.Mathematics.float3;
            public get wwz(): Unity.Mathematics.float3;
            public get www(): Unity.Mathematics.float3;
            public get xx(): Unity.Mathematics.float2;
            public get xy(): Unity.Mathematics.float2;
            public set xy(value: Unity.Mathematics.float2);
            public get xz(): Unity.Mathematics.float2;
            public set xz(value: Unity.Mathematics.float2);
            public get xw(): Unity.Mathematics.float2;
            public set xw(value: Unity.Mathematics.float2);
            public get yx(): Unity.Mathematics.float2;
            public set yx(value: Unity.Mathematics.float2);
            public get yy(): Unity.Mathematics.float2;
            public get yz(): Unity.Mathematics.float2;
            public set yz(value: Unity.Mathematics.float2);
            public get yw(): Unity.Mathematics.float2;
            public set yw(value: Unity.Mathematics.float2);
            public get zx(): Unity.Mathematics.float2;
            public set zx(value: Unity.Mathematics.float2);
            public get zy(): Unity.Mathematics.float2;
            public set zy(value: Unity.Mathematics.float2);
            public get zz(): Unity.Mathematics.float2;
            public get zw(): Unity.Mathematics.float2;
            public set zw(value: Unity.Mathematics.float2);
            public get wx(): Unity.Mathematics.float2;
            public set wx(value: Unity.Mathematics.float2);
            public get wy(): Unity.Mathematics.float2;
            public set wy(value: Unity.Mathematics.float2);
            public get wz(): Unity.Mathematics.float2;
            public set wz(value: Unity.Mathematics.float2);
            public get ww(): Unity.Mathematics.float2;
            public static op_Implicit ($v: number) : Unity.Mathematics.float4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float4
            public static op_Explicit ($v: Unity.Mathematics.bool4) : Unity.Mathematics.float4
            public static op_Implicit ($v: Unity.Mathematics.int4) : Unity.Mathematics.float4
            public static op_Implicit ($v: Unity.Mathematics.uint4) : Unity.Mathematics.float4
            public static op_Implicit ($v: Unity.Mathematics.half) : Unity.Mathematics.float4
            public static op_Implicit ($v: Unity.Mathematics.half4) : Unity.Mathematics.float4
            public static op_Explicit ($v: number) : Unity.Mathematics.float4
            public static op_Explicit ($v: Unity.Mathematics.double4) : Unity.Mathematics.float4
            public static op_Multiply ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Multiply ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.float4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Addition ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Addition ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.float4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Subtraction ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Subtraction ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.float4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Division ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Division ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.float4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Modulus ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Modulus ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.float4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Increment ($val: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Decrement ($val: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_LessThan ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_UnaryNegation ($val: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_UnaryPlus ($val: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public static op_Equality ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.float4, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: Unity.Mathematics.float4, $rhs: number) : Unity.Mathematics.bool4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float4) : Unity.Mathematics.bool4
            public get_Item ($index: number) : number
            public set_Item ($index: number, $value: number) : void
            public Equals ($rhs: Unity.Mathematics.float4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Implicit ($v: UnityEngine.Vector4) : Unity.Mathematics.float4
            public static op_Implicit ($v: Unity.Mathematics.float4) : UnityEngine.Vector4
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($x: number, $y: number, $zw: Unity.Mathematics.float2)
            public constructor ($x: number, $yz: Unity.Mathematics.float2, $w: number)
            public constructor ($x: number, $yzw: Unity.Mathematics.float3)
            public constructor ($xy: Unity.Mathematics.float2, $z: number, $w: number)
            public constructor ($xy: Unity.Mathematics.float2, $zw: Unity.Mathematics.float2)
            public constructor ($xyz: Unity.Mathematics.float3, $w: number)
            public constructor ($xyzw: Unity.Mathematics.float4)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4)
            public constructor ($v: Unity.Mathematics.int4)
            public constructor ($v: Unity.Mathematics.uint4)
            public constructor ($v: Unity.Mathematics.half)
            public constructor ($v: Unity.Mathematics.half4)
            public constructor ($v: Unity.Mathematics.double4)
        }
        class int4x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int4x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int4
            public c1 : Unity.Mathematics.int4
            public static zero : Unity.Mathematics.int4x2
            public static op_Implicit ($v: number) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: number) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.int4x2
            public static op_Explicit ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.int4x2
            public static op_Multiply ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Multiply ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Addition ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Addition ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Division ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Division ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Modulus ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Modulus ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Increment ($val: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_Decrement ($val: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_LessThan ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_UnaryNegation ($val: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_UnaryPlus ($val: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_LeftShift ($x: Unity.Mathematics.int4x2, $n: number) : Unity.Mathematics.int4x2
            public static op_RightShift ($x: Unity.Mathematics.int4x2, $n: number) : Unity.Mathematics.int4x2
            public static op_Equality ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.bool4x2
            public static op_OnesComplement ($val: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x2, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x2, $rhs: number) : Unity.Mathematics.int4x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int4x2) : Unity.Mathematics.int4x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int4>
            public Equals ($rhs: Unity.Mathematics.int4x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x2)
            public constructor ($v: Unity.Mathematics.uint4x2)
            public constructor ($v: Unity.Mathematics.float4x2)
            public constructor ($v: Unity.Mathematics.double4x2)
        }
        class uint4x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint4x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint4
            public c1 : Unity.Mathematics.uint4
            public static zero : Unity.Mathematics.uint4x2
            public static op_Implicit ($v: number) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: number) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: Unity.Mathematics.float4x2) : Unity.Mathematics.uint4x2
            public static op_Explicit ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.uint4x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Addition ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Addition ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Division ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Division ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Increment ($val: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_Decrement ($val: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_UnaryNegation ($val: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_UnaryPlus ($val: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_LeftShift ($x: Unity.Mathematics.uint4x2, $n: number) : Unity.Mathematics.uint4x2
            public static op_RightShift ($x: Unity.Mathematics.uint4x2, $n: number) : Unity.Mathematics.uint4x2
            public static op_Equality ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.bool4x2
            public static op_OnesComplement ($val: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x2, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x2, $rhs: number) : Unity.Mathematics.uint4x2
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint4x2) : Unity.Mathematics.uint4x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint4>
            public Equals ($rhs: Unity.Mathematics.uint4x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x2)
            public constructor ($v: Unity.Mathematics.int4x2)
            public constructor ($v: Unity.Mathematics.float4x2)
            public constructor ($v: Unity.Mathematics.double4x2)
        }
        class float4x2 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float4x2>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float4
            public c1 : Unity.Mathematics.float4
            public static zero : Unity.Mathematics.float4x2
            public static op_Implicit ($v: number) : Unity.Mathematics.float4x2
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float4x2
            public static op_Explicit ($v: Unity.Mathematics.bool4x2) : Unity.Mathematics.float4x2
            public static op_Implicit ($v: Unity.Mathematics.int4x2) : Unity.Mathematics.float4x2
            public static op_Implicit ($v: Unity.Mathematics.uint4x2) : Unity.Mathematics.float4x2
            public static op_Explicit ($v: number) : Unity.Mathematics.float4x2
            public static op_Explicit ($v: Unity.Mathematics.double4x2) : Unity.Mathematics.float4x2
            public static op_Multiply ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Multiply ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.float4x2
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Addition ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Addition ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.float4x2
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.float4x2
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Division ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Division ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.float4x2
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Modulus ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Modulus ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.float4x2
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Increment ($val: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Decrement ($val: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_LessThan ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_UnaryNegation ($val: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_UnaryPlus ($val: Unity.Mathematics.float4x2) : Unity.Mathematics.float4x2
            public static op_Equality ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.float4x2, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: Unity.Mathematics.float4x2, $rhs: number) : Unity.Mathematics.bool4x2
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float4x2) : Unity.Mathematics.bool4x2
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float4>
            public Equals ($rhs: Unity.Mathematics.float4x2) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4)
            public constructor ($m00: number, $m01: number, $m10: number, $m11: number, $m20: number, $m21: number, $m30: number, $m31: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x2)
            public constructor ($v: Unity.Mathematics.int4x2)
            public constructor ($v: Unity.Mathematics.uint4x2)
            public constructor ($v: Unity.Mathematics.double4x2)
        }
        class int4x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int4x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int4
            public c1 : Unity.Mathematics.int4
            public c2 : Unity.Mathematics.int4
            public static zero : Unity.Mathematics.int4x3
            public static op_Implicit ($v: number) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: number) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.int4x3
            public static op_Explicit ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.int4x3
            public static op_Multiply ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Multiply ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Addition ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Addition ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Division ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Division ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Modulus ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Modulus ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Increment ($val: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_Decrement ($val: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_LessThan ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_UnaryNegation ($val: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_UnaryPlus ($val: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_LeftShift ($x: Unity.Mathematics.int4x3, $n: number) : Unity.Mathematics.int4x3
            public static op_RightShift ($x: Unity.Mathematics.int4x3, $n: number) : Unity.Mathematics.int4x3
            public static op_Equality ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.bool4x3
            public static op_OnesComplement ($val: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x3, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x3, $rhs: number) : Unity.Mathematics.int4x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int4x3) : Unity.Mathematics.int4x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int4>
            public Equals ($rhs: Unity.Mathematics.int4x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4, $c2: Unity.Mathematics.int4)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x3)
            public constructor ($v: Unity.Mathematics.uint4x3)
            public constructor ($v: Unity.Mathematics.float4x3)
            public constructor ($v: Unity.Mathematics.double4x3)
        }
        class uint4x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint4x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint4
            public c1 : Unity.Mathematics.uint4
            public c2 : Unity.Mathematics.uint4
            public static zero : Unity.Mathematics.uint4x3
            public static op_Implicit ($v: number) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: number) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: Unity.Mathematics.float4x3) : Unity.Mathematics.uint4x3
            public static op_Explicit ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.uint4x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Addition ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Addition ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Division ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Division ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Increment ($val: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_Decrement ($val: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_UnaryNegation ($val: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_UnaryPlus ($val: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_LeftShift ($x: Unity.Mathematics.uint4x3, $n: number) : Unity.Mathematics.uint4x3
            public static op_RightShift ($x: Unity.Mathematics.uint4x3, $n: number) : Unity.Mathematics.uint4x3
            public static op_Equality ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.bool4x3
            public static op_OnesComplement ($val: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x3, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x3, $rhs: number) : Unity.Mathematics.uint4x3
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint4x3) : Unity.Mathematics.uint4x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint4>
            public Equals ($rhs: Unity.Mathematics.uint4x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4, $c2: Unity.Mathematics.uint4)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x3)
            public constructor ($v: Unity.Mathematics.int4x3)
            public constructor ($v: Unity.Mathematics.float4x3)
            public constructor ($v: Unity.Mathematics.double4x3)
        }
        class float4x3 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float4x3>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float4
            public c1 : Unity.Mathematics.float4
            public c2 : Unity.Mathematics.float4
            public static zero : Unity.Mathematics.float4x3
            public static op_Implicit ($v: number) : Unity.Mathematics.float4x3
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float4x3
            public static op_Explicit ($v: Unity.Mathematics.bool4x3) : Unity.Mathematics.float4x3
            public static op_Implicit ($v: Unity.Mathematics.int4x3) : Unity.Mathematics.float4x3
            public static op_Implicit ($v: Unity.Mathematics.uint4x3) : Unity.Mathematics.float4x3
            public static op_Explicit ($v: number) : Unity.Mathematics.float4x3
            public static op_Explicit ($v: Unity.Mathematics.double4x3) : Unity.Mathematics.float4x3
            public static op_Multiply ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Multiply ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.float4x3
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Addition ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Addition ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.float4x3
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.float4x3
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Division ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Division ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.float4x3
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Modulus ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Modulus ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.float4x3
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Increment ($val: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Decrement ($val: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_LessThan ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_UnaryNegation ($val: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_UnaryPlus ($val: Unity.Mathematics.float4x3) : Unity.Mathematics.float4x3
            public static op_Equality ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.float4x3, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: Unity.Mathematics.float4x3, $rhs: number) : Unity.Mathematics.bool4x3
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float4x3) : Unity.Mathematics.bool4x3
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float4>
            public Equals ($rhs: Unity.Mathematics.float4x3) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4, $c2: Unity.Mathematics.float4)
            public constructor ($m00: number, $m01: number, $m02: number, $m10: number, $m11: number, $m12: number, $m20: number, $m21: number, $m22: number, $m30: number, $m31: number, $m32: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x3)
            public constructor ($v: Unity.Mathematics.int4x3)
            public constructor ($v: Unity.Mathematics.uint4x3)
            public constructor ($v: Unity.Mathematics.double4x3)
        }
        class double4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.double4x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.double4
            public c1 : Unity.Mathematics.double4
            public c2 : Unity.Mathematics.double4
            public c3 : Unity.Mathematics.double4
            public static identity : Unity.Mathematics.double4x4
            public static zero : Unity.Mathematics.double4x4
            public static op_Implicit ($v: number) : Unity.Mathematics.double4x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.double4x4
            public static op_Explicit ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.double4x4
            public static op_Implicit ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.double4x4
            public static op_Implicit ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.double4x4
            public static op_Implicit ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.double4x4
            public static op_Multiply ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Multiply ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.double4x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Addition ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Addition ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.double4x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.double4x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Division ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Division ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.double4x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Modulus ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Modulus ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.double4x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Increment ($val: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Decrement ($val: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_LessThan ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_UnaryNegation ($val: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_UnaryPlus ($val: Unity.Mathematics.double4x4) : Unity.Mathematics.double4x4
            public static op_Equality ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.double4x4, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.double4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.double4x4) : Unity.Mathematics.bool4x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.double4>
            public Equals ($rhs: Unity.Mathematics.double4x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.double4, $c1: Unity.Mathematics.double4, $c2: Unity.Mathematics.double4, $c3: Unity.Mathematics.double4)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x4)
            public constructor ($v: Unity.Mathematics.int4x4)
            public constructor ($v: Unity.Mathematics.uint4x4)
            public constructor ($v: Unity.Mathematics.float4x4)
        }
        class int4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.int4x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.int4
            public c1 : Unity.Mathematics.int4
            public c2 : Unity.Mathematics.int4
            public c3 : Unity.Mathematics.int4
            public static identity : Unity.Mathematics.int4x4
            public static zero : Unity.Mathematics.int4x4
            public static op_Implicit ($v: number) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: number) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.int4x4
            public static op_Explicit ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.int4x4
            public static op_Multiply ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Multiply ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Addition ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Addition ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Division ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Division ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Modulus ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Modulus ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Increment ($val: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_Decrement ($val: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_LessThan ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_UnaryNegation ($val: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_UnaryPlus ($val: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_LeftShift ($x: Unity.Mathematics.int4x4, $n: number) : Unity.Mathematics.int4x4
            public static op_RightShift ($x: Unity.Mathematics.int4x4, $n: number) : Unity.Mathematics.int4x4
            public static op_Equality ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.bool4x4
            public static op_OnesComplement ($val: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x4, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.int4x4, $rhs: number) : Unity.Mathematics.int4x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.int4x4) : Unity.Mathematics.int4x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.int4>
            public Equals ($rhs: Unity.Mathematics.int4x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.int4, $c1: Unity.Mathematics.int4, $c2: Unity.Mathematics.int4, $c3: Unity.Mathematics.int4)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x4)
            public constructor ($v: Unity.Mathematics.uint4x4)
            public constructor ($v: Unity.Mathematics.float4x4)
            public constructor ($v: Unity.Mathematics.double4x4)
        }
        class uint4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.uint4x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.uint4
            public c1 : Unity.Mathematics.uint4
            public c2 : Unity.Mathematics.uint4
            public c3 : Unity.Mathematics.uint4
            public static identity : Unity.Mathematics.uint4x4
            public static zero : Unity.Mathematics.uint4x4
            public static op_Implicit ($v: number) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: number) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: Unity.Mathematics.float4x4) : Unity.Mathematics.uint4x4
            public static op_Explicit ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.uint4x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Multiply ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Addition ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Addition ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Division ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Division ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Modulus ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Increment ($val: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_Decrement ($val: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_UnaryNegation ($val: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_UnaryPlus ($val: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_LeftShift ($x: Unity.Mathematics.uint4x4, $n: number) : Unity.Mathematics.uint4x4
            public static op_RightShift ($x: Unity.Mathematics.uint4x4, $n: number) : Unity.Mathematics.uint4x4
            public static op_Equality ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.bool4x4
            public static op_OnesComplement ($val: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_BitwiseAnd ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_BitwiseAnd ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_BitwiseOr ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_BitwiseOr ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x4, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public static op_ExclusiveOr ($lhs: Unity.Mathematics.uint4x4, $rhs: number) : Unity.Mathematics.uint4x4
            public static op_ExclusiveOr ($lhs: number, $rhs: Unity.Mathematics.uint4x4) : Unity.Mathematics.uint4x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.uint4>
            public Equals ($rhs: Unity.Mathematics.uint4x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($c0: Unity.Mathematics.uint4, $c1: Unity.Mathematics.uint4, $c2: Unity.Mathematics.uint4, $c3: Unity.Mathematics.uint4)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x4)
            public constructor ($v: Unity.Mathematics.int4x4)
            public constructor ($v: Unity.Mathematics.float4x4)
            public constructor ($v: Unity.Mathematics.double4x4)
        }
        class float4x4 extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.float4x4>
        {
            protected [__keep_incompatibility]: never;
            public c0 : Unity.Mathematics.float4
            public c1 : Unity.Mathematics.float4
            public c2 : Unity.Mathematics.float4
            public c3 : Unity.Mathematics.float4
            public static identity : Unity.Mathematics.float4x4
            public static zero : Unity.Mathematics.float4x4
            public static op_Implicit ($v: number) : Unity.Mathematics.float4x4
            public static op_Explicit ($v: boolean) : Unity.Mathematics.float4x4
            public static op_Explicit ($v: Unity.Mathematics.bool4x4) : Unity.Mathematics.float4x4
            public static op_Implicit ($v: Unity.Mathematics.int4x4) : Unity.Mathematics.float4x4
            public static op_Implicit ($v: Unity.Mathematics.uint4x4) : Unity.Mathematics.float4x4
            public static op_Explicit ($v: number) : Unity.Mathematics.float4x4
            public static op_Explicit ($v: Unity.Mathematics.double4x4) : Unity.Mathematics.float4x4
            public static op_Multiply ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Multiply ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.float4x4
            public static op_Multiply ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Addition ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Addition ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.float4x4
            public static op_Addition ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Subtraction ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.float4x4
            public static op_Subtraction ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Division ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Division ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.float4x4
            public static op_Division ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Modulus ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Modulus ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.float4x4
            public static op_Modulus ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Increment ($val: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Decrement ($val: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_LessThan ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThan ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_LessThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThan ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_GreaterThanOrEqual ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_UnaryNegation ($val: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_UnaryPlus ($val: Unity.Mathematics.float4x4) : Unity.Mathematics.float4x4
            public static op_Equality ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Equality ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.float4x4, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: Unity.Mathematics.float4x4, $rhs: number) : Unity.Mathematics.bool4x4
            public static op_Inequality ($lhs: number, $rhs: Unity.Mathematics.float4x4) : Unity.Mathematics.bool4x4
            public get_Item ($index: number) : $Ref<Unity.Mathematics.float4>
            public Equals ($rhs: Unity.Mathematics.float4x4) : boolean
            public Equals ($o: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public static op_Implicit ($m: UnityEngine.Matrix4x4) : Unity.Mathematics.float4x4
            public static op_Implicit ($m: Unity.Mathematics.float4x4) : UnityEngine.Matrix4x4
            public static AxisAngle ($axis: Unity.Mathematics.float3, $angle: number) : Unity.Mathematics.float4x4
            public static EulerXYZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerXZY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerYXZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerYZX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerZXY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerZYX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static EulerXYZ ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static EulerXZY ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static EulerYXZ ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static EulerYZX ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static EulerZXY ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static EulerZYX ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static Euler ($xyz: Unity.Mathematics.float3, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.float4x4
            public static Euler ($x: number, $y: number, $z: number, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.float4x4
            public static RotateX ($angle: number) : Unity.Mathematics.float4x4
            public static RotateY ($angle: number) : Unity.Mathematics.float4x4
            public static RotateZ ($angle: number) : Unity.Mathematics.float4x4
            public static Scale ($s: number) : Unity.Mathematics.float4x4
            public static Scale ($x: number, $y: number, $z: number) : Unity.Mathematics.float4x4
            public static Scale ($scales: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static Translate ($vector: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static LookAt ($eye: Unity.Mathematics.float3, $target: Unity.Mathematics.float3, $up: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public static Ortho ($width: number, $height: number, $near: number, $far: number) : Unity.Mathematics.float4x4
            public static OrthoOffCenter ($left: number, $right: number, $bottom: number, $top: number, $near: number, $far: number) : Unity.Mathematics.float4x4
            public static PerspectiveFov ($verticalFov: number, $aspect: number, $near: number, $far: number) : Unity.Mathematics.float4x4
            public static PerspectiveOffCenter ($left: number, $right: number, $bottom: number, $top: number, $near: number, $far: number) : Unity.Mathematics.float4x4
            public static TRS ($translation: Unity.Mathematics.float3, $rotation: Unity.Mathematics.quaternion, $scale: Unity.Mathematics.float3) : Unity.Mathematics.float4x4
            public constructor ($c0: Unity.Mathematics.float4, $c1: Unity.Mathematics.float4, $c2: Unity.Mathematics.float4, $c3: Unity.Mathematics.float4)
            public constructor ($m00: number, $m01: number, $m02: number, $m03: number, $m10: number, $m11: number, $m12: number, $m13: number, $m20: number, $m21: number, $m22: number, $m23: number, $m30: number, $m31: number, $m32: number, $m33: number)
            public constructor ($v: number)
            public constructor ($v: boolean)
            public constructor ($v: Unity.Mathematics.bool4x4)
            public constructor ($v: Unity.Mathematics.int4x4)
            public constructor ($v: Unity.Mathematics.uint4x4)
            public constructor ($v: Unity.Mathematics.double4x4)
            public constructor ($rotation: Unity.Mathematics.float3x3, $translation: Unity.Mathematics.float3)
            public constructor ($rotation: Unity.Mathematics.quaternion, $translation: Unity.Mathematics.float3)
            public constructor ($transform: Unity.Mathematics.RigidTransform)
        }
        class quaternion extends System.ValueType implements System.IFormattable, System.IEquatable$1<Unity.Mathematics.quaternion>
        {
            protected [__keep_incompatibility]: never;
            public value : Unity.Mathematics.float4
            public static identity : Unity.Mathematics.quaternion
            public static op_Implicit ($q: Unity.Mathematics.quaternion) : UnityEngine.Quaternion
            public static op_Implicit ($q: UnityEngine.Quaternion) : Unity.Mathematics.quaternion
            public static op_Implicit ($v: Unity.Mathematics.float4) : Unity.Mathematics.quaternion
            public static AxisAngle ($axis: Unity.Mathematics.float3, $angle: number) : Unity.Mathematics.quaternion
            public static EulerXYZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerXZY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerYXZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerYZX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerZXY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerZYX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static EulerXYZ ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static EulerXZY ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static EulerYXZ ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static EulerYZX ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static EulerZXY ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static EulerZYX ($x: number, $y: number, $z: number) : Unity.Mathematics.quaternion
            public static Euler ($xyz: Unity.Mathematics.float3, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.quaternion
            public static Euler ($x: number, $y: number, $z: number, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.quaternion
            public static RotateX ($angle: number) : Unity.Mathematics.quaternion
            public static RotateY ($angle: number) : Unity.Mathematics.quaternion
            public static RotateZ ($angle: number) : Unity.Mathematics.quaternion
            public static LookRotation ($forward: Unity.Mathematics.float3, $up: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public static LookRotationSafe ($forward: Unity.Mathematics.float3, $up: Unity.Mathematics.float3) : Unity.Mathematics.quaternion
            public Equals ($x: Unity.Mathematics.quaternion) : boolean
            public Equals ($x: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($x: number, $y: number, $z: number, $w: number)
            public constructor ($value: Unity.Mathematics.float4)
            public constructor ($m: Unity.Mathematics.float3x3)
            public constructor ($m: Unity.Mathematics.float4x4)
        }
        class RigidTransform extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public rot : Unity.Mathematics.quaternion
            public pos : Unity.Mathematics.float3
            public static identity : Unity.Mathematics.RigidTransform
            public static AxisAngle ($axis: Unity.Mathematics.float3, $angle: number) : Unity.Mathematics.RigidTransform
            public static EulerXYZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerXZY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerYXZ ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerYZX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerZXY ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerZYX ($xyz: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public static EulerXYZ ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static EulerXZY ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static EulerYXZ ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static EulerYZX ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static EulerZXY ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static EulerZYX ($x: number, $y: number, $z: number) : Unity.Mathematics.RigidTransform
            public static Euler ($xyz: Unity.Mathematics.float3, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.RigidTransform
            public static Euler ($x: number, $y: number, $z: number, $order?: Unity.Mathematics.math.RotationOrder) : Unity.Mathematics.RigidTransform
            public static RotateX ($angle: number) : Unity.Mathematics.RigidTransform
            public static RotateY ($angle: number) : Unity.Mathematics.RigidTransform
            public static RotateZ ($angle: number) : Unity.Mathematics.RigidTransform
            public static Translate ($vector: Unity.Mathematics.float3) : Unity.Mathematics.RigidTransform
            public Equals ($x: Unity.Mathematics.RigidTransform) : boolean
            public Equals ($x: any) : boolean
            public ToString () : string
            public ToString ($format: string, $formatProvider: System.IFormatProvider) : string
            public constructor ($rotation: Unity.Mathematics.quaternion, $translation: Unity.Mathematics.float3)
            public constructor ($rotation: Unity.Mathematics.float3x3, $translation: Unity.Mathematics.float3)
            public constructor ($transform: Unity.Mathematics.float4x4)
        }
        class noise extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static cellular ($P: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static cellular2x2 ($P: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public static cellular2x2x2 ($P: Unity.Mathematics.float3) : Unity.Mathematics.float2
            public static cellular ($P: Unity.Mathematics.float3) : Unity.Mathematics.float2
            public static cnoise ($P: Unity.Mathematics.float2) : number
            public static pnoise ($P: Unity.Mathematics.float2, $rep: Unity.Mathematics.float2) : number
            public static cnoise ($P: Unity.Mathematics.float3) : number
            public static pnoise ($P: Unity.Mathematics.float3, $rep: Unity.Mathematics.float3) : number
            public static cnoise ($P: Unity.Mathematics.float4) : number
            public static pnoise ($P: Unity.Mathematics.float4, $rep: Unity.Mathematics.float4) : number
            public static snoise ($v: Unity.Mathematics.float2) : number
            public static snoise ($v: Unity.Mathematics.float3) : number
            public static snoise ($v: Unity.Mathematics.float3, $gradient: $Ref<Unity.Mathematics.float3>) : number
            public static snoise ($v: Unity.Mathematics.float4) : number
            public static psrdnoise ($pos: Unity.Mathematics.float2, $per: Unity.Mathematics.float2, $rot: number) : Unity.Mathematics.float3
            public static psrdnoise ($pos: Unity.Mathematics.float2, $per: Unity.Mathematics.float2) : Unity.Mathematics.float3
            public static psrnoise ($pos: Unity.Mathematics.float2, $per: Unity.Mathematics.float2, $rot: number) : number
            public static psrnoise ($pos: Unity.Mathematics.float2, $per: Unity.Mathematics.float2) : number
            public static srdnoise ($pos: Unity.Mathematics.float2, $rot: number) : Unity.Mathematics.float3
            public static srdnoise ($pos: Unity.Mathematics.float2) : Unity.Mathematics.float3
            public static srnoise ($pos: Unity.Mathematics.float2, $rot: number) : number
            public static srnoise ($pos: Unity.Mathematics.float2) : number
        }
        class PostNormalizeAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class DoNotNormalizeAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class Random extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public state : number
            public static CreateFromIndex ($index: number) : Unity.Mathematics.Random
            public InitState ($seed?: number) : void
            public NextBool () : boolean
            public NextBool2 () : Unity.Mathematics.bool2
            public NextBool3 () : Unity.Mathematics.bool3
            public NextBool4 () : Unity.Mathematics.bool4
            public NextInt () : number
            public NextInt2 () : Unity.Mathematics.int2
            public NextInt3 () : Unity.Mathematics.int3
            public NextInt4 () : Unity.Mathematics.int4
            public NextInt ($max: number) : number
            public NextInt2 ($max: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public NextInt3 ($max: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public NextInt4 ($max: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public NextInt ($min: number, $max: number) : number
            public NextInt2 ($min: Unity.Mathematics.int2, $max: Unity.Mathematics.int2) : Unity.Mathematics.int2
            public NextInt3 ($min: Unity.Mathematics.int3, $max: Unity.Mathematics.int3) : Unity.Mathematics.int3
            public NextInt4 ($min: Unity.Mathematics.int4, $max: Unity.Mathematics.int4) : Unity.Mathematics.int4
            public NextUInt () : number
            public NextUInt2 () : Unity.Mathematics.uint2
            public NextUInt3 () : Unity.Mathematics.uint3
            public NextUInt4 () : Unity.Mathematics.uint4
            public NextUInt ($max: number) : number
            public NextUInt2 ($max: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public NextUInt3 ($max: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public NextUInt4 ($max: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public NextUInt ($min: number, $max: number) : number
            public NextUInt2 ($min: Unity.Mathematics.uint2, $max: Unity.Mathematics.uint2) : Unity.Mathematics.uint2
            public NextUInt3 ($min: Unity.Mathematics.uint3, $max: Unity.Mathematics.uint3) : Unity.Mathematics.uint3
            public NextUInt4 ($min: Unity.Mathematics.uint4, $max: Unity.Mathematics.uint4) : Unity.Mathematics.uint4
            public NextFloat () : number
            public NextFloat2 () : Unity.Mathematics.float2
            public NextFloat3 () : Unity.Mathematics.float3
            public NextFloat4 () : Unity.Mathematics.float4
            public NextFloat ($max: number) : number
            public NextFloat2 ($max: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public NextFloat3 ($max: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public NextFloat4 ($max: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public NextFloat ($min: number, $max: number) : number
            public NextFloat2 ($min: Unity.Mathematics.float2, $max: Unity.Mathematics.float2) : Unity.Mathematics.float2
            public NextFloat3 ($min: Unity.Mathematics.float3, $max: Unity.Mathematics.float3) : Unity.Mathematics.float3
            public NextFloat4 ($min: Unity.Mathematics.float4, $max: Unity.Mathematics.float4) : Unity.Mathematics.float4
            public NextDouble () : number
            public NextDouble2 () : Unity.Mathematics.double2
            public NextDouble3 () : Unity.Mathematics.double3
            public NextDouble4 () : Unity.Mathematics.double4
            public NextDouble ($max: number) : number
            public NextDouble2 ($max: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public NextDouble3 ($max: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public NextDouble4 ($max: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public NextDouble ($min: number, $max: number) : number
            public NextDouble2 ($min: Unity.Mathematics.double2, $max: Unity.Mathematics.double2) : Unity.Mathematics.double2
            public NextDouble3 ($min: Unity.Mathematics.double3, $max: Unity.Mathematics.double3) : Unity.Mathematics.double3
            public NextDouble4 ($min: Unity.Mathematics.double4, $max: Unity.Mathematics.double4) : Unity.Mathematics.double4
            public NextFloat2Direction () : Unity.Mathematics.float2
            public NextDouble2Direction () : Unity.Mathematics.double2
            public NextFloat3Direction () : Unity.Mathematics.float3
            public NextDouble3Direction () : Unity.Mathematics.double3
            public NextQuaternionRotation () : Unity.Mathematics.quaternion
            public constructor ($seed: number)
        }
    }
    namespace Unity.Mathematics.math {
        enum ShuffleComponent
        { LeftX = 0, LeftY = 1, LeftZ = 2, LeftW = 3, RightX = 4, RightY = 5, RightZ = 6, RightW = 7 }
        enum RotationOrder
        { XYZ = 0, XZY = 1, YXZ = 2, YZX = 3, ZXY = 4, ZYX = 5, Default = 4 }
    }
    namespace OneJS {
        class EventfulPropertyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get CheckEquality(): boolean;
            public constructor ($checkEquality?: boolean)
        }
        interface IClassStrProcessor
        {
            ProcessClassStr ($classStr: string, $dom: OneJS.Dom.Dom) : string
        }
        interface MyCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var MyCallback: { new (func: () => void): MyCallback; }
        class Resource extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public loadFont ($path: string) : UnityEngine.Font
            public loadFontDefinition ($path: string) : UnityEngine.UIElements.FontDefinition
            public loadImage ($path: string) : UnityEngine.Texture2D
            public constructor ($engine: OneJS.ScriptEngine)
        }
        class ScriptEngine extends UnityEngine.MonoBehaviour implements OneJS.IScriptEngine
        {
            protected [__keep_incompatibility]: never;
            public static GlobalJsEnv : Puerts.JsEnv
            public editorWorkingDirInfo : OneJS.EditorWorkingDirInfo
            public playerWorkingDirInfo : OneJS.PlayerWorkingDirInfo
            public preloads : System.Array$1<UnityEngine.TextAsset>
            public globalObjects : System.Array$1<OneJS.ObjectMappingPair>
            public styleSheets : System.Array$1<UnityEngine.UIElements.StyleSheet>
            public get Tick(): number;
            public get WorkingDir(): string;
            public get JsEnv(): Puerts.JsEnv;
            public add_OnReload ($value: System.Action) : void
            public remove_OnReload ($value: System.Action) : void
            public JsEnvCallbackWrap ($isolate: System.IntPtr, $info: System.IntPtr, $self: System.IntPtr, $paramLen: number, $data: bigint) : void
            public MyFunction ($isolate: System.IntPtr, $info: System.IntPtr, $self: System.IntPtr, $paramLen: number) : void
            public GetFullPath ($filepath: string) : string
            public Shutdown () : void
            public Reload () : void
            public EvalFile ($filepath: string) : void
            public Eval ($code: string) : void
            public GenerateGlobalsDefinitions () : void
            public constructor ()
        }
        interface IScriptEngine
        {
            WorkingDir : string
        }
        class Initializer extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public defaultGitIgnore : UnityEngine.TextAsset
            public defaultTsconfig : UnityEngine.TextAsset
            public defaultEsbuild : UnityEngine.TextAsset
            public defaultIndex : UnityEngine.TextAsset
            public tailwindConfig : UnityEngine.TextAsset
            public postcssConfig : UnityEngine.TextAsset
            public readme : UnityEngine.TextAsset
            public onejsCoreZip : UnityEngine.TextAsset
            public outputsZip : UnityEngine.TextAsset
            public version : string
            public forceExtract : boolean
            public ignoreList : System.Array$1<string>
            public CreateGitIgnoreFileIfNotFound () : void
            public CreateTsconfigFileIfNotFound () : void
            public CreateEsbuildFileIfNotFound () : void
            public CreateTailwindConfigFileIfNotFound () : void
            public CreatePostcssConfigFileIfNotFound () : void
            public CreateIndexFileIfNotFound () : void
            public CreateReadMeFileIfNotFound () : void
            public ExtractOnejsCoreIfNotFound () : void
            public ExtractOutputsIfNotFound () : void
            public ExtractOutputsForStandalone () : void
            public PackageOutputsZipWithPrompt () : void
            public PackageOutputsZip () : void
            public ZeroOutOutputsZip () : void
            public constructor ()
        }
        class Janitor extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public clearLogs : boolean
            public clearGameObjects : boolean
            public ClearGameObjects () : void
            public Clean () : void
            public ClearLog () : void
            public constructor ()
        }
        class JanitorSpawner extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public get Janitor(): OneJS.Janitor;
            public Respawn () : void
            public constructor ()
        }
        class Runner extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public entryFile : string
            public runOnStart : boolean
            public liveReload : boolean
            public pollingInterval : number
            public clearGameObjects : boolean
            public clearLogs : boolean
            public respawnJanitorOnSceneLoad : boolean
            public stopCleaningOnDisable : boolean
            public standalone : boolean
            public constructor ()
        }
        class ScreenMonitor extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public breakpoints : System.Array$1<number>
            public standalone : boolean
            public constructor ()
        }
        class EditorWorkingDirInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public baseDir : OneJS.EditorWorkingDirInfo.EditorBaseDir
            public relativePath : string
            public constructor ()
        }
        class PlayerWorkingDirInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public baseDir : OneJS.PlayerWorkingDirInfo.PlayerBaseDir
            public relativePath : string
            public constructor ()
        }
        class ObjectMappingPair extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public obj : UnityEngine.Object
            public name : string
            public constructor ($obj: UnityEngine.Object, $m: string)
        }
        class PairMappingAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public from : string
            public to : string
            public separator : string
            public label : string
            public constructor ($from: string, $to: string, $separator?: string, $label?: string)
        }
        class PlainStringAttribute extends UnityEngine.PropertyAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class Painter2DWrapper extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static Foo ($a: any, $b: UnityEngine.Color) : void
            public static Bar ($a: any, $b: any) : void
            public static Ace ($a: UnityEngine.Color, $b: UnityEngine.Color) : void
            public static Test ($c: UnityEngine.Color) : void
            public static Test2 ($v: number) : void
        }
    }
    namespace OneJS.Dom {
        class Dom extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get document(): OneJS.Dom.Document;
            public get ve(): UnityEngine.UIElements.VisualElement;
            public get childNodes(): System.Array$1<OneJS.Dom.Dom>;
            public get firstChild(): OneJS.Dom.Dom;
            public get parentNode(): OneJS.Dom.Dom;
            public get nextSibling(): OneJS.Dom.Dom;
            public get Id(): string;
            public set Id(value: string);
            public get key(): string;
            public set key(value: string);
            public get style(): OneJS.Dom.DomStyle;
            public get value(): any;
            public get checked(): boolean;
            public get data(): any;
            public set data(value: any);
            public get innerHTML(): string;
            public get layoutSize(): UnityEngine.Vector2;
            public get _children(): any;
            public set _children(value: any);
            public get _listeners(): System.Collections.Generic.Dictionary$2<string, UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>>;
            public get classname(): string;
            public set classname(value: string);
            public SetBackgroundColor ($color: UnityEngine.Color) : void
            public clearChildren () : void
            public _addToListeners ($name: string, $callback: UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>) : void
            public _getFromListeners ($name: string) : UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>
            public _callListener ($name: string, $evt: UnityEngine.UIElements.EventBase) : void
            public addEventListener ($name: string, $callback: UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>, $useCapture?: boolean) : void
            public removeEventListener ($name: string, $callback: UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>, $useCapture?: boolean) : void
            public appendChild ($node: OneJS.Dom.Dom) : void
            public removeChild ($child: OneJS.Dom.Dom) : void
            public insertBefore ($a: OneJS.Dom.Dom, $b: OneJS.Dom.Dom) : void
            public setAttribute ($name: string, $val: any) : void
            public removeAttribute ($name: string) : void
            public focus () : void
            public First ($predicate: System.Func$2<OneJS.Dom.Dom, boolean>) : OneJS.Dom.Dom
            public ProcessClassStr ($classStr: string, $dom: OneJS.Dom.Dom) : string
            public constructor ($ve: UnityEngine.UIElements.VisualElement, $document: OneJS.Dom.Document)
        }
        class ElementCreationOptions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public is : string
            public constructor ()
        }
        class Document extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get scriptEngine(): OneJS.ScriptEngine;
            public get Root(): UnityEngine.UIElements.VisualElement;
            public get body(): OneJS.Dom.Dom;
            public get UIElementEventTypesDict(): System.Collections.Generic.Dictionary$2<string, System.Type>;
            public FindUIElementEventType ($name: string) : System.Type
            public addRuntimeUSS ($uss: string) : void
            public removeRuntimeStyleSheet ($sheet: UnityEngine.UIElements.StyleSheet) : void
            public clearRuntimeStyleSheets () : void
            public createElement ($tagName: string) : OneJS.Dom.Dom
            public createElement ($tagName: string, $options: OneJS.Dom.ElementCreationOptions) : OneJS.Dom.Dom
            public createTextNode ($text: string) : OneJS.Dom.Dom
            public getElementById ($id: string) : OneJS.Dom.Dom
            public querySelectorAll ($selector: string) : System.Array$1<OneJS.Dom.Dom>
            public loadImage ($path: string, $filterMode?: UnityEngine.FilterMode) : UnityEngine.Texture2D
            public loadFont ($path: string) : UnityEngine.Font
            public loadFontDefinition ($path: string) : UnityEngine.UIElements.FontDefinition
            public static createStyleEnum ($v: number, $type: System.Type) : any
            public static createStyleEnumWithKeyword ($keyword: UnityEngine.UIElements.StyleKeyword, $type: System.Type) : any
            public static createStyleList ($v: any, $type: System.Type) : any
            public static createStyleListWithKeyword ($keyword: UnityEngine.UIElements.StyleKeyword, $type: System.Type) : any
            public constructor ($root: UnityEngine.UIElements.VisualElement, $scriptEngine: OneJS.ScriptEngine)
        }
        class RegisteredCallbackHolder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public callback : UnityEngine.UIElements.EventCallback$1<UnityEngine.UIElements.EventBase>
            public jsValue : any
            public useCapture : boolean
            public constructor ()
        }
        class DomStyle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get veStyle(): UnityEngine.UIElements.IStyle;
            public get alignContent(): any;
            public set alignContent(value: any);
            public get alignItems(): any;
            public set alignItems(value: any);
            public get alignSelf(): any;
            public set alignSelf(value: any);
            public get backgroundColor(): any;
            public set backgroundColor(value: any);
            public get backgroundImage(): any;
            public set backgroundImage(value: any);
            public get backgroundSize(): any;
            public set backgroundSize(value: any);
            public get backgroundRepeat(): any;
            public set backgroundRepeat(value: any);
            public get backgroundPosition(): any;
            public set backgroundPosition(value: any);
            public get backgroundPositionX(): any;
            public set backgroundPositionX(value: any);
            public get backgroundPositionY(): any;
            public set backgroundPositionY(value: any);
            public get borderColor(): any;
            public set borderColor(value: any);
            public get borderWidth(): any;
            public set borderWidth(value: any);
            public get borderRadius(): any;
            public set borderRadius(value: any);
            public get borderTopColor(): any;
            public set borderTopColor(value: any);
            public get borderRightColor(): any;
            public set borderRightColor(value: any);
            public get borderBottomColor(): any;
            public set borderBottomColor(value: any);
            public get borderLeftColor(): any;
            public set borderLeftColor(value: any);
            public get borderTopWidth(): any;
            public set borderTopWidth(value: any);
            public get borderRightWidth(): any;
            public set borderRightWidth(value: any);
            public get borderBottomWidth(): any;
            public set borderBottomWidth(value: any);
            public get borderLeftWidth(): any;
            public set borderLeftWidth(value: any);
            public get borderTopLeftRadius(): any;
            public set borderTopLeftRadius(value: any);
            public get borderTopRightRadius(): any;
            public set borderTopRightRadius(value: any);
            public get borderBottomRightRadius(): any;
            public set borderBottomRightRadius(value: any);
            public get borderBottomLeftRadius(): any;
            public set borderBottomLeftRadius(value: any);
            public get bottom(): any;
            public set bottom(value: any);
            public get color(): any;
            public set color(value: any);
            public get cursor(): any;
            public set cursor(value: any);
            public get display(): any;
            public set display(value: any);
            public get flexBasis(): any;
            public set flexBasis(value: any);
            public get flexDirection(): any;
            public set flexDirection(value: any);
            public get flexGrow(): any;
            public set flexGrow(value: any);
            public get flexShrink(): any;
            public set flexShrink(value: any);
            public get flexWrap(): any;
            public set flexWrap(value: any);
            public get fontSize(): any;
            public set fontSize(value: any);
            public get height(): any;
            public set height(value: any);
            public get justifyContent(): any;
            public set justifyContent(value: any);
            public get left(): any;
            public set left(value: any);
            public get letterSpacing(): any;
            public set letterSpacing(value: any);
            public get margin(): any;
            public set margin(value: any);
            public get marginTop(): any;
            public set marginTop(value: any);
            public get marginRight(): any;
            public set marginRight(value: any);
            public get marginBottom(): any;
            public set marginBottom(value: any);
            public get marginLeft(): any;
            public set marginLeft(value: any);
            public get maxHeight(): any;
            public set maxHeight(value: any);
            public get maxWidth(): any;
            public set maxWidth(value: any);
            public get minHeight(): any;
            public set minHeight(value: any);
            public get minWidth(): any;
            public set minWidth(value: any);
            public get opacity(): any;
            public set opacity(value: any);
            public get overflow(): any;
            public set overflow(value: any);
            public get padding(): any;
            public set padding(value: any);
            public get paddingTop(): any;
            public set paddingTop(value: any);
            public get paddingRight(): any;
            public set paddingRight(value: any);
            public get paddingBottom(): any;
            public set paddingBottom(value: any);
            public get paddingLeft(): any;
            public set paddingLeft(value: any);
            public get position(): any;
            public set position(value: any);
            public get right(): any;
            public set right(value: any);
            public get rotate(): any;
            public set rotate(value: any);
            public get scale(): any;
            public set scale(value: any);
            public get textOverflow(): any;
            public set textOverflow(value: any);
            public get textShadow(): any;
            public set textShadow(value: any);
            public get top(): any;
            public set top(value: any);
            public get transformOrigin(): any;
            public set transformOrigin(value: any);
            public get transitionDelay(): any;
            public set transitionDelay(value: any);
            public get transitionDuration(): any;
            public set transitionDuration(value: any);
            public get transitionProperty(): any;
            public set transitionProperty(value: any);
            public get transitionTimingFunction(): any;
            public set transitionTimingFunction(value: any);
            public get translate(): any;
            public set translate(value: any);
            public get unityBackgroundImageTintColor(): any;
            public set unityBackgroundImageTintColor(value: any);
            public get unityBackgroundScaleMode(): any;
            public set unityBackgroundScaleMode(value: any);
            public get unityFont(): any;
            public set unityFont(value: any);
            public get unityFontDefinition(): any;
            public set unityFontDefinition(value: any);
            public get unityFontStyleAndWeight(): any;
            public set unityFontStyleAndWeight(value: any);
            public get unityOverflowClipBox(): any;
            public set unityOverflowClipBox(value: any);
            public get unityParagraphSpacing(): any;
            public set unityParagraphSpacing(value: any);
            public get unitySliceBottom(): any;
            public set unitySliceBottom(value: any);
            public get unitySliceLeft(): any;
            public set unitySliceLeft(value: any);
            public get unitySliceRight(): any;
            public set unitySliceRight(value: any);
            public get unitySliceTop(): any;
            public set unitySliceTop(value: any);
            public get unitySliceScale(): any;
            public set unitySliceScale(value: any);
            public get unityTextAlign(): any;
            public set unityTextAlign(value: any);
            public get unityTextOutlineColor(): any;
            public set unityTextOutlineColor(value: any);
            public get unityTextOutlineWidth(): any;
            public set unityTextOutlineWidth(value: any);
            public get unityTextOverflowPosition(): any;
            public set unityTextOverflowPosition(value: any);
            public get visibility(): any;
            public set visibility(value: any);
            public get whiteSpace(): any;
            public set whiteSpace(value: any);
            public get width(): any;
            public set width(value: any);
            public get wordSpacing(): any;
            public set wordSpacing(value: any);
            public setProperty ($key: string, $value: any) : void
            public SetAlignContent ($value: UnityEngine.UIElements.Align) : void
            public SetAlignItems ($value: UnityEngine.UIElements.Align) : void
            public SetAlignSelf ($value: UnityEngine.UIElements.Align) : void
            public SetBackgroundColor ($value: UnityEngine.Color) : void
            public SetBackgroundImage ($value: UnityEngine.UIElements.Background) : void
            public SetBackgroundSize ($value: UnityEngine.UIElements.BackgroundSize) : void
            public SetBackgroundRepeat ($value: UnityEngine.UIElements.StyleBackgroundRepeat) : void
            public SetBackgroundPosition ($value: UnityEngine.UIElements.StyleBackgroundPosition) : void
            public SetBackgroundPositionX ($value: UnityEngine.UIElements.StyleBackgroundPosition) : void
            public SetBackgroundPositionY ($value: UnityEngine.UIElements.StyleBackgroundPosition) : void
            public SetBorderColor ($value: UnityEngine.Color) : void
            public SetBorderTopColor ($value: UnityEngine.Color) : void
            public SetBorderRightColor ($value: UnityEngine.Color) : void
            public SetBorderBottomColor ($value: UnityEngine.Color) : void
            public SetBorderLeftColor ($value: UnityEngine.Color) : void
            public SetBorderWidth ($value: number) : void
            public SetBorderTopWidth ($value: number) : void
            public SetBorderRightWidth ($value: number) : void
            public SetBorderBottomWidth ($value: number) : void
            public SetBorderLeftWidth ($value: number) : void
            public SetBorderRadius ($value: UnityEngine.UIElements.Length) : void
            public SetBorderTopLeftRadius ($value: UnityEngine.UIElements.Length) : void
            public SetBorderTopRightRadius ($value: UnityEngine.UIElements.Length) : void
            public SetBorderBottomRightRadius ($value: UnityEngine.UIElements.Length) : void
            public SetBorderBottomLeftRadius ($value: UnityEngine.UIElements.Length) : void
            public SetBottom ($value: UnityEngine.UIElements.Length) : void
            public SetColor ($value: UnityEngine.Color) : void
            public SetCursor ($value: UnityEngine.UIElements.Cursor) : void
            public SetDisplay ($value: UnityEngine.UIElements.DisplayStyle) : void
            public SetFlexBasis ($value: UnityEngine.UIElements.StyleLength) : void
            public SetFlexDirection ($value: UnityEngine.UIElements.FlexDirection) : void
            public SetFlexGrow ($value: number) : void
            public SetFlexShrink ($value: number) : void
            public SetFlexWrap ($value: UnityEngine.UIElements.Wrap) : void
            public SetFontSize ($value: UnityEngine.UIElements.Length) : void
            public SetHeight ($value: UnityEngine.UIElements.Length) : void
            public SetJustifyContent ($value: UnityEngine.UIElements.Justify) : void
            public SetLeft ($value: UnityEngine.UIElements.Length) : void
            public SetLetterSpacing ($value: UnityEngine.UIElements.Length) : void
            public SetMargin ($value: UnityEngine.UIElements.Length) : void
            public SetMarginTop ($value: UnityEngine.UIElements.Length) : void
            public SetMarginRight ($value: UnityEngine.UIElements.Length) : void
            public SetMarginBottom ($value: UnityEngine.UIElements.Length) : void
            public SetMarginLeft ($value: UnityEngine.UIElements.Length) : void
            public SetMaxHeight ($value: UnityEngine.UIElements.Length) : void
            public SetMaxWidth ($value: UnityEngine.UIElements.Length) : void
            public SetMinHeight ($value: UnityEngine.UIElements.Length) : void
            public SetMinWidth ($value: UnityEngine.UIElements.Length) : void
            public SetOpacity ($value: number) : void
            public SetOverflow ($value: UnityEngine.UIElements.Overflow) : void
            public SetPadding ($value: UnityEngine.UIElements.Length) : void
            public SetPaddingTop ($value: UnityEngine.UIElements.Length) : void
            public SetPaddingRight ($value: UnityEngine.UIElements.Length) : void
            public SetPaddingBottom ($value: UnityEngine.UIElements.Length) : void
            public SetPaddingLeft ($value: UnityEngine.UIElements.Length) : void
            public SetPosition ($value: UnityEngine.UIElements.Position) : void
            public SetRight ($value: UnityEngine.UIElements.Length) : void
            public SetRotate ($value: UnityEngine.UIElements.Rotate) : void
            public SetScale ($value: UnityEngine.UIElements.Scale) : void
            public SetTextOverflow ($value: UnityEngine.UIElements.TextOverflow) : void
            public SetTextShadow ($value: UnityEngine.UIElements.TextShadow) : void
            public SetTop ($value: UnityEngine.UIElements.Length) : void
            public SetTransformOrigin ($value: UnityEngine.UIElements.TransformOrigin) : void
            public SetTransitionDelay ($value: System.Collections.Generic.List$1<UnityEngine.UIElements.TimeValue>) : void
            public SetTransitionDuration ($value: System.Collections.Generic.List$1<UnityEngine.UIElements.TimeValue>) : void
            public SetTransitionProperty ($value: System.Collections.Generic.List$1<UnityEngine.UIElements.StylePropertyName>) : void
            public SetTransitionTimingFunction ($value: System.Collections.Generic.List$1<UnityEngine.UIElements.EasingFunction>) : void
            public SetTranslate ($value: UnityEngine.UIElements.Translate) : void
            public SetUnityBackgroundImageTintColor ($value: UnityEngine.Color) : void
            public SetUnityBackgroundScaleMode ($value: UnityEngine.ScaleMode) : void
            public SetUnityFont ($value: UnityEngine.Font) : void
            public SetUnityFontDefinition ($value: UnityEngine.UIElements.FontDefinition) : void
            public SetUnityFontStyleAndWeight ($value: UnityEngine.FontStyle) : void
            public SetUnityOverflowClipBox ($value: UnityEngine.UIElements.OverflowClipBox) : void
            public SetUnityParagraphSpacing ($value: UnityEngine.UIElements.Length) : void
            public SetUnitySliceBottom ($value: number) : void
            public SetUnitySliceLeft ($value: number) : void
            public SetUnitySliceRight ($value: number) : void
            public SetUnitySliceTop ($value: number) : void
            public SetUnitySliceScale ($value: number) : void
            public SetUnityTextAlign ($value: UnityEngine.TextAnchor) : void
            public SetUnityTextOutlineColor ($value: UnityEngine.Color) : void
            public SetUnityTextOutlineWidth ($value: number) : void
            public SetUnityTextOverflowPosition ($value: UnityEngine.UIElements.TextOverflowPosition) : void
            public SetVisibility ($value: UnityEngine.UIElements.Visibility) : void
            public SetWhiteSpace ($value: UnityEngine.UIElements.WhiteSpace) : void
            public SetWidth ($value: UnityEngine.UIElements.Length) : void
            public SetWordSpacing ($value: UnityEngine.UIElements.Length) : void
            public static GetLength ($value: any, $lengthValue: $Ref<UnityEngine.UIElements.Length>) : boolean
            public static TryParseColorString ($s: string, $color: $Ref<UnityEngine.Color>) : boolean
            public constructor ($dom: OneJS.Dom.Dom)
        }
        class Flipbook extends UnityEngine.UIElements.Image implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            public get src(): any;
            public set src(value: any);
            public get numPerRow(): number;
            public set numPerRow(value: number);
            public get count(): number;
            public set count(value: number);
            public get interval(): number;
            public set interval(value: number);
            public get randomRotation(): boolean;
            public set randomRotation(value: boolean);
            public constructor ()
        }
        class GradientRect extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            public get Colors(): System.Array$1<UnityEngine.Color>;
            public set Colors(value: System.Array$1<UnityEngine.Color>);
            public constructor ()
        }
    }
    namespace Puerts {
        class JsEnv extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace OneJS.EditorWorkingDirInfo {
        enum EditorBaseDir
        { ProjectPath = 0, PersistentDataPath = 1 }
    }
    namespace OneJS.PlayerWorkingDirInfo {
        enum PlayerBaseDir
        { PersistentDataPath = 0, AppPath = 1 }
    }
    namespace OneJS.Utils {
        class AssemblyFinder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static FindType ($name: string) : System.Type
            public static IsValidNamespace ($namespaceName: string) : boolean
            public static FindTypesInNamespace ($namespaceName: string) : System.Collections.Generic.List$1<System.Type>
            public constructor ()
        }
        class CoroutineUtil extends UnityEngine.MonoBehaviour
        {
            protected [__keep_incompatibility]: never;
            public static get Instance(): OneJS.Utils.CoroutineUtil;
            public static Start ($routine: System.Collections.IEnumerator) : void
            public static Stop ($routine: System.Collections.IEnumerator) : void
            public static StopAll () : void
            public static Chain (...actions: System.Collections.IEnumerator[]) : System.Collections.IEnumerator
            public static DelaySeconds ($action: System.Action, $delay: number) : System.Collections.IEnumerator
            public static DelayFrames ($action: System.Action, $delay: number) : System.Collections.IEnumerator
            public static EndOfFrame ($action: System.Action) : System.Collections.IEnumerator
            public static WaitForSeconds ($t: number) : System.Collections.IEnumerator
            public static WaitForSeconds ($t: number, $action: System.Action) : System.Collections.IEnumerator
            public static WaitForFrames ($t: number) : System.Collections.IEnumerator
            public static Do ($action: System.Action) : System.Collections.IEnumerator
            public constructor ()
        }
        class GradientTextureFillJob extends System.ValueType implements Unity.Jobs.IJobParallelFor
        {
            protected [__keep_incompatibility]: never;
            public colors : Unity.Collections.NativeArray$1<UnityEngine.Color32>
            public width : number
            public height : number
            public topRightColor : UnityEngine.Color32
            public static Run ($colors: Unity.Collections.NativeArray$1<UnityEngine.Color32>, $width: number, $height: number, $topRightColor: UnityEngine.Color32) : void
            public Execute ($index: number) : void
        }
        class TarCreator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get ExcludeTS(): boolean;
            public set ExcludeTS(value: boolean);
            public get ExcludeTSDef(): boolean;
            public set ExcludeTSDef(value: boolean);
            public get UglifyJS(): boolean;
            public set UglifyJS(value: boolean);
            public get IgnoreList(): System.Array$1<string>;
            public set IgnoreList(value: System.Array$1<string>);
            public get IncludeRoot(): boolean;
            public set IncludeRoot(value: boolean);
            public CreateTar ($tarOutputStream: ICSharpCode.SharpZipLib.Tar.TarOutputStream, $curDir?: string) : void
            public WriteEntry ($tarOutputStream: ICSharpCode.SharpZipLib.Tar.TarOutputStream, $filepath: string, $tarName: string) : void
            public static CreateTarManually ($tarOutputStream: ICSharpCode.SharpZipLib.Tar.TarOutputStream, $baseDir: string, $curDir?: string) : void
            public static WriteFileEntry ($tarOutputStream: ICSharpCode.SharpZipLib.Tar.TarOutputStream, $filepath: string, $tarName: string) : void
            public constructor ($baseDir: string, $rootDir: string)
        }
        class UIStyleUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetStyleFloat ($n: number) : UnityEngine.UIElements.StyleFloat
            public static GetStyleInt ($n: number) : UnityEngine.UIElements.StyleInt
            public constructor ()
        }
    }
    namespace System.IO {
        class Stream extends System.MarshalByRefObject implements System.IAsyncDisposable, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace ICSharpCode.SharpZipLib.Tar {
        class TarOutputStream extends System.IO.Stream implements System.IAsyncDisposable, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
}
